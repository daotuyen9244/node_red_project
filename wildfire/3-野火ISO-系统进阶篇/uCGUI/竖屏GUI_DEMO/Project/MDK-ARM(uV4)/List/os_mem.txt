; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_mem.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\os_mem.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCOS-II\Source\os_mem.c]
                          THUMB

                          AREA ||i.OSMemCreate||, CODE, READONLY, ALIGN=2

                  OSMemCreate PROC
;;;58     
;;;59     OS_MEM  *OSMemCreate (void   *addr,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;60                           INT32U  nblks,
;;;61                           INT32U  blksize,
;;;62                           INT8U  *perr)
;;;63     {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;64         OS_MEM    *pmem;
;;;65         INT8U     *pblk;
;;;66         void     **plink;
;;;67         INT32U     loops;
;;;68         INT32U     i;
;;;69     #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;70         OS_CPU_SR  cpu_sr = 0u;
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;71     #endif
;;;72     
;;;73     
;;;74     
;;;75     #ifdef OS_SAFETY_CRITICAL
;;;76         if (perr == (INT8U *)0) {
;;;77             OS_SAFETY_CRITICAL_EXCEPTION();
;;;78             return ((OS_MEM *)0);
;;;79         }
;;;80     #endif
;;;81     
;;;82     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;83         if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;84             OS_SAFETY_CRITICAL_EXCEPTION();
;;;85             return ((OS_MEM *)0);
;;;86         }
;;;87     #endif
;;;88     
;;;89     #if OS_ARG_CHK_EN > 0u
;;;90         if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
;;;91             *perr = OS_ERR_MEM_INVALID_ADDR;
;;;92             return ((OS_MEM *)0);
;;;93         }
;;;94         if (((INT32U)addr & (sizeof(void *) - 1u)) != 0u){  /* Must be pointer size aligned                */
;;;95             *perr = OS_ERR_MEM_INVALID_ADDR;
;;;96             return ((OS_MEM *)0);
;;;97         }
;;;98         if (nblks < 2u) {                                 /* Must have at least 2 blocks per partition     */
;;;99             *perr = OS_ERR_MEM_INVALID_BLKS;
;;;100            return ((OS_MEM *)0);
;;;101        }
;;;102        if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
;;;103            *perr = OS_ERR_MEM_INVALID_SIZE;
;;;104            return ((OS_MEM *)0);
;;;105        }
;;;106    #endif
;;;107        OS_ENTER_CRITICAL();
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  9000              STR      r0,[sp,#0]
;;;108        pmem = OSMemFreeList;                             /* Get next free memory partition                */
000016  4818              LDR      r0,|L1.120|
000018  6804              LDR      r4,[r0,#0]  ; OSMemFreeList
;;;109        if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
00001a  6800              LDR      r0,[r0,#0]  ; OSMemFreeList
00001c  b120              CBZ      r0,|L1.40|
;;;110            OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
00001e  4816              LDR      r0,|L1.120|
000020  6800              LDR      r0,[r0,#0]  ; OSMemFreeList
000022  6840              LDR      r0,[r0,#4]
000024  4914              LDR      r1,|L1.120|
000026  6008              STR      r0,[r1,#0]  ; OSMemFreeList
                  |L1.40|
;;;111        }
;;;112        OS_EXIT_CRITICAL();
000028  9800              LDR      r0,[sp,#0]
00002a  f7fffffe          BL       OS_CPU_SR_Restore
;;;113        if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
00002e  b92c              CBNZ     r4,|L1.60|
;;;114            *perr = OS_ERR_MEM_INVALID_PART;
000030  205a              MOVS     r0,#0x5a
000032  f88a0000          STRB     r0,[r10,#0]
;;;115            return ((OS_MEM *)0);
000036  2000              MOVS     r0,#0
                  |L1.56|
;;;116        }
;;;117        plink = (void **)addr;                            /* Create linked list of free memory blocks      */
;;;118        pblk  = (INT8U *)addr;
;;;119        loops  = nblks - 1u;
;;;120        for (i = 0u; i < loops; i++) {
;;;121            pblk +=  blksize;                             /* Point to the FOLLOWING block                  */
;;;122           *plink = (void  *)pblk;                        /* Save pointer to NEXT block in CURRENT block   */
;;;123            plink = (void **)pblk;                        /* Position to  NEXT      block                  */
;;;124        }
;;;125        *plink              = (void *)0;                  /* Last memory block points to NULL              */
;;;126        pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
;;;127        pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
;;;128        pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
;;;129        pmem->OSMemNBlks    = nblks;
;;;130        pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
;;;131        *perr               = OS_ERR_NONE;
;;;132        return (pmem);
;;;133    }
000038  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.60|
00003c  46a8              MOV      r8,r5                 ;117
00003e  462e              MOV      r6,r5                 ;118
000040  1e78              SUBS     r0,r7,#1              ;119
000042  9001              STR      r0,[sp,#4]            ;119
000044  f04f0b00          MOV      r11,#0                ;120
000048  e005              B        |L1.86|
                  |L1.74|
00004a  444e              ADD      r6,r6,r9              ;121
00004c  f8c86000          STR      r6,[r8,#0]            ;122
000050  46b0              MOV      r8,r6                 ;123
000052  f10b0b01          ADD      r11,r11,#1            ;120
                  |L1.86|
000056  9801              LDR      r0,[sp,#4]            ;120
000058  4583              CMP      r11,r0                ;120
00005a  d3f6              BCC      |L1.74|
00005c  2000              MOVS     r0,#0                 ;125
00005e  f8c80000          STR      r0,[r8,#0]            ;125
000062  6025              STR      r5,[r4,#0]            ;126
000064  6065              STR      r5,[r4,#4]            ;127
000066  6127              STR      r7,[r4,#0x10]         ;128
000068  60e7              STR      r7,[r4,#0xc]          ;129
00006a  f8c49008          STR      r9,[r4,#8]            ;130
00006e  f88a0000          STRB     r0,[r10,#0]           ;131
000072  4620              MOV      r0,r4                 ;132
000074  e7e0              B        |L1.56|
;;;134    /*$PAGE*/
                          ENDP

000076  0000              DCW      0x0000
                  |L1.120|
                          DCD      OSMemFreeList

                          AREA ||i.OSMemGet||, CODE, READONLY, ALIGN=1

                  OSMemGet PROC
;;;154    
;;;155    void  *OSMemGet (OS_MEM  *pmem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;156                     INT8U   *perr)
;;;157    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;158        void      *pblk;
;;;159    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;160        OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;161    #endif
;;;162    
;;;163    
;;;164    
;;;165    #ifdef OS_SAFETY_CRITICAL
;;;166        if (perr == (INT8U *)0) {
;;;167            OS_SAFETY_CRITICAL_EXCEPTION();
;;;168            return ((void *)0);
;;;169        }
;;;170    #endif
;;;171    
;;;172    #if OS_ARG_CHK_EN > 0u
;;;173        if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
;;;174            *perr = OS_ERR_MEM_INVALID_PMEM;
;;;175            return ((void *)0);
;;;176        }
;;;177    #endif
;;;178        OS_ENTER_CRITICAL();
00000a  f7fffffe          BL       OS_CPU_SR_Save
00000e  4607              MOV      r7,r0
;;;179        if (pmem->OSMemNFree > 0u) {                      /* See if there are any free memory blocks       */
000010  6920              LDR      r0,[r4,#0x10]
000012  b168              CBZ      r0,|L2.48|
;;;180            pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
000014  6866              LDR      r6,[r4,#4]
;;;181            pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
000016  6830              LDR      r0,[r6,#0]
000018  6060              STR      r0,[r4,#4]
;;;182            pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
00001a  6920              LDR      r0,[r4,#0x10]
00001c  1e40              SUBS     r0,r0,#1
00001e  6120              STR      r0,[r4,#0x10]
;;;183            OS_EXIT_CRITICAL();
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       OS_CPU_SR_Restore
;;;184            *perr = OS_ERR_NONE;                          /*      No error                                 */
000026  2000              MOVS     r0,#0
000028  7028              STRB     r0,[r5,#0]
;;;185            return (pblk);                                /*      Return memory block to caller            */
00002a  4630              MOV      r0,r6
                  |L2.44|
;;;186        }
;;;187        OS_EXIT_CRITICAL();
;;;188        *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
;;;189        return ((void *)0);                               /*      Return NULL pointer to caller            */
;;;190    }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L2.48|
000030  4638              MOV      r0,r7                 ;187
000032  f7fffffe          BL       OS_CPU_SR_Restore
000036  205d              MOVS     r0,#0x5d              ;188
000038  7028              STRB     r0,[r5,#0]            ;188
00003a  2000              MOVS     r0,#0                 ;189
00003c  e7f6              B        |L2.44|
;;;191    /*$PAGE*/
                          ENDP


                          AREA ||i.OSMemNameGet||, CODE, READONLY, ALIGN=2

                  OSMemNameGet PROC
;;;213    #if OS_MEM_NAME_EN > 0u
;;;214    INT8U  OSMemNameGet (OS_MEM   *pmem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;215                         INT8U   **pname,
;;;216                         INT8U    *perr)
;;;217    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;218        INT8U      len;
;;;219    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;220        OS_CPU_SR  cpu_sr = 0u;
00000a  2700              MOVS     r7,#0
;;;221    #endif
;;;222    
;;;223    
;;;224    
;;;225    #ifdef OS_SAFETY_CRITICAL
;;;226        if (perr == (INT8U *)0) {
;;;227            OS_SAFETY_CRITICAL_EXCEPTION();
;;;228            return (0u);
;;;229        }
;;;230    #endif
;;;231    
;;;232    #if OS_ARG_CHK_EN > 0u
;;;233        if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
;;;234            *perr = OS_ERR_MEM_INVALID_PMEM;
;;;235            return (0u);
;;;236        }
;;;237        if (pname == (INT8U **)0) {                  /* Is 'pname' a NULL pointer?                         */
;;;238            *perr = OS_ERR_PNAME_NULL;
;;;239            return (0u);
;;;240        }
;;;241    #endif
;;;242        if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
00000c  480b              LDR      r0,|L3.60|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000010  b120              CBZ      r0,|L3.28|
;;;243            *perr = OS_ERR_NAME_GET_ISR;
000012  2011              MOVS     r0,#0x11
000014  7028              STRB     r0,[r5,#0]
;;;244            return (0u);
000016  2000              MOVS     r0,#0
                  |L3.24|
;;;245        }
;;;246        OS_ENTER_CRITICAL();
;;;247        *pname = pmem->OSMemName;
;;;248        len    = OS_StrLen(*pname);
;;;249        OS_EXIT_CRITICAL();
;;;250        *perr  = OS_ERR_NONE;
;;;251        return (len);
;;;252    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L3.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4607              MOV      r7,r0                 ;246
000022  6970              LDR      r0,[r6,#0x14]         ;247
000024  6020              STR      r0,[r4,#0]            ;247
000026  6820              LDR      r0,[r4,#0]            ;248
000028  f7fffffe          BL       OS_StrLen
00002c  4680              MOV      r8,r0                 ;248
00002e  4638              MOV      r0,r7                 ;249
000030  f7fffffe          BL       OS_CPU_SR_Restore
000034  2000              MOVS     r0,#0                 ;250
000036  7028              STRB     r0,[r5,#0]            ;250
000038  4640              MOV      r0,r8                 ;251
00003a  e7ed              B        |L3.24|
;;;253    #endif
                          ENDP

                  |L3.60|
                          DCD      OSIntNesting

                          AREA ||i.OSMemNameSet||, CODE, READONLY, ALIGN=2

                  OSMemNameSet PROC
;;;278    #if OS_MEM_NAME_EN > 0u
;;;279    void  OSMemNameSet (OS_MEM  *pmem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;280                        INT8U   *pname,
;;;281                        INT8U   *perr)
;;;282    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;283    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;284        OS_CPU_SR  cpu_sr = 0u;
00000a  2700              MOVS     r7,#0
;;;285    #endif
;;;286    
;;;287    
;;;288    
;;;289    #ifdef OS_SAFETY_CRITICAL
;;;290        if (perr == (INT8U *)0) {
;;;291            OS_SAFETY_CRITICAL_EXCEPTION();
;;;292            return;
;;;293        }
;;;294    #endif
;;;295    
;;;296    #if OS_ARG_CHK_EN > 0u
;;;297        if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
;;;298            *perr = OS_ERR_MEM_INVALID_PMEM;
;;;299            return;
;;;300        }
;;;301        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;302            *perr = OS_ERR_PNAME_NULL;
;;;303            return;
;;;304        }
;;;305    #endif
;;;306        if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
00000c  4808              LDR      r0,|L4.48|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000010  b118              CBZ      r0,|L4.26|
;;;307            *perr = OS_ERR_NAME_SET_ISR;
000012  2012              MOVS     r0,#0x12
000014  7020              STRB     r0,[r4,#0]
                  |L4.22|
;;;308            return;
;;;309        }
;;;310        OS_ENTER_CRITICAL();
;;;311        pmem->OSMemName = pname;
;;;312        OS_EXIT_CRITICAL();
;;;313        *perr           = OS_ERR_NONE;
;;;314    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L4.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4607              MOV      r7,r0                 ;310
000020  616e              STR      r6,[r5,#0x14]         ;311
000022  4638              MOV      r0,r7                 ;312
000024  f7fffffe          BL       OS_CPU_SR_Restore
000028  2000              MOVS     r0,#0                 ;313
00002a  7020              STRB     r0,[r4,#0]            ;313
00002c  bf00              NOP      
00002e  e7f2              B        |L4.22|
;;;315    #endif
                          ENDP

                  |L4.48|
                          DCD      OSIntNesting

                          AREA ||i.OSMemPut||, CODE, READONLY, ALIGN=1

                  OSMemPut PROC
;;;335    
;;;336    INT8U  OSMemPut (OS_MEM  *pmem,
000000  b570              PUSH     {r4-r6,lr}
;;;337                     void    *pblk)
;;;338    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;339    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;340        OS_CPU_SR  cpu_sr = 0u;
000006  2600              MOVS     r6,#0
;;;341    #endif
;;;342    
;;;343    
;;;344    
;;;345    #if OS_ARG_CHK_EN > 0u
;;;346        if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
;;;347            return (OS_ERR_MEM_INVALID_PMEM);
;;;348        }
;;;349        if (pblk == (void *)0) {                     /* Must release a valid block                         */
;;;350            return (OS_ERR_MEM_INVALID_PBLK);
;;;351        }
;;;352    #endif
;;;353        OS_ENTER_CRITICAL();
000008  f7fffffe          BL       OS_CPU_SR_Save
00000c  4606              MOV      r6,r0
;;;354        if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
00000e  e9d41003          LDRD     r1,r0,[r4,#0xc]
000012  4288              CMP      r0,r1
000014  d304              BCC      |L5.32|
;;;355            OS_EXIT_CRITICAL();
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       OS_CPU_SR_Restore
;;;356            return (OS_ERR_MEM_FULL);
00001c  205e              MOVS     r0,#0x5e
                  |L5.30|
;;;357        }
;;;358        *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
;;;359        pmem->OSMemFreeList = pblk;
;;;360        pmem->OSMemNFree++;                          /* One more memory block in this partition            */
;;;361        OS_EXIT_CRITICAL();
;;;362        return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
;;;363    }
00001e  bd70              POP      {r4-r6,pc}
                  |L5.32|
000020  6860              LDR      r0,[r4,#4]            ;358
000022  6028              STR      r0,[r5,#0]            ;358
000024  6065              STR      r5,[r4,#4]            ;359
000026  6920              LDR      r0,[r4,#0x10]         ;360
000028  1c40              ADDS     r0,r0,#1              ;360
00002a  6120              STR      r0,[r4,#0x10]         ;360
00002c  4630              MOV      r0,r6                 ;361
00002e  f7fffffe          BL       OS_CPU_SR_Restore
000032  2000              MOVS     r0,#0                 ;362
000034  e7f3              B        |L5.30|
;;;364    /*$PAGE*/
                          ENDP


                          AREA ||i.OSMemQuery||, CODE, READONLY, ALIGN=1

                  OSMemQuery PROC
;;;383    #if OS_MEM_QUERY_EN > 0u
;;;384    INT8U  OSMemQuery (OS_MEM       *pmem,
000000  b570              PUSH     {r4-r6,lr}
;;;385                       OS_MEM_DATA  *p_mem_data)
;;;386    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;387    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;388        OS_CPU_SR  cpu_sr = 0u;
000006  2600              MOVS     r6,#0
;;;389    #endif
;;;390    
;;;391    
;;;392    
;;;393    #if OS_ARG_CHK_EN > 0u
;;;394        if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
;;;395            return (OS_ERR_MEM_INVALID_PMEM);
;;;396        }
;;;397        if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
;;;398            return (OS_ERR_MEM_INVALID_PDATA);
;;;399        }
;;;400    #endif
;;;401        OS_ENTER_CRITICAL();
000008  f7fffffe          BL       OS_CPU_SR_Save
00000c  4606              MOV      r6,r0
;;;402        p_mem_data->OSAddr     = pmem->OSMemAddr;
00000e  6828              LDR      r0,[r5,#0]
000010  6020              STR      r0,[r4,#0]
;;;403        p_mem_data->OSFreeList = pmem->OSMemFreeList;
000012  6868              LDR      r0,[r5,#4]
000014  6060              STR      r0,[r4,#4]
;;;404        p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
000016  68a8              LDR      r0,[r5,#8]
000018  60a0              STR      r0,[r4,#8]
;;;405        p_mem_data->OSNBlks    = pmem->OSMemNBlks;
00001a  68e8              LDR      r0,[r5,#0xc]
00001c  60e0              STR      r0,[r4,#0xc]
;;;406        p_mem_data->OSNFree    = pmem->OSMemNFree;
00001e  6928              LDR      r0,[r5,#0x10]
000020  6120              STR      r0,[r4,#0x10]
;;;407        OS_EXIT_CRITICAL();
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       OS_CPU_SR_Restore
;;;408        p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
000028  e9d40103          LDRD     r0,r1,[r4,#0xc]
00002c  1a40              SUBS     r0,r0,r1
00002e  6160              STR      r0,[r4,#0x14]
;;;409        return (OS_ERR_NONE);
000030  2000              MOVS     r0,#0
;;;410    }
000032  bd70              POP      {r4-r6,pc}
;;;411    #endif                                           /* OS_MEM_QUERY_EN                                    */
                          ENDP


                          AREA ||i.OS_MemInit||, CODE, READONLY, ALIGN=2

                  OS_MemInit PROC
;;;427    
;;;428    void  OS_MemInit (void)
000000  b570              PUSH     {r4-r6,lr}
;;;429    {
;;;430    #if OS_MAX_MEM_PART == 1u
;;;431        OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
;;;432        OSMemFreeList               = (OS_MEM *)&OSMemTbl[0]; /* Point to beginning of free list           */
;;;433    #if OS_MEM_NAME_EN > 0u
;;;434        OSMemFreeList->OSMemName    = (INT8U *)"?";           /* Unknown name                              */
;;;435    #endif
;;;436    #endif
;;;437    
;;;438    #if OS_MAX_MEM_PART >= 2u
;;;439        OS_MEM  *pmem;
;;;440        INT16U   i;
;;;441    
;;;442    
;;;443        OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
000002  2178              MOVS     r1,#0x78
000004  4811              LDR      r0,|L7.76|
000006  f7fffffe          BL       OS_MemClr
;;;444        for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
00000a  2400              MOVS     r4,#0
00000c  e00e              B        |L7.44|
                  |L7.14|
;;;445            pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
00000e  eb040044          ADD      r0,r4,r4,LSL #1
000012  490e              LDR      r1,|L7.76|
000014  eb0105c0          ADD      r5,r1,r0,LSL #3
;;;446            pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
000018  1c60              ADDS     r0,r4,#1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
00001e  eb0100c0          ADD      r0,r1,r0,LSL #3
000022  6068              STR      r0,[r5,#4]
;;;447    #if OS_MEM_NAME_EN > 0u
;;;448            pmem->OSMemName  = (INT8U *)(void *)"?";
000024  a00a              ADR      r0,|L7.80|
000026  6168              STR      r0,[r5,#0x14]
000028  1c60              ADDS     r0,r4,#1              ;444
00002a  b284              UXTH     r4,r0                 ;444
                  |L7.44|
00002c  2c04              CMP      r4,#4                 ;444
00002e  d3ee              BCC      |L7.14|
;;;449    #endif
;;;450        }
;;;451        pmem                = &OSMemTbl[i];
000030  eb040044          ADD      r0,r4,r4,LSL #1
000034  4905              LDR      r1,|L7.76|
000036  eb0105c0          ADD      r5,r1,r0,LSL #3
;;;452        pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
00003a  2000              MOVS     r0,#0
00003c  6068              STR      r0,[r5,#4]
;;;453    #if OS_MEM_NAME_EN > 0u
;;;454        pmem->OSMemName = (INT8U *)(void *)"?";
00003e  a004              ADR      r0,|L7.80|
000040  6168              STR      r0,[r5,#0x14]
;;;455    #endif
;;;456    
;;;457        OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
000042  4608              MOV      r0,r1
000044  4903              LDR      r1,|L7.84|
000046  6008              STR      r0,[r1,#0]  ; OSMemFreeList
;;;458    #endif
;;;459    }
000048  bd70              POP      {r4-r6,pc}
;;;460    #endif                                                    /* OS_MEM_EN                                 */
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
                          DCD      OSMemTbl
                  |L7.80|
000050  3f00              DCB      "?",0
000052  00                DCB      0
000053  00                DCB      0
                  |L7.84|
                          DCD      OSMemFreeList
