; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_it.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\User\app\stm32f10x_it.c]
                          THUMB

                          AREA ||i.ADC1_2_IRQHandler||, CODE, READONLY, ALIGN=1

                  ADC1_2_IRQHandler PROC
;;;360    *******************************************************************************/
;;;361    void ADC1_2_IRQHandler(void)
000000  4770              BX       lr
;;;362    {
;;;363    }
;;;364    
                          ENDP


                          AREA ||i.ADC3_IRQHandler||, CODE, READONLY, ALIGN=1

                  ADC3_IRQHandler PROC
;;;723    *******************************************************************************/
;;;724    void ADC3_IRQHandler(void)
000000  4770              BX       lr
;;;725    {
;;;726    }
;;;727    
                          ENDP


                          AREA ||i.BusFaultException||, CODE, READONLY, ALIGN=1

                  BusFaultException PROC
;;;83     *******************************************************************************/
;;;84     void BusFaultException(void)
000000  bf00              NOP      
                  |L3.2|
;;;85     {
;;;86       /* Go to infinite loop when Bus Fault exception occurs */
;;;87       while (1)
000002  e7fe              B        |L3.2|
;;;88       {
;;;89       }
;;;90     }
;;;91     
                          ENDP


                          AREA ||i.CAN1_RX1_IRQHandler||, CODE, READONLY, ALIGN=1

                  CAN1_RX1_IRQHandler PROC
;;;397    *******************************************************************************/
;;;398    void CAN1_RX1_IRQHandler(void)
000000  4770              BX       lr
;;;399    {
;;;400    }
;;;401    
                          ENDP


                          AREA ||i.CAN1_SCE_IRQHandler||, CODE, READONLY, ALIGN=1

                  CAN1_SCE_IRQHandler PROC
;;;408    *******************************************************************************/
;;;409    void CAN1_SCE_IRQHandler(void)
000000  4770              BX       lr
;;;410    {
;;;411    }
;;;412    
                          ENDP


                          AREA ||i.DMA1_Channel1_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel1_IRQHandler PROC
;;;283    *******************************************************************************/
;;;284    void DMA1_Channel1_IRQHandler(void)
000000  4770              BX       lr
;;;285    {
;;;286    }
;;;287    
                          ENDP


                          AREA ||i.DMA1_Channel2_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel2_IRQHandler PROC
;;;294    *******************************************************************************/
;;;295    void DMA1_Channel2_IRQHandler(void)
000000  4770              BX       lr
;;;296    {
;;;297    }
;;;298    
                          ENDP


                          AREA ||i.DMA1_Channel3_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel3_IRQHandler PROC
;;;305    *******************************************************************************/
;;;306    void DMA1_Channel3_IRQHandler(void)
000000  4770              BX       lr
;;;307    {
;;;308    }
;;;309    
                          ENDP


                          AREA ||i.DMA1_Channel4_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel4_IRQHandler PROC
;;;316    *******************************************************************************/
;;;317    void DMA1_Channel4_IRQHandler(void)
000000  4770              BX       lr
;;;318    {
;;;319    }
;;;320    
                          ENDP


                          AREA ||i.DMA1_Channel5_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel5_IRQHandler PROC
;;;327    *******************************************************************************/
;;;328    void DMA1_Channel5_IRQHandler(void)
000000  4770              BX       lr
;;;329    {
;;;330    }
;;;331    
                          ENDP


                          AREA ||i.DMA1_Channel6_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel6_IRQHandler PROC
;;;338    *******************************************************************************/
;;;339    void DMA1_Channel6_IRQHandler(void)
000000  4770              BX       lr
;;;340    {
;;;341    }
;;;342    
                          ENDP


                          AREA ||i.DMA1_Channel7_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel7_IRQHandler PROC
;;;349    *******************************************************************************/
;;;350    void DMA1_Channel7_IRQHandler(void)
000000  4770              BX       lr
;;;351    {
;;;352    }
;;;353    
                          ENDP


                          AREA ||i.DMA2_Channel1_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA2_Channel1_IRQHandler PROC
;;;836    *******************************************************************************/
;;;837    void DMA2_Channel1_IRQHandler(void)
000000  4770              BX       lr
;;;838    {
;;;839    }
;;;840    
                          ENDP


                          AREA ||i.DMA2_Channel2_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA2_Channel2_IRQHandler PROC
;;;847    *******************************************************************************/
;;;848    void DMA2_Channel2_IRQHandler(void)
000000  4770              BX       lr
;;;849    {
;;;850    }
;;;851    
                          ENDP


                          AREA ||i.DMA2_Channel3_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA2_Channel3_IRQHandler PROC
;;;858    *******************************************************************************/
;;;859    void DMA2_Channel3_IRQHandler(void)
000000  4770              BX       lr
;;;860    {
;;;861    }
;;;862    
                          ENDP


                          AREA ||i.DMA2_Channel4_5_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA2_Channel4_5_IRQHandler PROC
;;;870    *******************************************************************************/
;;;871    void DMA2_Channel4_5_IRQHandler(void)
000000  4770              BX       lr
;;;872    {
;;;873    }
;;;874    
                          ENDP


                          AREA ||i.DebugMonitor||, CODE, READONLY, ALIGN=1

                  DebugMonitor PROC
;;;113    *******************************************************************************/
;;;114    void DebugMonitor(void)
000000  4770              BX       lr
;;;115    {
;;;116    }
;;;117    
                          ENDP


                          AREA ||i.EXTI0_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI0_IRQHandler PROC
;;;226    *******************************************************************************/
;;;227    void EXTI0_IRQHandler(void)
000000  4770              BX       lr
;;;228    {
;;;229    }
;;;230    
                          ENDP


                          AREA ||i.EXTI15_10_IRQHandler||, CODE, READONLY, ALIGN=2

                  EXTI15_10_IRQHandler PROC
;;;633    
;;;634    void EXTI15_10_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;635    {
;;;636      	OS_CPU_SR  cpu_sr;
;;;637    
;;;638        OS_ENTER_CRITICAL();  //保存全局中断标志,关总中断/* Tell uC/OS-II that we are starting an ISR*/
000002  f7fffffe          BL       OS_CPU_SR_Save
000006  4604              MOV      r4,r0
;;;639        OSIntNesting++;
000008  4805              LDR      r0,|L19.32|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000c  1c40              ADDS     r0,r0,#1
00000e  4904              LDR      r1,|L19.32|
000010  7008              STRB     r0,[r1,#0]
;;;640        OS_EXIT_CRITICAL();	  //恢复全局中断标志
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       OS_CPU_SR_Restore
;;;641    
;;;642    //	PS2_IRQHandler();
;;;643    	
;;;644    
;;;645        OSIntExit();
000018  f7fffffe          BL       OSIntExit
;;;646    }
00001c  bd10              POP      {r4,pc}
;;;647    
                          ENDP

00001e  0000              DCW      0x0000
                  |L19.32|
                          DCD      OSIntNesting

                          AREA ||i.EXTI1_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI1_IRQHandler PROC
;;;237    *******************************************************************************/
;;;238    void EXTI1_IRQHandler(void)
000000  4770              BX       lr
;;;239    {
;;;240    }
;;;241    
                          ENDP


                          AREA ||i.EXTI2_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI2_IRQHandler PROC
;;;248    *******************************************************************************/
;;;249    void EXTI2_IRQHandler(void)
000000  4770              BX       lr
;;;250    {
;;;251    }
;;;252    
                          ENDP


                          AREA ||i.EXTI3_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI3_IRQHandler PROC
;;;259    *******************************************************************************/
;;;260    void EXTI3_IRQHandler(void)
000000  4770              BX       lr
;;;261    {
;;;262    
;;;263    }
;;;264    
                          ENDP


                          AREA ||i.EXTI4_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI4_IRQHandler PROC
;;;271    *******************************************************************************/
;;;272    void EXTI4_IRQHandler(void)
000000  4770              BX       lr
;;;273    {
;;;274    
;;;275    }
;;;276    
                          ENDP


                          AREA ||i.EXTI9_5_IRQHandler||, CODE, READONLY, ALIGN=2

                  EXTI9_5_IRQHandler PROC
;;;421    extern OS_EVENT *AppTouchSemp;
;;;422    void EXTI9_5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;423    {
;;;424    	OS_CPU_SR  cpu_sr;
;;;425    
;;;426        OS_ENTER_CRITICAL();  //保存全局中断标志,关总中断/* Tell uC/OS-II that we are starting an ISR*/
000002  f7fffffe          BL       OS_CPU_SR_Save
000006  4604              MOV      r4,r0
;;;427        OSIntNesting++;
000008  480f              LDR      r0,|L24.72|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000c  1c40              ADDS     r0,r0,#1
00000e  490e              LDR      r1,|L24.72|
000010  7008              STRB     r0,[r1,#0]
;;;428        OS_EXIT_CRITICAL();	  //恢复全局中断标志 
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       OS_CPU_SR_Restore
;;;429    
;;;430    
;;;431    	if(EXTI_GetITStatus(EXTI_Line6) != RESET)
000018  2040              MOVS     r0,#0x40
00001a  f7fffffe          BL       EXTI_GetITStatus
00001e  b178              CBZ      r0,|L24.64|
;;;432    	{	
;;;433    		EXTI->IMR&=~(1<<6 );	           /* 关闭中断       */
000020  480a              LDR      r0,|L24.76|
000022  6800              LDR      r0,[r0,#0]
000024  f0200040          BIC      r0,r0,#0x40
000028  4908              LDR      r1,|L24.76|
00002a  6008              STR      r0,[r1,#0]
;;;434    		EXTI_ClearITPendingBit(EXTI_Line6);/* 清除中断标志位 */
00002c  2040              MOVS     r0,#0x40
00002e  f7fffffe          BL       EXTI_ClearITPendingBit
;;;435    		flag = 1;
000032  2001              MOVS     r0,#1
000034  4906              LDR      r1,|L24.80|
000036  7008              STRB     r0,[r1,#0]
;;;436    		OSSemPost(AppTouchSemp);
000038  4806              LDR      r0,|L24.84|
00003a  6800              LDR      r0,[r0,#0]  ; AppTouchSemp
00003c  f7fffffe          BL       OSSemPost
                  |L24.64|
;;;437    	}
;;;438    
;;;439        OSIntExit();
000040  f7fffffe          BL       OSIntExit
;;;440    			   
;;;441    }
000044  bd10              POP      {r4,pc}
;;;442    
                          ENDP

000046  0000              DCW      0x0000
                  |L24.72|
                          DCD      OSIntNesting
                  |L24.76|
                          DCD      0x40010400
                  |L24.80|
                          DCD      flag
                  |L24.84|
                          DCD      AppTouchSemp

                          AREA ||i.FLASH_IRQHandler||, CODE, READONLY, ALIGN=1

                  FLASH_IRQHandler PROC
;;;204    *******************************************************************************/
;;;205    void FLASH_IRQHandler(void)
000000  4770              BX       lr
;;;206    {
;;;207    }
;;;208    
                          ENDP


                          AREA ||i.FSMC_IRQHandler||, CODE, READONLY, ALIGN=1

                  FSMC_IRQHandler PROC
;;;734    *******************************************************************************/
;;;735    void FSMC_IRQHandler(void)
000000  4770              BX       lr
;;;736    {
;;;737    }
;;;738    
                          ENDP


                          AREA ||i.HardFaultException||, CODE, READONLY, ALIGN=1

                  HardFaultException PROC
;;;53     *******************************************************************************/
;;;54     void HardFaultException(void)
000000  bf00              NOP      
                  |L27.2|
;;;55     {
;;;56       /* Go to infinite loop when Hard Fault exception occurs */
;;;57       while (1)
000002  e7fe              B        |L27.2|
;;;58       {
;;;59       }
;;;60     }
;;;61     
                          ENDP


                          AREA ||i.I2C1_ER_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C1_ER_IRQHandler PROC
;;;542    *******************************************************************************/
;;;543    void I2C1_ER_IRQHandler(void)
000000  4770              BX       lr
;;;544    {
;;;545    }
;;;546    
                          ENDP


                          AREA ||i.I2C1_EV_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C1_EV_IRQHandler PROC
;;;531    *******************************************************************************/
;;;532    void I2C1_EV_IRQHandler(void)
000000  4770              BX       lr
;;;533    {
;;;534    }
;;;535    
                          ENDP


                          AREA ||i.I2C2_ER_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C2_ER_IRQHandler PROC
;;;564    *******************************************************************************/
;;;565    void I2C2_ER_IRQHandler(void)
000000  4770              BX       lr
;;;566    {
;;;567    }
;;;568    
                          ENDP


                          AREA ||i.I2C2_EV_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C2_EV_IRQHandler PROC
;;;553    *******************************************************************************/
;;;554    void I2C2_EV_IRQHandler(void)
000000  4770              BX       lr
;;;555    {
;;;556    }
;;;557    
                          ENDP


                          AREA ||i.MemManageException||, CODE, READONLY, ALIGN=1

                  MemManageException PROC
;;;68     *******************************************************************************/
;;;69     void MemManageException(void)
000000  bf00              NOP      
                  |L32.2|
;;;70     {
;;;71       /* Go to infinite loop when Memory Manage exception occurs */
;;;72       while (1)
000002  e7fe              B        |L32.2|
;;;73       {
;;;74       }
;;;75     }
;;;76     
                          ENDP


                          AREA ||i.NMIException||, CODE, READONLY, ALIGN=1

                  NMIException PROC
;;;41     *******************************************************************************/
;;;42     void NMIException(void)
000000  4770              BX       lr
;;;43     {
;;;44      
;;;45     }
;;;46     
                          ENDP


                          AREA ||i.PVD_IRQHandler||, CODE, READONLY, ALIGN=1

                  PVD_IRQHandler PROC
;;;169    *******************************************************************************/
;;;170    void PVD_IRQHandler(void)
000000  4770              BX       lr
;;;171    {
;;;172    }
;;;173    
                          ENDP


                          AREA ||i.PendSVC||, CODE, READONLY, ALIGN=1

                  PendSVC PROC
;;;135    *******************************************************************************/
;;;136    void PendSVC(void)
000000  4770              BX       lr
;;;137    {
;;;138    }
;;;139    
                          ENDP


                          AREA ||i.RCC_IRQHandler||, CODE, READONLY, ALIGN=1

                  RCC_IRQHandler PROC
;;;215    *******************************************************************************/
;;;216    void RCC_IRQHandler(void)
000000  4770              BX       lr
;;;217    {
;;;218    }
;;;219    
                          ENDP


                          AREA ||i.RTCAlarm_IRQHandler||, CODE, READONLY, ALIGN=1

                  RTCAlarm_IRQHandler PROC
;;;654    *******************************************************************************/
;;;655    void RTCAlarm_IRQHandler(void)
000000  4770              BX       lr
;;;656    {
;;;657     
;;;658    }
;;;659    
                          ENDP


                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=1

                  RTC_IRQHandler PROC
;;;191    *******************************************************************************/
;;;192    void RTC_IRQHandler(void)
000000  4770              BX       lr
;;;193    {
;;;194     
;;;195    
;;;196    }
;;;197    
                          ENDP


                          AREA ||i.SDIO_IRQHandler||, CODE, READONLY, ALIGN=2

                  SDIO_IRQHandler PROC
;;;746    //extern void SD_ProcessIRQSrc(void);
;;;747    void SDIO_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;748    { 
;;;749    	
;;;750    	OS_CPU_SR  cpu_sr;
;;;751    
;;;752    
;;;753        OS_ENTER_CRITICAL();  //保存全局中断标志,关总中断/* Tell uC/OS-II that we are starting an ISR*/
000002  f7fffffe          BL       OS_CPU_SR_Save
000006  4604              MOV      r4,r0
;;;754        OSIntNesting++;
000008  4805              LDR      r0,|L39.32|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000c  1c40              ADDS     r0,r0,#1
00000e  4904              LDR      r1,|L39.32|
000010  7008              STRB     r0,[r1,#0]
;;;755        OS_EXIT_CRITICAL();	  //恢复全局中断标志
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       OS_CPU_SR_Restore
;;;756    
;;;757    //	/* 处理所有的SDIO中断源 */
;;;758    //	SD_ProcessIRQSrc(); 
;;;759    
;;;760        OSIntExit();  //在os_core.c文件里定义,如果有更高优先级的任务就绪了,则执行一次任务切换  
000018  f7fffffe          BL       OSIntExit
;;;761    	 
;;;762    }
00001c  bd10              POP      {r4,pc}
;;;763    
                          ENDP

00001e  0000              DCW      0x0000
                  |L39.32|
                          DCD      OSIntNesting

                          AREA ||i.SPI1_IRQHandler||, CODE, READONLY, ALIGN=1

                  SPI1_IRQHandler PROC
;;;575    *******************************************************************************/
;;;576    void SPI1_IRQHandler(void)
000000  4770              BX       lr
;;;577    {
;;;578    }
;;;579    
                          ENDP


                          AREA ||i.SPI2_IRQHandler||, CODE, READONLY, ALIGN=1

                  SPI2_IRQHandler PROC
;;;586    *******************************************************************************/
;;;587    void SPI2_IRQHandler(void)
000000  4770              BX       lr
;;;588    {
;;;589     
;;;590    }
;;;591    
                          ENDP


                          AREA ||i.SPI3_IRQHandler||, CODE, READONLY, ALIGN=1

                  SPI3_IRQHandler PROC
;;;781    *******************************************************************************/
;;;782    void SPI3_IRQHandler(void)
000000  4770              BX       lr
;;;783    {
;;;784    }
;;;785    
                          ENDP


                          AREA ||i.SVCHandler||, CODE, READONLY, ALIGN=1

                  SVCHandler PROC
;;;124    *******************************************************************************/
;;;125    void SVCHandler(void)
000000  4770              BX       lr
;;;126    {
;;;127    }
;;;128    
                          ENDP


                          AREA ||i.SysTickHandler||, CODE, READONLY, ALIGN=1

                  SysTickHandler PROC
;;;146    *******************************************************************************/
;;;147    void SysTickHandler(void)
000000  4770              BX       lr
;;;148    {
;;;149                  
;;;150    }
;;;151    
                          ENDP


                          AREA ||i.TAMPER_IRQHandler||, CODE, READONLY, ALIGN=1

                  TAMPER_IRQHandler PROC
;;;180    *******************************************************************************/
;;;181    void TAMPER_IRQHandler(void)
000000  4770              BX       lr
;;;182    {
;;;183    }
;;;184    
                          ENDP


                          AREA ||i.TIM1_BRK_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM1_BRK_IRQHandler PROC
;;;449    *******************************************************************************/
;;;450    void TIM1_BRK_IRQHandler(void)
000000  4770              BX       lr
;;;451    {
;;;452    }
;;;453    
                          ENDP


                          AREA ||i.TIM1_CC_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM1_CC_IRQHandler PROC
;;;487    *******************************************************************************/
;;;488    void TIM1_CC_IRQHandler(void)
000000  4770              BX       lr
;;;489    {
;;;490    }
;;;491    
                          ENDP


                          AREA ||i.TIM1_TRG_COM_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM1_TRG_COM_IRQHandler PROC
;;;476    *******************************************************************************/
;;;477    void TIM1_TRG_COM_IRQHandler(void)
000000  4770              BX       lr
;;;478    {
;;;479    }
;;;480    
                          ENDP


                          AREA ||i.TIM1_UP_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM1_UP_IRQHandler PROC
;;;461    *******************************************************************************/
;;;462    void TIM1_UP_IRQHandler(void)
000000  4770              BX       lr
;;;463    {
;;;464      /* Clear the TIM1 Update pending bit */
;;;465     
;;;466    
;;;467    }
;;;468    
                          ENDP


                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM2_IRQHandler PROC
;;;498    *******************************************************************************/
;;;499    void TIM2_IRQHandler(void)
000000  4770              BX       lr
;;;500    {
;;;501    }
;;;502    
                          ENDP


                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM3_IRQHandler PROC
;;;509    *******************************************************************************/
;;;510    void TIM3_IRQHandler(void)
000000  4770              BX       lr
;;;511    {
;;;512    }
;;;513    
                          ENDP


                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM4_IRQHandler PROC
;;;520    *******************************************************************************/
;;;521    void TIM4_IRQHandler(void)
000000  4770              BX       lr
;;;522    {
;;;523    }
;;;524    
                          ENDP


                          AREA ||i.TIM5_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM5_IRQHandler PROC
;;;770    *******************************************************************************/
;;;771    void TIM5_IRQHandler(void)
000000  4770              BX       lr
;;;772    {
;;;773    }
;;;774    
                          ENDP


                          AREA ||i.TIM6_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM6_IRQHandler PROC
;;;814    *******************************************************************************/
;;;815    void TIM6_IRQHandler(void)
000000  4770              BX       lr
;;;816    {
;;;817    }
;;;818    
                          ENDP


                          AREA ||i.TIM7_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM7_IRQHandler PROC
;;;825    *******************************************************************************/
;;;826    void TIM7_IRQHandler(void)
000000  4770              BX       lr
;;;827    {
;;;828    }
;;;829    
                          ENDP


                          AREA ||i.TIM8_BRK_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM8_BRK_IRQHandler PROC
;;;677    *******************************************************************************/
;;;678    void TIM8_BRK_IRQHandler(void)
000000  4770              BX       lr
;;;679    {
;;;680    }
;;;681    
                          ENDP


                          AREA ||i.TIM8_CC_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM8_CC_IRQHandler PROC
;;;712    *******************************************************************************/
;;;713    void TIM8_CC_IRQHandler(void)
000000  4770              BX       lr
;;;714    {
;;;715    }
;;;716    
                          ENDP


                          AREA ||i.TIM8_TRG_COM_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM8_TRG_COM_IRQHandler PROC
;;;701    *******************************************************************************/
;;;702    void TIM8_TRG_COM_IRQHandler(void)
000000  4770              BX       lr
;;;703    {
;;;704    }
;;;705    
                          ENDP


                          AREA ||i.TIM8_UP_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM8_UP_IRQHandler PROC
;;;689    *******************************************************************************/
;;;690    void TIM8_UP_IRQHandler(void)
000000  4770              BX       lr
;;;691    {
;;;692    }
;;;693    
                          ENDP


                          AREA ||i.UART4_IRQHandler||, CODE, READONLY, ALIGN=1

                  UART4_IRQHandler PROC
;;;792    *******************************************************************************/
;;;793    void UART4_IRQHandler(void)
000000  4770              BX       lr
;;;794    {
;;;795    }
;;;796    
                          ENDP


                          AREA ||i.UART5_IRQHandler||, CODE, READONLY, ALIGN=1

                  UART5_IRQHandler PROC
;;;803    *******************************************************************************/
;;;804    void UART5_IRQHandler(void)
000000  4770              BX       lr
;;;805    {
;;;806    }
;;;807    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=1

                  USART1_IRQHandler PROC
;;;598    *******************************************************************************/
;;;599    void USART1_IRQHandler(void)
000000  4770              BX       lr
;;;600    {
;;;601    }
;;;602    
                          ENDP


                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=1

                  USART2_IRQHandler PROC
;;;609    *******************************************************************************/
;;;610    void USART2_IRQHandler(void)
000000  4770              BX       lr
;;;611    {
;;;612    }
;;;613    
                          ENDP


                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=1

                  USART3_IRQHandler PROC
;;;620    *******************************************************************************/
;;;621    void USART3_IRQHandler(void)
000000  4770              BX       lr
;;;622    {
;;;623     
;;;624    }
;;;625    
                          ENDP


                          AREA ||i.USBWakeUp_IRQHandler||, CODE, READONLY, ALIGN=1

                  USBWakeUp_IRQHandler PROC
;;;666    *******************************************************************************/
;;;667    void USBWakeUp_IRQHandler(void)
000000  4770              BX       lr
;;;668    {
;;;669    }
;;;670    
                          ENDP


                          AREA ||i.USB_HP_CAN1_TX_IRQHandler||, CODE, READONLY, ALIGN=1

                  USB_HP_CAN1_TX_IRQHandler PROC
;;;372    *******************************************************************************/
;;;373    void USB_HP_CAN1_TX_IRQHandler(void)
000000  4770              BX       lr
;;;374    {
;;;375     
;;;376    }
;;;377    
                          ENDP


                          AREA ||i.USB_LP_CAN1_RX0_IRQHandler||, CODE, READONLY, ALIGN=1

                  USB_LP_CAN1_RX0_IRQHandler PROC
;;;385    *******************************************************************************/
;;;386    void USB_LP_CAN1_RX0_IRQHandler(void)
000000  4770              BX       lr
;;;387    {
;;;388     
;;;389    }
;;;390    
                          ENDP


                          AREA ||i.UsageFaultException||, CODE, READONLY, ALIGN=1

                  UsageFaultException PROC
;;;98     *******************************************************************************/
;;;99     void UsageFaultException(void)
000000  bf00              NOP      
                  |L68.2|
;;;100    {
;;;101      /* Go to infinite loop when Usage Fault exception occurs */
;;;102      while (1)
000002  e7fe              B        |L68.2|
;;;103      {
;;;104      }
;;;105    }
;;;106    
                          ENDP


                          AREA ||i.WWDG_IRQHandler||, CODE, READONLY, ALIGN=1

                  WWDG_IRQHandler PROC
;;;158    *******************************************************************************/
;;;159    void WWDG_IRQHandler(void)
000000  4770              BX       lr
;;;160    {
;;;161    }
;;;162    
                          ENDP

