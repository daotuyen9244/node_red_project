; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_mutex.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\os_mutex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCOS-II\Source\os_mutex.c]
                          THUMB

                          AREA ||i.OSMutexAccept||, CODE, READONLY, ALIGN=2

                  OSMutexAccept PROC
;;;83     #if OS_MUTEX_ACCEPT_EN > 0u
;;;84     BOOLEAN  OSMutexAccept (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;85                             INT8U     *perr)
;;;86     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;87         INT8U      pcp;                                    /* Priority Ceiling Priority (PCP)              */
;;;88     #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;89         OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;90     #endif
;;;91     
;;;92     
;;;93     
;;;94     #ifdef OS_SAFETY_CRITICAL
;;;95         if (perr == (INT8U *)0) {
;;;96             OS_SAFETY_CRITICAL_EXCEPTION();
;;;97             return (OS_FALSE);
;;;98         }
;;;99     #endif
;;;100    
;;;101    #if OS_ARG_CHK_EN > 0u
;;;102        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;103            *perr = OS_ERR_PEVENT_NULL;
;;;104            return (OS_FALSE);
;;;105        }
;;;106    #endif
;;;107        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
00000a  7820              LDRB     r0,[r4,#0]
00000c  2804              CMP      r0,#4
00000e  d004              BEQ      |L1.26|
;;;108            *perr = OS_ERR_EVENT_TYPE;
000010  2001              MOVS     r0,#1
000012  7028              STRB     r0,[r5,#0]
;;;109            return (OS_FALSE);
000014  2000              MOVS     r0,#0
                  |L1.22|
;;;110        }
;;;111        if (OSIntNesting > 0u) {                           /* Make sure it's not called from an ISR        */
;;;112            *perr = OS_ERR_PEND_ISR;
;;;113            return (OS_FALSE);
;;;114        }
;;;115        OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
;;;116        pcp = (INT8U)(pevent->OSEventCnt >> 8u);           /* Get PCP from mutex                           */
;;;117        if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;118            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
;;;119            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
;;;120            pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
;;;121            if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
;;;122                (OSTCBCur->OSTCBPrio <= pcp)) {            /*      PCP 'must' have a SMALLER prio ...      */
;;;123                 OS_EXIT_CRITICAL();                       /*      ... than current task!                  */
;;;124                *perr = OS_ERR_PCP_LOWER;
;;;125            } else {
;;;126                 OS_EXIT_CRITICAL();
;;;127                *perr = OS_ERR_NONE;
;;;128            }
;;;129            return (OS_TRUE);
;;;130        }
;;;131        OS_EXIT_CRITICAL();
;;;132        *perr = OS_ERR_NONE;
;;;133        return (OS_FALSE);
;;;134    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L1.26|
00001a  481c              LDR      r0,|L1.140|
00001c  7800              LDRB     r0,[r0,#0]            ;111  ; OSIntNesting
00001e  b118              CBZ      r0,|L1.40|
000020  2002              MOVS     r0,#2                 ;112
000022  7028              STRB     r0,[r5,#0]            ;112
000024  2000              MOVS     r0,#0                 ;113
000026  e7f6              B        |L1.22|
                  |L1.40|
000028  f7fffffe          BL       OS_CPU_SR_Save
00002c  4607              MOV      r7,r0                 ;115
00002e  8920              LDRH     r0,[r4,#8]            ;116
000030  1206              ASRS     r6,r0,#8              ;116
000032  7a20              LDRB     r0,[r4,#8]            ;117
000034  28ff              CMP      r0,#0xff              ;117
000036  d122              BNE      |L1.126|
000038  8920              LDRH     r0,[r4,#8]            ;118
00003a  f400407f          AND      r0,r0,#0xff00         ;118
00003e  8120              STRH     r0,[r4,#8]            ;118
000040  8920              LDRH     r0,[r4,#8]            ;119
000042  4913              LDR      r1,|L1.144|
000044  6809              LDR      r1,[r1,#0]            ;119  ; OSTCBCur
000046  f8911036          LDRB     r1,[r1,#0x36]         ;119
00004a  4308              ORRS     r0,r0,r1              ;119
00004c  8120              STRH     r0,[r4,#8]            ;119
00004e  4810              LDR      r0,|L1.144|
000050  6800              LDR      r0,[r0,#0]            ;120  ; OSTCBCur
000052  6060              STR      r0,[r4,#4]            ;120
000054  2eff              CMP      r6,#0xff              ;121
000056  d00b              BEQ      |L1.112|
000058  480d              LDR      r0,|L1.144|
00005a  6800              LDR      r0,[r0,#0]            ;122  ; OSTCBCur
00005c  f8900036          LDRB     r0,[r0,#0x36]         ;122
000060  42b0              CMP      r0,r6                 ;122
000062  dc05              BGT      |L1.112|
000064  4638              MOV      r0,r7                 ;123
000066  f7fffffe          BL       OS_CPU_SR_Restore
00006a  2078              MOVS     r0,#0x78              ;124
00006c  7028              STRB     r0,[r5,#0]            ;124
00006e  e004              B        |L1.122|
                  |L1.112|
000070  4638              MOV      r0,r7                 ;126
000072  f7fffffe          BL       OS_CPU_SR_Restore
000076  2000              MOVS     r0,#0                 ;127
000078  7028              STRB     r0,[r5,#0]            ;127
                  |L1.122|
00007a  2001              MOVS     r0,#1                 ;129
00007c  e7cb              B        |L1.22|
                  |L1.126|
00007e  4638              MOV      r0,r7                 ;131
000080  f7fffffe          BL       OS_CPU_SR_Restore
000084  2000              MOVS     r0,#0                 ;132
000086  7028              STRB     r0,[r5,#0]            ;132
000088  bf00              NOP                            ;133
00008a  e7c4              B        |L1.22|
;;;135    #endif
                          ENDP

                  |L1.140|
                          DCD      OSIntNesting
                  |L1.144|
                          DCD      OSTCBCur

                          AREA ||i.OSMutexCreate||, CODE, READONLY, ALIGN=2

                  OSMutexCreate PROC
;;;174    
;;;175    OS_EVENT  *OSMutexCreate (INT8U   prio,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;176                              INT8U  *perr)
;;;177    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;178        OS_EVENT  *pevent;
;;;179    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;180        OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;181    #endif
;;;182    
;;;183    
;;;184    
;;;185    #ifdef OS_SAFETY_CRITICAL
;;;186        if (perr == (INT8U *)0) {
;;;187            OS_SAFETY_CRITICAL_EXCEPTION();
;;;188            return ((OS_EVENT *)0);
;;;189        }
;;;190    #endif
;;;191    
;;;192    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;193        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;194            OS_SAFETY_CRITICAL_EXCEPTION();
;;;195            return ((OS_EVENT *)0);
;;;196        }
;;;197    #endif
;;;198    
;;;199    #if OS_ARG_CHK_EN > 0u
;;;200        if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
;;;201            if (prio >= OS_LOWEST_PRIO) {                      /* Validate PCP                             */
;;;202               *perr = OS_ERR_PRIO_INVALID;
;;;203                return ((OS_EVENT *)0);
;;;204            }
;;;205        }
;;;206    #endif
;;;207        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
00000a  4822              LDR      r0,|L2.148|
00000c  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000e  b120              CBZ      r0,|L2.26|
;;;208            *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
000010  2010              MOVS     r0,#0x10
000012  7030              STRB     r0,[r6,#0]
;;;209            return ((OS_EVENT *)0);
000014  2000              MOVS     r0,#0
                  |L2.22|
;;;210        }
;;;211        OS_ENTER_CRITICAL();
;;;212        if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
;;;213            if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {           /* Mutex priority must not already exist    */
;;;214                OS_EXIT_CRITICAL();                            /* Task already exist at priority ...       */
;;;215               *perr = OS_ERR_PRIO_EXIST;                      /* ... ceiling priority                     */
;;;216                return ((OS_EVENT *)0);
;;;217            }
;;;218            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;              /* Reserve the table entry                  */
;;;219        }
;;;220    
;;;221        pevent = OSEventFreeList;                              /* Get next free event control block        */
;;;222        if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
;;;223            if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
;;;224                OSTCBPrioTbl[prio] = (OS_TCB *)0;              /* No, Release the table entry              */
;;;225            }
;;;226            OS_EXIT_CRITICAL();
;;;227           *perr = OS_ERR_PEVENT_NULL;                         /* No more event control blocks             */
;;;228            return (pevent);
;;;229        }
;;;230        OSEventFreeList     = (OS_EVENT *)OSEventFreeList->OSEventPtr; /* Adjust the free list             */
;;;231        OS_EXIT_CRITICAL();
;;;232        pevent->OSEventType = OS_EVENT_TYPE_MUTEX;
;;;233        pevent->OSEventCnt  = (INT16U)((INT16U)prio << 8u) | OS_MUTEX_AVAILABLE; /* Resource is avail.     */
;;;234        pevent->OSEventPtr  = (void *)0;                       /* No task owning the mutex                 */
;;;235    #if OS_EVENT_NAME_EN > 0u
;;;236        pevent->OSEventName = (INT8U *)(void *)"?";
;;;237    #endif
;;;238        OS_EventWaitListInit(pevent);
;;;239       *perr = OS_ERR_NONE;
;;;240        return (pevent);
;;;241    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L2.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4607              MOV      r7,r0                 ;211
000020  2cff              CMP      r4,#0xff              ;212
000022  d00e              BEQ      |L2.66|
000024  481c              LDR      r0,|L2.152|
000026  f8500024          LDR      r0,[r0,r4,LSL #2]     ;213
00002a  b130              CBZ      r0,|L2.58|
00002c  4638              MOV      r0,r7                 ;214
00002e  f7fffffe          BL       OS_CPU_SR_Restore
000032  2028              MOVS     r0,#0x28              ;215
000034  7030              STRB     r0,[r6,#0]            ;215
000036  2000              MOVS     r0,#0                 ;216
000038  e7ed              B        |L2.22|
                  |L2.58|
00003a  2001              MOVS     r0,#1                 ;218
00003c  4916              LDR      r1,|L2.152|
00003e  f8410024          STR      r0,[r1,r4,LSL #2]     ;218
                  |L2.66|
000042  4816              LDR      r0,|L2.156|
000044  6805              LDR      r5,[r0,#0]            ;221  ; OSEventFreeList
000046  b965              CBNZ     r5,|L2.98|
000048  2cff              CMP      r4,#0xff              ;223
00004a  d003              BEQ      |L2.84|
00004c  2000              MOVS     r0,#0                 ;224
00004e  4912              LDR      r1,|L2.152|
000050  f8410024          STR      r0,[r1,r4,LSL #2]     ;224
                  |L2.84|
000054  4638              MOV      r0,r7                 ;226
000056  f7fffffe          BL       OS_CPU_SR_Restore
00005a  2004              MOVS     r0,#4                 ;227
00005c  7030              STRB     r0,[r6,#0]            ;227
00005e  4628              MOV      r0,r5                 ;228
000060  e7d9              B        |L2.22|
                  |L2.98|
000062  480e              LDR      r0,|L2.156|
000064  6800              LDR      r0,[r0,#0]            ;230  ; OSEventFreeList
000066  6840              LDR      r0,[r0,#4]            ;230
000068  490c              LDR      r1,|L2.156|
00006a  6008              STR      r0,[r1,#0]            ;230  ; OSEventFreeList
00006c  4638              MOV      r0,r7                 ;231
00006e  f7fffffe          BL       OS_CPU_SR_Restore
000072  2004              MOVS     r0,#4                 ;232
000074  7028              STRB     r0,[r5,#0]            ;232
000076  20ff              MOVS     r0,#0xff              ;233
000078  ea402004          ORR      r0,r0,r4,LSL #8       ;233
00007c  8128              STRH     r0,[r5,#8]            ;233
00007e  2000              MOVS     r0,#0                 ;234
000080  6068              STR      r0,[r5,#4]            ;234
000082  a007              ADR      r0,|L2.160|
000084  6128              STR      r0,[r5,#0x10]         ;236
000086  4628              MOV      r0,r5                 ;238
000088  f7fffffe          BL       OS_EventWaitListInit
00008c  2000              MOVS     r0,#0                 ;239
00008e  7030              STRB     r0,[r6,#0]            ;239
000090  4628              MOV      r0,r5                 ;240
000092  e7c0              B        |L2.22|
;;;242    
                          ENDP

                  |L2.148|
                          DCD      OSIntNesting
                  |L2.152|
                          DCD      OSTCBPrioTbl
                  |L2.156|
                          DCD      OSEventFreeList
                  |L2.160|
0000a0  3f00              DCB      "?",0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.OSMutexDel||, CODE, READONLY, ALIGN=2

                  OSMutexDel PROC
;;;284    #if OS_MUTEX_DEL_EN > 0u
;;;285    OS_EVENT  *OSMutexDel (OS_EVENT  *pevent,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;286                           INT8U      opt,
;;;287                           INT8U     *perr)
;;;288    {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
000008  4616              MOV      r6,r2
;;;289        BOOLEAN    tasks_waiting;
;;;290        OS_EVENT  *pevent_return;
;;;291        INT8U      pcp;                                        /* Priority ceiling priority                */
;;;292        INT8U      prio;
;;;293        OS_TCB    *ptcb;
;;;294    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;295        OS_CPU_SR  cpu_sr = 0u;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;296    #endif
;;;297    
;;;298    
;;;299    
;;;300    #ifdef OS_SAFETY_CRITICAL
;;;301        if (perr == (INT8U *)0) {
;;;302            OS_SAFETY_CRITICAL_EXCEPTION();
;;;303            return ((OS_EVENT *)0);
;;;304        }
;;;305    #endif
;;;306    
;;;307    #if OS_ARG_CHK_EN > 0u
;;;308        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;309            *perr = OS_ERR_PEVENT_NULL;
;;;310            return (pevent);
;;;311        }
;;;312    #endif
;;;313        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2804              CMP      r0,#4
000012  d004              BEQ      |L3.30|
;;;314            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7030              STRB     r0,[r6,#0]
;;;315            return (pevent);
000018  4620              MOV      r0,r4
                  |L3.26|
;;;316        }
;;;317        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;318            *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
;;;319            return (pevent);
;;;320        }
;;;321        OS_ENTER_CRITICAL();
;;;322        if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mutex        */
;;;323            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;324        } else {
;;;325            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;326        }
;;;327        switch (opt) {
;;;328            case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
;;;329                 if (tasks_waiting == OS_FALSE) {
;;;330    #if OS_EVENT_NAME_EN > 0u
;;;331                     pevent->OSEventName   = (INT8U *)(void *)"?";
;;;332    #endif
;;;333                     pcp                   = (INT8U)(pevent->OSEventCnt >> 8u);
;;;334                     if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;335                         OSTCBPrioTbl[pcp] = (OS_TCB *)0;      /* Free up the PCP                          */
;;;336                     }
;;;337                     pevent->OSEventType   = OS_EVENT_TYPE_UNUSED;
;;;338                     pevent->OSEventPtr    = OSEventFreeList;  /* Return Event Control Block to free list  */
;;;339                     pevent->OSEventCnt    = 0u;
;;;340                     OSEventFreeList       = pevent;
;;;341                     OS_EXIT_CRITICAL();
;;;342                     *perr                 = OS_ERR_NONE;
;;;343                     pevent_return         = (OS_EVENT *)0;    /* Mutex has been deleted                   */
;;;344                 } else {
;;;345                     OS_EXIT_CRITICAL();
;;;346                     *perr                 = OS_ERR_TASK_WAITING;
;;;347                     pevent_return         = pevent;
;;;348                 }
;;;349                 break;
;;;350    
;;;351            case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
;;;352                 pcp  = (INT8U)(pevent->OSEventCnt >> 8u);                       /* Get PCP of mutex       */
;;;353                 if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;354                     prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8); /* Get owner's orig prio  */
;;;355                     ptcb = (OS_TCB *)pevent->OSEventPtr;
;;;356                     if (ptcb != (OS_TCB *)0) {                /* See if any task owns the mutex           */
;;;357                         if (ptcb->OSTCBPrio == pcp) {         /* See if original prio was changed         */
;;;358                             OSMutex_RdyAtPrio(ptcb, prio);    /* Yes, Restore the task's original prio    */
;;;359                         }
;;;360                     }
;;;361                 }
;;;362                 while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mutex        */
;;;363                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
;;;364                 }
;;;365    #if OS_EVENT_NAME_EN > 0u
;;;366                 pevent->OSEventName   = (INT8U *)(void *)"?";
;;;367    #endif
;;;368                 pcp                   = (INT8U)(pevent->OSEventCnt >> 8u);
;;;369                 if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;370                     OSTCBPrioTbl[pcp] = (OS_TCB *)0;          /* Free up the PCP                          */
;;;371                 }
;;;372                 pevent->OSEventType   = OS_EVENT_TYPE_UNUSED;
;;;373                 pevent->OSEventPtr    = OSEventFreeList;      /* Return Event Control Block to free list  */
;;;374                 pevent->OSEventCnt    = 0u;
;;;375                 OSEventFreeList       = pevent;               /* Get next free event control block        */
;;;376                 OS_EXIT_CRITICAL();
;;;377                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;378                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;379                 }
;;;380                 *perr         = OS_ERR_NONE;
;;;381                 pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
;;;382                 break;
;;;383    
;;;384            default:
;;;385                 OS_EXIT_CRITICAL();
;;;386                 *perr         = OS_ERR_INVALID_OPT;
;;;387                 pevent_return = pevent;
;;;388                 break;
;;;389        }
;;;390        return (pevent_return);
;;;391    }
00001a  e8bd8ff8          POP      {r3-r11,pc}
                  |L3.30|
00001e  4841              LDR      r0,|L3.292|
000020  7800              LDRB     r0,[r0,#0]            ;317  ; OSIntNesting
000022  b118              CBZ      r0,|L3.44|
000024  200f              MOVS     r0,#0xf               ;318
000026  7030              STRB     r0,[r6,#0]            ;318
000028  4620              MOV      r0,r4                 ;319
00002a  e7f6              B        |L3.26|
                  |L3.44|
00002c  f7fffffe          BL       OS_CPU_SR_Save
000030  9000              STR      r0,[sp,#0]            ;321
000032  7aa0              LDRB     r0,[r4,#0xa]          ;322
000034  b110              CBZ      r0,|L3.60|
000036  f04f0801          MOV      r8,#1                 ;323
00003a  e001              B        |L3.64|
                  |L3.60|
00003c  f04f0800          MOV      r8,#0                 ;325
                  |L3.64|
000040  f1ba0f00          CMP      r10,#0                ;327
000044  d003              BEQ      |L3.78|
000046  f1ba0f01          CMP      r10,#1                ;327
00004a  d160              BNE      |L3.270|
00004c  e023              B        |L3.150|
                  |L3.78|
00004e  f1b80f00          CMP      r8,#0                 ;329
000052  d119              BNE      |L3.136|
000054  a034              ADR      r0,|L3.296|
000056  6120              STR      r0,[r4,#0x10]         ;331
000058  8920              LDRH     r0,[r4,#8]            ;333
00005a  1205              ASRS     r5,r0,#8              ;333
00005c  2dff              CMP      r5,#0xff              ;334
00005e  d003              BEQ      |L3.104|
000060  2000              MOVS     r0,#0                 ;335
000062  4932              LDR      r1,|L3.300|
000064  f8410025          STR      r0,[r1,r5,LSL #2]     ;335
                  |L3.104|
000068  2000              MOVS     r0,#0                 ;337
00006a  7020              STRB     r0,[r4,#0]            ;337
00006c  4830              LDR      r0,|L3.304|
00006e  6800              LDR      r0,[r0,#0]            ;338  ; OSEventFreeList
000070  6060              STR      r0,[r4,#4]            ;338
000072  2000              MOVS     r0,#0                 ;339
000074  8120              STRH     r0,[r4,#8]            ;339
000076  482e              LDR      r0,|L3.304|
000078  6004              STR      r4,[r0,#0]            ;340  ; OSEventFreeList
00007a  9800              LDR      r0,[sp,#0]            ;341
00007c  f7fffffe          BL       OS_CPU_SR_Restore
000080  2000              MOVS     r0,#0                 ;342
000082  7030              STRB     r0,[r6,#0]            ;342
000084  2700              MOVS     r7,#0                 ;343
000086  e005              B        |L3.148|
                  |L3.136|
000088  9800              LDR      r0,[sp,#0]            ;345
00008a  f7fffffe          BL       OS_CPU_SR_Restore
00008e  2049              MOVS     r0,#0x49              ;346
000090  7030              STRB     r0,[r6,#0]            ;346
000092  4627              MOV      r7,r4                 ;347
                  |L3.148|
000094  e042              B        |L3.284|
                  |L3.150|
000096  8920              LDRH     r0,[r4,#8]            ;352
000098  1205              ASRS     r5,r0,#8              ;352
00009a  2dff              CMP      r5,#0xff              ;353
00009c  d00e              BEQ      |L3.188|
00009e  f894b008          LDRB     r11,[r4,#8]           ;354
0000a2  f8d49004          LDR      r9,[r4,#4]            ;355
0000a6  f1b90f00          CMP      r9,#0                 ;356
0000aa  d007              BEQ      |L3.188|
0000ac  f8990036          LDRB     r0,[r9,#0x36]         ;357
0000b0  42a8              CMP      r0,r5                 ;357
0000b2  d103              BNE      |L3.188|
0000b4  4659              MOV      r1,r11                ;358
0000b6  4648              MOV      r0,r9                 ;358
0000b8  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L3.188|
0000bc  e005              B        |L3.202|
                  |L3.190|
0000be  2300              MOVS     r3,#0                 ;363
0000c0  2210              MOVS     r2,#0x10              ;363
0000c2  4619              MOV      r1,r3                 ;363
0000c4  4620              MOV      r0,r4                 ;363
0000c6  f7fffffe          BL       OS_EventTaskRdy
                  |L3.202|
0000ca  7aa0              LDRB     r0,[r4,#0xa]          ;362
0000cc  2800              CMP      r0,#0                 ;362
0000ce  d1f6              BNE      |L3.190|
0000d0  a015              ADR      r0,|L3.296|
0000d2  6120              STR      r0,[r4,#0x10]         ;366
0000d4  8920              LDRH     r0,[r4,#8]            ;368
0000d6  1205              ASRS     r5,r0,#8              ;368
0000d8  2dff              CMP      r5,#0xff              ;369
0000da  d003              BEQ      |L3.228|
0000dc  2000              MOVS     r0,#0                 ;370
0000de  4913              LDR      r1,|L3.300|
0000e0  f8410025          STR      r0,[r1,r5,LSL #2]     ;370
                  |L3.228|
0000e4  2000              MOVS     r0,#0                 ;372
0000e6  7020              STRB     r0,[r4,#0]            ;372
0000e8  4811              LDR      r0,|L3.304|
0000ea  6800              LDR      r0,[r0,#0]            ;373  ; OSEventFreeList
0000ec  6060              STR      r0,[r4,#4]            ;373
0000ee  2000              MOVS     r0,#0                 ;374
0000f0  8120              STRH     r0,[r4,#8]            ;374
0000f2  480f              LDR      r0,|L3.304|
0000f4  6004              STR      r4,[r0,#0]            ;375  ; OSEventFreeList
0000f6  9800              LDR      r0,[sp,#0]            ;376
0000f8  f7fffffe          BL       OS_CPU_SR_Restore
0000fc  f1b80f01          CMP      r8,#1                 ;377
000100  d101              BNE      |L3.262|
000102  f7fffffe          BL       OS_Sched
                  |L3.262|
000106  2000              MOVS     r0,#0                 ;380
000108  7030              STRB     r0,[r6,#0]            ;380
00010a  2700              MOVS     r7,#0                 ;381
00010c  e006              B        |L3.284|
                  |L3.270|
00010e  9800              LDR      r0,[sp,#0]            ;385
000110  f7fffffe          BL       OS_CPU_SR_Restore
000114  2007              MOVS     r0,#7                 ;386
000116  7030              STRB     r0,[r6,#0]            ;386
000118  4627              MOV      r7,r4                 ;387
00011a  bf00              NOP                            ;388
                  |L3.284|
00011c  bf00              NOP                            ;349
00011e  4638              MOV      r0,r7                 ;390
000120  e77b              B        |L3.26|
;;;392    #endif
                          ENDP

000122  0000              DCW      0x0000
                  |L3.292|
                          DCD      OSIntNesting
                  |L3.296|
000128  3f00              DCB      "?",0
00012a  00                DCB      0
00012b  00                DCB      0
                  |L3.300|
                          DCD      OSTCBPrioTbl
                  |L3.304|
                          DCD      OSEventFreeList

                          AREA ||i.OSMutexPend||, CODE, READONLY, ALIGN=2

                  OSMutexPend PROC
;;;434    
;;;435    void  OSMutexPend (OS_EVENT  *pevent,
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;436                       INT32U     timeout,
;;;437                       INT8U     *perr)
;;;438    {
000004  b082              SUB      sp,sp,#8
000006  4605              MOV      r5,r0
000008  4617              MOV      r7,r2
;;;439        INT8U      pcp;                                        /* Priority Ceiling Priority (PCP)          */
;;;440        INT8U      mprio;                                      /* Mutex owner priority                     */
;;;441        BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
;;;442        OS_TCB    *ptcb;
;;;443        OS_EVENT  *pevent2;
;;;444        INT8U      y;
;;;445    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;446        OS_CPU_SR  cpu_sr = 0u;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;447    #endif
;;;448    
;;;449    
;;;450    
;;;451    #ifdef OS_SAFETY_CRITICAL
;;;452        if (perr == (INT8U *)0) {
;;;453            OS_SAFETY_CRITICAL_EXCEPTION();
;;;454            return;
;;;455        }
;;;456    #endif
;;;457    
;;;458    #if OS_ARG_CHK_EN > 0u
;;;459        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;460            *perr = OS_ERR_PEVENT_NULL;
;;;461            return;
;;;462        }
;;;463    #endif
;;;464        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
00000e  7828              LDRB     r0,[r5,#0]
000010  2804              CMP      r0,#4
000012  d004              BEQ      |L4.30|
;;;465            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7038              STRB     r0,[r7,#0]
                  |L4.24|
;;;466            return;
;;;467        }
;;;468        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;469            *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
;;;470            return;
;;;471        }
;;;472        if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
;;;473            *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
;;;474            return;
;;;475        }
;;;476    /*$PAGE*/
;;;477        OS_ENTER_CRITICAL();
;;;478        pcp = (INT8U)(pevent->OSEventCnt >> 8u);               /* Get PCP from mutex                       */
;;;479                                                               /* Is Mutex available?                      */
;;;480        if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;481            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
;;;482            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
;;;483            pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
;;;484            if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
;;;485                (OSTCBCur->OSTCBPrio <= pcp)) {                /*      PCP 'must' have a SMALLER prio ...  */
;;;486                 OS_EXIT_CRITICAL();                           /*      ... than current task!              */
;;;487                *perr = OS_ERR_PCP_LOWER;
;;;488            } else {
;;;489                 OS_EXIT_CRITICAL();
;;;490                *perr = OS_ERR_NONE;
;;;491            }
;;;492            return;
;;;493        }
;;;494        if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;495            mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8); /*  Get priority of mutex owner   */
;;;496            ptcb  = (OS_TCB *)(pevent->OSEventPtr);                   /*     Point to TCB of mutex owner   */
;;;497            if (ptcb->OSTCBPrio > pcp) {                              /*     Need to promote prio of owner?*/
;;;498                if (mprio > OSTCBCur->OSTCBPrio) {
;;;499                    y = ptcb->OSTCBY;
;;;500                    if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0u) {      /*     See if mutex owner is ready   */
;;;501                        OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;     /*     Yes, Remove owner from Rdy ...*/
;;;502                        if (OSRdyTbl[y] == 0u) {                      /*          ... list at current prio */
;;;503                            OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;504                        }
;;;505                        rdy = OS_TRUE;
;;;506                    } else {
;;;507                        pevent2 = ptcb->OSTCBEventPtr;
;;;508                        if (pevent2 != (OS_EVENT *)0) {               /* Remove from event wait list       */
;;;509                            y = ptcb->OSTCBY;
;;;510                            pevent2->OSEventTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
;;;511                            if (pevent2->OSEventTbl[y] == 0u) {
;;;512                                pevent2->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;513                            }
;;;514                        }
;;;515                        rdy = OS_FALSE;                        /* No                                       */
;;;516                    }
;;;517                    ptcb->OSTCBPrio = pcp;                     /* Change owner task prio to PCP            */
;;;518    #if OS_LOWEST_PRIO <= 63u
;;;519                    ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3u);
;;;520                    ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07u);
;;;521    #else
;;;522                    ptcb->OSTCBY    = (INT8U)((INT8U)(ptcb->OSTCBPrio >> 4u) & 0xFFu);
;;;523                    ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0Fu);
;;;524    #endif
;;;525                    ptcb->OSTCBBitY = (OS_PRIO)(1uL << ptcb->OSTCBY);
;;;526                    ptcb->OSTCBBitX = (OS_PRIO)(1uL << ptcb->OSTCBX);
;;;527    
;;;528                    if (rdy == OS_TRUE) {                      /* If task was ready at owner's priority ...*/
;;;529                        OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.   */
;;;530                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;531                    } else {
;;;532                        pevent2 = ptcb->OSTCBEventPtr;
;;;533                        if (pevent2 != (OS_EVENT *)0) {        /* Add to event wait list                   */
;;;534                            pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
;;;535                            pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;536                        }
;;;537                    }
;;;538                    OSTCBPrioTbl[pcp] = ptcb;
;;;539                }
;;;540            }
;;;541        }
;;;542        OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
;;;543        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;544        OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
;;;545        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;546        OS_EXIT_CRITICAL();
;;;547        OS_Sched();                                       /* Find next highest priority task ready         */
;;;548        OS_ENTER_CRITICAL();
;;;549        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;550            case OS_STAT_PEND_OK:
;;;551                 *perr = OS_ERR_NONE;
;;;552                 break;
;;;553    
;;;554            case OS_STAT_PEND_ABORT:
;;;555                 *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
;;;556                 break;
;;;557    
;;;558            case OS_STAT_PEND_TO:
;;;559            default:
;;;560                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;561                 *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
;;;562                 break;
;;;563        }
;;;564        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;565        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;566        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;567    #if (OS_EVENT_MULTI_EN > 0u)
;;;568        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;569    #endif
;;;570        OS_EXIT_CRITICAL();
;;;571    }
000018  b005              ADD      sp,sp,#0x14
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.30|
00001e  4889              LDR      r0,|L4.580|
000020  7800              LDRB     r0,[r0,#0]            ;468  ; OSIntNesting
000022  b110              CBZ      r0,|L4.42|
000024  2002              MOVS     r0,#2                 ;469
000026  7038              STRB     r0,[r7,#0]            ;469
000028  e7f6              B        |L4.24|
                  |L4.42|
00002a  4887              LDR      r0,|L4.584|
00002c  7800              LDRB     r0,[r0,#0]            ;472  ; OSLockNesting
00002e  b110              CBZ      r0,|L4.54|
000030  200d              MOVS     r0,#0xd               ;473
000032  7038              STRB     r0,[r7,#0]            ;473
000034  e7f0              B        |L4.24|
                  |L4.54|
000036  f7fffffe          BL       OS_CPU_SR_Save
00003a  9001              STR      r0,[sp,#4]            ;477
00003c  8928              LDRH     r0,[r5,#8]            ;478
00003e  ea4f2920          ASR      r9,r0,#8              ;478
000042  7a28              LDRB     r0,[r5,#8]            ;480
000044  28ff              CMP      r0,#0xff              ;480
000046  d122              BNE      |L4.142|
000048  8928              LDRH     r0,[r5,#8]            ;481
00004a  f400407f          AND      r0,r0,#0xff00         ;481
00004e  8128              STRH     r0,[r5,#8]            ;481
000050  8928              LDRH     r0,[r5,#8]            ;482
000052  497e              LDR      r1,|L4.588|
000054  6809              LDR      r1,[r1,#0]            ;482  ; OSTCBCur
000056  f8911036          LDRB     r1,[r1,#0x36]         ;482
00005a  4308              ORRS     r0,r0,r1              ;482
00005c  8128              STRH     r0,[r5,#8]            ;482
00005e  487b              LDR      r0,|L4.588|
000060  6800              LDR      r0,[r0,#0]            ;483  ; OSTCBCur
000062  6068              STR      r0,[r5,#4]            ;483
000064  f1b90fff          CMP      r9,#0xff              ;484
000068  d00b              BEQ      |L4.130|
00006a  4878              LDR      r0,|L4.588|
00006c  6800              LDR      r0,[r0,#0]            ;485  ; OSTCBCur
00006e  f8900036          LDRB     r0,[r0,#0x36]         ;485
000072  4548              CMP      r0,r9                 ;485
000074  dc05              BGT      |L4.130|
000076  9801              LDR      r0,[sp,#4]            ;486
000078  f7fffffe          BL       OS_CPU_SR_Restore
00007c  2078              MOVS     r0,#0x78              ;487
00007e  7038              STRB     r0,[r7,#0]            ;487
000080  e004              B        |L4.140|
                  |L4.130|
000082  9801              LDR      r0,[sp,#4]            ;489
000084  f7fffffe          BL       OS_CPU_SR_Restore
000088  2000              MOVS     r0,#0                 ;490
00008a  7038              STRB     r0,[r7,#0]            ;490
                  |L4.140|
00008c  e7c4              B        |L4.24|
                  |L4.142|
00008e  f1b90fff          CMP      r9,#0xff              ;494
000092  d070              BEQ      |L4.374|
000094  f895b008          LDRB     r11,[r5,#8]           ;495
000098  686c              LDR      r4,[r5,#4]            ;496
00009a  f8940036          LDRB     r0,[r4,#0x36]         ;497
00009e  4548              CMP      r0,r9                 ;497
0000a0  dd69              BLE      |L4.374|
0000a2  486a              LDR      r0,|L4.588|
0000a4  6800              LDR      r0,[r0,#0]            ;498  ; OSTCBCur
0000a6  f8900036          LDRB     r0,[r0,#0x36]         ;498
0000aa  4558              CMP      r0,r11                ;498
0000ac  da7c              BGE      |L4.424|
0000ae  f8948038          LDRB     r8,[r4,#0x38]         ;499
0000b2  4867              LDR      r0,|L4.592|
0000b4  f8100008          LDRB     r0,[r0,r8]            ;500
0000b8  f8941039          LDRB     r1,[r4,#0x39]         ;500
0000bc  4208              TST      r0,r1                 ;500
0000be  d016              BEQ      |L4.238|
0000c0  4863              LDR      r0,|L4.592|
0000c2  f8100008          LDRB     r0,[r0,r8]            ;501
0000c6  f8941039          LDRB     r1,[r4,#0x39]         ;501
0000ca  4388              BICS     r0,r0,r1              ;501
0000cc  4960              LDR      r1,|L4.592|
0000ce  f8010008          STRB     r0,[r1,r8]            ;501
0000d2  4608              MOV      r0,r1                 ;502
0000d4  f8100008          LDRB     r0,[r0,r8]            ;502
0000d8  b930              CBNZ     r0,|L4.232|
0000da  f894103a          LDRB     r1,[r4,#0x3a]         ;503
0000de  485d              LDR      r0,|L4.596|
0000e0  7800              LDRB     r0,[r0,#0]            ;503  ; OSRdyGrp
0000e2  4388              BICS     r0,r0,r1              ;503
0000e4  495b              LDR      r1,|L4.596|
0000e6  7008              STRB     r0,[r1,#0]            ;503
                  |L4.232|
0000e8  f04f0a01          MOV      r10,#1                ;505
0000ec  e019              B        |L4.290|
                  |L4.238|
0000ee  69e6              LDR      r6,[r4,#0x1c]         ;507
0000f0  b1ae              CBZ      r6,|L4.286|
0000f2  f8948038          LDRB     r8,[r4,#0x38]         ;509
0000f6  f106000b          ADD      r0,r6,#0xb            ;510
0000fa  f8100008          LDRB     r0,[r0,r8]            ;510
0000fe  f8941039          LDRB     r1,[r4,#0x39]         ;510
000102  4388              BICS     r0,r0,r1              ;510
000104  f106010b          ADD      r1,r6,#0xb            ;510
000108  f8010008          STRB     r0,[r1,r8]            ;510
00010c  4608              MOV      r0,r1                 ;511
00010e  f8100008          LDRB     r0,[r0,r8]            ;511
000112  b920              CBNZ     r0,|L4.286|
000114  7ab0              LDRB     r0,[r6,#0xa]          ;512
000116  f894103a          LDRB     r1,[r4,#0x3a]         ;512
00011a  4388              BICS     r0,r0,r1              ;512
00011c  72b0              STRB     r0,[r6,#0xa]          ;512
                  |L4.286|
00011e  f04f0a00          MOV      r10,#0                ;515
                  |L4.290|
000122  f8049f36          STRB     r9,[r4,#0x36]!        ;517
000126  7820              LDRB     r0,[r4,#0]            ;519
000128  10c0              ASRS     r0,r0,#3              ;519
00012a  70a0              STRB     r0,[r4,#2]            ;519
00012c  7820              LDRB     r0,[r4,#0]            ;520
00012e  f0000007          AND      r0,r0,#7              ;520
000132  7060              STRB     r0,[r4,#1]            ;520
000134  78a1              LDRB     r1,[r4,#2]            ;525
000136  2001              MOVS     r0,#1                 ;525
000138  4088              LSLS     r0,r0,r1              ;525
00013a  7120              STRB     r0,[r4,#4]            ;525
00013c  7861              LDRB     r1,[r4,#1]            ;526
00013e  2001              MOVS     r0,#1                 ;526
000140  4088              LSLS     r0,r0,r1              ;526
000142  70e0              STRB     r0,[r4,#3]            ;526
000144  f1a40436          SUB      r4,r4,#0x36           ;526
000148  f1ba0f01          CMP      r10,#1                ;528
00014c  d114              BNE      |L4.376|
00014e  f1040438          ADD      r4,r4,#0x38           ;529
000152  78a0              LDRB     r0,[r4,#2]            ;529
000154  493f              LDR      r1,|L4.596|
000156  7809              LDRB     r1,[r1,#0]            ;529  ; OSRdyGrp
000158  ea400001          ORR      r0,r0,r1              ;529
00015c  493d              LDR      r1,|L4.596|
00015e  7008              STRB     r0,[r1,#0]            ;529
000160  7820              LDRB     r0,[r4,#0]            ;530
000162  493b              LDR      r1,|L4.592|
000164  5c08              LDRB     r0,[r1,r0]            ;530
000166  7861              LDRB     r1,[r4,#1]            ;530
000168  ea400001          ORR      r0,r0,r1              ;530
00016c  f8141938          LDRB     r1,[r4],#-0x38        ;530
000170  4a37              LDR      r2,|L4.592|
000172  5450              STRB     r0,[r2,r1]            ;530
000174  e015              B        |L4.418|
                  |L4.374|
000176  e017              B        |L4.424|
                  |L4.376|
000178  69e6              LDR      r6,[r4,#0x1c]         ;532
00017a  b196              CBZ      r6,|L4.418|
00017c  7ab0              LDRB     r0,[r6,#0xa]          ;534
00017e  f1040438          ADD      r4,r4,#0x38           ;534
000182  78a1              LDRB     r1,[r4,#2]            ;534
000184  ea400001          ORR      r0,r0,r1              ;534
000188  72b0              STRB     r0,[r6,#0xa]          ;534
00018a  7821              LDRB     r1,[r4,#0]            ;535
00018c  f106000b          ADD      r0,r6,#0xb            ;535
000190  5c40              LDRB     r0,[r0,r1]            ;535
000192  7861              LDRB     r1,[r4,#1]            ;535
000194  ea400001          ORR      r0,r0,r1              ;535
000198  f8142938          LDRB     r2,[r4],#-0x38        ;535
00019c  f106010b          ADD      r1,r6,#0xb            ;535
0001a0  5488              STRB     r0,[r1,r2]            ;535
                  |L4.418|
0001a2  482d              LDR      r0,|L4.600|
0001a4  f8404029          STR      r4,[r0,r9,LSL #2]     ;538
                  |L4.424|
0001a8  4828              LDR      r0,|L4.588|
0001aa  6800              LDR      r0,[r0,#0]            ;542  ; OSTCBCur
0001ac  f8900034          LDRB     r0,[r0,#0x34]         ;542
0001b0  f0400010          ORR      r0,r0,#0x10           ;542
0001b4  4925              LDR      r1,|L4.588|
0001b6  6809              LDR      r1,[r1,#0]            ;542  ; OSTCBCur
0001b8  f8810034          STRB     r0,[r1,#0x34]         ;542
0001bc  f04f0000          MOV      r0,#0                 ;543
0001c0  4922              LDR      r1,|L4.588|
0001c2  6809              LDR      r1,[r1,#0]            ;543  ; OSTCBCur
0001c4  f8810035          STRB     r0,[r1,#0x35]         ;543
0001c8  4920              LDR      r1,|L4.588|
0001ca  9803              LDR      r0,[sp,#0xc]          ;544
0001cc  6809              LDR      r1,[r1,#0]            ;544  ; OSTCBCur
0001ce  6308              STR      r0,[r1,#0x30]         ;544
0001d0  4628              MOV      r0,r5                 ;545
0001d2  f7fffffe          BL       OS_EventTaskWait
0001d6  9801              LDR      r0,[sp,#4]            ;546
0001d8  f7fffffe          BL       OS_CPU_SR_Restore
0001dc  f7fffffe          BL       OS_Sched
0001e0  f7fffffe          BL       OS_CPU_SR_Save
0001e4  9001              STR      r0,[sp,#4]            ;548
0001e6  4819              LDR      r0,|L4.588|
0001e8  6800              LDR      r0,[r0,#0]            ;549  ; OSTCBCur
0001ea  f8900035          LDRB     r0,[r0,#0x35]         ;549
0001ee  b120              CBZ      r0,|L4.506|
0001f0  2801              CMP      r0,#1                 ;549
0001f2  d009              BEQ      |L4.520|
0001f4  2802              CMP      r0,#2                 ;549
0001f6  d106              BNE      |L4.518|
0001f8  e002              B        |L4.512|
                  |L4.506|
0001fa  2000              MOVS     r0,#0                 ;551
0001fc  7038              STRB     r0,[r7,#0]            ;551
0001fe  e00b              B        |L4.536|
                  |L4.512|
000200  200e              MOVS     r0,#0xe               ;555
000202  7038              STRB     r0,[r7,#0]            ;555
000204  e008              B        |L4.536|
                  |L4.518|
000206  bf00              NOP                            ;558
                  |L4.520|
000208  4629              MOV      r1,r5                 ;560
00020a  4810              LDR      r0,|L4.588|
00020c  6800              LDR      r0,[r0,#0]            ;560  ; OSTCBCur
00020e  f7fffffe          BL       OS_EventTaskRemove
000212  200a              MOVS     r0,#0xa               ;561
000214  7038              STRB     r0,[r7,#0]            ;561
000216  bf00              NOP                            ;562
                  |L4.536|
000218  bf00              NOP                            ;552
00021a  2000              MOVS     r0,#0                 ;564
00021c  490b              LDR      r1,|L4.588|
00021e  6809              LDR      r1,[r1,#0]            ;564  ; OSTCBCur
000220  f8810034          STRB     r0,[r1,#0x34]         ;564
000224  4909              LDR      r1,|L4.588|
000226  6809              LDR      r1,[r1,#0]            ;565  ; OSTCBCur
000228  f8810035          STRB     r0,[r1,#0x35]         ;565
00022c  4907              LDR      r1,|L4.588|
00022e  6809              LDR      r1,[r1,#0]            ;566  ; OSTCBCur
000230  61c8              STR      r0,[r1,#0x1c]         ;566
000232  4906              LDR      r1,|L4.588|
000234  6809              LDR      r1,[r1,#0]            ;568  ; OSTCBCur
000236  6208              STR      r0,[r1,#0x20]         ;568
000238  9801              LDR      r0,[sp,#4]            ;570
00023a  f7fffffe          BL       OS_CPU_SR_Restore
00023e  bf00              NOP      
000240  e6ea              B        |L4.24|
;;;572    /*$PAGE*/
                          ENDP

000242  0000              DCW      0x0000
                  |L4.580|
                          DCD      OSIntNesting
                  |L4.584|
                          DCD      OSLockNesting
                  |L4.588|
                          DCD      OSTCBCur
                  |L4.592|
                          DCD      OSRdyTbl
                  |L4.596|
                          DCD      OSRdyGrp
                  |L4.600|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSMutexPost||, CODE, READONLY, ALIGN=2

                  OSMutexPost PROC
;;;596    
;;;597    INT8U  OSMutexPost (OS_EVENT *pevent)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;598    {
000004  4604              MOV      r4,r0
;;;599        INT8U      pcp;                                   /* Priority ceiling priority                     */
;;;600        INT8U      prio;
;;;601    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;602        OS_CPU_SR  cpu_sr = 0u;
000006  2700              MOVS     r7,#0
;;;603    #endif
;;;604    
;;;605    
;;;606    
;;;607        if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
000008  482e              LDR      r0,|L5.196|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000c  b110              CBZ      r0,|L5.20|
;;;608            return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
00000e  2005              MOVS     r0,#5
                  |L5.16|
;;;609        }
;;;610    #if OS_ARG_CHK_EN > 0u
;;;611        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;612            return (OS_ERR_PEVENT_NULL);
;;;613        }
;;;614    #endif
;;;615        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
;;;616            return (OS_ERR_EVENT_TYPE);
;;;617        }
;;;618        OS_ENTER_CRITICAL();
;;;619        pcp  = (INT8U)(pevent->OSEventCnt >> 8u);         /* Get priority ceiling priority of mutex        */
;;;620        prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
;;;621        if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
;;;622            OS_EXIT_CRITICAL();
;;;623            return (OS_ERR_NOT_MUTEX_OWNER);
;;;624        }
;;;625        if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;626            if (OSTCBCur->OSTCBPrio == pcp) {             /* Did we have to raise current task's priority? */
;;;627                OSMutex_RdyAtPrio(OSTCBCur, prio);        /* Restore the task's original priority          */
;;;628            }
;;;629            OSTCBPrioTbl[pcp] = OS_TCB_RESERVED;          /* Reserve table entry                           */
;;;630        }
;;;631        if (pevent->OSEventGrp != 0u) {                   /* Any task waiting for the mutex?               */
;;;632                                                          /* Yes, Make HPT waiting for mutex ready         */
;;;633            prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
;;;634            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
;;;635            pevent->OSEventCnt |= prio;
;;;636            pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
;;;637            if ((pcp  != OS_PRIO_MUTEX_CEIL_DIS) &&
;;;638                (prio <= pcp)) {                          /*      PCP 'must' have a SMALLER prio ...       */
;;;639                OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
;;;640                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;641                return (OS_ERR_PCP_LOWER);
;;;642            } else {
;;;643                OS_EXIT_CRITICAL();
;;;644                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;645                return (OS_ERR_NONE);
;;;646            }
;;;647        }
;;;648        pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
;;;649        pevent->OSEventPtr  = (void *)0;
;;;650        OS_EXIT_CRITICAL();
;;;651        return (OS_ERR_NONE);
;;;652    }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L5.20|
000014  7820              LDRB     r0,[r4,#0]            ;615
000016  2804              CMP      r0,#4                 ;615
000018  d001              BEQ      |L5.30|
00001a  2001              MOVS     r0,#1                 ;616
00001c  e7f8              B        |L5.16|
                  |L5.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4607              MOV      r7,r0                 ;618
000024  8920              LDRH     r0,[r4,#8]            ;619
000026  1205              ASRS     r5,r0,#8              ;619
000028  7a26              LDRB     r6,[r4,#8]            ;620
00002a  4927              LDR      r1,|L5.200|
00002c  6860              LDR      r0,[r4,#4]            ;621
00002e  6809              LDR      r1,[r1,#0]            ;621  ; OSTCBCur
000030  4288              CMP      r0,r1                 ;621
000032  d004              BEQ      |L5.62|
000034  4638              MOV      r0,r7                 ;622
000036  f7fffffe          BL       OS_CPU_SR_Restore
00003a  2064              MOVS     r0,#0x64              ;623
00003c  e7e8              B        |L5.16|
                  |L5.62|
00003e  2dff              CMP      r5,#0xff              ;625
000040  d00e              BEQ      |L5.96|
000042  4821              LDR      r0,|L5.200|
000044  6800              LDR      r0,[r0,#0]            ;626  ; OSTCBCur
000046  f8900036          LDRB     r0,[r0,#0x36]         ;626
00004a  42a8              CMP      r0,r5                 ;626
00004c  d104              BNE      |L5.88|
00004e  4631              MOV      r1,r6                 ;627
000050  481d              LDR      r0,|L5.200|
000052  6800              LDR      r0,[r0,#0]            ;627  ; OSTCBCur
000054  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L5.88|
000058  2001              MOVS     r0,#1                 ;629
00005a  491c              LDR      r1,|L5.204|
00005c  f8410025          STR      r0,[r1,r5,LSL #2]     ;629
                  |L5.96|
000060  7aa0              LDRB     r0,[r4,#0xa]          ;631
000062  b318              CBZ      r0,|L5.172|
000064  2300              MOVS     r3,#0                 ;633
000066  2210              MOVS     r2,#0x10              ;633
000068  4619              MOV      r1,r3                 ;633
00006a  4620              MOV      r0,r4                 ;633
00006c  f7fffffe          BL       OS_EventTaskRdy
000070  4606              MOV      r6,r0                 ;633
000072  8920              LDRH     r0,[r4,#8]            ;634
000074  f400407f          AND      r0,r0,#0xff00         ;634
000078  8120              STRH     r0,[r4,#8]            ;634
00007a  8920              LDRH     r0,[r4,#8]            ;635
00007c  4330              ORRS     r0,r0,r6              ;635
00007e  8120              STRH     r0,[r4,#8]            ;635
000080  4812              LDR      r0,|L5.204|
000082  f8500026          LDR      r0,[r0,r6,LSL #2]     ;636
000086  6060              STR      r0,[r4,#4]            ;636
000088  2dff              CMP      r5,#0xff              ;637
00008a  d008              BEQ      |L5.158|
00008c  42ae              CMP      r6,r5                 ;638
00008e  dc06              BGT      |L5.158|
000090  4638              MOV      r0,r7                 ;639
000092  f7fffffe          BL       OS_CPU_SR_Restore
000096  f7fffffe          BL       OS_Sched
00009a  2078              MOVS     r0,#0x78              ;641
00009c  e7b8              B        |L5.16|
                  |L5.158|
00009e  4638              MOV      r0,r7                 ;643
0000a0  f7fffffe          BL       OS_CPU_SR_Restore
0000a4  f7fffffe          BL       OS_Sched
0000a8  2000              MOVS     r0,#0                 ;645
0000aa  e7b1              B        |L5.16|
                  |L5.172|
0000ac  8920              LDRH     r0,[r4,#8]            ;648
0000ae  f04000ff          ORR      r0,r0,#0xff           ;648
0000b2  8120              STRH     r0,[r4,#8]            ;648
0000b4  2000              MOVS     r0,#0                 ;649
0000b6  6060              STR      r0,[r4,#4]            ;649
0000b8  4638              MOV      r0,r7                 ;650
0000ba  f7fffffe          BL       OS_CPU_SR_Restore
0000be  2000              MOVS     r0,#0                 ;651
0000c0  e7a6              B        |L5.16|
;;;653    /*$PAGE*/
                          ENDP

0000c2  0000              DCW      0x0000
                  |L5.196|
                          DCD      OSIntNesting
                  |L5.200|
                          DCD      OSTCBCur
                  |L5.204|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSMutexQuery||, CODE, READONLY, ALIGN=2

                  OSMutexQuery PROC
;;;672    #if OS_MUTEX_QUERY_EN > 0u
;;;673    INT8U  OSMutexQuery (OS_EVENT       *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;674                         OS_MUTEX_DATA  *p_mutex_data)
;;;675    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;676        INT8U       i;
;;;677        OS_PRIO    *psrc;
;;;678        OS_PRIO    *pdest;
;;;679    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;680        OS_CPU_SR   cpu_sr = 0u;
000008  f04f0900          MOV      r9,#0
;;;681    #endif
;;;682    
;;;683    
;;;684    
;;;685        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
00000c  4817              LDR      r0,|L6.108|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000010  b110              CBZ      r0,|L6.24|
;;;686            return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
000012  2006              MOVS     r0,#6
                  |L6.20|
;;;687        }
;;;688    #if OS_ARG_CHK_EN > 0u
;;;689        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;690            return (OS_ERR_PEVENT_NULL);
;;;691        }
;;;692        if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
;;;693            return (OS_ERR_PDATA_NULL);
;;;694        }
;;;695    #endif
;;;696        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
;;;697            return (OS_ERR_EVENT_TYPE);
;;;698        }
;;;699        OS_ENTER_CRITICAL();
;;;700        p_mutex_data->OSMutexPCP  = (INT8U)(pevent->OSEventCnt >> 8u);
;;;701        p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
;;;702        if (p_mutex_data->OSOwnerPrio == 0xFFu) {
;;;703            p_mutex_data->OSValue = OS_TRUE;
;;;704        } else {
;;;705            p_mutex_data->OSValue = OS_FALSE;
;;;706        }
;;;707        p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
;;;708        psrc                      = &pevent->OSEventTbl[0];
;;;709        pdest                     = &p_mutex_data->OSEventTbl[0];
;;;710        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
;;;711            *pdest++ = *psrc++;
;;;712        }
;;;713        OS_EXIT_CRITICAL();
;;;714        return (OS_ERR_NONE);
;;;715    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L6.24|
000018  7828              LDRB     r0,[r5,#0]            ;696
00001a  2804              CMP      r0,#4                 ;696
00001c  d001              BEQ      |L6.34|
00001e  2001              MOVS     r0,#1                 ;697
000020  e7f8              B        |L6.20|
                  |L6.34|
000022  f7fffffe          BL       OS_CPU_SR_Save
000026  4681              MOV      r9,r0                 ;699
000028  8928              LDRH     r0,[r5,#8]            ;700
00002a  1200              ASRS     r0,r0,#8              ;700
00002c  71e0              STRB     r0,[r4,#7]            ;700
00002e  7a28              LDRB     r0,[r5,#8]            ;701
000030  71a0              STRB     r0,[r4,#6]            ;701
000032  79a0              LDRB     r0,[r4,#6]            ;702
000034  28ff              CMP      r0,#0xff              ;702
000036  d102              BNE      |L6.62|
000038  2001              MOVS     r0,#1                 ;703
00003a  7160              STRB     r0,[r4,#5]            ;703
00003c  e001              B        |L6.66|
                  |L6.62|
00003e  2000              MOVS     r0,#0                 ;705
000040  7160              STRB     r0,[r4,#5]            ;705
                  |L6.66|
000042  7aa8              LDRB     r0,[r5,#0xa]          ;707
000044  7120              STRB     r0,[r4,#4]            ;707
000046  f105080b          ADD      r8,r5,#0xb            ;708
00004a  4626              MOV      r6,r4                 ;709
00004c  2700              MOVS     r7,#0                 ;710
00004e  e005              B        |L6.92|
                  |L6.80|
000050  f8180b01          LDRB     r0,[r8],#1            ;711
000054  f8060b01          STRB     r0,[r6],#1            ;711
000058  1c78              ADDS     r0,r7,#1              ;710
00005a  b2c7              UXTB     r7,r0                 ;710
                  |L6.92|
00005c  2f04              CMP      r7,#4                 ;710
00005e  d3f7              BCC      |L6.80|
000060  4648              MOV      r0,r9                 ;713
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  2000              MOVS     r0,#0                 ;714
000068  e7d4              B        |L6.20|
;;;716    #endif                                                     /* OS_MUTEX_QUERY_EN                        */
                          ENDP

00006a  0000              DCW      0x0000
                  |L6.108|
                          DCD      OSIntNesting

                          AREA ||i.OSMutex_RdyAtPrio||, CODE, READONLY, ALIGN=2

                  OSMutex_RdyAtPrio PROC
;;;732    
;;;733    static  void  OSMutex_RdyAtPrio (OS_TCB  *ptcb,
000000  b530              PUSH     {r4,r5,lr}
;;;734                                     INT8U    prio)
;;;735    {
;;;736        INT8U  y;
;;;737    
;;;738    
;;;739        y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pcp'    */
000002  f8902038          LDRB     r2,[r0,#0x38]
;;;740        OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
000006  4b1b              LDR      r3,|L7.116|
000008  5c9b              LDRB     r3,[r3,r2]
00000a  f8904039          LDRB     r4,[r0,#0x39]
00000e  43a3              BICS     r3,r3,r4
000010  4c18              LDR      r4,|L7.116|
000012  54a3              STRB     r3,[r4,r2]
;;;741        if (OSRdyTbl[y] == 0u) {
000014  4623              MOV      r3,r4
000016  5c9b              LDRB     r3,[r3,r2]
000018  b933              CBNZ     r3,|L7.40|
;;;742            OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
00001a  f890403a          LDRB     r4,[r0,#0x3a]
00001e  4b16              LDR      r3,|L7.120|
000020  781b              LDRB     r3,[r3,#0]  ; OSRdyGrp
000022  43a3              BICS     r3,r3,r4
000024  4c14              LDR      r4,|L7.120|
000026  7023              STRB     r3,[r4,#0]
                  |L7.40|
;;;743        }
;;;744        ptcb->OSTCBPrio         = prio;
000028  f8001f36          STRB     r1,[r0,#0x36]!
;;;745        OSPrioCur               = prio;                        /* The current task is now at this priority */
00002c  4b13              LDR      r3,|L7.124|
00002e  7019              STRB     r1,[r3,#0]
;;;746    #if OS_LOWEST_PRIO <= 63u
;;;747        ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 3u) & 0x07u);
000030  f3c103c2          UBFX     r3,r1,#3,#3
000034  7083              STRB     r3,[r0,#2]
;;;748        ptcb->OSTCBX            = (INT8U)(prio & 0x07u);
000036  f0010307          AND      r3,r1,#7
00003a  7043              STRB     r3,[r0,#1]
;;;749    #else
;;;750        ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 4u) & 0x0Fu);
;;;751        ptcb->OSTCBX            = (INT8U) (prio & 0x0Fu);
;;;752    #endif
;;;753        ptcb->OSTCBBitY         = (OS_PRIO)(1uL << ptcb->OSTCBY);
00003c  7884              LDRB     r4,[r0,#2]
00003e  2301              MOVS     r3,#1
000040  40a3              LSLS     r3,r3,r4
000042  7103              STRB     r3,[r0,#4]
;;;754        ptcb->OSTCBBitX         = (OS_PRIO)(1uL << ptcb->OSTCBX);
000044  7844              LDRB     r4,[r0,#1]
000046  2301              MOVS     r3,#1
000048  40a3              LSLS     r3,r3,r4
00004a  70c3              STRB     r3,[r0,#3]
;;;755        OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
00004c  7903              LDRB     r3,[r0,#4]
00004e  4c0a              LDR      r4,|L7.120|
000050  7824              LDRB     r4,[r4,#0]  ; OSRdyGrp
000052  4323              ORRS     r3,r3,r4
000054  4c08              LDR      r4,|L7.120|
000056  7023              STRB     r3,[r4,#0]
;;;756        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
000058  7883              LDRB     r3,[r0,#2]
00005a  4c06              LDR      r4,|L7.116|
00005c  5ce3              LDRB     r3,[r4,r3]
00005e  78c4              LDRB     r4,[r0,#3]
000060  4323              ORRS     r3,r3,r4
000062  7884              LDRB     r4,[r0,#2]
000064  f1a00036          SUB      r0,r0,#0x36
000068  4d02              LDR      r5,|L7.116|
00006a  552b              STRB     r3,[r5,r4]
;;;757        OSTCBPrioTbl[prio]      = ptcb;
00006c  4b04              LDR      r3,|L7.128|
00006e  f8430021          STR      r0,[r3,r1,LSL #2]
;;;758    }
000072  bd30              POP      {r4,r5,pc}
;;;759    
                          ENDP

                  |L7.116|
                          DCD      OSRdyTbl
                  |L7.120|
                          DCD      OSRdyGrp
                  |L7.124|
                          DCD      OSPrioCur
                  |L7.128|
                          DCD      OSTCBPrioTbl
