; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\bsp_ili9341_lcd.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\bsp_ili9341_lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\LCDDriver\bsp_ili9341_lcd.c]
                          THUMB

                          AREA ||i.Delay||, CODE, READONLY, ALIGN=1

                  Delay PROC
;;;183    */
;;;184    void Delay(__IO uint32_t nCount)
000000  b501              PUSH     {r0,lr}
;;;185    {
;;;186      for(; nCount != 0; nCount--);
000002  e002              B        |L1.10|
                  |L1.4|
000004  9800              LDR      r0,[sp,#0]
000006  1e40              SUBS     r0,r0,#1
000008  9000              STR      r0,[sp,#0]
                  |L1.10|
00000a  9800              LDR      r0,[sp,#0]
00000c  2800              CMP      r0,#0
00000e  d1f9              BNE      |L1.4|
;;;187    }
000010  bd08              POP      {r3,pc}
;;;188    
                          ENDP


                          AREA ||i.LCD9341_Clear||, CODE, READONLY, ALIGN=1

                  LCD9341_Clear PROC
;;;593    */
;;;594    void LCD9341_Clear(uint16_t _usColor)	
000000  b510              PUSH     {r4,lr}
;;;595    {
000002  4604              MOV      r4,r0
;;;596        uint32_t n;
;;;597    
;;;598    	/***************竖屏************/
;;;599    	LCD_ILI9341_CMD(0X2A); 			  /* 设置X坐标 */
000004  202a              MOVS     r0,#0x2a
000006  f7fffffe          BL       LCD_WR_REG
;;;600    	LCD_ILI9341_Parameter(0);		  /* 先高8位，然后低8位 */
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       LCD_WR_Data
;;;601    	LCD_ILI9341_Parameter(0);		  /* 设置起始点和结束点*/
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       LCD_WR_Data
;;;602    	LCD_ILI9341_Parameter(239>>8);
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       LCD_WR_Data
;;;603    	LCD_ILI9341_Parameter(239&0xff);
00001c  20ef              MOVS     r0,#0xef
00001e  f7fffffe          BL       LCD_WR_Data
;;;604    	
;;;605    	LCD_ILI9341_CMD(0X2B); 			 /* 设置Y坐标*/
000022  202b              MOVS     r0,#0x2b
000024  f7fffffe          BL       LCD_WR_REG
;;;606    	LCD_ILI9341_Parameter(0);
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       LCD_WR_Data
;;;607    	LCD_ILI9341_Parameter(0);
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       LCD_WR_Data
;;;608    	LCD_ILI9341_Parameter(319>>8);
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       LCD_WR_Data
;;;609    	LCD_ILI9341_Parameter(319&0xff);
00003a  203f              MOVS     r0,#0x3f
00003c  f7fffffe          BL       LCD_WR_Data
;;;610    		
;;;611    	LCD_ILI9341_CMD(0x2c);
000040  202c              MOVS     r0,#0x2c
000042  f7fffffe          BL       LCD_WR_REG
;;;612    	for(n=0; n<320*240; n++)
000046  2300              MOVS     r3,#0
000048  e003              B        |L2.82|
                  |L2.74|
;;;613    	{
;;;614    		LCD_WR_Data(_usColor);
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       LCD_WR_Data
000050  1c5b              ADDS     r3,r3,#1              ;612
                  |L2.82|
000052  f5b33f96          CMP      r3,#0x12c00           ;612
000056  d3f8              BCC      |L2.74|
;;;615    	} 
;;;616    }
000058  bd10              POP      {r4,pc}
;;;617    
                          ENDP


                          AREA ||i.LCD9341_DrawHLine||, CODE, READONLY, ALIGN=1

                  LCD9341_DrawHLine PROC
;;;692    */
;;;693    void LCD9341_DrawHLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;694    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;695    	uint16_t i;
;;;696    
;;;697    #if 1
;;;698    	
;;;699    	LCD9341_SetDispWin(_usX1, _usY1, _usX2,_usY1);
00000c  462b              MOV      r3,r5
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       LCD9341_SetDispWin
;;;700    
;;;701    	for (i = 0; i <_usX2-_usX1+1; i++)
000018  f04f0800          MOV      r8,#0
00001c  e006              B        |L3.44|
                  |L3.30|
;;;702    	{
;;;703    		ILI9341_RAM = _usColor;
00001e  f04f40da          MOV      r0,#0x6d000000
000022  8007              STRH     r7,[r0,#0]
000024  f1080001          ADD      r0,r8,#1              ;701
000028  fa1ff880          UXTH     r8,r0                 ;701
                  |L3.44|
00002c  1b30              SUBS     r0,r6,r4              ;701
00002e  1c40              ADDS     r0,r0,#1              ;701
000030  4540              CMP      r0,r8                 ;701
000032  dcf4              BGT      |L3.30|
;;;704    	}
;;;705    
;;;706    #else
;;;707    
;;;708    	for (i = _usX1; i <=_usX2; i++)
;;;709    	{	
;;;710    		LCD9341_SetPoint(i, _usY1, _usColor);	
;;;711    	}
;;;712    
;;;713    #endif
;;;714    
;;;715    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;716    
                          ENDP


                          AREA ||i.LCD9341_DrawVLine||, CODE, READONLY, ALIGN=1

                  LCD9341_DrawVLine PROC
;;;724    */
;;;725    void LCD9341_DrawVLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;726    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
;;;727    	uint16_t i;
;;;728    #if 1
;;;729    
;;;730    	LCD9341_SetDispWin(_usX1, _usY1,_usX1,_usY2);
00000c  4623              MOV      r3,r4
00000e  462a              MOV      r2,r5
000010  4631              MOV      r1,r6
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       LCD9341_SetDispWin
;;;731    
;;;732    	for (i = 0; i <_usY2-_usY1+1; i++)
000018  f04f0800          MOV      r8,#0
00001c  e006              B        |L4.44|
                  |L4.30|
;;;733    	{
;;;734    		ILI9341_RAM = _usColor;
00001e  f04f40da          MOV      r0,#0x6d000000
000022  8007              STRH     r7,[r0,#0]
000024  f1080001          ADD      r0,r8,#1              ;732
000028  fa1ff880          UXTH     r8,r0                 ;732
                  |L4.44|
00002c  1ba0              SUBS     r0,r4,r6              ;732
00002e  1c40              ADDS     r0,r0,#1              ;732
000030  4540              CMP      r0,r8                 ;732
000032  dcf4              BGT      |L4.30|
;;;735    	}
;;;736    #else
;;;737    
;;;738    	for (i = _usY1; i <=_usY2; i++)
;;;739    	{	
;;;740    		LCD9341_SetPoint(_usX1, i, _usColor);	
;;;741    	}
;;;742    
;;;743    #endif
;;;744    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;745    
                          ENDP


                          AREA ||i.LCD9341_FillRect||, CODE, READONLY, ALIGN=1

                  LCD9341_FillRect PROC
;;;753    */
;;;754    void LCD9341_FillRect(uint16_t _usX1 , uint16_t _usY1 ,  uint16_t _usX2 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;755    {                    
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;756       uint32_t n, temp;
;;;757       
;;;758       LCD9341_SetDispWin(_usX1, _usY1,_usX2,_usY2); 
000010  463b              MOV      r3,r7
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       LCD9341_SetDispWin
;;;759        
;;;760       temp = (u32)(_usX2-_usX1+1)*(_usY2 -_usY1+1);
00001c  1b30              SUBS     r0,r6,r4
00001e  1c40              ADDS     r0,r0,#1
000020  1b79              SUBS     r1,r7,r5
000022  1c49              ADDS     r1,r1,#1
000024  fb00fa01          MUL      r10,r0,r1
;;;761           
;;;762       for(n=0; n<temp; n++)
000028  f04f0800          MOV      r8,#0
00002c  e005              B        |L5.58|
                  |L5.46|
;;;763       {
;;;764    		ILI9341_RAM =_usColor;
00002e  f04f40da          MOV      r0,#0x6d000000
000032  f8a09000          STRH     r9,[r0,#0]
000036  f1080801          ADD      r8,r8,#1              ;762
                  |L5.58|
00003a  45d0              CMP      r8,r10                ;762
00003c  d3f7              BCC      |L5.46|
;;;765       }
;;;766    	 	  
;;;767    }
00003e  e8bd87f0          POP      {r4-r10,pc}
                          ENDP


                          AREA ||i.LCD9341_GetPoint||, CODE, READONLY, ALIGN=1

                  LCD9341_GetPoint PROC
;;;626    */
;;;627    uint16_t LCD9341_GetPoint(uint16_t _usX1 , uint16_t _usY1)
000000  b570              PUSH     {r4-r6,lr}
;;;628    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;629        uint16_t temp;
;;;630    
;;;631    	LCD9341_SetCursor(_usX1,_usY1);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       LCD9341_SetCursor
;;;632        LCD_ILI9341_CMD(0x2e);         /* 读数据 */
00000e  202e              MOVS     r0,#0x2e
000010  f7fffffe          BL       LCD_WR_REG
;;;633    	temp=LCD_RD_data();
000014  f7fffffe          BL       LCD_RD_data
000018  4606              MOV      r6,r0
;;;634        return (temp);
00001a  4630              MOV      r0,r6
;;;635    }
00001c  bd70              POP      {r4-r6,pc}
;;;636    
                          ENDP


                          AREA ||i.LCD9341_SetCursor||, CODE, READONLY, ALIGN=1

                  LCD9341_SetCursor PROC
;;;567    */
;;;568    void LCD9341_SetCursor(uint16_t _usX1 , uint16_t _usY1)	
000000  b510              PUSH     {r4,lr}
;;;569    {				
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;570    		
;;;571    	/*竖屏*/
;;;572    	LCD_ILI9341_CMD(0X2A); 				 /* 设置X坐标 */
000006  202a              MOVS     r0,#0x2a
000008  f7fffffe          BL       LCD_WR_REG
;;;573    	LCD_ILI9341_Parameter(_usX1>>8);	 /* 先高8位，然后低8位 */
00000c  1218              ASRS     r0,r3,#8
00000e  f7fffffe          BL       LCD_WR_Data
;;;574    	LCD_ILI9341_Parameter(_usX1&0xff);	 /* 设置起始点和结束点*/
000012  b2d8              UXTB     r0,r3
000014  f7fffffe          BL       LCD_WR_Data
;;;575    	LCD_ILI9341_Parameter(_usX1>>8);
000018  1218              ASRS     r0,r3,#8
00001a  f7fffffe          BL       LCD_WR_Data
;;;576    	LCD_ILI9341_Parameter(_usX1&0xff);
00001e  b2d8              UXTB     r0,r3
000020  f7fffffe          BL       LCD_WR_Data
;;;577    
;;;578        LCD_ILI9341_CMD(0X2B); 			     /* 设置Y坐标*/
000024  202b              MOVS     r0,#0x2b
000026  f7fffffe          BL       LCD_WR_REG
;;;579    	LCD_ILI9341_Parameter(_usY1>>8);
00002a  1220              ASRS     r0,r4,#8
00002c  f7fffffe          BL       LCD_WR_Data
;;;580    	LCD_ILI9341_Parameter(_usY1&0xff);
000030  b2e0              UXTB     r0,r4
000032  f7fffffe          BL       LCD_WR_Data
;;;581    	LCD_ILI9341_Parameter(_usY1>>8);
000036  1220              ASRS     r0,r4,#8
000038  f7fffffe          BL       LCD_WR_Data
;;;582    	LCD_ILI9341_Parameter(_usY1&0xff);  
00003c  b2e0              UXTB     r0,r4
00003e  f7fffffe          BL       LCD_WR_Data
;;;583    		     
;;;584    }
000042  bd10              POP      {r4,pc}
;;;585    
                          ENDP


                          AREA ||i.LCD9341_SetDispWin||, CODE, READONLY, ALIGN=1

                  LCD9341_SetDispWin PROC
;;;666    */
;;;667    void LCD9341_SetDispWin(uint16_t _usX1, uint16_t _usY1, uint16_t _usX2, uint16_t _usY2)
000000  b570              PUSH     {r4-r6,lr}
;;;668    {                    
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;669    
;;;670    	LCD_ILI9341_CMD(0X2A); 				  /* 设置X坐标 */
000008  202a              MOVS     r0,#0x2a
00000a  f7fffffe          BL       LCD_WR_REG
;;;671    	LCD_ILI9341_Parameter(_usX1>>8);	  /* 设置高8位和低8位*/
00000e  1220              ASRS     r0,r4,#8
000010  f7fffffe          BL       LCD_WR_Data
;;;672    	LCD_ILI9341_Parameter(_usX1&0xff);	  /* 设置起始点和结束点*/
000014  b2e0              UXTB     r0,r4
000016  f7fffffe          BL       LCD_WR_Data
;;;673    	LCD_ILI9341_Parameter(_usX2>>8);	
00001a  1230              ASRS     r0,r6,#8
00001c  f7fffffe          BL       LCD_WR_Data
;;;674    	LCD_ILI9341_Parameter(_usX2&0xff);
000020  b2f0              UXTB     r0,r6
000022  f7fffffe          BL       LCD_WR_Data
;;;675    	
;;;676    	LCD_ILI9341_CMD(0X2B); 				  /* 设置Y坐标*/
000026  202b              MOVS     r0,#0x2b
000028  f7fffffe          BL       LCD_WR_REG
;;;677    	LCD_ILI9341_Parameter(_usY1>>8);   
00002c  1228              ASRS     r0,r5,#8
00002e  f7fffffe          BL       LCD_WR_Data
;;;678    	LCD_ILI9341_Parameter(_usY1&0xff);
000032  b2e8              UXTB     r0,r5
000034  f7fffffe          BL       LCD_WR_Data
;;;679    	LCD_ILI9341_Parameter(_usY2>>8);   
000038  1218              ASRS     r0,r3,#8
00003a  f7fffffe          BL       LCD_WR_Data
;;;680    	LCD_ILI9341_Parameter(_usY2&0xff);
00003e  b2d8              UXTB     r0,r3
000040  f7fffffe          BL       LCD_WR_Data
;;;681    
;;;682    	LCD_ILI9341_CMD(0x2c);     
000044  202c              MOVS     r0,#0x2c
000046  f7fffffe          BL       LCD_WR_REG
;;;683    }
00004a  bd70              POP      {r4-r6,pc}
;;;684    
                          ENDP


                          AREA ||i.LCD9341_SetPoint||, CODE, READONLY, ALIGN=1

                  LCD9341_SetPoint PROC
;;;646    */
;;;647    void LCD9341_SetPoint(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usColor)	
000000  b570              PUSH     {r4-r6,lr}
;;;648    {   	
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;649    	
;;;650    	LCD9341_SetCursor(_usX1,_usY1);
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       LCD9341_SetCursor
;;;651    	LCD_ILI9341_CMD(0x2c);	         /* 写数据 */
000010  202c              MOVS     r0,#0x2c
000012  f7fffffe          BL       LCD_WR_REG
;;;652    	LCD_WR_Data(_usColor);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       LCD_WR_Data
;;;653    
;;;654    }
00001c  bd70              POP      {r4-r6,pc}
;;;655    
                          ENDP


                          AREA ||i.LCD_CtrlLinesConfig||, CODE, READONLY, ALIGN=2

                  LCD_CtrlLinesConfig PROC
;;;253    */
;;;254    void LCD_CtrlLinesConfig(void)
000000  b508              PUSH     {r3,lr}
;;;255    {
;;;256    
;;;257    	GPIO_InitTypeDef GPIO_InitStructure;
;;;258        
;;;259        /* 使能FSMC时钟*/
;;;260        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
000002  2101              MOVS     r1,#1
000004  0208              LSLS     r0,r1,#8
000006  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;261        
;;;262        /* 使能FSMC对应相应管脚时钟*/
;;;263    	    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE | 
00000a  2101              MOVS     r1,#1
00000c  f44f70f4          MOV      r0,#0x1e8
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;264    	                            RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOG | 
;;;265    	                            RCC_APB2Periph_GPIOF , ENABLE);
;;;266        
;;;267        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000014  2010              MOVS     r0,#0x10
000016  f88d0003          STRB     r0,[sp,#3]
;;;268        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001a  2003              MOVS     r0,#3
00001c  f88d0002          STRB     r0,[sp,#2]
;;;269        
;;;270        /* 配置LCD背光控制管脚*/
;;;271        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;		
000020  2002              MOVS     r0,#2
000022  f8ad0000          STRH     r0,[sp,#0]
;;;272        GPIO_Init(GPIOB, &GPIO_InitStructure);
000026  4669              MOV      r1,sp
000028  4821              LDR      r0,|L10.176|
00002a  f7fffffe          BL       GPIO_Init
;;;273        
;;;274        /* 配置LCD复位控制管脚*/
;;;275        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 ; 	 
00002e  f44f6000          MOV      r0,#0x800
000032  f8ad0000          STRH     r0,[sp,#0]
;;;276        GPIO_Init(GPIOG, &GPIO_InitStructure);  		   
000036  4669              MOV      r1,sp
000038  481e              LDR      r0,|L10.180|
00003a  f7fffffe          BL       GPIO_Init
;;;277        
;;;278        /* 配置FSMC相对应的数据线,FSMC-D0~D15: PD 14 15 0 1,PE 7 8 9 10 11 12 13 14 15,PD 8 9 10*/	
;;;279        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  2003              MOVS     r0,#3
000040  f88d0002          STRB     r0,[sp,#2]
;;;280        GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_AF_PP;
000044  2018              MOVS     r0,#0x18
000046  f88d0003          STRB     r0,[sp,#3]
;;;281        
;;;282        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 | 
00004a  f24c7003          MOV      r0,#0xc703
00004e  f8ad0000          STRH     r0,[sp,#0]
;;;283                                      GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
;;;284        GPIO_Init(GPIOD, &GPIO_InitStructure);
000052  4669              MOV      r1,sp
000054  4818              LDR      r0,|L10.184|
000056  f7fffffe          BL       GPIO_Init
;;;285        
;;;286        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | 
00005a  f64f7080          MOV      r0,#0xff80
00005e  f8ad0000          STRH     r0,[sp,#0]
;;;287                                      GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
;;;288                                      GPIO_Pin_15;
;;;289        GPIO_Init(GPIOE, &GPIO_InitStructure); 
000062  4669              MOV      r1,sp
000064  4815              LDR      r0,|L10.188|
000066  f7fffffe          BL       GPIO_Init
;;;290        
;;;291        /* 配置FSMC相对应的控制线
;;;292    	 * PD4-FSMC_NOE  :LCD-RD
;;;293       * PD5-FSMC_NWE  :LCD-WR
;;;294    	 * PD7-FSMC_NE1  :LCD-CS
;;;295       * PD11-FSMC_A16 :LCD-DC
;;;296    	 */
;;;297        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4; 
00006a  2010              MOVS     r0,#0x10
00006c  f8ad0000          STRH     r0,[sp,#0]
;;;298        GPIO_Init(GPIOD, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4811              LDR      r0,|L10.184|
000074  f7fffffe          BL       GPIO_Init
;;;299        
;;;300        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; 
000078  2020              MOVS     r0,#0x20
00007a  f8ad0000          STRH     r0,[sp,#0]
;;;301        GPIO_Init(GPIOD, &GPIO_InitStructure);
00007e  4669              MOV      r1,sp
000080  480d              LDR      r0,|L10.184|
000082  f7fffffe          BL       GPIO_Init
;;;302        
;;;303        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12; 
000086  f44f5080          MOV      r0,#0x1000
00008a  f8ad0000          STRH     r0,[sp,#0]
;;;304        GPIO_Init(GPIOG, &GPIO_InitStructure);  
00008e  4669              MOV      r1,sp
000090  4808              LDR      r0,|L10.180|
000092  f7fffffe          BL       GPIO_Init
;;;305        
;;;306        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 ; 
000096  2004              MOVS     r0,#4
000098  f8ad0000          STRH     r0,[sp,#0]
;;;307        GPIO_Init(GPIOE, &GPIO_InitStructure); 
00009c  4669              MOV      r1,sp
00009e  4807              LDR      r0,|L10.188|
0000a0  f7fffffe          BL       GPIO_Init
;;;308        
;;;309    	/* 打开背光 */
;;;310    	GPIO_ResetBits(GPIOB, GPIO_Pin_1);
0000a4  2102              MOVS     r1,#2
0000a6  4802              LDR      r0,|L10.176|
0000a8  f7fffffe          BL       GPIO_ResetBits
;;;311    }
0000ac  bd08              POP      {r3,pc}
;;;312    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L10.176|
                          DCD      0x40010c00
                  |L10.180|
                          DCD      0x40012000
                  |L10.184|
                          DCD      0x40011400
                  |L10.188|
                          DCD      0x40011800

                          AREA ||i.LCD_FSMCConfig||, CODE, READONLY, ALIGN=1

                  LCD_FSMCConfig PROC
;;;196    */
;;;197    void LCD_FSMCConfig(void)
000000  b500              PUSH     {lr}
;;;198    {	
000002  b097              SUB      sp,sp,#0x5c
;;;199    	FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
;;;200    	FSMC_NORSRAMTimingInitTypeDef  p;
;;;201    	
;;;202    	/*-- FSMC Configuration ------------------------------------------------------*/
;;;203    	/*----------------------- SRAM Bank 1 ----------------------------------------*/
;;;204    	/* FSMC_Bank1_NORSRAM4 configuration */
;;;205    	p.FSMC_AddressSetupTime = 2;
000004  2002              MOVS     r0,#2
000006  9001              STR      r0,[sp,#4]
;;;206    	p.FSMC_AddressHoldTime = 0;
000008  2000              MOVS     r0,#0
00000a  9002              STR      r0,[sp,#8]
;;;207    	
;;;208    	/* LCD 读需要设置为4，只写的话设置1即可 */
;;;209    	p.FSMC_DataSetupTime = 5;
00000c  2005              MOVS     r0,#5
00000e  9003              STR      r0,[sp,#0xc]
;;;210    	
;;;211    	p.FSMC_BusTurnAroundDuration = 0;
000010  2000              MOVS     r0,#0
000012  9004              STR      r0,[sp,#0x10]
;;;212    	p.FSMC_CLKDivision = 0;
000014  9005              STR      r0,[sp,#0x14]
;;;213    	p.FSMC_DataLatency = 0;
000016  9006              STR      r0,[sp,#0x18]
;;;214    	p.FSMC_AccessMode = FSMC_AccessMode_B;
000018  f04f5080          MOV      r0,#0x10000000
00001c  9007              STR      r0,[sp,#0x1c]
;;;215    	
;;;216    	/* Color LCD configuration ------------------------------------
;;;217    	 LCD configured as follow:
;;;218    	    - Data/Address MUX = Disable
;;;219    	    - Memory Type = SRAM
;;;220    	    - Data Width = 16bit
;;;221    	    - Write Operation = Enable
;;;222    	    - Extended Mode = Enable
;;;223    	    - Asynchronous Wait = Disable */
;;;224    	FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM4;
00001e  2006              MOVS     r0,#6
000020  9008              STR      r0,[sp,#0x20]
;;;225    	FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
000022  2000              MOVS     r0,#0
000024  9009              STR      r0,[sp,#0x24]
;;;226    	FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_NOR;
000026  2008              MOVS     r0,#8
000028  900a              STR      r0,[sp,#0x28]
;;;227    	FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
00002a  2010              MOVS     r0,#0x10
00002c  900b              STR      r0,[sp,#0x2c]
;;;228    	FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00002e  2000              MOVS     r0,#0
000030  900c              STR      r0,[sp,#0x30]
;;;229    	FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000032  900e              STR      r0,[sp,#0x38]
;;;230    	FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
000034  900f              STR      r0,[sp,#0x3c]
;;;231    	FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
000036  9010              STR      r0,[sp,#0x40]
;;;232    	FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000038  f44f5080          MOV      r0,#0x1000
00003c  9011              STR      r0,[sp,#0x44]
;;;233    	FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
00003e  2000              MOVS     r0,#0
000040  9012              STR      r0,[sp,#0x48]
;;;234    	FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000042  9013              STR      r0,[sp,#0x4c]
;;;235    	FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
000044  900d              STR      r0,[sp,#0x34]
;;;236    	FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
000046  9014              STR      r0,[sp,#0x50]
;;;237    	FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
000048  a801              ADD      r0,sp,#4
00004a  9015              STR      r0,[sp,#0x54]
;;;238    	FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
00004c  9016              STR      r0,[sp,#0x58]
;;;239    	
;;;240    	FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
00004e  a808              ADD      r0,sp,#0x20
000050  f7fffffe          BL       FSMC_NORSRAMInit
;;;241    	
;;;242    	/* BANK 1 (of NOR/SRAM Bank 1~4) is enabled */
;;;243    	FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);
000054  2101              MOVS     r1,#1
000056  2006              MOVS     r0,#6
000058  f7fffffe          BL       FSMC_NORSRAMCmd
;;;244    }
00005c  b017              ADD      sp,sp,#0x5c
00005e  bd00              POP      {pc}
;;;245    
                          ENDP


                          AREA ||i.LCD_RD_data||, CODE, READONLY, ALIGN=1

                  LCD_RD_data PROC
;;;150    */
;;;151    uint16_t LCD_RD_data(void)	
000000  b510              PUSH     {r4,lr}
;;;152    {	
;;;153    	uint16_t R=0, G=0, B=0 ;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2300              MOVS     r3,#0
;;;154    
;;;155    	R = ILI9341_RAM; 	/*FIRST READ OUT DUMMY DATA*/
000008  f04f40da          MOV      r0,#0x6d000000
00000c  8801              LDRH     r1,[r0,#0]
;;;156    	R = ILI9341_RAM;  	/*READ OUT RED DATA  */
00000e  8801              LDRH     r1,[r0,#0]
;;;157    	B = ILI9341_RAM;  	/*READ OUT BLACK DATA*/
000010  8803              LDRH     r3,[r0,#0]
;;;158    	G = ILI9341_RAM;  	/*READ OUT GREEN DATA*/
000012  8802              LDRH     r2,[r0,#0]
;;;159    	
;;;160        return (((R>>11)<<11) | ((G>>10)<<5) | (B>>11)) ;
000014  12c8              ASRS     r0,r1,#11
000016  02c0              LSLS     r0,r0,#11
000018  1294              ASRS     r4,r2,#10
00001a  ea401044          ORR      r0,r0,r4,LSL #5
00001e  ea4020e3          ORR      r0,r0,r3,ASR #11
;;;161    }
000022  bd10              POP      {r4,pc}
;;;162    
                          ENDP


                          AREA ||i.LCD_Reset||, CODE, READONLY, ALIGN=2

                  LCD_Reset PROC
;;;320    */
;;;321    void LCD_Reset(void)
000000  b510              PUSH     {r4,lr}
;;;322    {			
;;;323    	/*复位 LCD*/	 
;;;324        GPIO_ResetBits(GPIOG, GPIO_Pin_11);
000002  f44f6100          MOV      r1,#0x800
000006  4807              LDR      r0,|L13.36|
000008  f7fffffe          BL       GPIO_ResetBits
;;;325        Delay(0xAFFf<<2);					   
00000c  4806              LDR      r0,|L13.40|
00000e  f7fffffe          BL       Delay
;;;326        GPIO_SetBits(GPIOG, GPIO_Pin_11 );	
000012  f44f6100          MOV      r1,#0x800
000016  4803              LDR      r0,|L13.36|
000018  f7fffffe          BL       GPIO_SetBits
;;;327    	Delay(0xAFFf<<2);	
00001c  4802              LDR      r0,|L13.40|
00001e  f7fffffe          BL       Delay
;;;328    }
000022  bd10              POP      {r4,pc}
;;;329    
                          ENDP

                  |L13.36|
                          DCD      0x40012000
                  |L13.40|
                          DCD      0x0002bffc

                          AREA ||i.LCD_WR_CMD||, CODE, READONLY, ALIGN=1

                  LCD_WR_CMD PROC
;;;136    */
;;;137    void LCD_WR_CMD(unsigned int index,unsigned int val)
000000  f04f43d8          MOV      r3,#0x6c000000
;;;138    {	
;;;139    	ILI9341_REG = index;	
000004  8018              STRH     r0,[r3,#0]
;;;140    	ILI9341_RAM = val;
000006  f04f43da          MOV      r3,#0x6d000000
00000a  8019              STRH     r1,[r3,#0]
;;;141    }
00000c  4770              BX       lr
;;;142    
                          ENDP


                          AREA ||i.LCD_WR_Data||, CODE, READONLY, ALIGN=1

                  LCD_WR_Data PROC
;;;170    */
;;;171    void LCD_WR_Data(unsigned int val)
000000  f04f42da          MOV      r2,#0x6d000000
;;;172    {   
;;;173    	ILI9341_RAM = val; 	
000004  8010              STRH     r0,[r2,#0]
;;;174    }
000006  4770              BX       lr
;;;175    
                          ENDP


                          AREA ||i.LCD_WR_REG||, CODE, READONLY, ALIGN=1

                  LCD_WR_REG PROC
;;;121    */
;;;122    void LCD_WR_REG(unsigned int index)
000000  f04f42d8          MOV      r2,#0x6c000000
;;;123    {
;;;124    	ILI9341_REG = index;
000004  8010              STRH     r0,[r2,#0]
;;;125    
;;;126    }
000006  4770              BX       lr
;;;127    
                          ENDP


                          AREA ||i.bsp_InitLCD||, CODE, READONLY, ALIGN=1

                  bsp_InitLCD PROC
;;;391    */
;;;392    void bsp_InitLCD(void)
000000  b510              PUSH     {r4,lr}
;;;393    {
;;;394    	/* 配置LCD控制口线GPIO */
;;;395    	LCD_CtrlLinesConfig();
000002  f7fffffe          BL       LCD_CtrlLinesConfig
;;;396    
;;;397    	/* 配置FSMC接口，数据总线 */
;;;398    	LCD_FSMCConfig();
000006  f7fffffe          BL       LCD_FSMCConfig
;;;399    
;;;400    	/* 复位 */
;;;401    	LCD_Reset();
00000a  f7fffffe          BL       LCD_Reset
;;;402    		
;;;403    	/*  Power control B (CFh)  */
;;;404    	DEBUG_DELAY();
00000e  f44f60fa          MOV      r0,#0x7d0
000012  f7fffffe          BL       Delay
;;;405    	LCD_ILI9341_CMD(0xCF);
000016  20cf              MOVS     r0,#0xcf
000018  f7fffffe          BL       LCD_WR_REG
;;;406    	LCD_ILI9341_Parameter(0x00);
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       LCD_WR_Data
;;;407    	LCD_ILI9341_Parameter(0x81);
000022  2081              MOVS     r0,#0x81
000024  f7fffffe          BL       LCD_WR_Data
;;;408    	LCD_ILI9341_Parameter(0x30);
000028  2030              MOVS     r0,#0x30
00002a  f7fffffe          BL       LCD_WR_Data
;;;409    	
;;;410    	/*  Power on sequence control (EDh) */
;;;411    	DEBUG_DELAY();
00002e  f44f60fa          MOV      r0,#0x7d0
000032  f7fffffe          BL       Delay
;;;412    	LCD_ILI9341_CMD(0xED);
000036  20ed              MOVS     r0,#0xed
000038  f7fffffe          BL       LCD_WR_REG
;;;413    	LCD_ILI9341_Parameter(0x64);
00003c  2064              MOVS     r0,#0x64
00003e  f7fffffe          BL       LCD_WR_Data
;;;414    	LCD_ILI9341_Parameter(0x03);
000042  2003              MOVS     r0,#3
000044  f7fffffe          BL       LCD_WR_Data
;;;415    	LCD_ILI9341_Parameter(0x12);
000048  2012              MOVS     r0,#0x12
00004a  f7fffffe          BL       LCD_WR_Data
;;;416    	LCD_ILI9341_Parameter(0x81);
00004e  2081              MOVS     r0,#0x81
000050  f7fffffe          BL       LCD_WR_Data
;;;417    	
;;;418    	/*  Driver timing control A (E8h) */
;;;419    	DEBUG_DELAY();
000054  f44f60fa          MOV      r0,#0x7d0
000058  f7fffffe          BL       Delay
;;;420    	LCD_ILI9341_CMD(0xE8);
00005c  20e8              MOVS     r0,#0xe8
00005e  f7fffffe          BL       LCD_WR_REG
;;;421    	LCD_ILI9341_Parameter(0x85);
000062  2085              MOVS     r0,#0x85
000064  f7fffffe          BL       LCD_WR_Data
;;;422    	LCD_ILI9341_Parameter(0x10);
000068  2010              MOVS     r0,#0x10
00006a  f7fffffe          BL       LCD_WR_Data
;;;423    	LCD_ILI9341_Parameter(0x78);
00006e  2078              MOVS     r0,#0x78
000070  f7fffffe          BL       LCD_WR_Data
;;;424    	
;;;425    	/*  Power control A (CBh) */
;;;426    	DEBUG_DELAY();
000074  f44f60fa          MOV      r0,#0x7d0
000078  f7fffffe          BL       Delay
;;;427    	LCD_ILI9341_CMD(0xCB);
00007c  20cb              MOVS     r0,#0xcb
00007e  f7fffffe          BL       LCD_WR_REG
;;;428    	LCD_ILI9341_Parameter(0x39);
000082  2039              MOVS     r0,#0x39
000084  f7fffffe          BL       LCD_WR_Data
;;;429    	LCD_ILI9341_Parameter(0x2C);
000088  202c              MOVS     r0,#0x2c
00008a  f7fffffe          BL       LCD_WR_Data
;;;430    	LCD_ILI9341_Parameter(0x00);
00008e  2000              MOVS     r0,#0
000090  f7fffffe          BL       LCD_WR_Data
;;;431    	LCD_ILI9341_Parameter(0x34);
000094  2034              MOVS     r0,#0x34
000096  f7fffffe          BL       LCD_WR_Data
;;;432    	LCD_ILI9341_Parameter(0x02);
00009a  2002              MOVS     r0,#2
00009c  f7fffffe          BL       LCD_WR_Data
;;;433    	
;;;434    	/* Pump ratio control (F7h) */
;;;435    	DEBUG_DELAY();
0000a0  f44f60fa          MOV      r0,#0x7d0
0000a4  f7fffffe          BL       Delay
;;;436    	LCD_ILI9341_CMD(0xF7);
0000a8  20f7              MOVS     r0,#0xf7
0000aa  f7fffffe          BL       LCD_WR_REG
;;;437    	LCD_ILI9341_Parameter(0x20);
0000ae  2020              MOVS     r0,#0x20
0000b0  f7fffffe          BL       LCD_WR_Data
;;;438    	
;;;439    	/* Driver timing control B */
;;;440    	DEBUG_DELAY();
0000b4  f44f60fa          MOV      r0,#0x7d0
0000b8  f7fffffe          BL       Delay
;;;441    	LCD_ILI9341_CMD(0xEA);
0000bc  20ea              MOVS     r0,#0xea
0000be  f7fffffe          BL       LCD_WR_REG
;;;442    	LCD_ILI9341_Parameter(0x00);
0000c2  2000              MOVS     r0,#0
0000c4  f7fffffe          BL       LCD_WR_Data
;;;443    	LCD_ILI9341_Parameter(0x00);
0000c8  2000              MOVS     r0,#0
0000ca  f7fffffe          BL       LCD_WR_Data
;;;444    	
;;;445    	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
;;;446    	DEBUG_DELAY();
0000ce  f44f60fa          MOV      r0,#0x7d0
0000d2  f7fffffe          BL       Delay
;;;447    	LCD_ILI9341_CMD(0xB1);
0000d6  20b1              MOVS     r0,#0xb1
0000d8  f7fffffe          BL       LCD_WR_REG
;;;448    	LCD_ILI9341_Parameter(0x00);
0000dc  2000              MOVS     r0,#0
0000de  f7fffffe          BL       LCD_WR_Data
;;;449    	LCD_ILI9341_Parameter(0x1B);
0000e2  201b              MOVS     r0,#0x1b
0000e4  f7fffffe          BL       LCD_WR_Data
;;;450    	
;;;451    	/*  Display Function Control (B6h) */
;;;452    	DEBUG_DELAY();
0000e8  f44f60fa          MOV      r0,#0x7d0
0000ec  f7fffffe          BL       Delay
;;;453    	LCD_ILI9341_CMD(0xB6);
0000f0  20b6              MOVS     r0,#0xb6
0000f2  f7fffffe          BL       LCD_WR_REG
;;;454    	LCD_ILI9341_Parameter(0x0A);
0000f6  200a              MOVS     r0,#0xa
0000f8  f7fffffe          BL       LCD_WR_Data
;;;455    	LCD_ILI9341_Parameter(0xA2);
0000fc  20a2              MOVS     r0,#0xa2
0000fe  f7fffffe          BL       LCD_WR_Data
;;;456    	
;;;457    	/* Power Control 1 (C0h) */
;;;458    	DEBUG_DELAY();
000102  f44f60fa          MOV      r0,#0x7d0
000106  f7fffffe          BL       Delay
;;;459    	LCD_ILI9341_CMD(0xC0);
00010a  20c0              MOVS     r0,#0xc0
00010c  f7fffffe          BL       LCD_WR_REG
;;;460    	LCD_ILI9341_Parameter(0x35);
000110  2035              MOVS     r0,#0x35
000112  f7fffffe          BL       LCD_WR_Data
;;;461    	
;;;462    	/* Power Control 2 (C1h) */
;;;463    	DEBUG_DELAY();
000116  f44f60fa          MOV      r0,#0x7d0
00011a  f7fffffe          BL       Delay
;;;464    	LCD_ILI9341_CMD(0xC1);
00011e  20c1              MOVS     r0,#0xc1
000120  f7fffffe          BL       LCD_WR_REG
;;;465    	LCD_ILI9341_Parameter(0x11);
000124  2011              MOVS     r0,#0x11
000126  f7fffffe          BL       LCD_WR_Data
;;;466    	
;;;467    	/* VCOM Control 1(C5h) */
;;;468    	LCD_ILI9341_CMD(0xC5);
00012a  20c5              MOVS     r0,#0xc5
00012c  f7fffffe          BL       LCD_WR_REG
;;;469    	LCD_ILI9341_Parameter(0x45);
000130  2045              MOVS     r0,#0x45
000132  f7fffffe          BL       LCD_WR_Data
;;;470    	LCD_ILI9341_Parameter(0x45);
000136  2045              MOVS     r0,#0x45
000138  f7fffffe          BL       LCD_WR_Data
;;;471    	
;;;472    	/*  VCOM Control 2(C7h)  */
;;;473    	LCD_ILI9341_CMD(0xC7);
00013c  20c7              MOVS     r0,#0xc7
00013e  f7fffffe          BL       LCD_WR_REG
;;;474    	LCD_ILI9341_Parameter(0xA2);
000142  20a2              MOVS     r0,#0xa2
000144  f7fffffe          BL       LCD_WR_Data
;;;475    	
;;;476    	/* Enable 3G (F2h) */
;;;477    	LCD_ILI9341_CMD(0xF2);
000148  20f2              MOVS     r0,#0xf2
00014a  f7fffffe          BL       LCD_WR_REG
;;;478    	LCD_ILI9341_Parameter(0x00);
00014e  2000              MOVS     r0,#0
000150  f7fffffe          BL       LCD_WR_Data
;;;479    	
;;;480    	/* Gamma Set (26h) */
;;;481    	LCD_ILI9341_CMD(0x26);
000154  2026              MOVS     r0,#0x26
000156  f7fffffe          BL       LCD_WR_REG
;;;482    	LCD_ILI9341_Parameter(0x01);
00015a  2001              MOVS     r0,#1
00015c  f7fffffe          BL       LCD_WR_Data
;;;483    
;;;484    	/* Positive Gamma Correction */
;;;485    	DEBUG_DELAY();
000160  f44f60fa          MOV      r0,#0x7d0
000164  f7fffffe          BL       Delay
;;;486    	LCD_ILI9341_CMD(0xE0); 
000168  20e0              MOVS     r0,#0xe0
00016a  f7fffffe          BL       LCD_WR_REG
;;;487    	LCD_ILI9341_Parameter(0x0F);
00016e  200f              MOVS     r0,#0xf
000170  f7fffffe          BL       LCD_WR_Data
;;;488    	LCD_ILI9341_Parameter(0x26);
000174  2026              MOVS     r0,#0x26
000176  f7fffffe          BL       LCD_WR_Data
;;;489    	LCD_ILI9341_Parameter(0x24);
00017a  2024              MOVS     r0,#0x24
00017c  f7fffffe          BL       LCD_WR_Data
;;;490    	LCD_ILI9341_Parameter(0x0B);
000180  200b              MOVS     r0,#0xb
000182  f7fffffe          BL       LCD_WR_Data
;;;491    	LCD_ILI9341_Parameter(0x0E);
000186  200e              MOVS     r0,#0xe
000188  f7fffffe          BL       LCD_WR_Data
;;;492    	LCD_ILI9341_Parameter(0x09);
00018c  2009              MOVS     r0,#9
00018e  f7fffffe          BL       LCD_WR_Data
;;;493    	LCD_ILI9341_Parameter(0x54);
000192  2054              MOVS     r0,#0x54
000194  f7fffffe          BL       LCD_WR_Data
;;;494    	LCD_ILI9341_Parameter(0xA8);
000198  20a8              MOVS     r0,#0xa8
00019a  f7fffffe          BL       LCD_WR_Data
;;;495    	LCD_ILI9341_Parameter(0x46);
00019e  2046              MOVS     r0,#0x46
0001a0  f7fffffe          BL       LCD_WR_Data
;;;496    	LCD_ILI9341_Parameter(0x0C);
0001a4  200c              MOVS     r0,#0xc
0001a6  f7fffffe          BL       LCD_WR_Data
;;;497    	LCD_ILI9341_Parameter(0x17);
0001aa  2017              MOVS     r0,#0x17
0001ac  f7fffffe          BL       LCD_WR_Data
;;;498    	LCD_ILI9341_Parameter(0x09);
0001b0  2009              MOVS     r0,#9
0001b2  f7fffffe          BL       LCD_WR_Data
;;;499    	LCD_ILI9341_Parameter(0x0F);
0001b6  200f              MOVS     r0,#0xf
0001b8  f7fffffe          BL       LCD_WR_Data
;;;500    	LCD_ILI9341_Parameter(0x07);
0001bc  2007              MOVS     r0,#7
0001be  f7fffffe          BL       LCD_WR_Data
;;;501    	LCD_ILI9341_Parameter(0x00);
0001c2  2000              MOVS     r0,#0
0001c4  f7fffffe          BL       LCD_WR_Data
;;;502    
;;;503    	/* Negative Gamma Correction (E1h) */
;;;504    	DEBUG_DELAY();
0001c8  f44f60fa          MOV      r0,#0x7d0
0001cc  f7fffffe          BL       Delay
;;;505    	LCD_ILI9341_CMD(0XE1); 
0001d0  20e1              MOVS     r0,#0xe1
0001d2  f7fffffe          BL       LCD_WR_REG
;;;506    	LCD_ILI9341_Parameter(0x00);
0001d6  2000              MOVS     r0,#0
0001d8  f7fffffe          BL       LCD_WR_Data
;;;507    	LCD_ILI9341_Parameter(0x19);
0001dc  2019              MOVS     r0,#0x19
0001de  f7fffffe          BL       LCD_WR_Data
;;;508    	LCD_ILI9341_Parameter(0x1B);
0001e2  201b              MOVS     r0,#0x1b
0001e4  f7fffffe          BL       LCD_WR_Data
;;;509    	LCD_ILI9341_Parameter(0x04);
0001e8  2004              MOVS     r0,#4
0001ea  f7fffffe          BL       LCD_WR_Data
;;;510    	LCD_ILI9341_Parameter(0x10);
0001ee  2010              MOVS     r0,#0x10
0001f0  f7fffffe          BL       LCD_WR_Data
;;;511    	LCD_ILI9341_Parameter(0x07);
0001f4  2007              MOVS     r0,#7
0001f6  f7fffffe          BL       LCD_WR_Data
;;;512    	LCD_ILI9341_Parameter(0x2A);
0001fa  202a              MOVS     r0,#0x2a
0001fc  f7fffffe          BL       LCD_WR_Data
;;;513    	LCD_ILI9341_Parameter(0x47);
000200  2047              MOVS     r0,#0x47
000202  f7fffffe          BL       LCD_WR_Data
;;;514    	LCD_ILI9341_Parameter(0x39);
000206  2039              MOVS     r0,#0x39
000208  f7fffffe          BL       LCD_WR_Data
;;;515    	LCD_ILI9341_Parameter(0x03);
00020c  2003              MOVS     r0,#3
00020e  f7fffffe          BL       LCD_WR_Data
;;;516    	LCD_ILI9341_Parameter(0x06);
000212  2006              MOVS     r0,#6
000214  f7fffffe          BL       LCD_WR_Data
;;;517    	LCD_ILI9341_Parameter(0x06);
000218  2006              MOVS     r0,#6
00021a  f7fffffe          BL       LCD_WR_Data
;;;518    	LCD_ILI9341_Parameter(0x30);
00021e  2030              MOVS     r0,#0x30
000220  f7fffffe          BL       LCD_WR_Data
;;;519    	LCD_ILI9341_Parameter(0x38);
000224  2038              MOVS     r0,#0x38
000226  f7fffffe          BL       LCD_WR_Data
;;;520    	LCD_ILI9341_Parameter(0x0F);
00022a  200f              MOVS     r0,#0xf
00022c  f7fffffe          BL       LCD_WR_Data
;;;521    	
;;;522    
;;;523    	/*设置成竖屏的显示方式*/ 
;;;524    	DEBUG_DELAY();
000230  f44f60fa          MOV      r0,#0x7d0
000234  f7fffffe          BL       Delay
;;;525    	LCD_ILI9341_CMD(0x36); 
000238  2036              MOVS     r0,#0x36
00023a  f7fffffe          BL       LCD_WR_REG
;;;526    	LCD_ILI9341_Parameter(0xc8);    
00023e  20c8              MOVS     r0,#0xc8
000240  f7fffffe          BL       LCD_WR_Data
;;;527    	DEBUG_DELAY();
000244  f44f60fa          MOV      r0,#0x7d0
000248  f7fffffe          BL       Delay
;;;528    
;;;529    	/* 设置X轴的起始和结束坐标 */
;;;530    	LCD_ILI9341_CMD(0X2A); 
00024c  202a              MOVS     r0,#0x2a
00024e  f7fffffe          BL       LCD_WR_REG
;;;531    	LCD_ILI9341_Parameter(0x00);
000252  2000              MOVS     r0,#0
000254  f7fffffe          BL       LCD_WR_Data
;;;532    	LCD_ILI9341_Parameter(0x00);
000258  2000              MOVS     r0,#0
00025a  f7fffffe          BL       LCD_WR_Data
;;;533    	LCD_ILI9341_Parameter(0x00);
00025e  2000              MOVS     r0,#0
000260  f7fffffe          BL       LCD_WR_Data
;;;534    	LCD_ILI9341_Parameter(0xEF);
000264  20ef              MOVS     r0,#0xef
000266  f7fffffe          BL       LCD_WR_Data
;;;535    	
;;;536    	/* 设置Y轴的起始和结束坐标 */	
;;;537    	DEBUG_DELAY();
00026a  f44f60fa          MOV      r0,#0x7d0
00026e  f7fffffe          BL       Delay
;;;538    	LCD_ILI9341_CMD(0X2B); 
000272  202b              MOVS     r0,#0x2b
000274  f7fffffe          BL       LCD_WR_REG
;;;539    	LCD_ILI9341_Parameter(0x00);
000278  2000              MOVS     r0,#0
00027a  f7fffffe          BL       LCD_WR_Data
;;;540    	LCD_ILI9341_Parameter(0x00);
00027e  2000              MOVS     r0,#0
000280  f7fffffe          BL       LCD_WR_Data
;;;541    	LCD_ILI9341_Parameter(0x01);
000284  2001              MOVS     r0,#1
000286  f7fffffe          BL       LCD_WR_Data
;;;542    	LCD_ILI9341_Parameter(0x3F);
00028a  203f              MOVS     r0,#0x3f
00028c  f7fffffe          BL       LCD_WR_Data
;;;543    
;;;544    	/*  Pixel Format Set (3Ah)  */
;;;545    	DEBUG_DELAY();
000290  f44f60fa          MOV      r0,#0x7d0
000294  f7fffffe          BL       Delay
;;;546    	LCD_ILI9341_CMD(0x3a); 
000298  203a              MOVS     r0,#0x3a
00029a  f7fffffe          BL       LCD_WR_REG
;;;547    	LCD_ILI9341_Parameter(0x55);
00029e  2055              MOVS     r0,#0x55
0002a0  f7fffffe          BL       LCD_WR_Data
;;;548    
;;;549    	/* Sleep Out (11h)  */
;;;550    	DEBUG_DELAY();
0002a4  f44f60fa          MOV      r0,#0x7d0
0002a8  f7fffffe          BL       Delay
;;;551    	LCD_ILI9341_CMD(0x11); 
0002ac  2011              MOVS     r0,#0x11
0002ae  f7fffffe          BL       LCD_WR_REG
;;;552    
;;;553    	/* Display ON (29h) */
;;;554    	DEBUG_DELAY();
0002b2  f44f60fa          MOV      r0,#0x7d0
0002b6  f7fffffe          BL       Delay
;;;555    	LCD_ILI9341_CMD(0x29); 
0002ba  2029              MOVS     r0,#0x29
0002bc  f7fffffe          BL       LCD_WR_REG
;;;556        						
;;;557    }
0002c0  bd10              POP      {r4,pc}
;;;558    
                          ENDP

