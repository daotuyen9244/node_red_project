; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\framewin_setresizeable.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\framewin_setresizeable.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Widget\FRAMEWIN_SetResizeable.c]
                          THUMB

                          AREA ||i.FRAMEWIN_SetResizeable||, CODE, READONLY, ALIGN=2

                  FRAMEWIN_SetResizeable PROC
;;;525    */
;;;526    void FRAMEWIN_SetResizeable(FRAMEWIN_Handle hObj, int State) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;527      if (hObj) {
000006  b1b5              CBZ      r5,|L1.54|
;;;528        FRAMEWIN_Obj* pObj;
;;;529        WM_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;530        pObj = FRAMEWIN_H2P(hObj);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4604              MOV      r4,r0
;;;531        if (pObj) {
000014  b164              CBZ      r4,|L1.48|
;;;532          if (State) {
000016  b136              CBZ      r6,|L1.38|
;;;533            GUI_HOOK_Add(&pObj->pFirstHook, &_HOOK_Resizeable, &_HOOKFUNC_Resizeable);
000018  4a07              LDR      r2,|L1.56|
00001a  4908              LDR      r1,|L1.60|
00001c  f1040064          ADD      r0,r4,#0x64
000020  f7fffffe          BL       GUI_HOOK_Add
000024  e004              B        |L1.48|
                  |L1.38|
;;;534          } else {
;;;535            GUI_HOOK_Remove(&pObj->pFirstHook, &_HOOK_Resizeable);
000026  4905              LDR      r1,|L1.60|
000028  f1040064          ADD      r0,r4,#0x64
00002c  f7fffffe          BL       GUI_HOOK_Remove
                  |L1.48|
;;;536          }
;;;537        }
;;;538        WM_UNLOCK();
000030  f7fffffe          BL       GUI_Unlock
;;;539      }
000034  bf00              NOP      
                  |L1.54|
;;;540    }
000036  bd70              POP      {r4-r6,pc}
;;;541    
                          ENDP

                  |L1.56|
                          DCD      _HOOKFUNC_Resizeable
                  |L1.60|
                          DCD      _HOOK_Resizeable

                          AREA ||i._ChangeWindowPosSize||, CODE, READONLY, ALIGN=2

                  _ChangeWindowPosSize PROC
;;;307    */
;;;308    static void _ChangeWindowPosSize(FRAMEWIN_Handle hWin, int* px, int* py) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;309      int dx = 0, dy = 0;
00000a  2600              MOVS     r6,#0
00000c  2700              MOVS     r7,#0
;;;310      GUI_RECT Rect;
;;;311      WM_GetClientRectEx(hWin, &Rect);
00000e  4669              MOV      r1,sp
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       WM_GetClientRectEx
;;;312      /* Calculate new size of window */
;;;313      if (_CaptureFlags & FRAMEWIN_RESIZE_X) {
000016  482f              LDR      r0,|L2.212|
000018  7800              LDRB     r0,[r0,#0]  ; _CaptureFlags
00001a  f0100f01          TST      r0,#1
00001e  d00e              BEQ      |L2.62|
;;;314        dx = (_CaptureFlags & FRAMEWIN_REPOS_X) ? (_CaptureX - *px) : (*px - _CaptureX);
000020  482c              LDR      r0,|L2.212|
000022  7800              LDRB     r0,[r0,#0]  ; _CaptureFlags
000024  f0100f04          TST      r0,#4
000028  d004              BEQ      |L2.52|
00002a  492b              LDR      r1,|L2.216|
00002c  6820              LDR      r0,[r4,#0]
00002e  6809              LDR      r1,[r1,#0]  ; _CaptureX
000030  1a08              SUBS     r0,r1,r0
000032  e003              B        |L2.60|
                  |L2.52|
000034  4928              LDR      r1,|L2.216|
000036  6820              LDR      r0,[r4,#0]
000038  6809              LDR      r1,[r1,#0]  ; _CaptureX
00003a  1a40              SUBS     r0,r0,r1
                  |L2.60|
00003c  4606              MOV      r6,r0
                  |L2.62|
;;;315      }
;;;316      if (_CaptureFlags & FRAMEWIN_RESIZE_Y) {
00003e  4825              LDR      r0,|L2.212|
000040  7800              LDRB     r0,[r0,#0]  ; _CaptureFlags
000042  f0100f02          TST      r0,#2
000046  d00e              BEQ      |L2.102|
;;;317        dy = (_CaptureFlags & FRAMEWIN_REPOS_Y) ? (_CaptureY - *py) : (*py - _CaptureY);
000048  4822              LDR      r0,|L2.212|
00004a  7800              LDRB     r0,[r0,#0]  ; _CaptureFlags
00004c  f0100f08          TST      r0,#8
000050  d004              BEQ      |L2.92|
000052  4922              LDR      r1,|L2.220|
000054  6828              LDR      r0,[r5,#0]
000056  6809              LDR      r1,[r1,#0]  ; _CaptureY
000058  1a08              SUBS     r0,r1,r0
00005a  e003              B        |L2.100|
                  |L2.92|
00005c  491f              LDR      r1,|L2.220|
00005e  6828              LDR      r0,[r5,#0]
000060  6809              LDR      r1,[r1,#0]  ; _CaptureY
000062  1a40              SUBS     r0,r0,r1
                  |L2.100|
000064  4607              MOV      r7,r0
                  |L2.102|
;;;318      }
;;;319      /* Check the minimal size of window */
;;;320      if ((Rect.x1 + dx + 1) < FRAMEWIN_MINSIZE_X) {
000066  f9bd0004          LDRSH    r0,[sp,#4]
00006a  4430              ADD      r0,r0,r6
00006c  1c40              ADDS     r0,r0,#1
00006e  2814              CMP      r0,#0x14
000070  da07              BGE      |L2.130|
;;;321        dx = FRAMEWIN_MINSIZE_X - Rect.x1 - 1;
000072  f9bd0004          LDRSH    r0,[sp,#4]
000076  f1c00613          RSB      r6,r0,#0x13
;;;322        *px = _CaptureX + dx;
00007a  4817              LDR      r0,|L2.216|
00007c  6800              LDR      r0,[r0,#0]  ; _CaptureX
00007e  4430              ADD      r0,r0,r6
000080  6020              STR      r0,[r4,#0]
                  |L2.130|
;;;323      }
;;;324      if ((Rect.y1 + dy + 1) < FRAMEWIN_MINSIZE_Y) {
000082  f9bd0006          LDRSH    r0,[sp,#6]
000086  4438              ADD      r0,r0,r7
000088  1c40              ADDS     r0,r0,#1
00008a  2814              CMP      r0,#0x14
00008c  da07              BGE      |L2.158|
;;;325        dy = FRAMEWIN_MINSIZE_Y - Rect.y1 - 1;
00008e  f9bd0006          LDRSH    r0,[sp,#6]
000092  f1c00713          RSB      r7,r0,#0x13
;;;326        *py = _CaptureY + dy;
000096  4811              LDR      r0,|L2.220|
000098  6800              LDR      r0,[r0,#0]  ; _CaptureY
00009a  4438              ADD      r0,r0,r7
00009c  6028              STR      r0,[r5,#0]
                  |L2.158|
;;;327      }
;;;328      /* Set new window position */
;;;329      if (_CaptureFlags & FRAMEWIN_REPOS_X) {
00009e  480d              LDR      r0,|L2.212|
0000a0  7800              LDRB     r0,[r0,#0]  ; _CaptureFlags
0000a2  f0100f04          TST      r0,#4
0000a6  d004              BEQ      |L2.178|
;;;330        WM_MoveWindow(hWin, -dx, 0);
0000a8  2200              MOVS     r2,#0
0000aa  4271              RSBS     r1,r6,#0
0000ac  4640              MOV      r0,r8
0000ae  f7fffffe          BL       WM_MoveWindow
                  |L2.178|
;;;331      }
;;;332      if (_CaptureFlags & FRAMEWIN_REPOS_Y) {
0000b2  4808              LDR      r0,|L2.212|
0000b4  7800              LDRB     r0,[r0,#0]  ; _CaptureFlags
0000b6  f0100f08          TST      r0,#8
0000ba  d004              BEQ      |L2.198|
;;;333        WM_MoveWindow(hWin, 0, -dy);
0000bc  427a              RSBS     r2,r7,#0
0000be  2100              MOVS     r1,#0
0000c0  4640              MOV      r0,r8
0000c2  f7fffffe          BL       WM_MoveWindow
                  |L2.198|
;;;334      }
;;;335      /* Set new window size */
;;;336      WM_ResizeWindow(hWin, dx, dy);
0000c6  463a              MOV      r2,r7
0000c8  4631              MOV      r1,r6
0000ca  4640              MOV      r0,r8
0000cc  f7fffffe          BL       WM_ResizeWindow
;;;337    }
0000d0  e8bd81fc          POP      {r2-r8,pc}
;;;338    
                          ENDP

                  |L2.212|
                          DCD      _CaptureFlags
                  |L2.216|
                          DCD      _CaptureX
                  |L2.220|
                          DCD      _CaptureY

                          AREA ||i._CheckBorderX||, CODE, READONLY, ALIGN=1

                  _CheckBorderX PROC
;;;342    */
;;;343    static int _CheckBorderX(int x, int x1, int Border) {
000000  b510              PUSH     {r4,lr}
000002  4603              MOV      r3,r0
;;;344      int Mode = 0;
000004  2000              MOVS     r0,#0
;;;345      if (x > (x1 - Border)) {
000006  1a8c              SUBS     r4,r1,r2
000008  429c              CMP      r4,r3
00000a  da01              BGE      |L3.16|
;;;346        Mode = FRAMEWIN_RESIZE_X;
00000c  2001              MOVS     r0,#1
00000e  e002              B        |L3.22|
                  |L3.16|
;;;347      } else if (x < (Border)) {
000010  4293              CMP      r3,r2
000012  da00              BGE      |L3.22|
;;;348        Mode = FRAMEWIN_RESIZE_X | FRAMEWIN_REPOS_X;
000014  2005              MOVS     r0,#5
                  |L3.22|
;;;349      }
;;;350      return Mode;
;;;351    }
000016  bd10              POP      {r4,pc}
;;;352    
                          ENDP


                          AREA ||i._CheckBorderY||, CODE, READONLY, ALIGN=1

                  _CheckBorderY PROC
;;;356    */
;;;357    static int _CheckBorderY(int y, int y1, int Border) {
000000  b510              PUSH     {r4,lr}
000002  4603              MOV      r3,r0
;;;358      int Mode = 0;
000004  2000              MOVS     r0,#0
;;;359      if (y > (y1 - Border)) {
000006  1a8c              SUBS     r4,r1,r2
000008  429c              CMP      r4,r3
00000a  da01              BGE      |L4.16|
;;;360        Mode = FRAMEWIN_RESIZE_Y;
00000c  2002              MOVS     r0,#2
00000e  e002              B        |L4.22|
                  |L4.16|
;;;361      } else if (y < (Border)) {
000010  4293              CMP      r3,r2
000012  da00              BGE      |L4.22|
;;;362        Mode = FRAMEWIN_RESIZE_Y | FRAMEWIN_REPOS_Y;
000014  200a              MOVS     r0,#0xa
                  |L4.22|
;;;363      }
;;;364      return Mode;
;;;365    }
000016  bd10              POP      {r4,pc}
;;;366    
                          ENDP


                          AREA ||i._CheckReactBorder||, CODE, READONLY, ALIGN=1

                  _CheckReactBorder PROC
;;;370    */
;;;371    static int _CheckReactBorder(FRAMEWIN_Handle hWin, int x, int y) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;372      int Mode = 0;
00000a  2400              MOVS     r4,#0
;;;373      GUI_RECT r;
;;;374      WM_GetClientRectEx(hWin, &r);
00000c  4669              MOV      r1,sp
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       WM_GetClientRectEx
;;;375      if ((x >= 0) && (y >= 0) && (x <= r.x1) && (y <= r.y1)) {
000014  2d00              CMP      r5,#0
000016  db28              BLT      |L5.106|
000018  2e00              CMP      r6,#0
00001a  db26              BLT      |L5.106|
00001c  f9bd0004          LDRSH    r0,[sp,#4]
000020  42a8              CMP      r0,r5
000022  db22              BLT      |L5.106|
000024  f9bd0006          LDRSH    r0,[sp,#6]
000028  42b0              CMP      r0,r6
00002a  db1e              BLT      |L5.106|
;;;376        Mode |=     _CheckBorderX(x, r.x1, FRAMEWIN_REACT_BORDER);
00002c  f9bd1004          LDRSH    r1,[sp,#4]
000030  2203              MOVS     r2,#3
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       _CheckBorderX
000038  4304              ORRS     r4,r4,r0
;;;377        if (Mode) {
00003a  b13c              CBZ      r4,|L5.76|
;;;378          Mode |=   _CheckBorderY(y, r.y1, FRAMEWIN_REACT_BORDER * 4);
00003c  f9bd1006          LDRSH    r1,[sp,#6]
000040  220c              MOVS     r2,#0xc
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       _CheckBorderY
000048  4304              ORRS     r4,r4,r0
00004a  e00e              B        |L5.106|
                  |L5.76|
;;;379        } else {
;;;380          Mode |=   _CheckBorderY(y, r.y1, FRAMEWIN_REACT_BORDER);
00004c  f9bd1006          LDRSH    r1,[sp,#6]
000050  2203              MOVS     r2,#3
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       _CheckBorderY
000058  4304              ORRS     r4,r4,r0
;;;381          if (Mode) {
00005a  b134              CBZ      r4,|L5.106|
;;;382            Mode |= _CheckBorderX(x, r.x1, FRAMEWIN_REACT_BORDER * 4);
00005c  f9bd1004          LDRSH    r1,[sp,#4]
000060  220c              MOVS     r2,#0xc
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       _CheckBorderX
000068  4304              ORRS     r4,r4,r0
                  |L5.106|
;;;383          }
;;;384        }
;;;385      }
;;;386      return Mode;
00006a  4620              MOV      r0,r4
;;;387    }
00006c  e8bd81fc          POP      {r2-r8,pc}
;;;388    
                          ENDP


                          AREA ||i._HOOKFUNC_Resizeable||, CODE, READONLY, ALIGN=2

                  _HOOKFUNC_Resizeable PROC
;;;490    */
;;;491    static int _HOOKFUNC_Resizeable(WM_MESSAGE* pMsg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;492      WM_HWIN hWin = pMsg->hWin;
000004  f9b45004          LDRSH    r5,[r4,#4]
;;;493      if (WM_HasCaptured(hWin) && (_CaptureFlags == 0)) {
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       WM_HasCaptured
00000e  b120              CBZ      r0,|L6.26|
000010  4811              LDR      r0,|L6.88|
000012  6800              LDR      r0,[r0,#0]  ; _CaptureFlags
000014  b908              CBNZ     r0,|L6.26|
;;;494        return 0;
000016  2000              MOVS     r0,#0
                  |L6.24|
;;;495      }
;;;496      if (FRAMEWIN_IsMinimized(hWin) || FRAMEWIN_IsMaximized(hWin)) {
;;;497        return 0;
;;;498      }
;;;499      switch(pMsg->MsgId) {
;;;500      case WM_TOUCH:
;;;501        return _OnTouch(hWin, pMsg);
;;;502    #if (GUI_SUPPORT_MOUSE & GUI_SUPPORT_CURSOR)
;;;503      case WM_MOUSEOVER:
;;;504        return _OnMouseOver(hWin, pMsg);
;;;505    #endif
;;;506      case WM_CAPTURE_RELEASED:
;;;507      #if GUI_SUPPORT_CURSOR
;;;508        _SetResizeCursor(0);
;;;509      #endif
;;;510        _CaptureFlags = 0;
;;;511        return 1;
;;;512      }
;;;513      return 0;
;;;514    }
000018  bd70              POP      {r4-r6,pc}
                  |L6.26|
00001a  4628              MOV      r0,r5                 ;496
00001c  f7fffffe          BL       FRAMEWIN_IsMinimized
000020  b918              CBNZ     r0,|L6.42|
000022  4628              MOV      r0,r5                 ;496
000024  f7fffffe          BL       FRAMEWIN_IsMaximized
000028  b108              CBZ      r0,|L6.46|
                  |L6.42|
00002a  2000              MOVS     r0,#0                 ;497
00002c  e7f4              B        |L6.24|
                  |L6.46|
00002e  6820              LDR      r0,[r4,#0]            ;499
000030  280c              CMP      r0,#0xc               ;499
000032  d002              BEQ      |L6.58|
000034  2818              CMP      r0,#0x18              ;499
000036  d10d              BNE      |L6.84|
000038  e004              B        |L6.68|
                  |L6.58|
00003a  4621              MOV      r1,r4                 ;501
00003c  4628              MOV      r0,r5                 ;501
00003e  f7fffffe          BL       _OnTouch
000042  e7e9              B        |L6.24|
                  |L6.68|
000044  2000              MOVS     r0,#0                 ;508
000046  f7fffffe          BL       _SetResizeCursor
00004a  2000              MOVS     r0,#0                 ;510
00004c  4902              LDR      r1,|L6.88|
00004e  6008              STR      r0,[r1,#0]            ;510  ; _CaptureFlags
000050  2001              MOVS     r0,#1                 ;511
000052  e7e1              B        |L6.24|
                  |L6.84|
000054  2000              MOVS     r0,#0                 ;513
000056  e7df              B        |L6.24|
;;;515    
                          ENDP

                  |L6.88|
                          DCD      _CaptureFlags

                          AREA ||i._OnTouch||, CODE, READONLY, ALIGN=2

                  _OnTouch PROC
;;;392    */
;;;393    static int _OnTouch(FRAMEWIN_Handle hWin, WM_MESSAGE* pMsg) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;394      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
000008  68ac              LDR      r4,[r5,#8]
;;;395      if (pState) {  /* Something happened in our area (pressed or released) */
00000a  2c00              CMP      r4,#0
00000c  d03d              BEQ      |L7.138|
;;;396        int x, y, Mode;
;;;397        x    = pState->x;
00000e  6820              LDR      r0,[r4,#0]
000010  9001              STR      r0,[sp,#4]
;;;398        y    = pState->y;
000012  6860              LDR      r0,[r4,#4]
000014  9000              STR      r0,[sp,#0]
;;;399        Mode = _CheckReactBorder(hWin, x, y);
000016  4638              MOV      r0,r7
000018  e9dd2100          LDRD     r2,r1,[sp,#0]
00001c  f7fffffe          BL       _CheckReactBorder
000020  4606              MOV      r6,r0
;;;400        if (pState->Pressed == 1) {
000022  7a20              LDRB     r0,[r4,#8]
000024  2801              CMP      r0,#1
000026  d121              BNE      |L7.108|
;;;401          if (_CaptureFlags & FRAMEWIN_RESIZE) {
000028  4819              LDR      r0,|L7.144|
00002a  7800              LDRB     r0,[r0,#0]  ; _CaptureFlags
00002c  f0100f0f          TST      r0,#0xf
000030  d00d              BEQ      |L7.78|
;;;402            _ChangeWindowPosSize(hWin, &x, &y);
000032  466a              MOV      r2,sp
000034  a901              ADD      r1,sp,#4
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       _ChangeWindowPosSize
;;;403            _SetCapture(hWin, x, y, 0);
00003c  2300              MOVS     r3,#0
00003e  4638              MOV      r0,r7
000040  e9dd2100          LDRD     r2,r1,[sp,#0]
000044  f7fffffe          BL       _SetCapture
;;;404            return 1;
000048  2001              MOVS     r0,#1
                  |L7.74|
;;;405          } else if (Mode) {
;;;406            WM_SetFocus(hWin);
;;;407            WM_BringToTop(hWin);
;;;408            _SetCapture(hWin, x, y, Mode);
;;;409            return 1;
;;;410          }
;;;411          #if (GUI_SUPPORT_MOUSE & GUI_SUPPORT_CURSOR)
;;;412          else if (_CaptureFlags) {
;;;413            WM_ReleaseCapture();
;;;414            return 1;
;;;415          }
;;;416          #endif
;;;417        } else if (WM_HasCaptured(hWin)) {
;;;418          _CaptureFlags &= ~(FRAMEWIN_RESIZE);
;;;419          #if (GUI_SUPPORT_MOUSE & GUI_SUPPORT_CURSOR)
;;;420            if (!Mode)
;;;421          #endif
;;;422          {
;;;423            WM_ReleaseCapture();
;;;424          }
;;;425          return 1;
;;;426        }
;;;427      }
;;;428      return 0;
;;;429    }
00004a  e8bd81fc          POP      {r2-r8,pc}
                  |L7.78|
00004e  b1de              CBZ      r6,|L7.136|
000050  4638              MOV      r0,r7                 ;406
000052  f7fffffe          BL       WM_SetFocus
000056  4638              MOV      r0,r7                 ;407
000058  f7fffffe          BL       WM_BringToTop
00005c  4633              MOV      r3,r6                 ;408
00005e  4638              MOV      r0,r7                 ;408
000060  e9dd2100          LDRD     r2,r1,[sp,#0]         ;408
000064  f7fffffe          BL       _SetCapture
000068  2001              MOVS     r0,#1                 ;409
00006a  e7ee              B        |L7.74|
                  |L7.108|
00006c  4638              MOV      r0,r7                 ;417
00006e  f7fffffe          BL       WM_HasCaptured
000072  b148              CBZ      r0,|L7.136|
000074  4806              LDR      r0,|L7.144|
000076  6800              LDR      r0,[r0,#0]            ;418  ; _CaptureFlags
000078  f020000f          BIC      r0,r0,#0xf            ;418
00007c  4904              LDR      r1,|L7.144|
00007e  6008              STR      r0,[r1,#0]            ;418  ; _CaptureFlags
000080  f7fffffe          BL       WM_ReleaseCapture
000084  2001              MOVS     r0,#1                 ;425
000086  e7e0              B        |L7.74|
                  |L7.136|
000088  bf00              NOP                            ;427
                  |L7.138|
00008a  2000              MOVS     r0,#0                 ;428
00008c  e7dd              B        |L7.74|
;;;430    
                          ENDP

00008e  0000              DCW      0x0000
                  |L7.144|
                          DCD      _CaptureFlags

                          AREA ||i._SetCapture||, CODE, READONLY, ALIGN=2

                  _SetCapture PROC
;;;282    */
;;;283    static void _SetCapture(FRAMEWIN_Handle hWin, int x, int y, int Mode) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
;;;284      if ((_CaptureFlags & FRAMEWIN_REPOS_X) == 0) {
00000c  4811              LDR      r0,|L8.84|
00000e  7800              LDRB     r0,[r0,#0]  ; _CaptureFlags
000010  f0100f04          TST      r0,#4
000014  d101              BNE      |L8.26|
;;;285        _CaptureX = x;
000016  4810              LDR      r0,|L8.88|
000018  6005              STR      r5,[r0,#0]  ; _CaptureX
                  |L8.26|
;;;286      }
;;;287      if ((_CaptureFlags & FRAMEWIN_REPOS_Y) == 0) {
00001a  480e              LDR      r0,|L8.84|
00001c  7800              LDRB     r0,[r0,#0]  ; _CaptureFlags
00001e  f0100f08          TST      r0,#8
000022  d101              BNE      |L8.40|
;;;288        _CaptureY = y;
000024  480d              LDR      r0,|L8.92|
000026  6006              STR      r6,[r0,#0]  ; _CaptureY
                  |L8.40|
;;;289      }
;;;290      if (Mode) {
000028  b194              CBZ      r4,|L8.80|
;;;291        if (WM_HasCaptured(hWin) == 0) {
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       WM_HasCaptured
000030  b918              CBNZ     r0,|L8.58|
;;;292          WM_SetCapture(hWin, 0);
000032  2100              MOVS     r1,#0
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       WM_SetCapture
                  |L8.58|
;;;293        }
;;;294      #if GUI_SUPPORT_CURSOR
;;;295        _SetResizeCursor(Mode);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       _SetResizeCursor
;;;296      #endif
;;;297        if (Mode & FRAMEWIN_MOUSEOVER) {
000040  f0140f10          TST      r4,#0x10
000044  d000              BEQ      |L8.72|
;;;298          Mode = 0;
000046  2400              MOVS     r4,#0
                  |L8.72|
;;;299        }
;;;300        _CaptureFlags = (Mode | FRAMEWIN_MOUSEOVER);
000048  f0440010          ORR      r0,r4,#0x10
00004c  4901              LDR      r1,|L8.84|
00004e  6008              STR      r0,[r1,#0]  ; _CaptureFlags
                  |L8.80|
;;;301      }
;;;302    }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;303    
                          ENDP

                  |L8.84|
                          DCD      _CaptureFlags
                  |L8.88|
                          DCD      _CaptureX
                  |L8.92|
                          DCD      _CaptureY

                          AREA ||i._SetResizeCursor||, CODE, READONLY, ALIGN=2

                  _SetResizeCursor PROC
;;;247    #if GUI_SUPPORT_CURSOR
;;;248    static void _SetResizeCursor(int Mode) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;249      const GUI_CURSOR GUI_UNI_PTR * pNewCursor = NULL;
000004  2500              MOVS     r5,#0
;;;250      if (Mode) {
000006  b194              CBZ      r4,|L9.46|
;;;251        int Direction;
;;;252        Direction = Mode & (FRAMEWIN_RESIZE_X | FRAMEWIN_RESIZE_Y);
000008  f0040003          AND      r0,r4,#3
;;;253        if (Direction == FRAMEWIN_RESIZE_X) {
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L9.20|
;;;254          pNewCursor = &_ResizeCursorH;
000010  4d12              LDR      r5,|L9.92|
000012  e00b              B        |L9.44|
                  |L9.20|
;;;255        } else if (Direction == FRAMEWIN_RESIZE_Y) {
000014  2802              CMP      r0,#2
000016  d101              BNE      |L9.28|
;;;256          pNewCursor = &_ResizeCursorV;
000018  4d11              LDR      r5,|L9.96|
00001a  e007              B        |L9.44|
                  |L9.28|
;;;257        } else {
;;;258          Direction = Mode & (FRAMEWIN_REPOS_X | FRAMEWIN_REPOS_Y);
00001c  f004000c          AND      r0,r4,#0xc
;;;259          if ((Direction == (FRAMEWIN_REPOS_X | FRAMEWIN_REPOS_Y)) || !Direction) {
000020  280c              CMP      r0,#0xc
000022  d000              BEQ      |L9.38|
000024  b908              CBNZ     r0,|L9.42|
                  |L9.38|
;;;260            pNewCursor = &_ResizeCursorDD;
000026  4d0f              LDR      r5,|L9.100|
000028  e000              B        |L9.44|
                  |L9.42|
;;;261          } else {
;;;262            pNewCursor = &_ResizeCursorDU;
00002a  4d0f              LDR      r5,|L9.104|
                  |L9.44|
;;;263          }
;;;264        }
;;;265      }
00002c  bf00              NOP      
                  |L9.46|
;;;266      if (pNewCursor) {
00002e  b14d              CBZ      r5,|L9.68|
;;;267        const GUI_CURSOR GUI_UNI_PTR * pOldCursor;
;;;268        pOldCursor = GUI_CURSOR_Select(pNewCursor);
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       GUI_CURSOR_Select
000036  4606              MOV      r6,r0
;;;269        if (_pOldCursor == NULL) {
000038  480c              LDR      r0,|L9.108|
00003a  6800              LDR      r0,[r0,#0]  ; _pOldCursor
00003c  b908              CBNZ     r0,|L9.66|
;;;270          _pOldCursor = pOldCursor;
00003e  480b              LDR      r0,|L9.108|
000040  6006              STR      r6,[r0,#0]  ; _pOldCursor
                  |L9.66|
;;;271        }
;;;272      } else if (_pOldCursor) {
000042  e009              B        |L9.88|
                  |L9.68|
000044  4809              LDR      r0,|L9.108|
000046  6800              LDR      r0,[r0,#0]  ; _pOldCursor
000048  b130              CBZ      r0,|L9.88|
;;;273        GUI_CURSOR_Select(_pOldCursor);
00004a  4808              LDR      r0,|L9.108|
00004c  6800              LDR      r0,[r0,#0]  ; _pOldCursor
00004e  f7fffffe          BL       GUI_CURSOR_Select
;;;274        _pOldCursor = NULL;
000052  2000              MOVS     r0,#0
000054  4905              LDR      r1,|L9.108|
000056  6008              STR      r0,[r1,#0]  ; _pOldCursor
                  |L9.88|
;;;275      }
;;;276    }
000058  bd70              POP      {r4-r6,pc}
;;;277    #endif
                          ENDP

00005a  0000              DCW      0x0000
                  |L9.92|
                          DCD      _ResizeCursorH
                  |L9.96|
                          DCD      _ResizeCursorV
                  |L9.100|
                          DCD      _ResizeCursorDD
                  |L9.104|
                          DCD      _ResizeCursorDU
                  |L9.108|
                          DCD      _pOldCursor

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _ColorsCursor
                          DCD      0x000000ff
                          DCD      0x00000000
                          DCD      0x00ffffff
                  _PalCursor
                          DCD      0x00000003
000010  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ColorsCursor
                  _acResizeCursorH
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00400040          DCB      0x00,0x40,0x00,0x40
000030  00014000          DCB      0x00,0x01,0x40,0x00
000034  50000640          DCB      0x50,0x00,0x06,0x40
000038  0064001a          DCB      0x00,0x64,0x00,0x1a
00003c  55556900          DCB      0x55,0x55,0x69,0x00
000040  6aaaaaaa          DCB      0x6a,0xaa,0xaa,0xaa
000044  401a5555          DCB      0x40,0x1a,0x55,0x55
000048  69000640          DCB      0x69,0x00,0x06,0x40
00004c  00640001          DCB      0x00,0x64,0x00,0x01
000050  40005000          DCB      0x40,0x00,0x50,0x00
000054  00400040          DCB      0x00,0x40,0x00,0x40
000058  00000000          DCB      0x00,0x00,0x00,0x00
00005c  00000000          DCB      0x00,0x00,0x00,0x00
000060  00000000          DCB      0x00,0x00,0x00,0x00
000064  00000000          DCB      0x00,0x00,0x00,0x00
000068  00000000          DCB      0x00,0x00,0x00,0x00
00006c  00000000          DCB      0x00,0x00,0x00,0x00
                  _bmResizeCursorH
000070  00110011          DCW      0x0011,0x0011
000074  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorH
                          DCD      _PalCursor
                          DCD      0x00000000
                  _ResizeCursorH
                          DCD      _bmResizeCursorH
                          DCD      0x00000008
                          DCD      0x00000008
                  _acResizeCursorV
000090  00004000          DCB      0x00,0x00,0x40,0x00
000094  00000190          DCB      0x00,0x00,0x01,0x90
000098  00000006          DCB      0x00,0x00,0x00,0x06
00009c  a4000000          DCB      0xa4,0x00,0x00,0x00
0000a0  1aa90000          DCB      0x1a,0xa9,0x00,0x00
0000a4  00559540          DCB      0x00,0x55,0x95,0x40
0000a8  00000190          DCB      0x00,0x00,0x01,0x90
0000ac  00000001          DCB      0x00,0x00,0x00,0x01
0000b0  90000000          DCB      0x90,0x00,0x00,0x00
0000b4  01900000          DCB      0x01,0x90,0x00,0x00
0000b8  00019000          DCB      0x00,0x01,0x90,0x00
0000bc  00000190          DCB      0x00,0x00,0x01,0x90
0000c0  00000001          DCB      0x00,0x00,0x00,0x01
0000c4  90000000          DCB      0x90,0x00,0x00,0x00
0000c8  01900000          DCB      0x01,0x90,0x00,0x00
0000cc  00559540          DCB      0x00,0x55,0x95,0x40
0000d0  00001aa9          DCB      0x00,0x00,0x1a,0xa9
0000d4  00000006          DCB      0x00,0x00,0x00,0x06
0000d8  a4000000          DCB      0xa4,0x00,0x00,0x00
0000dc  01900000          DCB      0x01,0x90,0x00,0x00
0000e0  00004000          DCB      0x00,0x00,0x40,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
                  _bmResizeCursorV
0000e8  00110011          DCW      0x0011,0x0011
0000ec  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorV
                          DCD      _PalCursor
                          DCD      0x00000000
                  _ResizeCursorV
                          DCD      _bmResizeCursorV
                          DCD      0x00000008
                          DCD      0x00000008
                  _acResizeCursorDD
000108  00000000          DCB      0x00,0x00,0x00,0x00
00010c  00000000          DCB      0x00,0x00,0x00,0x00
000110  00000555          DCB      0x00,0x00,0x05,0x55
000114  00000006          DCB      0x00,0x00,0x00,0x06
000118  a4000000          DCB      0xa4,0x00,0x00,0x00
00011c  06900000          DCB      0x06,0x90,0x00,0x00
000120  00066400          DCB      0x00,0x06,0x64,0x00
000124  00000519          DCB      0x00,0x00,0x05,0x19
000128  00000004          DCB      0x00,0x00,0x00,0x04
00012c  06400000          DCB      0x06,0x40,0x00,0x00
000130  00019000          DCB      0x00,0x01,0x90,0x00
000134  00000064          DCB      0x00,0x00,0x00,0x64
000138  04000000          DCB      0x04,0x00,0x00,0x00
00013c  19140000          DCB      0x19,0x14,0x00,0x00
000140  00066400          DCB      0x00,0x06,0x64,0x00
000144  000001a4          DCB      0x00,0x00,0x01,0xa4
000148  00000006          DCB      0x00,0x00,0x00,0x06
00014c  a4000000          DCB      0xa4,0x00,0x00,0x00
000150  15540000          DCB      0x15,0x54,0x00,0x00
000154  00000000          DCB      0x00,0x00,0x00,0x00
000158  00000000          DCB      0x00,0x00,0x00,0x00
00015c  00000000          DCB      0x00,0x00,0x00,0x00
                  _bmResizeCursorDD
000160  00110011          DCW      0x0011,0x0011
000164  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorDD
                          DCD      _PalCursor
                          DCD      0x00000000
                  _ResizeCursorDD
                          DCD      _bmResizeCursorDD
                          DCD      0x00000008
                          DCD      0x00000008
                  _acResizeCursorDU
000180  00000000          DCB      0x00,0x00,0x00,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
000188  00000000          DCB      0x00,0x00,0x00,0x00
00018c  15540000          DCB      0x15,0x54,0x00,0x00
000190  0006a400          DCB      0x00,0x06,0xa4,0x00
000194  000001a4          DCB      0x00,0x00,0x01,0xa4
000198  00000006          DCB      0x00,0x00,0x00,0x06
00019c  64000000          DCB      0x64,0x00,0x00,0x00
0001a0  19140000          DCB      0x19,0x14,0x00,0x00
0001a4  00640400          DCB      0x00,0x64,0x04,0x00
0001a8  00019000          DCB      0x00,0x01,0x90,0x00
0001ac  00040640          DCB      0x00,0x04,0x06,0x40
0001b0  00000519          DCB      0x00,0x00,0x05,0x19
0001b4  00000006          DCB      0x00,0x00,0x00,0x06
0001b8  64000000          DCB      0x64,0x00,0x00,0x00
0001bc  06900000          DCB      0x06,0x90,0x00,0x00
0001c0  0006a400          DCB      0x00,0x06,0xa4,0x00
0001c4  00000555          DCB      0x00,0x00,0x05,0x55
0001c8  00000000          DCB      0x00,0x00,0x00,0x00
0001cc  00000000          DCB      0x00,0x00,0x00,0x00
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
                  _bmResizeCursorDU
0001d8  00110011          DCW      0x0011,0x0011
0001dc  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorDU
                          DCD      _PalCursor
                          DCD      0x00000000
                  _ResizeCursorDU
                          DCD      _bmResizeCursorDU
                          DCD      0x00000008
                          DCD      0x00000008

                          AREA ||.data||, DATA, ALIGN=2

                  _HOOK_Resizeable
                          %        8
                  _CaptureX
                          DCD      0x00000000
                  _CaptureY
                          DCD      0x00000000
                  _CaptureFlags
                          DCD      0x00000000
                  _pOldCursor
                          DCD      0x00000000
