; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_task.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\os_task.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCOS-II\Source\os_task.c]
                          THUMB

                          AREA ||i.OSTaskChangePrio||, CODE, READONLY, ALIGN=2

                  OSTaskChangePrio PROC
;;;50     #if OS_TASK_CHANGE_PRIO_EN > 0u
;;;51     INT8U  OSTaskChangePrio (INT8U  oldprio,
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;52                              INT8U  newprio)
;;;53     {
000004  b085              SUB      sp,sp,#0x14
000006  4688              MOV      r8,r1
;;;54     #if (OS_EVENT_EN)
;;;55         OS_EVENT  *pevent;
;;;56     #if (OS_EVENT_MULTI_EN > 0u)
;;;57         OS_EVENT **pevents;
;;;58     #endif
;;;59     #endif
;;;60         OS_TCB    *ptcb;
;;;61         INT8U      y_new;
;;;62         INT8U      x_new;
;;;63         INT8U      y_old;
;;;64         OS_PRIO    bity_new;
;;;65         OS_PRIO    bitx_new;
;;;66         OS_PRIO    bity_old;
;;;67         OS_PRIO    bitx_old;
;;;68     #if OS_CRITICAL_METHOD == 3u
;;;69         OS_CPU_SR  cpu_sr = 0u;                                 /* Storage for CPU status register         */
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;70     #endif
;;;71     
;;;72     
;;;73     /*$PAGE*/
;;;74     #if OS_ARG_CHK_EN > 0u
;;;75         if (oldprio >= OS_LOWEST_PRIO) {
;;;76             if (oldprio != OS_PRIO_SELF) {
;;;77                 return (OS_ERR_PRIO_INVALID);
;;;78             }
;;;79         }
;;;80         if (newprio >= OS_LOWEST_PRIO) {
;;;81             return (OS_ERR_PRIO_INVALID);
;;;82         }
;;;83     #endif
;;;84         OS_ENTER_CRITICAL();
00000c  f7fffffe          BL       OS_CPU_SR_Save
000010  9001              STR      r0,[sp,#4]
;;;85         if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
000012  485e              LDR      r0,|L1.396|
000014  f8500028          LDR      r0,[r0,r8,LSL #2]
000018  b130              CBZ      r0,|L1.40|
;;;86             OS_EXIT_CRITICAL();
00001a  9801              LDR      r0,[sp,#4]
00001c  f7fffffe          BL       OS_CPU_SR_Restore
;;;87             return (OS_ERR_PRIO_EXIST);
000020  2028              MOVS     r0,#0x28
                  |L1.34|
;;;88         }
;;;89         if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
;;;90             oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
;;;91         }
;;;92         ptcb = OSTCBPrioTbl[oldprio];
;;;93         if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
;;;94             OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;95             return (OS_ERR_PRIO);
;;;96         }
;;;97         if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
;;;98             OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;99             return (OS_ERR_TASK_NOT_EXIST);
;;;100        }
;;;101    #if OS_LOWEST_PRIO <= 63u
;;;102        y_new                 = (INT8U)(newprio >> 3u);         /* Yes, compute new TCB fields             */
;;;103        x_new                 = (INT8U)(newprio & 0x07u);
;;;104    #else
;;;105        y_new                 = (INT8U)((INT8U)(newprio >> 4u) & 0x0Fu);
;;;106        x_new                 = (INT8U)(newprio & 0x0Fu);
;;;107    #endif
;;;108        bity_new              = (OS_PRIO)(1uL << y_new);
;;;109        bitx_new              = (OS_PRIO)(1uL << x_new);
;;;110    
;;;111        OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
;;;112        OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
;;;113        y_old                 =  ptcb->OSTCBY;
;;;114        bity_old              =  ptcb->OSTCBBitY;
;;;115        bitx_old              =  ptcb->OSTCBBitX;
;;;116        if ((OSRdyTbl[y_old] &   bitx_old) != 0u) {             /* If task is ready make it not            */
;;;117             OSRdyTbl[y_old] &= (OS_PRIO)~bitx_old;
;;;118             if (OSRdyTbl[y_old] == 0u) {
;;;119                 OSRdyGrp &= (OS_PRIO)~bity_old;
;;;120             }
;;;121             OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
;;;122             OSRdyTbl[y_new] |= bitx_new;
;;;123        }
;;;124    
;;;125    #if (OS_EVENT_EN)
;;;126        pevent = ptcb->OSTCBEventPtr;
;;;127        if (pevent != (OS_EVENT *)0) {
;;;128            pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;    /* Remove old task prio from wait list     */
;;;129            if (pevent->OSEventTbl[y_old] == 0u) {
;;;130                pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
;;;131            }
;;;132            pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
;;;133            pevent->OSEventTbl[y_new] |= bitx_new;
;;;134        }
;;;135    #if (OS_EVENT_MULTI_EN > 0u)
;;;136        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
;;;137            pevents =  ptcb->OSTCBEventMultiPtr;
;;;138            pevent  = *pevents;
;;;139            while (pevent != (OS_EVENT *)0) {
;;;140                pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;   /* Remove old task prio from wait lists */
;;;141                if (pevent->OSEventTbl[y_old] == 0u) {
;;;142                    pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
;;;143                }
;;;144                pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
;;;145                pevent->OSEventTbl[y_new] |= bitx_new;
;;;146                pevents++;
;;;147                pevent                     = *pevents;
;;;148            }
;;;149        }
;;;150    #endif
;;;151    #endif
;;;152    
;;;153        ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
;;;154        ptcb->OSTCBY    = y_new;
;;;155        ptcb->OSTCBX    = x_new;
;;;156        ptcb->OSTCBBitY = bity_new;
;;;157        ptcb->OSTCBBitX = bitx_new;
;;;158        OS_EXIT_CRITICAL();
;;;159        if (OSRunning == OS_TRUE) {
;;;160            OS_Sched();                                         /* Find new highest priority task          */
;;;161        }
;;;162        return (OS_ERR_NONE);
;;;163    }
000022  b007              ADD      sp,sp,#0x1c
000024  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.40|
000028  9805              LDR      r0,[sp,#0x14]         ;89
00002a  28ff              CMP      r0,#0xff              ;89
00002c  d104              BNE      |L1.56|
00002e  4858              LDR      r0,|L1.400|
000030  6800              LDR      r0,[r0,#0]            ;90  ; OSTCBCur
000032  f8900036          LDRB     r0,[r0,#0x36]         ;90
000036  9005              STR      r0,[sp,#0x14]         ;90
                  |L1.56|
000038  4954              LDR      r1,|L1.396|
00003a  9805              LDR      r0,[sp,#0x14]         ;92
00003c  f8515020          LDR      r5,[r1,r0,LSL #2]     ;92
000040  b925              CBNZ     r5,|L1.76|
000042  9801              LDR      r0,[sp,#4]            ;94
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  2029              MOVS     r0,#0x29              ;95
00004a  e7ea              B        |L1.34|
                  |L1.76|
00004c  2d01              CMP      r5,#1                 ;97
00004e  d104              BNE      |L1.90|
000050  9801              LDR      r0,[sp,#4]            ;98
000052  f7fffffe          BL       OS_CPU_SR_Restore
000056  2043              MOVS     r0,#0x43              ;99
000058  e7e3              B        |L1.34|
                  |L1.90|
00005a  ea4f07e8          ASR      r7,r8,#3              ;102
00005e  f0080007          AND      r0,r8,#7              ;103
000062  9003              STR      r0,[sp,#0xc]          ;103
000064  2001              MOVS     r0,#1                 ;108
000066  40b8              LSLS     r0,r0,r7              ;108
000068  f00009ff          AND      r9,r0,#0xff           ;108
00006c  2101              MOVS     r1,#1                 ;109
00006e  9803              LDR      r0,[sp,#0xc]          ;109
000070  4081              LSLS     r1,r1,r0              ;109
000072  f0010aff          AND      r10,r1,#0xff          ;109
000076  2100              MOVS     r1,#0                 ;111
000078  4a44              LDR      r2,|L1.396|
00007a  9805              LDR      r0,[sp,#0x14]         ;111
00007c  f8421020          STR      r1,[r2,r0,LSL #2]     ;111
000080  4610              MOV      r0,r2                 ;112
000082  f8405028          STR      r5,[r0,r8,LSL #2]     ;112
000086  f8956038          LDRB     r6,[r5,#0x38]         ;113
00008a  f895003a          LDRB     r0,[r5,#0x3a]         ;114
00008e  9002              STR      r0,[sp,#8]            ;114
000090  f895b039          LDRB     r11,[r5,#0x39]        ;115
000094  483f              LDR      r0,|L1.404|
000096  5d80              LDRB     r0,[r0,r6]            ;116
000098  ea100f0b          TST      r0,r11                ;116
00009c  d01a              BEQ      |L1.212|
00009e  483d              LDR      r0,|L1.404|
0000a0  5d80              LDRB     r0,[r0,r6]            ;117
0000a2  ea20000b          BIC      r0,r0,r11             ;117
0000a6  493b              LDR      r1,|L1.404|
0000a8  5588              STRB     r0,[r1,r6]            ;117
0000aa  4608              MOV      r0,r1                 ;118
0000ac  5d80              LDRB     r0,[r0,r6]            ;118
0000ae  b928              CBNZ     r0,|L1.188|
0000b0  4839              LDR      r0,|L1.408|
0000b2  7800              LDRB     r0,[r0,#0]            ;119  ; OSRdyGrp
0000b4  9902              LDR      r1,[sp,#8]            ;119
0000b6  4388              BICS     r0,r0,r1              ;119
0000b8  4937              LDR      r1,|L1.408|
0000ba  7008              STRB     r0,[r1,#0]            ;119
                  |L1.188|
0000bc  4836              LDR      r0,|L1.408|
0000be  7800              LDRB     r0,[r0,#0]            ;121  ; OSRdyGrp
0000c0  ea400009          ORR      r0,r0,r9              ;121
0000c4  4934              LDR      r1,|L1.408|
0000c6  7008              STRB     r0,[r1,#0]            ;121
0000c8  4832              LDR      r0,|L1.404|
0000ca  5dc0              LDRB     r0,[r0,r7]            ;122
0000cc  ea40000a          ORR      r0,r0,r10             ;122
0000d0  4930              LDR      r1,|L1.404|
0000d2  55c8              STRB     r0,[r1,r7]            ;122
                  |L1.212|
0000d4  69ec              LDR      r4,[r5,#0x1c]         ;126
0000d6  b1d4              CBZ      r4,|L1.270|
0000d8  f104000b          ADD      r0,r4,#0xb            ;128
0000dc  5d80              LDRB     r0,[r0,r6]            ;128
0000de  ea20000b          BIC      r0,r0,r11             ;128
0000e2  f104010b          ADD      r1,r4,#0xb            ;128
0000e6  5588              STRB     r0,[r1,r6]            ;128
0000e8  4608              MOV      r0,r1                 ;129
0000ea  5d80              LDRB     r0,[r0,r6]            ;129
0000ec  b918              CBNZ     r0,|L1.246|
0000ee  7aa0              LDRB     r0,[r4,#0xa]          ;130
0000f0  9902              LDR      r1,[sp,#8]            ;130
0000f2  4388              BICS     r0,r0,r1              ;130
0000f4  72a0              STRB     r0,[r4,#0xa]          ;130
                  |L1.246|
0000f6  7aa0              LDRB     r0,[r4,#0xa]          ;132
0000f8  ea400009          ORR      r0,r0,r9              ;132
0000fc  72a0              STRB     r0,[r4,#0xa]          ;132
0000fe  f104000b          ADD      r0,r4,#0xb            ;133
000102  5dc0              LDRB     r0,[r0,r7]            ;133
000104  ea40000a          ORR      r0,r0,r10             ;133
000108  f104010b          ADD      r1,r4,#0xb            ;133
00010c  55c8              STRB     r0,[r1,r7]            ;133
                  |L1.270|
00010e  6a28              LDR      r0,[r5,#0x20]         ;136
000110  b330              CBZ      r0,|L1.352|
000112  6a28              LDR      r0,[r5,#0x20]         ;137
000114  9004              STR      r0,[sp,#0x10]         ;137
000116  9804              LDR      r0,[sp,#0x10]         ;138
000118  6804              LDR      r4,[r0,#0]            ;138
00011a  e01f              B        |L1.348|
                  |L1.284|
00011c  f104000b          ADD      r0,r4,#0xb            ;140
000120  5d80              LDRB     r0,[r0,r6]            ;140
000122  ea20000b          BIC      r0,r0,r11             ;140
000126  f104010b          ADD      r1,r4,#0xb            ;140
00012a  5588              STRB     r0,[r1,r6]            ;140
00012c  4608              MOV      r0,r1                 ;141
00012e  5d80              LDRB     r0,[r0,r6]            ;141
000130  b918              CBNZ     r0,|L1.314|
000132  7aa0              LDRB     r0,[r4,#0xa]          ;142
000134  9902              LDR      r1,[sp,#8]            ;142
000136  4388              BICS     r0,r0,r1              ;142
000138  72a0              STRB     r0,[r4,#0xa]          ;142
                  |L1.314|
00013a  7aa0              LDRB     r0,[r4,#0xa]          ;144
00013c  ea400009          ORR      r0,r0,r9              ;144
000140  72a0              STRB     r0,[r4,#0xa]          ;144
000142  f104000b          ADD      r0,r4,#0xb            ;145
000146  5dc0              LDRB     r0,[r0,r7]            ;145
000148  ea40000a          ORR      r0,r0,r10             ;145
00014c  f104010b          ADD      r1,r4,#0xb            ;145
000150  55c8              STRB     r0,[r1,r7]            ;145
000152  9804              LDR      r0,[sp,#0x10]         ;146
000154  1d00              ADDS     r0,r0,#4              ;146
000156  9004              STR      r0,[sp,#0x10]         ;146
000158  9804              LDR      r0,[sp,#0x10]         ;147
00015a  6804              LDR      r4,[r0,#0]            ;147
                  |L1.348|
00015c  2c00              CMP      r4,#0                 ;139
00015e  d1dd              BNE      |L1.284|
                  |L1.352|
000160  f8858036          STRB     r8,[r5,#0x36]         ;153
000164  f8857038          STRB     r7,[r5,#0x38]         ;154
000168  9803              LDR      r0,[sp,#0xc]          ;155
00016a  f8850037          STRB     r0,[r5,#0x37]         ;155
00016e  f885903a          STRB     r9,[r5,#0x3a]         ;156
000172  f885a039          STRB     r10,[r5,#0x39]        ;157
000176  9801              LDR      r0,[sp,#4]            ;158
000178  f7fffffe          BL       OS_CPU_SR_Restore
00017c  4807              LDR      r0,|L1.412|
00017e  7800              LDRB     r0,[r0,#0]            ;159  ; OSRunning
000180  2801              CMP      r0,#1                 ;159
000182  d101              BNE      |L1.392|
000184  f7fffffe          BL       OS_Sched
                  |L1.392|
000188  2000              MOVS     r0,#0                 ;162
00018a  e74a              B        |L1.34|
;;;164    #endif
                          ENDP

                  |L1.396|
                          DCD      OSTCBPrioTbl
                  |L1.400|
                          DCD      OSTCBCur
                  |L1.404|
                          DCD      OSRdyTbl
                  |L1.408|
                          DCD      OSRdyGrp
                  |L1.412|
                          DCD      OSRunning

                          AREA ||i.OSTaskCreate||, CODE, READONLY, ALIGN=2

                  OSTaskCreate PROC
;;;208    #if OS_TASK_CREATE_EN > 0u
;;;209    INT8U  OSTaskCreate (void   (*task)(void *p_arg),
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;210                         void    *p_arg,
;;;211                         OS_STK  *ptos,
;;;212                         INT8U    prio)
;;;213    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
;;;214        OS_STK     *psp;
;;;215        INT8U       err;
;;;216    #if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
;;;217        OS_CPU_SR   cpu_sr = 0u;
00000c  f04f0900          MOV      r9,#0
;;;218    #endif
;;;219    
;;;220    
;;;221    
;;;222    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;223        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;224            OS_SAFETY_CRITICAL_EXCEPTION();
;;;225            return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
;;;226        }
;;;227    #endif
;;;228    
;;;229    #if OS_ARG_CHK_EN > 0u
;;;230        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;231            return (OS_ERR_PRIO_INVALID);
;;;232        }
;;;233    #endif
;;;234        OS_ENTER_CRITICAL();
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4681              MOV      r9,r0
;;;235        if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
000016  481f              LDR      r0,|L2.148|
000018  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00001a  b128              CBZ      r0,|L2.40|
;;;236            OS_EXIT_CRITICAL();
00001c  4648              MOV      r0,r9
00001e  f7fffffe          BL       OS_CPU_SR_Restore
;;;237            return (OS_ERR_TASK_CREATE_ISR);
000022  203c              MOVS     r0,#0x3c
                  |L2.36|
;;;238        }
;;;239        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;240            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;241                                                 /* ... the same thing until task is created.              */
;;;242            OS_EXIT_CRITICAL();
;;;243            psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
;;;244            err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
;;;245            if (err == OS_ERR_NONE) {
;;;246                if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
;;;247                    OS_Sched();
;;;248                }
;;;249            } else {
;;;250                OS_ENTER_CRITICAL();
;;;251                OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
;;;252                OS_EXIT_CRITICAL();
;;;253            }
;;;254            return (err);
;;;255        }
;;;256        OS_EXIT_CRITICAL();
;;;257        return (OS_ERR_PRIO_EXIST);
;;;258    }
000024  e8bd8ffe          POP      {r1-r11,pc}
                  |L2.40|
000028  481b              LDR      r0,|L2.152|
00002a  f8500024          LDR      r0,[r0,r4,LSL #2]     ;239
00002e  bb60              CBNZ     r0,|L2.138|
000030  2001              MOVS     r0,#1                 ;240
000032  4919              LDR      r1,|L2.152|
000034  f8410024          STR      r0,[r1,r4,LSL #2]     ;240
000038  4648              MOV      r0,r9                 ;242
00003a  f7fffffe          BL       OS_CPU_SR_Restore
00003e  2300              MOVS     r3,#0                 ;243
000040  4642              MOV      r2,r8                 ;243
000042  4639              MOV      r1,r7                 ;243
000044  4630              MOV      r0,r6                 ;243
000046  f7fffffe          BL       OSTaskStkInit
00004a  4682              MOV      r10,r0                ;243
00004c  2000              MOVS     r0,#0                 ;244
00004e  9000              STR      r0,[sp,#0]            ;244
000050  9001              STR      r0,[sp,#4]            ;244
000052  4603              MOV      r3,r0                 ;244
000054  4602              MOV      r2,r0                 ;244
000056  4651              MOV      r1,r10                ;244
000058  9002              STR      r0,[sp,#8]            ;244
00005a  4620              MOV      r0,r4                 ;244
00005c  f7fffffe          BL       OS_TCBInit
000060  4605              MOV      r5,r0                 ;244
000062  b935              CBNZ     r5,|L2.114|
000064  480d              LDR      r0,|L2.156|
000066  7800              LDRB     r0,[r0,#0]            ;246  ; OSRunning
000068  2801              CMP      r0,#1                 ;246
00006a  d10c              BNE      |L2.134|
00006c  f7fffffe          BL       OS_Sched
000070  e009              B        |L2.134|
                  |L2.114|
000072  f7fffffe          BL       OS_CPU_SR_Save
000076  4681              MOV      r9,r0                 ;250
000078  2000              MOVS     r0,#0                 ;251
00007a  4907              LDR      r1,|L2.152|
00007c  f8410024          STR      r0,[r1,r4,LSL #2]     ;251
000080  4648              MOV      r0,r9                 ;252
000082  f7fffffe          BL       OS_CPU_SR_Restore
                  |L2.134|
000086  4628              MOV      r0,r5                 ;254
000088  e7cc              B        |L2.36|
                  |L2.138|
00008a  4648              MOV      r0,r9                 ;256
00008c  f7fffffe          BL       OS_CPU_SR_Restore
000090  2028              MOVS     r0,#0x28              ;257
000092  e7c7              B        |L2.36|
;;;259    #endif
                          ENDP

                  |L2.148|
                          DCD      OSIntNesting
                  |L2.152|
                          DCD      OSTCBPrioTbl
                  |L2.156|
                          DCD      OSRunning

                          AREA ||i.OSTaskCreateExt||, CODE, READONLY, ALIGN=2

                  OSTaskCreateExt PROC
;;;333    #if OS_TASK_CREATE_EXT_EN > 0u
;;;334    INT8U  OSTaskCreateExt (void   (*task)(void *p_arg),
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;335                            void    *p_arg,
;;;336                            OS_STK  *ptos,
;;;337                            INT8U    prio,
;;;338                            INT16U   id,
;;;339                            OS_STK  *pbos,
;;;340                            INT32U   stk_size,
;;;341                            void    *pext,
;;;342                            INT16U   opt)
;;;343    {
000004  b085              SUB      sp,sp,#0x14
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
00000a  4693              MOV      r11,r2
00000c  461c              MOV      r4,r3
00000e  e9dd780f          LDRD     r7,r8,[sp,#0x3c]
000012  9d12              LDR      r5,[sp,#0x48]
;;;344        OS_STK     *psp;
;;;345        INT8U       err;
;;;346    #if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
;;;347        OS_CPU_SR   cpu_sr = 0u;
000014  2000              MOVS     r0,#0
000016  9003              STR      r0,[sp,#0xc]
;;;348    #endif
;;;349    
;;;350    
;;;351    
;;;352    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;353        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;354            OS_SAFETY_CRITICAL_EXCEPTION();
;;;355            return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
;;;356        }
;;;357    #endif
;;;358    
;;;359    #if OS_ARG_CHK_EN > 0u
;;;360        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;361            return (OS_ERR_PRIO_INVALID);
;;;362        }
;;;363    #endif
;;;364        OS_ENTER_CRITICAL();
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  9003              STR      r0,[sp,#0xc]
;;;365        if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
00001e  4823              LDR      r0,|L3.172|
000020  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000022  b130              CBZ      r0,|L3.50|
;;;366            OS_EXIT_CRITICAL();
000024  9803              LDR      r0,[sp,#0xc]
000026  f7fffffe          BL       OS_CPU_SR_Restore
;;;367            return (OS_ERR_TASK_CREATE_ISR);
00002a  203c              MOVS     r0,#0x3c
                  |L3.44|
;;;368        }
;;;369        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;370            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;371                                                 /* ... the same thing until task is created.              */
;;;372            OS_EXIT_CRITICAL();
;;;373    
;;;374    #if (OS_TASK_STAT_STK_CHK_EN > 0u)
;;;375            OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
;;;376    #endif
;;;377    
;;;378            psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
;;;379            err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
;;;380            if (err == OS_ERR_NONE) {
;;;381                if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
;;;382                    OS_Sched();
;;;383                }
;;;384            } else {
;;;385                OS_ENTER_CRITICAL();
;;;386                OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
;;;387                OS_EXIT_CRITICAL();
;;;388            }
;;;389            return (err);
;;;390        }
;;;391        OS_EXIT_CRITICAL();
;;;392        return (OS_ERR_PRIO_EXIST);
;;;393    }
00002c  b005              ADD      sp,sp,#0x14
00002e  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.50|
000032  481f              LDR      r0,|L3.176|
000034  f8500024          LDR      r0,[r0,r4,LSL #2]     ;369
000038  bb88              CBNZ     r0,|L3.158|
00003a  2001              MOVS     r0,#1                 ;370
00003c  491c              LDR      r1,|L3.176|
00003e  f8410024          STR      r0,[r1,r4,LSL #2]     ;370
000042  9803              LDR      r0,[sp,#0xc]          ;372
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  462a              MOV      r2,r5                 ;375
00004a  4641              MOV      r1,r8                 ;375
00004c  4638              MOV      r0,r7                 ;375
00004e  f7fffffe          BL       OS_TaskStkClr
000052  462b              MOV      r3,r5                 ;378
000054  465a              MOV      r2,r11                ;378
000056  4651              MOV      r1,r10                ;378
000058  4648              MOV      r0,r9                 ;378
00005a  f7fffffe          BL       OSTaskStkInit
00005e  9004              STR      r0,[sp,#0x10]         ;378
000060  9811              LDR      r0,[sp,#0x44]         ;379
000062  e9cd8000          STRD     r8,r0,[sp,#0]         ;379
000066  9502              STR      r5,[sp,#8]            ;379
000068  463a              MOV      r2,r7                 ;379
00006a  4620              MOV      r0,r4                 ;379
00006c  9b0e              LDR      r3,[sp,#0x38]         ;379
00006e  9904              LDR      r1,[sp,#0x10]         ;379
000070  f7fffffe          BL       OS_TCBInit
000074  4606              MOV      r6,r0                 ;379
000076  b936              CBNZ     r6,|L3.134|
000078  480e              LDR      r0,|L3.180|
00007a  7800              LDRB     r0,[r0,#0]            ;381  ; OSRunning
00007c  2801              CMP      r0,#1                 ;381
00007e  d10c              BNE      |L3.154|
000080  f7fffffe          BL       OS_Sched
000084  e009              B        |L3.154|
                  |L3.134|
000086  f7fffffe          BL       OS_CPU_SR_Save
00008a  9003              STR      r0,[sp,#0xc]          ;385
00008c  2000              MOVS     r0,#0                 ;386
00008e  4908              LDR      r1,|L3.176|
000090  f8410024          STR      r0,[r1,r4,LSL #2]     ;386
000094  9803              LDR      r0,[sp,#0xc]          ;387
000096  f7fffffe          BL       OS_CPU_SR_Restore
                  |L3.154|
00009a  4630              MOV      r0,r6                 ;389
00009c  e7c6              B        |L3.44|
                  |L3.158|
00009e  e7ff              B        |L3.160|
                  |L3.160|
0000a0  9803              LDR      r0,[sp,#0xc]          ;391
0000a2  f7fffffe          BL       OS_CPU_SR_Restore
0000a6  2028              MOVS     r0,#0x28              ;392
0000a8  e7c0              B        |L3.44|
;;;394    #endif
                          ENDP

0000aa  0000              DCW      0x0000
                  |L3.172|
                          DCD      OSIntNesting
                  |L3.176|
                          DCD      OSTCBPrioTbl
                  |L3.180|
                          DCD      OSRunning

                          AREA ||i.OSTaskDel||, CODE, READONLY, ALIGN=2

                  OSTaskDel PROC
;;;432    #if OS_TASK_DEL_EN > 0u
;;;433    INT8U  OSTaskDel (INT8U prio)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;434    {
000004  4605              MOV      r5,r0
;;;435    #if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
;;;436        OS_FLAG_NODE *pnode;
;;;437    #endif
;;;438        OS_TCB       *ptcb;
;;;439    #if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
;;;440        OS_CPU_SR     cpu_sr = 0u;
000006  2700              MOVS     r7,#0
;;;441    #endif
;;;442    
;;;443    
;;;444    
;;;445        if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
000008  484a              LDR      r0,|L4.308|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000c  b110              CBZ      r0,|L4.20|
;;;446            return (OS_ERR_TASK_DEL_ISR);
00000e  2040              MOVS     r0,#0x40
                  |L4.16|
;;;447        }
;;;448        if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
;;;449            return (OS_ERR_TASK_DEL_IDLE);
;;;450        }
;;;451    #if OS_ARG_CHK_EN > 0u
;;;452        if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
;;;453            if (prio != OS_PRIO_SELF) {
;;;454                return (OS_ERR_PRIO_INVALID);
;;;455            }
;;;456        }
;;;457    #endif
;;;458    
;;;459    /*$PAGE*/
;;;460        OS_ENTER_CRITICAL();
;;;461        if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
;;;462            prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
;;;463        }
;;;464        ptcb = OSTCBPrioTbl[prio];
;;;465        if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
;;;466            OS_EXIT_CRITICAL();
;;;467            return (OS_ERR_TASK_NOT_EXIST);
;;;468        }
;;;469        if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
;;;470            OS_EXIT_CRITICAL();
;;;471            return (OS_ERR_TASK_DEL);
;;;472        }
;;;473    
;;;474        OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
;;;475        if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
;;;476            OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;477        }
;;;478    
;;;479    #if (OS_EVENT_EN)
;;;480        if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
;;;481            OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
;;;482        }
;;;483    #if (OS_EVENT_MULTI_EN > 0u)
;;;484        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
;;;485            OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
;;;486        }
;;;487    #endif
;;;488    #endif
;;;489    
;;;490    #if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
;;;491        pnode = ptcb->OSTCBFlagNode;
;;;492        if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
;;;493            OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
;;;494        }
;;;495    #endif
;;;496    
;;;497        ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
;;;498        ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
;;;499        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
;;;500        if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
;;;501            OSLockNesting++;
;;;502        }
;;;503        OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
;;;504        OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
;;;505        OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
;;;506        if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
;;;507            OSLockNesting--;
;;;508        }
;;;509        OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
;;;510        OSTaskCtr--;                                        /* One less task being managed                 */
;;;511        OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
;;;512        if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
;;;513            ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
;;;514            OSTCBList                  = ptcb->OSTCBNext;
;;;515        } else {
;;;516            ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
;;;517            ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
;;;518        }
;;;519        ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
;;;520        OSTCBFreeList       = ptcb;
;;;521    #if OS_TASK_NAME_EN > 0u
;;;522        ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
;;;523    #endif
;;;524        OS_EXIT_CRITICAL();
;;;525        if (OSRunning == OS_TRUE) {
;;;526            OS_Sched();                                     /* Find new highest priority task              */
;;;527        }
;;;528        return (OS_ERR_NONE);
;;;529    }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L4.20|
000014  2d1f              CMP      r5,#0x1f              ;448
000016  d101              BNE      |L4.28|
000018  203e              MOVS     r0,#0x3e              ;449
00001a  e7f9              B        |L4.16|
                  |L4.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4607              MOV      r7,r0                 ;460
000022  2dff              CMP      r5,#0xff              ;461
000024  d103              BNE      |L4.46|
000026  4844              LDR      r0,|L4.312|
000028  6800              LDR      r0,[r0,#0]            ;462  ; OSTCBCur
00002a  f8905036          LDRB     r5,[r0,#0x36]         ;462
                  |L4.46|
00002e  4843              LDR      r0,|L4.316|
000030  f8504025          LDR      r4,[r0,r5,LSL #2]     ;464
000034  b924              CBNZ     r4,|L4.64|
000036  4638              MOV      r0,r7                 ;466
000038  f7fffffe          BL       OS_CPU_SR_Restore
00003c  2043              MOVS     r0,#0x43              ;467
00003e  e7e7              B        |L4.16|
                  |L4.64|
000040  2c01              CMP      r4,#1                 ;469
000042  d104              BNE      |L4.78|
000044  4638              MOV      r0,r7                 ;470
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  203d              MOVS     r0,#0x3d              ;471
00004c  e7e0              B        |L4.16|
                  |L4.78|
00004e  f8140f38          LDRB     r0,[r4,#0x38]!        ;474
000052  493b              LDR      r1,|L4.320|
000054  5c08              LDRB     r0,[r1,r0]            ;474
000056  7861              LDRB     r1,[r4,#1]            ;474
000058  4388              BICS     r0,r0,r1              ;474
00005a  7821              LDRB     r1,[r4,#0]            ;474
00005c  4a38              LDR      r2,|L4.320|
00005e  5450              STRB     r0,[r2,r1]            ;474
000060  f8140938          LDRB     r0,[r4],#-0x38        ;475
000064  4611              MOV      r1,r2                 ;475
000066  5c08              LDRB     r0,[r1,r0]            ;475
000068  b930              CBNZ     r0,|L4.120|
00006a  f894103a          LDRB     r1,[r4,#0x3a]         ;476
00006e  4835              LDR      r0,|L4.324|
000070  7800              LDRB     r0,[r0,#0]            ;476  ; OSRdyGrp
000072  4388              BICS     r0,r0,r1              ;476
000074  4933              LDR      r1,|L4.324|
000076  7008              STRB     r0,[r1,#0]            ;476
                  |L4.120|
000078  69e0              LDR      r0,[r4,#0x1c]         ;480
00007a  b118              CBZ      r0,|L4.132|
00007c  4620              MOV      r0,r4                 ;481
00007e  69e1              LDR      r1,[r4,#0x1c]         ;481
000080  f7fffffe          BL       OS_EventTaskRemove
                  |L4.132|
000084  6a20              LDR      r0,[r4,#0x20]         ;484
000086  b118              CBZ      r0,|L4.144|
000088  4620              MOV      r0,r4                 ;485
00008a  6a21              LDR      r1,[r4,#0x20]         ;485
00008c  f7fffffe          BL       OS_EventTaskRemoveMulti
                  |L4.144|
000090  6aa6              LDR      r6,[r4,#0x28]         ;491
000092  b116              CBZ      r6,|L4.154|
000094  4630              MOV      r0,r6                 ;493
000096  f7fffffe          BL       OS_FlagUnlink
                  |L4.154|
00009a  2000              MOVS     r0,#0                 ;497
00009c  6320              STR      r0,[r4,#0x30]         ;497
00009e  f8840034          STRB     r0,[r4,#0x34]         ;498
0000a2  f8840035          STRB     r0,[r4,#0x35]         ;499
0000a6  4828              LDR      r0,|L4.328|
0000a8  7800              LDRB     r0,[r0,#0]            ;500  ; OSLockNesting
0000aa  28ff              CMP      r0,#0xff              ;500
0000ac  d204              BCS      |L4.184|
0000ae  4826              LDR      r0,|L4.328|
0000b0  7800              LDRB     r0,[r0,#0]            ;501  ; OSLockNesting
0000b2  1c40              ADDS     r0,r0,#1              ;501
0000b4  4924              LDR      r1,|L4.328|
0000b6  7008              STRB     r0,[r1,#0]            ;501
                  |L4.184|
0000b8  4638              MOV      r0,r7                 ;503
0000ba  f7fffffe          BL       OS_CPU_SR_Restore
0000be  f7fffffe          BL       OS_Dummy
0000c2  f7fffffe          BL       OS_CPU_SR_Save
0000c6  4607              MOV      r7,r0                 ;505
0000c8  481f              LDR      r0,|L4.328|
0000ca  7800              LDRB     r0,[r0,#0]            ;506  ; OSLockNesting
0000cc  b120              CBZ      r0,|L4.216|
0000ce  481e              LDR      r0,|L4.328|
0000d0  7800              LDRB     r0,[r0,#0]            ;507  ; OSLockNesting
0000d2  1e40              SUBS     r0,r0,#1              ;507
0000d4  491c              LDR      r1,|L4.328|
0000d6  7008              STRB     r0,[r1,#0]            ;507
                  |L4.216|
0000d8  4620              MOV      r0,r4                 ;509
0000da  f7fffffe          BL       OSTaskDelHook
0000de  481b              LDR      r0,|L4.332|
0000e0  7800              LDRB     r0,[r0,#0]            ;510  ; OSTaskCtr
0000e2  1e40              SUBS     r0,r0,#1              ;510
0000e4  4919              LDR      r1,|L4.332|
0000e6  7008              STRB     r0,[r1,#0]            ;510
0000e8  2000              MOVS     r0,#0                 ;511
0000ea  4914              LDR      r1,|L4.316|
0000ec  f8410025          STR      r0,[r1,r5,LSL #2]     ;511
0000f0  69a0              LDR      r0,[r4,#0x18]         ;512
0000f2  b930              CBNZ     r0,|L4.258|
0000f4  2000              MOVS     r0,#0                 ;513
0000f6  6961              LDR      r1,[r4,#0x14]         ;513
0000f8  6188              STR      r0,[r1,#0x18]         ;513
0000fa  4915              LDR      r1,|L4.336|
0000fc  6960              LDR      r0,[r4,#0x14]         ;514
0000fe  6008              STR      r0,[r1,#0]            ;514  ; OSTCBList
000100  e005              B        |L4.270|
                  |L4.258|
000102  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;516
000106  6148              STR      r0,[r1,#0x14]         ;516
000108  e9d41005          LDRD     r1,r0,[r4,#0x14]      ;517
00010c  6188              STR      r0,[r1,#0x18]         ;517
                  |L4.270|
00010e  4811              LDR      r0,|L4.340|
000110  6800              LDR      r0,[r0,#0]            ;519  ; OSTCBFreeList
000112  6160              STR      r0,[r4,#0x14]         ;519
000114  480f              LDR      r0,|L4.340|
000116  6004              STR      r4,[r0,#0]            ;520  ; OSTCBFreeList
000118  a00f              ADR      r0,|L4.344|
00011a  6520              STR      r0,[r4,#0x50]         ;522
00011c  4638              MOV      r0,r7                 ;524
00011e  f7fffffe          BL       OS_CPU_SR_Restore
000122  480e              LDR      r0,|L4.348|
000124  7800              LDRB     r0,[r0,#0]            ;525  ; OSRunning
000126  2801              CMP      r0,#1                 ;525
000128  d101              BNE      |L4.302|
00012a  f7fffffe          BL       OS_Sched
                  |L4.302|
00012e  2000              MOVS     r0,#0                 ;528
000130  e76e              B        |L4.16|
;;;530    #endif
                          ENDP

000132  0000              DCW      0x0000
                  |L4.308|
                          DCD      OSIntNesting
                  |L4.312|
                          DCD      OSTCBCur
                  |L4.316|
                          DCD      OSTCBPrioTbl
                  |L4.320|
                          DCD      OSRdyTbl
                  |L4.324|
                          DCD      OSRdyGrp
                  |L4.328|
                          DCD      OSLockNesting
                  |L4.332|
                          DCD      OSTaskCtr
                  |L4.336|
                          DCD      OSTCBList
                  |L4.340|
                          DCD      OSTCBFreeList
                  |L4.344|
000158  3f00              DCB      "?",0
00015a  00                DCB      0
00015b  00                DCB      0
                  |L4.348|
                          DCD      OSRunning

                          AREA ||i.OSTaskDelReq||, CODE, READONLY, ALIGN=2

                  OSTaskDelReq PROC
;;;578    #if OS_TASK_DEL_EN > 0u
;;;579    INT8U  OSTaskDelReq (INT8U prio)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;580    {
000004  4604              MOV      r4,r0
;;;581        INT8U      stat;
;;;582        OS_TCB    *ptcb;
;;;583    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;584        OS_CPU_SR  cpu_sr = 0u;
000006  2700              MOVS     r7,#0
;;;585    #endif
;;;586    
;;;587    
;;;588    
;;;589        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
000008  2c1f              CMP      r4,#0x1f
00000a  d102              BNE      |L5.18|
;;;590            return (OS_ERR_TASK_DEL_IDLE);
00000c  203e              MOVS     r0,#0x3e
                  |L5.14|
;;;591        }
;;;592    #if OS_ARG_CHK_EN > 0u
;;;593        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;594            if (prio != OS_PRIO_SELF) {
;;;595                return (OS_ERR_PRIO_INVALID);
;;;596            }
;;;597        }
;;;598    #endif
;;;599        if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
;;;600            OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
;;;601            stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
;;;602            OS_EXIT_CRITICAL();
;;;603            return (stat);
;;;604        }
;;;605        OS_ENTER_CRITICAL();
;;;606        ptcb = OSTCBPrioTbl[prio];
;;;607        if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
;;;608            OS_EXIT_CRITICAL();
;;;609            return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
;;;610        }
;;;611        if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
;;;612            OS_EXIT_CRITICAL();
;;;613            return (OS_ERR_TASK_DEL);
;;;614        }
;;;615        ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
;;;616        OS_EXIT_CRITICAL();
;;;617        return (OS_ERR_NONE);
;;;618    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L5.18|
000012  2cff              CMP      r4,#0xff              ;599
000014  d10b              BNE      |L5.46|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4607              MOV      r7,r0                 ;600
00001c  4811              LDR      r0,|L5.100|
00001e  6800              LDR      r0,[r0,#0]            ;601  ; OSTCBCur
000020  f890603b          LDRB     r6,[r0,#0x3b]         ;601
000024  4638              MOV      r0,r7                 ;602
000026  f7fffffe          BL       OS_CPU_SR_Restore
00002a  4630              MOV      r0,r6                 ;603
00002c  e7ef              B        |L5.14|
                  |L5.46|
00002e  f7fffffe          BL       OS_CPU_SR_Save
000032  4607              MOV      r7,r0                 ;605
000034  480c              LDR      r0,|L5.104|
000036  f8505024          LDR      r5,[r0,r4,LSL #2]     ;606
00003a  b925              CBNZ     r5,|L5.70|
00003c  4638              MOV      r0,r7                 ;608
00003e  f7fffffe          BL       OS_CPU_SR_Restore
000042  2043              MOVS     r0,#0x43              ;609
000044  e7e3              B        |L5.14|
                  |L5.70|
000046  2d01              CMP      r5,#1                 ;611
000048  d104              BNE      |L5.84|
00004a  4638              MOV      r0,r7                 ;612
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  203d              MOVS     r0,#0x3d              ;613
000052  e7dc              B        |L5.14|
                  |L5.84|
000054  203f              MOVS     r0,#0x3f              ;615
000056  f885003b          STRB     r0,[r5,#0x3b]         ;615
00005a  4638              MOV      r0,r7                 ;616
00005c  f7fffffe          BL       OS_CPU_SR_Restore
000060  2000              MOVS     r0,#0                 ;617
000062  e7d4              B        |L5.14|
;;;619    #endif
                          ENDP

                  |L5.100|
                          DCD      OSTCBCur
                  |L5.104|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskNameGet||, CODE, READONLY, ALIGN=2

                  OSTaskNameGet PROC
;;;645    #if OS_TASK_NAME_EN > 0u
;;;646    INT8U  OSTaskNameGet (INT8U    prio,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;647                          INT8U  **pname,
;;;648                          INT8U   *perr)
;;;649    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;650        OS_TCB    *ptcb;
;;;651        INT8U      len;
;;;652    #if OS_CRITICAL_METHOD == 3u                             /* Allocate storage for CPU status register   */
;;;653        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;654    #endif
;;;655    
;;;656    
;;;657    
;;;658    #ifdef OS_SAFETY_CRITICAL
;;;659        if (perr == (INT8U *)0) {
;;;660            OS_SAFETY_CRITICAL_EXCEPTION();
;;;661            return (0u);
;;;662        }
;;;663    #endif
;;;664    
;;;665    #if OS_ARG_CHK_EN > 0u
;;;666        if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
;;;667            if (prio != OS_PRIO_SELF) {
;;;668                *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
;;;669                return (0u);
;;;670            }
;;;671        }
;;;672        if (pname == (INT8U **)0) {                          /* Is 'pname' a NULL pointer?                 */
;;;673            *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
;;;674            return (0u);
;;;675        }
;;;676    #endif
;;;677        if (OSIntNesting > 0u) {                              /* See if trying to call from an ISR          */
00000e  4819              LDR      r0,|L6.116|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000012  b120              CBZ      r0,|L6.30|
;;;678            *perr = OS_ERR_NAME_GET_ISR;
000014  2011              MOVS     r0,#0x11
000016  7020              STRB     r0,[r4,#0]
;;;679            return (0u);
000018  2000              MOVS     r0,#0
                  |L6.26|
;;;680        }
;;;681        OS_ENTER_CRITICAL();
;;;682        if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
;;;683            prio = OSTCBCur->OSTCBPrio;
;;;684        }
;;;685        ptcb = OSTCBPrioTbl[prio];
;;;686        if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
;;;687            OS_EXIT_CRITICAL();                              /* No                                         */
;;;688            *perr = OS_ERR_TASK_NOT_EXIST;
;;;689            return (0u);
;;;690        }
;;;691        if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
;;;692            OS_EXIT_CRITICAL();                              /* Yes                                        */
;;;693            *perr = OS_ERR_TASK_NOT_EXIST;
;;;694            return (0u);
;;;695        }
;;;696        *pname = ptcb->OSTCBTaskName;
;;;697        len    = OS_StrLen(*pname);
;;;698        OS_EXIT_CRITICAL();
;;;699        *perr  = OS_ERR_NONE;
;;;700        return (len);
;;;701    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L6.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4680              MOV      r8,r0                 ;681
000024  2eff              CMP      r6,#0xff              ;682
000026  d103              BNE      |L6.48|
000028  4813              LDR      r0,|L6.120|
00002a  6800              LDR      r0,[r0,#0]            ;683  ; OSTCBCur
00002c  f8906036          LDRB     r6,[r0,#0x36]         ;683
                  |L6.48|
000030  4812              LDR      r0,|L6.124|
000032  f8505026          LDR      r5,[r0,r6,LSL #2]     ;685
000036  b935              CBNZ     r5,|L6.70|
000038  4640              MOV      r0,r8                 ;687
00003a  f7fffffe          BL       OS_CPU_SR_Restore
00003e  2043              MOVS     r0,#0x43              ;688
000040  7020              STRB     r0,[r4,#0]            ;688
000042  2000              MOVS     r0,#0                 ;689
000044  e7e9              B        |L6.26|
                  |L6.70|
000046  2d01              CMP      r5,#1                 ;691
000048  d106              BNE      |L6.88|
00004a  4640              MOV      r0,r8                 ;692
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  2043              MOVS     r0,#0x43              ;693
000052  7020              STRB     r0,[r4,#0]            ;693
000054  2000              MOVS     r0,#0                 ;694
000056  e7e0              B        |L6.26|
                  |L6.88|
000058  6d28              LDR      r0,[r5,#0x50]         ;696
00005a  6038              STR      r0,[r7,#0]            ;696
00005c  6838              LDR      r0,[r7,#0]            ;697
00005e  f7fffffe          BL       OS_StrLen
000062  4681              MOV      r9,r0                 ;697
000064  4640              MOV      r0,r8                 ;698
000066  f7fffffe          BL       OS_CPU_SR_Restore
00006a  2000              MOVS     r0,#0                 ;699
00006c  7020              STRB     r0,[r4,#0]            ;699
00006e  4648              MOV      r0,r9                 ;700
000070  e7d3              B        |L6.26|
;;;702    #endif
                          ENDP

000072  0000              DCW      0x0000
                  |L6.116|
                          DCD      OSIntNesting
                  |L6.120|
                          DCD      OSTCBCur
                  |L6.124|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskNameSet||, CODE, READONLY, ALIGN=2

                  OSTaskNameSet PROC
;;;727    #if OS_TASK_NAME_EN > 0u
;;;728    void  OSTaskNameSet (INT8U   prio,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;729                         INT8U  *pname,
;;;730                         INT8U  *perr)
;;;731    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;732        OS_TCB    *ptcb;
;;;733    #if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
;;;734        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;735    #endif
;;;736    
;;;737    
;;;738    
;;;739    #ifdef OS_SAFETY_CRITICAL
;;;740        if (perr == (INT8U *)0) {
;;;741            OS_SAFETY_CRITICAL_EXCEPTION();
;;;742            return;
;;;743        }
;;;744    #endif
;;;745    
;;;746    #if OS_ARG_CHK_EN > 0u
;;;747        if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
;;;748            if (prio != OS_PRIO_SELF) {
;;;749                *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
;;;750                return;
;;;751            }
;;;752        }
;;;753        if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
;;;754            *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
;;;755            return;
;;;756        }
;;;757    #endif
;;;758        if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
00000e  4815              LDR      r0,|L7.100|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000012  b118              CBZ      r0,|L7.28|
;;;759            *perr = OS_ERR_NAME_SET_ISR;
000014  2012              MOVS     r0,#0x12
000016  7020              STRB     r0,[r4,#0]
                  |L7.24|
;;;760            return;
;;;761        }
;;;762        OS_ENTER_CRITICAL();
;;;763        if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
;;;764            prio = OSTCBCur->OSTCBPrio;
;;;765        }
;;;766        ptcb = OSTCBPrioTbl[prio];
;;;767        if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
;;;768            OS_EXIT_CRITICAL();                          /* No                                             */
;;;769            *perr = OS_ERR_TASK_NOT_EXIST;
;;;770            return;
;;;771        }
;;;772        if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
;;;773            OS_EXIT_CRITICAL();                          /* Yes                                            */
;;;774            *perr = OS_ERR_TASK_NOT_EXIST;
;;;775            return;
;;;776        }
;;;777        ptcb->OSTCBTaskName = pname;
;;;778        OS_EXIT_CRITICAL();
;;;779        *perr               = OS_ERR_NONE;
;;;780    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L7.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4680              MOV      r8,r0                 ;762
000022  2eff              CMP      r6,#0xff              ;763
000024  d103              BNE      |L7.46|
000026  4810              LDR      r0,|L7.104|
000028  6800              LDR      r0,[r0,#0]            ;764  ; OSTCBCur
00002a  f8906036          LDRB     r6,[r0,#0x36]         ;764
                  |L7.46|
00002e  480f              LDR      r0,|L7.108|
000030  f8505026          LDR      r5,[r0,r6,LSL #2]     ;766
000034  b92d              CBNZ     r5,|L7.66|
000036  4640              MOV      r0,r8                 ;768
000038  f7fffffe          BL       OS_CPU_SR_Restore
00003c  2043              MOVS     r0,#0x43              ;769
00003e  7020              STRB     r0,[r4,#0]            ;769
000040  e7ea              B        |L7.24|
                  |L7.66|
000042  2d01              CMP      r5,#1                 ;772
000044  d105              BNE      |L7.82|
000046  4640              MOV      r0,r8                 ;773
000048  f7fffffe          BL       OS_CPU_SR_Restore
00004c  2043              MOVS     r0,#0x43              ;774
00004e  7020              STRB     r0,[r4,#0]            ;774
000050  e7e2              B        |L7.24|
                  |L7.82|
000052  652f              STR      r7,[r5,#0x50]         ;777
000054  4640              MOV      r0,r8                 ;778
000056  f7fffffe          BL       OS_CPU_SR_Restore
00005a  2000              MOVS     r0,#0                 ;779
00005c  7020              STRB     r0,[r4,#0]            ;779
00005e  bf00              NOP      
000060  e7da              B        |L7.24|
;;;781    #endif
                          ENDP

000062  0000              DCW      0x0000
                  |L7.100|
                          DCD      OSIntNesting
                  |L7.104|
                          DCD      OSTCBCur
                  |L7.108|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskQuery||, CODE, READONLY, ALIGN=2

                  OSTaskQuery PROC
;;;1027   #if OS_TASK_QUERY_EN > 0u
;;;1028   INT8U  OSTaskQuery (INT8U    prio,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1029                       OS_TCB  *p_task_data)
;;;1030   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1031       OS_TCB    *ptcb;
;;;1032   #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;1033       OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;1034   #endif
;;;1035   
;;;1036   
;;;1037   
;;;1038   #if OS_ARG_CHK_EN > 0u
;;;1039       if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
;;;1040           if (prio != OS_PRIO_SELF) {
;;;1041               return (OS_ERR_PRIO_INVALID);
;;;1042           }
;;;1043       }
;;;1044       if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
;;;1045           return (OS_ERR_PDATA_NULL);
;;;1046       }
;;;1047   #endif
;;;1048       OS_ENTER_CRITICAL();
00000a  f7fffffe          BL       OS_CPU_SR_Save
00000e  4607              MOV      r7,r0
;;;1049       if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
000010  2dff              CMP      r5,#0xff
000012  d103              BNE      |L8.28|
;;;1050           prio = OSTCBCur->OSTCBPrio;
000014  480f              LDR      r0,|L8.84|
000016  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000018  f8905036          LDRB     r5,[r0,#0x36]
                  |L8.28|
;;;1051       }
;;;1052       ptcb = OSTCBPrioTbl[prio];
00001c  480e              LDR      r0,|L8.88|
00001e  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;1053       if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
000022  b92c              CBNZ     r4,|L8.48|
;;;1054           OS_EXIT_CRITICAL();
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       OS_CPU_SR_Restore
;;;1055           return (OS_ERR_PRIO);
00002a  2029              MOVS     r0,#0x29
                  |L8.44|
;;;1056       }
;;;1057       if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
;;;1058           OS_EXIT_CRITICAL();
;;;1059           return (OS_ERR_TASK_NOT_EXIST);
;;;1060       }
;;;1061                                                    /* Copy TCB into user storage area                    */
;;;1062       OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
;;;1063       OS_EXIT_CRITICAL();
;;;1064       return (OS_ERR_NONE);
;;;1065   }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L8.48|
000030  2c01              CMP      r4,#1                 ;1057
000032  d104              BNE      |L8.62|
000034  4638              MOV      r0,r7                 ;1058
000036  f7fffffe          BL       OS_CPU_SR_Restore
00003a  2043              MOVS     r0,#0x43              ;1059
00003c  e7f6              B        |L8.44|
                  |L8.62|
00003e  2258              MOVS     r2,#0x58              ;1062
000040  4621              MOV      r1,r4                 ;1062
000042  4630              MOV      r0,r6                 ;1062
000044  f7fffffe          BL       OS_MemCopy
000048  4638              MOV      r0,r7                 ;1063
00004a  f7fffffe          BL       OS_CPU_SR_Restore
00004e  2000              MOVS     r0,#0                 ;1064
000050  e7ec              B        |L8.44|
;;;1066   #endif
                          ENDP

000052  0000              DCW      0x0000
                  |L8.84|
                          DCD      OSTCBCur
                  |L8.88|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskRegGet||, CODE, READONLY, ALIGN=2

                  OSTaskRegGet PROC
;;;1094   #if OS_TASK_REG_TBL_SIZE > 0u
;;;1095   INT32U  OSTaskRegGet (INT8U   prio,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1096                         INT8U   id,
;;;1097                         INT8U  *perr)
;;;1098   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1099   #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;1100       OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0900          MOV      r9,#0
;;;1101   #endif
;;;1102       INT32U     value;
;;;1103       OS_TCB    *ptcb;
;;;1104   
;;;1105   
;;;1106   
;;;1107   #ifdef OS_SAFETY_CRITICAL
;;;1108       if (perr == (INT8U *)0) {
;;;1109           OS_SAFETY_CRITICAL_EXCEPTION();
;;;1110           return (0u);
;;;1111       }
;;;1112   #endif
;;;1113   
;;;1114   #if OS_ARG_CHK_EN > 0u
;;;1115       if (prio >= OS_LOWEST_PRIO) {
;;;1116           if (prio != OS_PRIO_SELF) {
;;;1117               *perr = OS_ERR_PRIO_INVALID;
;;;1118               return (0u);
;;;1119           }
;;;1120       }
;;;1121       if (id >= OS_TASK_REG_TBL_SIZE) {
;;;1122           *perr = OS_ERR_ID_INVALID;
;;;1123           return (0u);
;;;1124       }
;;;1125   #endif
;;;1126       OS_ENTER_CRITICAL();
00000e  f7fffffe          BL       OS_CPU_SR_Save
000012  4681              MOV      r9,r0
;;;1127       if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
000014  2cff              CMP      r4,#0xff
000016  d102              BNE      |L9.30|
;;;1128           ptcb = OSTCBCur;
000018  4808              LDR      r0,|L9.60|
00001a  6805              LDR      r5,[r0,#0]  ; OSTCBCur
00001c  e002              B        |L9.36|
                  |L9.30|
;;;1129       } else {
;;;1130           ptcb = OSTCBPrioTbl[prio];
00001e  4808              LDR      r0,|L9.64|
000020  f8505024          LDR      r5,[r0,r4,LSL #2]
                  |L9.36|
;;;1131       }
;;;1132       value = ptcb->OSTCBRegTbl[id];
000024  f1050054          ADD      r0,r5,#0x54
000028  f8508026          LDR      r8,[r0,r6,LSL #2]
;;;1133       OS_EXIT_CRITICAL();
00002c  4648              MOV      r0,r9
00002e  f7fffffe          BL       OS_CPU_SR_Restore
;;;1134       *perr = OS_ERR_NONE;
000032  2000              MOVS     r0,#0
000034  7038              STRB     r0,[r7,#0]
;;;1135       return (value);
000036  4640              MOV      r0,r8
;;;1136   }
000038  e8bd87f0          POP      {r4-r10,pc}
;;;1137   #endif
                          ENDP

                  |L9.60|
                          DCD      OSTCBCur
                  |L9.64|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskRegSet||, CODE, READONLY, ALIGN=2

                  OSTaskRegSet PROC
;;;1168   #if OS_TASK_REG_TBL_SIZE > 0u
;;;1169   void  OSTaskRegSet (INT8U    prio,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1170                       INT8U    id,
;;;1171                       INT32U   value,
;;;1172                       INT8U   *perr)
;;;1173   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1174   #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;1175       OS_CPU_SR  cpu_sr = 0u;
00000c  f04f0900          MOV      r9,#0
;;;1176   #endif
;;;1177       OS_TCB    *ptcb;
;;;1178   
;;;1179   
;;;1180   #ifdef OS_SAFETY_CRITICAL
;;;1181       if (perr == (INT8U *)0) {
;;;1182           OS_SAFETY_CRITICAL_EXCEPTION();
;;;1183           return;
;;;1184       }
;;;1185   #endif
;;;1186   
;;;1187   #if OS_ARG_CHK_EN > 0u
;;;1188       if (prio >= OS_LOWEST_PRIO) {
;;;1189           if (prio != OS_PRIO_SELF) {
;;;1190               *perr = OS_ERR_PRIO_INVALID;
;;;1191               return;
;;;1192           }
;;;1193       }
;;;1194       if (id >= OS_TASK_REG_TBL_SIZE) {
;;;1195           *perr = OS_ERR_ID_INVALID;
;;;1196           return;
;;;1197       }
;;;1198   #endif
;;;1199       OS_ENTER_CRITICAL();
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4681              MOV      r9,r0
;;;1200       if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
000016  2cff              CMP      r4,#0xff
000018  d102              BNE      |L10.32|
;;;1201           ptcb = OSTCBCur;
00001a  4809              LDR      r0,|L10.64|
00001c  6805              LDR      r5,[r0,#0]  ; OSTCBCur
00001e  e002              B        |L10.38|
                  |L10.32|
;;;1202       } else {
;;;1203           ptcb = OSTCBPrioTbl[prio];
000020  4808              LDR      r0,|L10.68|
000022  f8505024          LDR      r5,[r0,r4,LSL #2]
                  |L10.38|
;;;1204       }
;;;1205       ptcb->OSTCBRegTbl[id] = value;
000026  f1050054          ADD      r0,r5,#0x54
00002a  f8407026          STR      r7,[r0,r6,LSL #2]
;;;1206       OS_EXIT_CRITICAL();
00002e  4648              MOV      r0,r9
000030  f7fffffe          BL       OS_CPU_SR_Restore
;;;1207       *perr                 = OS_ERR_NONE;
000034  2000              MOVS     r0,#0
000036  f8880000          STRB     r0,[r8,#0]
;;;1208   }
00003a  e8bd87f0          POP      {r4-r10,pc}
;;;1209   #endif
                          ENDP

00003e  0000              DCW      0x0000
                  |L10.64|
                          DCD      OSTCBCur
                  |L10.68|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskResume||, CODE, READONLY, ALIGN=2

                  OSTaskResume PROC
;;;802    #if OS_TASK_SUSPEND_EN > 0u
;;;803    INT8U  OSTaskResume (INT8U prio)
000000  b570              PUSH     {r4-r6,lr}
;;;804    {
000002  4605              MOV      r5,r0
;;;805        OS_TCB    *ptcb;
;;;806    #if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
;;;807        OS_CPU_SR  cpu_sr = 0u;
000004  2600              MOVS     r6,#0
;;;808    #endif
;;;809    
;;;810    
;;;811    
;;;812    #if OS_ARG_CHK_EN > 0u
;;;813        if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
;;;814            return (OS_ERR_PRIO_INVALID);
;;;815        }
;;;816    #endif
;;;817        OS_ENTER_CRITICAL();
000006  f7fffffe          BL       OS_CPU_SR_Save
00000a  4606              MOV      r6,r0
;;;818        ptcb = OSTCBPrioTbl[prio];
00000c  4824              LDR      r0,|L11.160|
00000e  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;819        if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
000012  b924              CBNZ     r4,|L11.30|
;;;820            OS_EXIT_CRITICAL();
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       OS_CPU_SR_Restore
;;;821            return (OS_ERR_TASK_RESUME_PRIO);
00001a  2046              MOVS     r0,#0x46
                  |L11.28|
;;;822        }
;;;823        if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
;;;824            OS_EXIT_CRITICAL();
;;;825            return (OS_ERR_TASK_NOT_EXIST);
;;;826        }
;;;827        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
;;;828            ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
;;;829            if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
;;;830                if (ptcb->OSTCBDly == 0u) {
;;;831                    OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
;;;832                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;833                    OS_EXIT_CRITICAL();
;;;834                    if (OSRunning == OS_TRUE) {
;;;835                        OS_Sched();                               /* Find new highest priority task        */
;;;836                    }
;;;837                } else {
;;;838                    OS_EXIT_CRITICAL();
;;;839                }
;;;840            } else {                                              /* Must be pending on event              */
;;;841                OS_EXIT_CRITICAL();
;;;842            }
;;;843            return (OS_ERR_NONE);
;;;844        }
;;;845        OS_EXIT_CRITICAL();
;;;846        return (OS_ERR_TASK_NOT_SUSPENDED);
;;;847    }
00001c  bd70              POP      {r4-r6,pc}
                  |L11.30|
00001e  2c01              CMP      r4,#1                 ;823
000020  d104              BNE      |L11.44|
000022  4630              MOV      r0,r6                 ;824
000024  f7fffffe          BL       OS_CPU_SR_Restore
000028  2043              MOVS     r0,#0x43              ;825
00002a  e7f7              B        |L11.28|
                  |L11.44|
00002c  f8940034          LDRB     r0,[r4,#0x34]         ;827
000030  f0100f08          TST      r0,#8                 ;827
000034  d02f              BEQ      |L11.150|
000036  f8140f34          LDRB     r0,[r4,#0x34]!        ;828
00003a  f00000f7          AND      r0,r0,#0xf7           ;828
00003e  7020              STRB     r0,[r4,#0]            ;828
000040  f8140934          LDRB     r0,[r4],#-0x34        ;829
000044  bb10              CBNZ     r0,|L11.140|
000046  6b20              LDR      r0,[r4,#0x30]         ;830
000048  b9e0              CBNZ     r0,|L11.132|
00004a  f1040438          ADD      r4,r4,#0x38           ;831
00004e  78a0              LDRB     r0,[r4,#2]            ;831
000050  4914              LDR      r1,|L11.164|
000052  7809              LDRB     r1,[r1,#0]            ;831  ; OSRdyGrp
000054  ea400001          ORR      r0,r0,r1              ;831
000058  4912              LDR      r1,|L11.164|
00005a  7008              STRB     r0,[r1,#0]            ;831
00005c  7820              LDRB     r0,[r4,#0]            ;832
00005e  4912              LDR      r1,|L11.168|
000060  5c08              LDRB     r0,[r1,r0]            ;832
000062  7861              LDRB     r1,[r4,#1]            ;832
000064  ea400001          ORR      r0,r0,r1              ;832
000068  f8141938          LDRB     r1,[r4],#-0x38        ;832
00006c  4a0e              LDR      r2,|L11.168|
00006e  5450              STRB     r0,[r2,r1]            ;832
000070  4630              MOV      r0,r6                 ;833
000072  f7fffffe          BL       OS_CPU_SR_Restore
000076  480d              LDR      r0,|L11.172|
000078  7800              LDRB     r0,[r0,#0]            ;834  ; OSRunning
00007a  2801              CMP      r0,#1                 ;834
00007c  d109              BNE      |L11.146|
00007e  f7fffffe          BL       OS_Sched
000082  e006              B        |L11.146|
                  |L11.132|
000084  4630              MOV      r0,r6                 ;838
000086  f7fffffe          BL       OS_CPU_SR_Restore
00008a  e002              B        |L11.146|
                  |L11.140|
00008c  4630              MOV      r0,r6                 ;841
00008e  f7fffffe          BL       OS_CPU_SR_Restore
                  |L11.146|
000092  2000              MOVS     r0,#0                 ;843
000094  e7c2              B        |L11.28|
                  |L11.150|
000096  4630              MOV      r0,r6                 ;845
000098  f7fffffe          BL       OS_CPU_SR_Restore
00009c  2044              MOVS     r0,#0x44              ;846
00009e  e7bd              B        |L11.28|
;;;848    #endif
                          ENDP

                  |L11.160|
                          DCD      OSTCBPrioTbl
                  |L11.164|
                          DCD      OSRdyGrp
                  |L11.168|
                          DCD      OSRdyTbl
                  |L11.172|
                          DCD      OSRunning

                          AREA ||i.OSTaskStkChk||, CODE, READONLY, ALIGN=2

                  OSTaskStkChk PROC
;;;869    #if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
;;;870    INT8U  OSTaskStkChk (INT8U         prio,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;871                         OS_STK_DATA  *p_stk_data)
;;;872    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;873        OS_TCB    *ptcb;
;;;874        OS_STK    *pchk;
;;;875        INT32U     nfree;
;;;876        INT32U     size;
;;;877    #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;878        OS_CPU_SR  cpu_sr = 0u;
000008  f04f0a00          MOV      r10,#0
;;;879    #endif
;;;880    
;;;881    
;;;882    
;;;883    #if OS_ARG_CHK_EN > 0u
;;;884        if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
;;;885            if (prio != OS_PRIO_SELF) {
;;;886                return (OS_ERR_PRIO_INVALID);
;;;887            }
;;;888        }
;;;889        if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
;;;890            return (OS_ERR_PDATA_NULL);
;;;891        }
;;;892    #endif
;;;893        p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
00000c  2000              MOVS     r0,#0
00000e  6028              STR      r0,[r5,#0]
;;;894        p_stk_data->OSUsed = 0u;
000010  6068              STR      r0,[r5,#4]
;;;895        OS_ENTER_CRITICAL();
000012  f7fffffe          BL       OS_CPU_SR_Save
000016  4682              MOV      r10,r0
;;;896        if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
000018  2fff              CMP      r7,#0xff
00001a  d103              BNE      |L12.36|
;;;897            prio = OSTCBCur->OSTCBPrio;
00001c  4818              LDR      r0,|L12.128|
00001e  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000020  f8907036          LDRB     r7,[r0,#0x36]
                  |L12.36|
;;;898        }
;;;899        ptcb = OSTCBPrioTbl[prio];
000024  4817              LDR      r0,|L12.132|
000026  f8504027          LDR      r4,[r0,r7,LSL #2]
;;;900        if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
00002a  b92c              CBNZ     r4,|L12.56|
;;;901            OS_EXIT_CRITICAL();
00002c  4650              MOV      r0,r10
00002e  f7fffffe          BL       OS_CPU_SR_Restore
;;;902            return (OS_ERR_TASK_NOT_EXIST);
000032  2043              MOVS     r0,#0x43
                  |L12.52|
;;;903        }
;;;904        if (ptcb == OS_TCB_RESERVED) {
;;;905            OS_EXIT_CRITICAL();
;;;906            return (OS_ERR_TASK_NOT_EXIST);
;;;907        }
;;;908        if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
;;;909            OS_EXIT_CRITICAL();
;;;910            return (OS_ERR_TASK_OPT);
;;;911        }
;;;912        nfree = 0u;
;;;913        size  = ptcb->OSTCBStkSize;
;;;914        pchk  = ptcb->OSTCBStkBottom;
;;;915        OS_EXIT_CRITICAL();
;;;916    #if OS_STK_GROWTH == 1u
;;;917        while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
;;;918            nfree++;
;;;919        }
;;;920    #else
;;;921        while (*pchk-- == (OS_STK)0) {
;;;922            nfree++;
;;;923        }
;;;924    #endif
;;;925        p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
;;;926        p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
;;;927        return (OS_ERR_NONE);
;;;928    }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L12.56|
000038  2c01              CMP      r4,#1                 ;904
00003a  d104              BNE      |L12.70|
00003c  4650              MOV      r0,r10                ;905
00003e  f7fffffe          BL       OS_CPU_SR_Restore
000042  2043              MOVS     r0,#0x43              ;906
000044  e7f6              B        |L12.52|
                  |L12.70|
000046  7c20              LDRB     r0,[r4,#0x10]         ;908
000048  f0100f01          TST      r0,#1                 ;908
00004c  d104              BNE      |L12.88|
00004e  4650              MOV      r0,r10                ;909
000050  f7fffffe          BL       OS_CPU_SR_Restore
000054  2045              MOVS     r0,#0x45              ;910
000056  e7ed              B        |L12.52|
                  |L12.88|
000058  2600              MOVS     r6,#0                 ;912
00005a  f8d4900c          LDR      r9,[r4,#0xc]          ;913
00005e  f8d48008          LDR      r8,[r4,#8]            ;914
000062  4650              MOV      r0,r10                ;915
000064  f7fffffe          BL       OS_CPU_SR_Restore
000068  e000              B        |L12.108|
                  |L12.106|
00006a  1c76              ADDS     r6,r6,#1              ;918
                  |L12.108|
00006c  f8581b04          LDR      r1,[r8],#4            ;917
000070  2900              CMP      r1,#0                 ;917
000072  d0fa              BEQ      |L12.106|
000074  602e              STR      r6,[r5,#0]            ;925
000076  eba90006          SUB      r0,r9,r6              ;926
00007a  6068              STR      r0,[r5,#4]            ;926
00007c  2000              MOVS     r0,#0                 ;927
00007e  e7d9              B        |L12.52|
;;;929    #endif
                          ENDP

                  |L12.128|
                          DCD      OSTCBCur
                  |L12.132|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskSuspend||, CODE, READONLY, ALIGN=2

                  OSTaskSuspend PROC
;;;954    #if OS_TASK_SUSPEND_EN > 0u
;;;955    INT8U  OSTaskSuspend (INT8U prio)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;956    {
000004  4605              MOV      r5,r0
;;;957        BOOLEAN    self;
;;;958        OS_TCB    *ptcb;
;;;959        INT8U      y;
;;;960    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;961        OS_CPU_SR  cpu_sr = 0u;
000006  f04f0800          MOV      r8,#0
;;;962    #endif
;;;963    
;;;964    
;;;965    
;;;966    #if OS_ARG_CHK_EN > 0u
;;;967        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
;;;968            return (OS_ERR_TASK_SUSPEND_IDLE);
;;;969        }
;;;970        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;971            if (prio != OS_PRIO_SELF) {
;;;972                return (OS_ERR_PRIO_INVALID);
;;;973            }
;;;974        }
;;;975    #endif
;;;976        OS_ENTER_CRITICAL();
00000a  f7fffffe          BL       OS_CPU_SR_Save
00000e  4680              MOV      r8,r0
;;;977        if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
000010  2dff              CMP      r5,#0xff
000012  d105              BNE      |L13.32|
;;;978            prio = OSTCBCur->OSTCBPrio;
000014  4820              LDR      r0,|L13.152|
000016  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000018  f8905036          LDRB     r5,[r0,#0x36]
;;;979            self = OS_TRUE;
00001c  2601              MOVS     r6,#1
00001e  e008              B        |L13.50|
                  |L13.32|
;;;980        } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
000020  481d              LDR      r0,|L13.152|
000022  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000024  f8900036          LDRB     r0,[r0,#0x36]
000028  42a8              CMP      r0,r5
00002a  d101              BNE      |L13.48|
;;;981            self = OS_TRUE;
00002c  2601              MOVS     r6,#1
00002e  e000              B        |L13.50|
                  |L13.48|
;;;982        } else {
;;;983            self = OS_FALSE;                                        /* No suspending another task          */
000030  2600              MOVS     r6,#0
                  |L13.50|
;;;984        }
;;;985        ptcb = OSTCBPrioTbl[prio];
000032  481a              LDR      r0,|L13.156|
000034  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;986        if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
000038  b92c              CBNZ     r4,|L13.70|
;;;987            OS_EXIT_CRITICAL();
00003a  4640              MOV      r0,r8
00003c  f7fffffe          BL       OS_CPU_SR_Restore
;;;988            return (OS_ERR_TASK_SUSPEND_PRIO);
000040  2048              MOVS     r0,#0x48
                  |L13.66|
;;;989        }
;;;990        if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
;;;991            OS_EXIT_CRITICAL();
;;;992            return (OS_ERR_TASK_NOT_EXIST);
;;;993        }
;;;994        y            = ptcb->OSTCBY;
;;;995        OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
;;;996        if (OSRdyTbl[y] == 0u) {
;;;997            OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;998        }
;;;999        ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
;;;1000       OS_EXIT_CRITICAL();
;;;1001       if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
;;;1002           OS_Sched();                                             /* Find new highest priority task      */
;;;1003       }
;;;1004       return (OS_ERR_NONE);
;;;1005   }
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L13.70|
000046  2c01              CMP      r4,#1                 ;990
000048  d104              BNE      |L13.84|
00004a  4640              MOV      r0,r8                 ;991
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  2043              MOVS     r0,#0x43              ;992
000052  e7f6              B        |L13.66|
                  |L13.84|
000054  f8947038          LDRB     r7,[r4,#0x38]         ;994
000058  4811              LDR      r0,|L13.160|
00005a  5dc0              LDRB     r0,[r0,r7]            ;995
00005c  f8941039          LDRB     r1,[r4,#0x39]         ;995
000060  4388              BICS     r0,r0,r1              ;995
000062  490f              LDR      r1,|L13.160|
000064  55c8              STRB     r0,[r1,r7]            ;995
000066  4608              MOV      r0,r1                 ;996
000068  5dc0              LDRB     r0,[r0,r7]            ;996
00006a  b930              CBNZ     r0,|L13.122|
00006c  f894103a          LDRB     r1,[r4,#0x3a]         ;997
000070  480c              LDR      r0,|L13.164|
000072  7800              LDRB     r0,[r0,#0]            ;997  ; OSRdyGrp
000074  4388              BICS     r0,r0,r1              ;997
000076  490b              LDR      r1,|L13.164|
000078  7008              STRB     r0,[r1,#0]            ;997
                  |L13.122|
00007a  f8940034          LDRB     r0,[r4,#0x34]         ;999
00007e  f0400008          ORR      r0,r0,#8              ;999
000082  f8840034          STRB     r0,[r4,#0x34]         ;999
000086  4640              MOV      r0,r8                 ;1000
000088  f7fffffe          BL       OS_CPU_SR_Restore
00008c  2e01              CMP      r6,#1                 ;1001
00008e  d101              BNE      |L13.148|
000090  f7fffffe          BL       OS_Sched
                  |L13.148|
000094  2000              MOVS     r0,#0                 ;1004
000096  e7d4              B        |L13.66|
;;;1006   #endif
                          ENDP

                  |L13.152|
                          DCD      OSTCBCur
                  |L13.156|
                          DCD      OSTCBPrioTbl
                  |L13.160|
                          DCD      OSRdyTbl
                  |L13.164|
                          DCD      OSRdyGrp

                          AREA ||i.OS_TaskReturn||, CODE, READONLY, ALIGN=2

                  OS_TaskReturn PROC
;;;1226   
;;;1227   void  OS_TaskReturn (void)
000000  b510              PUSH     {r4,lr}
;;;1228   {
;;;1229       OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
000002  4804              LDR      r0,|L14.20|
000004  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000006  f7fffffe          BL       OSTaskReturnHook
;;;1230   
;;;1231   #if OS_TASK_DEL_EN > 0u
;;;1232       (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
00000a  20ff              MOVS     r0,#0xff
00000c  f7fffffe          BL       OSTaskDel
;;;1233   #else
;;;1234       for (;;) {
;;;1235           OSTimeDly(OS_TICKS_PER_SEC);
;;;1236       }
;;;1237   #endif
;;;1238   }
000010  bd10              POP      {r4,pc}
;;;1239   
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      OSTCBCur

                          AREA ||i.OS_TaskStkClr||, CODE, READONLY, ALIGN=1

                  OS_TaskStkClr PROC
;;;1263   #if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
;;;1264   void  OS_TaskStkClr (OS_STK  *pbos,
000000  f0120f01          TST      r2,#1
;;;1265                        INT32U   size,
;;;1266                        INT16U   opt)
;;;1267   {
;;;1268       if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
000004  d008              BEQ      |L15.24|
;;;1269           if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
000006  f0120f02          TST      r2,#2
00000a  d005              BEQ      |L15.24|
;;;1270   #if OS_STK_GROWTH == 1u
;;;1271               while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
00000c  e002              B        |L15.20|
                  |L15.14|
;;;1272                   size--;
00000e  1e49              SUBS     r1,r1,#1
;;;1273                   *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
000010  2300              MOVS     r3,#0
000012  c008              STM      r0!,{r3}
                  |L15.20|
000014  2900              CMP      r1,#0                 ;1271
000016  d1fa              BNE      |L15.14|
                  |L15.24|
;;;1274               }
;;;1275   #else
;;;1276               while (size > 0u) {                        /* Stack grows from LOW to HIGH memory          */
;;;1277                   size--;
;;;1278                   *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
;;;1279               }
;;;1280   #endif
;;;1281           }
;;;1282       }
;;;1283   }
000018  4770              BX       lr
;;;1284   
                          ENDP

