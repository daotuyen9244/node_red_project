; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guidev_measure.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guidev_measure.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\MemDev\GUIDEV_Measure.c]
                          THUMB

                          AREA ||i.GUI_MEASDEV_ClearRect||, CODE, READONLY, ALIGN=1

                  GUI_MEASDEV_ClearRect PROC
;;;312    */
;;;313    void GUI_MEASDEV_ClearRect(GUI_MEASDEV_Handle hMemDev) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;314      if (hMemDev) {
000004  b185              CBZ      r5,|L1.40|
;;;315        GUI_MEASDEV* pDevData;
;;;316        GUI_LOCK();
000006  f7fffffe          BL       GUI_Lock
;;;317        pDevData = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMemDev);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       GUI_ALLOC_h2p
000010  4604              MOV      r4,r0
;;;318        pDevData->rUsed.x0 = GUI_XMAX;
000012  f64070ff          MOV      r0,#0xfff
000016  8020              STRH     r0,[r4,#0]
;;;319        pDevData->rUsed.y0 = GUI_YMAX;
000018  8060              STRH     r0,[r4,#2]
;;;320        pDevData->rUsed.x1 = GUI_XMIN;
00001a  f24f0001          MOV      r0,#0xf001
00001e  80a0              STRH     r0,[r4,#4]
;;;321        pDevData->rUsed.y1 = GUI_YMIN;
000020  80e0              STRH     r0,[r4,#6]
;;;322        GUI_UNLOCK();
000022  f7fffffe          BL       GUI_Unlock
;;;323      } 
000026  bf00              NOP      
                  |L1.40|
;;;324    }
000028  bd70              POP      {r4-r6,pc}
;;;325    
                          ENDP


                          AREA ||i.GUI_MEASDEV_Create||, CODE, READONLY, ALIGN=2

                  GUI_MEASDEV_Create PROC
;;;329    */
;;;330    GUI_MEASDEV_Handle GUI_MEASDEV_Create(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;331      int MemSize;
;;;332      GUI_MEASDEV_Handle hMemDev;
;;;333      MemSize = sizeof(GUI_MEASDEV);
000002  2414              MOVS     r4,#0x14
;;;334      hMemDev = GUI_ALLOC_AllocZero(MemSize);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       GUI_ALLOC_AllocZero
00000a  4605              MOV      r5,r0
;;;335      if (hMemDev) {
00000c  b19d              CBZ      r5,|L2.54|
;;;336        GUI_MEASDEV* pDevData;
;;;337        GUI_LOCK();
00000e  f7fffffe          BL       GUI_Lock
;;;338        pDevData = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMemDev);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       GUI_ALLOC_h2p
000018  4606              MOV      r6,r0
;;;339        pDevData->pfColor2Index = GUI_Context.pDeviceAPI->pfColor2Index;    
00001a  4808              LDR      r0,|L2.60|
00001c  6cc0              LDR      r0,[r0,#0x4c]  ; GUI_Context
00001e  6800              LDR      r0,[r0,#0]
000020  60b0              STR      r0,[r6,#8]
;;;340        pDevData->pfIndex2Color = GUI_Context.pDeviceAPI->pfIndex2Color;
000022  4806              LDR      r0,|L2.60|
000024  6cc0              LDR      r0,[r0,#0x4c]  ; GUI_Context
000026  6840              LDR      r0,[r0,#4]
000028  60f0              STR      r0,[r6,#0xc]
;;;341        GUI_MEASDEV_ClearRect(hMemDev);
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       GUI_MEASDEV_ClearRect
;;;342        GUI_UNLOCK();
000030  f7fffffe          BL       GUI_Unlock
;;;343      } else {
000034  bf00              NOP      
                  |L2.54|
;;;344        GUI_DEBUG_WARN("GUI_MEASDEV_Create: Alloc failed");
;;;345      }
;;;346      return hMemDev;
000036  4628              MOV      r0,r5
;;;347    }
000038  bd70              POP      {r4-r6,pc}
;;;348    
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      GUI_Context

                          AREA ||i.GUI_MEASDEV_Delete||, CODE, READONLY, ALIGN=2

                  GUI_MEASDEV_Delete PROC
;;;300    */
;;;301    void GUI_MEASDEV_Delete(GUI_MEASDEV_Handle hMemDev) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;302      /* Make sure memory device is not used */
;;;303      if ((GUI_Context.hDevData = hMemDev) != 0) {
000004  4804              LDR      r0,|L3.24|
000006  f8a04050          STRH     r4,[r0,#0x50]
00000a  b10c              CBZ      r4,|L3.16|
;;;304    	  GUI_SelectLCD();
00000c  f7fffffe          BL       GUI_SelectLCD
                  |L3.16|
;;;305      }
;;;306      GUI_ALLOC_Free(hMemDev);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       GUI_ALLOC_Free
;;;307    }
000016  bd10              POP      {r4,pc}
;;;308    
                          ENDP

                  |L3.24|
                          DCD      GUI_Context

                          AREA ||i.GUI_MEASDEV_GetRect||, CODE, READONLY, ALIGN=1

                  GUI_MEASDEV_GetRect PROC
;;;370    */
;;;371    void GUI_MEASDEV_GetRect(GUI_MEASDEV_Handle hMem, GUI_RECT* pRect) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;372      if (hMem) {
000006  b18e              CBZ      r6,|L4.44|
;;;373        GUI_MEASDEV* pDev;
;;;374        GUI_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;375        pDev = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMem);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4605              MOV      r5,r0
;;;376        if (pRect) {
000014  b13c              CBZ      r4,|L4.38|
;;;377          pRect->x0 = pDev->rUsed.x0;
000016  8828              LDRH     r0,[r5,#0]
000018  8020              STRH     r0,[r4,#0]
;;;378          pRect->y0 = pDev->rUsed.y0;
00001a  8868              LDRH     r0,[r5,#2]
00001c  8060              STRH     r0,[r4,#2]
;;;379          pRect->x1 = pDev->rUsed.x1;
00001e  88a8              LDRH     r0,[r5,#4]
000020  80a0              STRH     r0,[r4,#4]
;;;380          pRect->y1 = pDev->rUsed.y1;
000022  88e8              LDRH     r0,[r5,#6]
000024  80e0              STRH     r0,[r4,#6]
                  |L4.38|
;;;381        }
;;;382        GUI_UNLOCK();
000026  f7fffffe          BL       GUI_Unlock
;;;383      }
00002a  bf00              NOP      
                  |L4.44|
;;;384    }
00002c  bd70              POP      {r4-r6,pc}
;;;385    
                          ENDP


                          AREA ||i.GUI_MEASDEV_Select||, CODE, READONLY, ALIGN=2

                  GUI_MEASDEV_Select PROC
;;;352    */
;;;353    void GUI_MEASDEV_Select(GUI_MEASDEV_Handle hMem) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;354      if (hMem == 0) {
000004  b914              CBNZ     r4,|L5.12|
;;;355        GUI_SelectLCD();
000006  f7fffffe          BL       GUI_SelectLCD
00000a  e00b              B        |L5.36|
                  |L5.12|
;;;356      } else {
;;;357        #if GUI_WINSUPPORT
;;;358          WM_Deactivate();
00000c  f7fffffe          BL       WM_Deactivate
;;;359        #endif
;;;360        GUI_Context.hDevData     = hMem;
000010  4805              LDR      r0,|L5.40|
000012  f8a04050          STRH     r4,[r0,#0x50]
;;;361        GUI_Context.pDeviceAPI   = &_APIList;
000016  4805              LDR      r0,|L5.44|
000018  4903              LDR      r1,|L5.40|
00001a  64c8              STR      r0,[r1,#0x4c]  ; GUI_Context
;;;362        GUI_Context.pClipRect_HL = NULL;
00001c  2000              MOVS     r0,#0
00001e  6148              STR      r0,[r1,#0x14]  ; GUI_Context
;;;363        LCD_SetClipRectMax();
000020  f7fffffe          BL       LCD_SetClipRectMax
                  |L5.36|
;;;364      }
;;;365    }
000024  bd10              POP      {r4,pc}
;;;366    
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
                          DCD      GUI_Context
                  |L5.44|
                          DCD      _APIList

                          AREA ||i._CalcPolyRect||, CODE, READONLY, ALIGN=1

                  _CalcPolyRect PROC
;;;205    */
;;;206    static void _CalcPolyRect(GUI_RECT *pr, const GUI_POINT* paPoint, int NumPoints) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  4614              MOV      r4,r2
;;;207      int i;
;;;208      int xMin, xMax, yMin, yMax;
;;;209      xMin = GUI_XMAX;
000006  f64078ff          MOV      r8,#0xfff
;;;210      yMin = GUI_YMAX;
00000a  4647              MOV      r7,r8
;;;211      xMax = GUI_XMIN;
00000c  427e              RSBS     r6,r7,#0
;;;212      yMax = GUI_YMIN;
00000e  46b4              MOV      r12,r6
;;;213      for (i = 0; i  <NumPoints; i++) {
000010  2500              MOVS     r5,#0
000012  e011              B        |L6.56|
                  |L6.20|
;;;214        int x = paPoint->x;
000014  f9b12000          LDRSH    r2,[r1,#0]
;;;215        int y = paPoint->y;
000018  f9b13002          LDRSH    r3,[r1,#2]
;;;216        if (xMin > x)
00001c  4590              CMP      r8,r2
00001e  dd00              BLE      |L6.34|
;;;217          xMin = x;
000020  4690              MOV      r8,r2
                  |L6.34|
;;;218        if (xMax < x)
000022  4296              CMP      r6,r2
000024  da00              BGE      |L6.40|
;;;219          xMax = x;
000026  4616              MOV      r6,r2
                  |L6.40|
;;;220        if (yMin > y)
000028  429f              CMP      r7,r3
00002a  dd00              BLE      |L6.46|
;;;221          yMin = y;
00002c  461f              MOV      r7,r3
                  |L6.46|
;;;222        if (yMax < y)
00002e  459c              CMP      r12,r3
000030  da00              BGE      |L6.52|
;;;223          yMax = y;
000032  469c              MOV      r12,r3
                  |L6.52|
;;;224        paPoint++;
000034  1d09              ADDS     r1,r1,#4
000036  1c6d              ADDS     r5,r5,#1              ;213
                  |L6.56|
000038  42a5              CMP      r5,r4                 ;213
00003a  dbeb              BLT      |L6.20|
;;;225      }
;;;226      pr->x0 = xMin;
00003c  fa0ff288          SXTH     r2,r8
000040  8002              STRH     r2,[r0,#0]
;;;227      pr->x1 = xMax;
000042  b232              SXTH     r2,r6
000044  8082              STRH     r2,[r0,#4]
;;;228      pr->y0 = yMin;
000046  b23a              SXTH     r2,r7
000048  8042              STRH     r2,[r0,#2]
;;;229      pr->y1 = yMax;
00004a  fa0ff28c          SXTH     r2,r12
00004e  80c2              STRH     r2,[r0,#6]
;;;230    }
000050  e8bd83f0          POP      {r4-r9,pc}
;;;231    
                          ENDP


                          AREA ||i._Color2Index||, CODE, READONLY, ALIGN=2

                  _Color2Index PROC
;;;178    */
;;;179    static unsigned int _Color2Index(LCD_COLOR Color) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;180      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
000004  4904              LDR      r1,|L7.24|
000006  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
00000a  f7fffffe          BL       GUI_ALLOC_h2p
00000e  4605              MOV      r5,r0
;;;181      return pDev->pfColor2Index(Color);
000010  4620              MOV      r0,r4
000012  68a9              LDR      r1,[r5,#8]
000014  4788              BLX      r1
;;;182    }
000016  bd70              POP      {r4-r6,pc}
;;;183    
                          ENDP

                  |L7.24|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmap||, CODE, READONLY, ALIGN=1

                  _DrawBitmap PROC
;;;101    */
;;;102    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;103                           int BitsPerPixel, int BytesPerLine,
;;;104                           const U8 GUI_UNI_PTR * pData, int Diff,
;;;105                           const LCD_PIXELINDEX* pTrans)
;;;106    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9ddab0c          LDRD     r10,r11,[sp,#0x30]
000010  e9dd890a          LDRD     r8,r9,[sp,#0x28]
;;;107      GUI_USE_PARA(BitsPerPixel);
000014  bf00              NOP      
;;;108      GUI_USE_PARA(BytesPerLine);
000016  bf00              NOP      
;;;109      GUI_USE_PARA(pData);
000018  bf00              NOP      
;;;110      GUI_USE_PARA(Diff);
00001a  bf00              NOP      
;;;111      GUI_USE_PARA(pTrans);
00001c  980e              LDR      r0,[sp,#0x38]
00001e  900e              STR      r0,[sp,#0x38]
;;;112      _MarkRect(x0, y0, x0 + xsize - 1, y0 + ysize - 1);
000020  19e8              ADDS     r0,r5,r7
000022  1e43              SUBS     r3,r0,#1
000024  19a0              ADDS     r0,r4,r6
000026  1e42              SUBS     r2,r0,#1
000028  4629              MOV      r1,r5
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _MarkRect
;;;113    }
000030  e8bd9ff0          POP      {r4-r12,pc}
;;;114    
                          ENDP


                          AREA ||i._DrawHLine||, CODE, READONLY, ALIGN=1

                  _DrawHLine PROC
;;;118    */
;;;119    static void _DrawHLine(int x0, int y,  int x1) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;120      _MarkRect(x0, y, x1, y);
000008  4623              MOV      r3,r4
00000a  4632              MOV      r2,r6
00000c  4621              MOV      r1,r4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       _MarkRect
;;;121    }
000014  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i._DrawVLine||, CODE, READONLY, ALIGN=1

                  _DrawVLine PROC
;;;126    */
;;;127    static void _DrawVLine(int x , int y0,  int y1) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;128      _MarkRect(x, y0, x, y1);
000008  462b              MOV      r3,r5
00000a  4622              MOV      r2,r4
00000c  4631              MOV      r1,r6
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _MarkRect
;;;129    }
000014  bd70              POP      {r4-r6,pc}
;;;130    
                          ENDP


                          AREA ||i._FillPolygon||, CODE, READONLY, ALIGN=1

                  _FillPolygon PROC
;;;235    */
;;;236    static void _FillPolygon(const GUI_POINT* paPoint, int NumPoints, int x0, int y0) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;237      GUI_RECT r;
;;;238      _CalcPolyRect(&r, paPoint, NumPoints);
00000c  462a              MOV      r2,r5
00000e  4621              MOV      r1,r4
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       _CalcPolyRect
;;;239      GUI_MoveRect(&r, x0, y0);
000016  463a              MOV      r2,r7
000018  4631              MOV      r1,r6
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       GUI_MoveRect
;;;240      _MarkRect(r.x0, r.y0, r.x1, r.y1);
000020  f9bd3006          LDRSH    r3,[sp,#6]
000024  f9bd2004          LDRSH    r2,[sp,#4]
000028  f9bd1002          LDRSH    r1,[sp,#2]
00002c  f9bd0000          LDRSH    r0,[sp,#0]
000030  f7fffffe          BL       _MarkRect
;;;241    }
000034  e8bd81fc          POP      {r2-r8,pc}
;;;242    
                          ENDP


                          AREA ||i._FillPolygonAA||, CODE, READONLY, ALIGN=2

                  _FillPolygonAA PROC
;;;246    */
;;;247    static void _FillPolygonAA(const GUI_POINT* paPoint, int NumPoints, int x0, int y0) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;248      #if GUI_SUPPORT_AA
;;;249        GUI_RECT r;
;;;250        _CalcPolyRect(&r, paPoint, NumPoints);
00000c  462a              MOV      r2,r5
00000e  4621              MOV      r1,r4
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       _CalcPolyRect
;;;251        GUI_MoveRect(&r, x0, y0);
000016  463a              MOV      r2,r7
000018  4631              MOV      r1,r6
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       GUI_MoveRect
;;;252        if (GUI_Context.AA_HiResEnable) {
000020  4820              LDR      r0,|L12.164|
000022  f8900061          LDRB     r0,[r0,#0x61]  ; GUI_Context
000026  b388              CBZ      r0,|L12.140|
;;;253          r.x0 /= GUI_Context.AA_Factor;
000028  f9bd0000          LDRSH    r0,[sp,#0]
00002c  491d              LDR      r1,|L12.164|
00002e  f8911060          LDRB     r1,[r1,#0x60]  ; GUI_Context
000032  fb90f0f1          SDIV     r0,r0,r1
000036  b200              SXTH     r0,r0
000038  f8ad0000          STRH     r0,[sp,#0]
;;;254          r.y0 /= GUI_Context.AA_Factor;
00003c  f9bd0002          LDRSH    r0,[sp,#2]
000040  4918              LDR      r1,|L12.164|
000042  f8911060          LDRB     r1,[r1,#0x60]  ; GUI_Context
000046  fb90f0f1          SDIV     r0,r0,r1
00004a  b200              SXTH     r0,r0
00004c  f8ad0002          STRH     r0,[sp,#2]
;;;255          r.x1 = (r.x1 + GUI_Context.AA_Factor - 1) / GUI_Context.AA_Factor;
000050  f9bd0004          LDRSH    r0,[sp,#4]
000054  4913              LDR      r1,|L12.164|
000056  f8911060          LDRB     r1,[r1,#0x60]  ; GUI_Context
00005a  4408              ADD      r0,r0,r1
00005c  1e40              SUBS     r0,r0,#1
00005e  4911              LDR      r1,|L12.164|
000060  f8911060          LDRB     r1,[r1,#0x60]  ; GUI_Context
000064  fb90f0f1          SDIV     r0,r0,r1
000068  b200              SXTH     r0,r0
00006a  f8ad0004          STRH     r0,[sp,#4]
;;;256          r.y1 = (r.y1 + GUI_Context.AA_Factor - 1) / GUI_Context.AA_Factor;
00006e  f9bd0006          LDRSH    r0,[sp,#6]
000072  490c              LDR      r1,|L12.164|
000074  f8911060          LDRB     r1,[r1,#0x60]  ; GUI_Context
000078  4408              ADD      r0,r0,r1
00007a  1e40              SUBS     r0,r0,#1
00007c  4909              LDR      r1,|L12.164|
00007e  f8911060          LDRB     r1,[r1,#0x60]  ; GUI_Context
000082  fb90f0f1          SDIV     r0,r0,r1
000086  b200              SXTH     r0,r0
000088  f8ad0006          STRH     r0,[sp,#6]
                  |L12.140|
;;;257        }
;;;258        _MarkRect(r.x0, r.y0, r.x1, r.y1);
00008c  f9bd3006          LDRSH    r3,[sp,#6]
000090  f9bd2004          LDRSH    r2,[sp,#4]
000094  f9bd1002          LDRSH    r1,[sp,#2]
000098  f9bd0000          LDRSH    r0,[sp,#0]
00009c  f7fffffe          BL       _MarkRect
;;;259      #else
;;;260        GUI_USE_PARA(paPoint);
;;;261        GUI_USE_PARA(NumPoints);
;;;262        GUI_USE_PARA(x0);
;;;263        GUI_USE_PARA(y0);
;;;264      #endif
;;;265    }
0000a0  e8bd81fc          POP      {r2-r8,pc}
;;;266    
                          ENDP

                  |L12.164|
                          DCD      GUI_Context

                          AREA ||i._FillRect||, CODE, READONLY, ALIGN=1

                  _FillRect PROC
;;;161    */
;;;162    static void _FillRect(int x0, int y0, int x1, int y1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;163      _MarkRect(x0, y0, x1, y1);
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _MarkRect
;;;164    }
000018  e8bd81f0          POP      {r4-r8,pc}
;;;165    
                          ENDP


                          AREA ||i._GetIndexMask||, CODE, READONLY, ALIGN=2

                  _GetIndexMask PROC
;;;196    */
;;;197    static unsigned int _GetIndexMask(void) {
000000  b510              PUSH     {r4,lr}
;;;198      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
000002  4904              LDR      r1,|L14.20|
000004  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000008  f7fffffe          BL       GUI_ALLOC_h2p
00000c  4604              MOV      r4,r0
;;;199      return pDev->pfGetIndexMask();
00000e  6920              LDR      r0,[r4,#0x10]
000010  4780              BLX      r0
;;;200    }
000012  bd10              POP      {r4,pc}
;;;201    
                          ENDP

                  |L14.20|
                          DCD      GUI_Context

                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=1

                  _GetPixelIndex PROC
;;;151    */
;;;152    static unsigned int _GetPixelIndex(int x, int y) { 
000000  4602              MOV      r2,r0
;;;153      GUI_USE_PARA(x);
000002  bf00              NOP      
;;;154      GUI_USE_PARA(y);
000004  bf00              NOP      
;;;155      return 0;
000006  2000              MOVS     r0,#0
;;;156    }
000008  4770              BX       lr
;;;157    
                          ENDP


                          AREA ||i._GetRect||, CODE, READONLY, ALIGN=2

                  _GetRect PROC
;;;169    */
;;;170    static void _GetRect(LCD_RECT* pRect) {
000000  4903              LDR      r1,|L16.16|
;;;171      pRect->x0 = pRect->y0 = -4095;
000002  8041              STRH     r1,[r0,#2]
000004  8001              STRH     r1,[r0,#0]
;;;172      pRect->x1 = pRect->y1 =  4095;
000006  0d09              LSRS     r1,r1,#20
000008  80c1              STRH     r1,[r0,#6]
00000a  8081              STRH     r1,[r0,#4]
;;;173    }
00000c  4770              BX       lr
;;;174    
                          ENDP

00000e  0000              DCW      0x0000
                  |L16.16|
                          DCD      0xfffff001

                          AREA ||i._Index2Color||, CODE, READONLY, ALIGN=2

                  _Index2Color PROC
;;;187    */
;;;188    static LCD_COLOR _Index2Color(int Index) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;189      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
000004  4904              LDR      r1,|L17.24|
000006  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
00000a  f7fffffe          BL       GUI_ALLOC_h2p
00000e  4605              MOV      r5,r0
;;;190      return pDev->pfIndex2Color(Index);
000010  4620              MOV      r0,r4
000012  68e9              LDR      r1,[r5,#0xc]
000014  4788              BLX      r1
;;;191    }
000016  bd70              POP      {r4-r6,pc}
;;;192    
                          ENDP

                  |L17.24|
                          DCD      GUI_Context

                          AREA ||i._MarkPixel||, CODE, READONLY, ALIGN=2

                  _MarkPixel PROC
;;;69     */
;;;70     static void _MarkPixel(int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;71       GUI_MEASDEV* pDev = (GUI_MEASDEV*)(GUI_MEMDEV_H2P(GUI_Context.hDevData));
000006  490f              LDR      r1,|L18.68|
000008  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
00000c  f7fffffe          BL       GUI_ALLOC_h2p
000010  4604              MOV      r4,r0
;;;72       if (x < pDev->rUsed.x0)
000012  f9b40000          LDRSH    r0,[r4,#0]
000016  42a8              CMP      r0,r5
000018  dd01              BLE      |L18.30|
;;;73         pDev->rUsed.x0 = x;
00001a  b228              SXTH     r0,r5
00001c  8020              STRH     r0,[r4,#0]
                  |L18.30|
;;;74       if (x > pDev->rUsed.x1)
00001e  f9b40004          LDRSH    r0,[r4,#4]
000022  42a8              CMP      r0,r5
000024  da01              BGE      |L18.42|
;;;75         pDev->rUsed.x1 = x;
000026  b228              SXTH     r0,r5
000028  80a0              STRH     r0,[r4,#4]
                  |L18.42|
;;;76       if (y < pDev->rUsed.y0)
00002a  f9b40002          LDRSH    r0,[r4,#2]
00002e  42b0              CMP      r0,r6
000030  dd01              BLE      |L18.54|
;;;77         pDev->rUsed.y0 = y;
000032  b230              SXTH     r0,r6
000034  8060              STRH     r0,[r4,#2]
                  |L18.54|
;;;78       if (y > pDev->rUsed.y1)
000036  f9b40006          LDRSH    r0,[r4,#6]
00003a  42b0              CMP      r0,r6
00003c  da01              BGE      |L18.66|
;;;79         pDev->rUsed.y1 = y;
00003e  b230              SXTH     r0,r6
000040  80e0              STRH     r0,[r4,#6]
                  |L18.66|
;;;80     }
000042  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

                  |L18.68|
                          DCD      GUI_Context

                          AREA ||i._MarkRect||, CODE, READONLY, ALIGN=2

                  _MarkRect PROC
;;;85     */
;;;86     static void _MarkRect(int x0, int y0, int x1, int y1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;87       GUI_MEASDEV* pDev = (GUI_MEASDEV*)(GUI_MEMDEV_H2P(GUI_Context.hDevData));
00000c  4910              LDR      r1,|L19.80|
00000e  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000012  f7fffffe          BL       GUI_ALLOC_h2p
000016  4604              MOV      r4,r0
;;;88       if (x0 < pDev->rUsed.x0)
000018  f9b40000          LDRSH    r0,[r4,#0]
00001c  42b0              CMP      r0,r6
00001e  dd01              BLE      |L19.36|
;;;89         pDev->rUsed.x0 = x0;
000020  b230              SXTH     r0,r6
000022  8020              STRH     r0,[r4,#0]
                  |L19.36|
;;;90       if (x1 > pDev->rUsed.x1)
000024  f9b40004          LDRSH    r0,[r4,#4]
000028  42b8              CMP      r0,r7
00002a  da01              BGE      |L19.48|
;;;91         pDev->rUsed.x1 = x1;
00002c  b238              SXTH     r0,r7
00002e  80a0              STRH     r0,[r4,#4]
                  |L19.48|
;;;92       if (y1 < pDev->rUsed.y0)
000030  f9b40002          LDRSH    r0,[r4,#2]
000034  42a8              CMP      r0,r5
000036  dd02              BLE      |L19.62|
;;;93         pDev->rUsed.y0 = y0;
000038  fa0ff088          SXTH     r0,r8
00003c  8060              STRH     r0,[r4,#2]
                  |L19.62|
;;;94       if (y1 > pDev->rUsed.y1)
00003e  f9b40006          LDRSH    r0,[r4,#6]
000042  42a8              CMP      r0,r5
000044  da01              BGE      |L19.74|
;;;95         pDev->rUsed.y1 = y1;
000046  b228              SXTH     r0,r5
000048  80e0              STRH     r0,[r4,#6]
                  |L19.74|
;;;96     }
00004a  e8bd81f0          POP      {r4-r8,pc}
;;;97     
                          ENDP

00004e  0000              DCW      0x0000
                  |L19.80|
                          DCD      GUI_Context

                          AREA ||i._SetPixelIndex||, CODE, READONLY, ALIGN=1

                  _SetPixelIndex PROC
;;;134    */
;;;135    static void _SetPixelIndex(int x, int y, int Index) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;136      GUI_USE_PARA(Index);
000008  bf00              NOP      
;;;137      _MarkPixel(x, y);
00000a  4631              MOV      r1,r6
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       _MarkPixel
;;;138    }
000012  bd70              POP      {r4-r6,pc}
;;;139    
                          ENDP


                          AREA ||i._XorPixel||, CODE, READONLY, ALIGN=1

                  _XorPixel PROC
;;;143    */
;;;144    static void _XorPixel(int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;145      _MarkPixel(x, y);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _MarkPixel
;;;146    }
00000e  bd70              POP      {r4-r6,pc}
;;;147    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _APIList
                          DCD      _Color2Index
                          DCD      _Index2Color
                          DCD      _GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      _GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      _FillPolygon
                          DCD      _FillPolygonAA
                          DCD      0x00000000
                          DCD      0x00000000
