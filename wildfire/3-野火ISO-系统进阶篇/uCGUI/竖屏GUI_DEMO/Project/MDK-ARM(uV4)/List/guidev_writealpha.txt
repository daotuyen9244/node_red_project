; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guidev_writealpha.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guidev_writealpha.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\MemDev\GUIDEV_WriteAlpha.c]
                          THUMB

                          AREA ||i.GUI_MEMDEV_WriteAlpha||, CODE, READONLY, ALIGN=2

                  GUI_MEMDEV_WriteAlpha PROC
;;;121    */
;;;122    void GUI_MEMDEV_WriteAlpha(GUI_MEMDEV_Handle hMem, int Alpha) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;123      GUI_MEMDEV_WriteAlphaAt(hMem, Alpha, GUI_POS_AUTO, GUI_POS_AUTO);
000006  4b03              LDR      r3,|L1.20|
000008  461a              MOV      r2,r3
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       GUI_MEMDEV_WriteAlphaAt
;;;124    }
000012  bd70              POP      {r4-r6,pc}
;;;125    
                          ENDP

                  |L1.20|
                          DCD      0xfffff001

                          AREA ||i.GUI_MEMDEV_WriteAlphaAt||, CODE, READONLY, ALIGN=1

                  GUI_MEMDEV_WriteAlphaAt PROC
;;;92     */
;;;93     void GUI_MEMDEV_WriteAlphaAt(GUI_MEMDEV_Handle hMem, int Alpha, int x, int y) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;94       if (hMem) {
00000c  b38e              CBZ      r6,|L2.114|
;;;95         GUI_MEMDEV* pDevData;
;;;96         #if (GUI_WINSUPPORT)
;;;97           GUI_RECT r;
;;;98         #endif
;;;99         GUI_LOCK();
00000e  f7fffffe          BL       GUI_Lock
;;;100        pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);  /* Convert to pointer */
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GUI_ALLOC_h2p
000018  4604              MOV      r4,r0
;;;101        if (x == GUI_POS_AUTO) {
00001a  f64070ff          MOV      r0,#0xfff
00001e  1940              ADDS     r0,r0,r5
000020  d103              BNE      |L2.42|
;;;102          x = pDevData->x0;
000022  f9b45000          LDRSH    r5,[r4,#0]
;;;103          y = pDevData->y0;
000026  f9b47002          LDRSH    r7,[r4,#2]
                  |L2.42|
;;;104        }
;;;105        #if (GUI_WINSUPPORT)
;;;106          r.x1 = (r.x0 = x) + pDevData->XSize-1;
00002a  b228              SXTH     r0,r5
00002c  f8ad0000          STRH     r0,[sp,#0]
000030  88a1              LDRH     r1,[r4,#4]
000032  4408              ADD      r0,r0,r1
000034  1e40              SUBS     r0,r0,#1
000036  b200              SXTH     r0,r0
000038  f8ad0004          STRH     r0,[sp,#4]
;;;107          r.y1 = (r.y0 = y) + pDevData->YSize-1;;
00003c  b238              SXTH     r0,r7
00003e  f8ad0002          STRH     r0,[sp,#2]
000042  88e1              LDRH     r1,[r4,#6]
000044  4408              ADD      r0,r0,r1
000046  1e40              SUBS     r0,r0,#1
000048  b200              SXTH     r0,r0
00004a  f8ad0006          STRH     r0,[sp,#6]
;;;108          WM_ITERATE_START(&r) {
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       WM__InitIVRSearch
000054  b150              CBZ      r0,|L2.108|
000056  bf00              NOP      
                  |L2.88|
;;;109          _WriteAlphaToActiveAt(hMem, Alpha, x,y);
000058  463b              MOV      r3,r7
00005a  462a              MOV      r2,r5
00005c  4641              MOV      r1,r8
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       _WriteAlphaToActiveAt
;;;110          } WM_ITERATE_END();
000064  f7fffffe          BL       WM__GetNextIVR
000068  2800              CMP      r0,#0
00006a  d1f5              BNE      |L2.88|
                  |L2.108|
;;;111        #else
;;;112          _WriteAlphaToActiveAt(hMem, Alpha, x,y);
;;;113        #endif
;;;114        GUI_UNLOCK();
00006c  f7fffffe          BL       GUI_Unlock
;;;115      }
000070  bf00              NOP      
                  |L2.114|
;;;116    }
000072  e8bd81fc          POP      {r2-r8,pc}
;;;117    
                          ENDP


                          AREA ||i._WriteAlphaToActiveAt||, CODE, READONLY, ALIGN=1

                  _WriteAlphaToActiveAt PROC
;;;39     */
;;;40     static void _WriteAlphaToActiveAt(GUI_MEMDEV_Handle hMem, int Intens, int x, int y) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  4681              MOV      r9,r0
000008  469a              MOV      r10,r3
;;;41       /* Make sure the memory handle is valid */
;;;42       if (hMem) {
00000a  f1b90f00          CMP      r9,#0
00000e  d061              BEQ      |L3.212|
;;;43         GUI_MEMDEV * pDev = GUI_MEMDEV_H2P(hMem);
000010  4648              MOV      r0,r9
000012  f7fffffe          BL       GUI_ALLOC_h2p
000016  4605              MOV      r5,r0
;;;44         GUI_USAGE_h hUsage = pDev->hUsage; 
000018  f9b50018          LDRSH    r0,[r5,#0x18]
00001c  9006              STR      r0,[sp,#0x18]
;;;45         GUI_USAGE*  pUsage;
;;;46         int YSize = pDev->YSize;
00001e  f9b50006          LDRSH    r0,[r5,#6]
000022  9005              STR      r0,[sp,#0x14]
;;;47         int yi;
;;;48         if (hUsage) {
000024  9806              LDR      r0,[sp,#0x18]
000026  2800              CMP      r0,#0
000028  d053              BEQ      |L3.210|
;;;49           pUsage = GUI_USAGE_H2P(hUsage);
00002a  9806              LDR      r0,[sp,#0x18]
00002c  f7fffffe          BL       GUI_ALLOC_h2p
000030  4606              MOV      r6,r0
;;;50           for (yi = 0; yi < YSize; yi++) {
000032  2400              MOVS     r4,#0
000034  e04a              B        |L3.204|
                  |L3.54|
;;;51             int xOff = 0;
000036  2000              MOVS     r0,#0
000038  9004              STR      r0,[sp,#0x10]
;;;52             int XSize;
;;;53             XSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
00003a  68b0              LDR      r0,[r6,#8]
00003c  4622              MOV      r2,r4
00003e  a904              ADD      r1,sp,#0x10
000040  6943              LDR      r3,[r0,#0x14]
000042  4630              MOV      r0,r6
000044  4798              BLX      r3
000046  9003              STR      r0,[sp,#0xc]
;;;54             /* Draw the partial line which needs to be drawn */
;;;55             for (; XSize; ) {
000048  e03c              B        |L3.196|
                  |L3.74|
;;;56               U8* pData;
;;;57               pData = (U8*)GUI_MEMDEV__XY2PTREx(pDev, xOff, yi);
00004a  4622              MOV      r2,r4
00004c  4628              MOV      r0,r5
00004e  9904              LDR      r1,[sp,#0x10]
000050  f7fffffe          BL       GUI_MEMDEV__XY2PTREx
000054  4607              MOV      r7,r0
;;;58               do {
000056  bf00              NOP      
                  |L3.88|
;;;59                 LCD_COLOR Color, BkColor;
;;;60                 int xPos, yPos, Index;
;;;61                 if (pDev->BitsPerPixel == 8) {
000058  6928              LDR      r0,[r5,#0x10]
00005a  2808              CMP      r0,#8
00005c  d102              BNE      |L3.100|
;;;62                   Index = *pData++;
00005e  f8178b01          LDRB     r8,[r7],#1
000062  e002              B        |L3.106|
                  |L3.100|
;;;63                 } else {
;;;64                   Index = *(U16*)pData;
000064  f8b78000          LDRH     r8,[r7,#0]
;;;65                   pData += 2;
000068  1cbf              ADDS     r7,r7,#2
                  |L3.106|
;;;66                 }
;;;67                 Color   = LCD_Index2Color(Index);
00006a  4640              MOV      r0,r8
00006c  f7fffffe          BL       LCD_Index2Color
000070  9002              STR      r0,[sp,#8]
;;;68                 xPos    = xOff + x;
000072  9904              LDR      r1,[sp,#0x10]
000074  9809              LDR      r0,[sp,#0x24]
000076  4408              ADD      r0,r0,r1
000078  9000              STR      r0,[sp,#0]
;;;69                 yPos    = yi +y;
00007a  eb040b0a          ADD      r11,r4,r10
;;;70                 BkColor = LCD_GetPixelColor(xPos, yPos);
00007e  4659              MOV      r1,r11
000080  9800              LDR      r0,[sp,#0]
000082  f7fffffe          BL       LCD_GetPixelColor
000086  9001              STR      r0,[sp,#4]
;;;71                 Color   = LCD_MixColors256(Color, BkColor, Intens);
000088  9a08              LDR      r2,[sp,#0x20]
00008a  e9dd1001          LDRD     r1,r0,[sp,#4]
00008e  f7fffffe          BL       LCD_MixColors256
000092  9002              STR      r0,[sp,#8]
;;;72                 Index   = LCD_Color2Index(Color);
000094  9802              LDR      r0,[sp,#8]
000096  f7fffffe          BL       LCD_Color2Index
00009a  4680              MOV      r8,r0
;;;73                 LCD_SetPixelIndex(xPos, yPos, Index);
00009c  4642              MOV      r2,r8
00009e  4659              MOV      r1,r11
0000a0  9800              LDR      r0,[sp,#0]
0000a2  f7fffffe          BL       LCD_SetPixelIndex
;;;74                 xOff++;
0000a6  9804              LDR      r0,[sp,#0x10]
0000a8  1c40              ADDS     r0,r0,#1
0000aa  9004              STR      r0,[sp,#0x10]
;;;75               } while (--XSize);
0000ac  9803              LDR      r0,[sp,#0xc]
0000ae  1e40              SUBS     r0,r0,#1
0000b0  9003              STR      r0,[sp,#0xc]
0000b2  d1d1              BNE      |L3.88|
;;;76               XSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
0000b4  68b0              LDR      r0,[r6,#8]
0000b6  4622              MOV      r2,r4
0000b8  a904              ADD      r1,sp,#0x10
0000ba  6943              LDR      r3,[r0,#0x14]
0000bc  4630              MOV      r0,r6
0000be  4798              BLX      r3
0000c0  9003              STR      r0,[sp,#0xc]
;;;77             }
0000c2  bf00              NOP      
                  |L3.196|
0000c4  9803              LDR      r0,[sp,#0xc]          ;55
0000c6  2800              CMP      r0,#0                 ;55
0000c8  d1bf              BNE      |L3.74|
0000ca  1c64              ADDS     r4,r4,#1              ;50
                  |L3.204|
0000cc  9805              LDR      r0,[sp,#0x14]         ;50
0000ce  4284              CMP      r4,r0                 ;50
0000d0  dbb1              BLT      |L3.54|
                  |L3.210|
;;;78           }
;;;79         }
;;;80       }
0000d2  bf00              NOP      
                  |L3.212|
;;;81     }
0000d4  b00b              ADD      sp,sp,#0x2c
0000d6  e8bd8ff0          POP      {r4-r11,pc}
;;;82     
                          ENDP

