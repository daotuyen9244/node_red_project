; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\wm_enablewindow.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\wm_enablewindow.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\WM\WM_EnableWindow.c]
                          THUMB

                          AREA ||i.WM_DisableWindow||, CODE, READONLY, ALIGN=1

                  WM_DisableWindow PROC
;;;69     */
;;;70     void WM_DisableWindow(WM_HWIN hWin) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;71       WM_SetEnableState(hWin, 0);
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       WM_SetEnableState
;;;72     }
00000c  bd10              POP      {r4,pc}
;;;73     #else
                          ENDP


                          AREA ||i.WM_EnableWindow||, CODE, READONLY, ALIGN=1

                  WM_EnableWindow PROC
;;;61     */
;;;62     void WM_EnableWindow(WM_HWIN hWin) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;63       WM_SetEnableState(hWin, 1);
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       WM_SetEnableState
;;;64     }
00000c  bd10              POP      {r4,pc}
;;;65     
                          ENDP


                          AREA ||i.WM_SetEnableState||, CODE, READONLY, ALIGN=1

                  WM_SetEnableState PROC
;;;34     */
;;;35     void WM_SetEnableState(WM_HWIN hWin, int State) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4607              MOV      r7,r0
000004  460d              MOV      r5,r1
;;;36       if (hWin) {
000006  b1df              CBZ      r7,|L3.64|
;;;37         WM_Obj* pWin;
;;;38         U16 Status;
;;;39         WM_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;40         pWin = WM_H2P(hWin);
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4606              MOV      r6,r0
;;;41         Status = pWin->Status;
000014  8bb4              LDRH     r4,[r6,#0x1c]
;;;42         if (State) {
000016  b115              CBZ      r5,|L3.30|
;;;43           Status &= ~WM_SF_DISABLED;
000018  f0240410          BIC      r4,r4,#0x10
00001c  e001              B        |L3.34|
                  |L3.30|
;;;44         } else {
;;;45           Status |=  WM_SF_DISABLED;
00001e  f0440410          ORR      r4,r4,#0x10
                  |L3.34|
;;;46         }
;;;47         if (pWin->Status != Status) {
000022  8bb0              LDRH     r0,[r6,#0x1c]
000024  42a0              CMP      r0,r4
000026  d008              BEQ      |L3.58|
;;;48           WM_MESSAGE Msg;
;;;49           pWin->Status = Status;
000028  83b4              STRH     r4,[r6,#0x1c]
;;;50           Msg.MsgId  = WM_NOTIFY_ENABLE;
00002a  2028              MOVS     r0,#0x28
00002c  9000              STR      r0,[sp,#0]
;;;51           Msg.Data.v = State;
00002e  9502              STR      r5,[sp,#8]
;;;52           WM__SendMessage(hWin, &Msg);
000030  4669              MOV      r1,sp
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       WM__SendMessage
;;;53         }
000038  bf00              NOP      
                  |L3.58|
;;;54         WM_UNLOCK();
00003a  f7fffffe          BL       GUI_Unlock
;;;55       }
00003e  bf00              NOP      
                  |L3.64|
;;;56     }
000040  bdfe              POP      {r1-r7,pc}
;;;57     
                          ENDP

