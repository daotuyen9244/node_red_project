; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gui_x_ucos.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\gui_x_ucos.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\LCDPorts\GUI_X_uCOS.c]
                          THUMB

                          AREA ||i.CheckInit||, CODE, READONLY, ALIGN=2

                  CheckInit PROC
;;;151    
;;;152    static void CheckInit(void)
000000  b510              PUSH     {r4,lr}
;;;153    {
;;;154      if(KeyIsInited==0)
000002  4804              LDR      r0,|L1.20|
000004  7800              LDRB     r0,[r0,#0]  ; KeyIsInited
000006  b920              CBNZ     r0,|L1.18|
;;;155        {
;;;156          KeyIsInited = 1;
000008  2001              MOVS     r0,#1
00000a  4902              LDR      r1,|L1.20|
00000c  7008              STRB     r0,[r1,#0]
;;;157          GUI_X_Init();
00000e  f7fffffe          BL       GUI_X_Init
                  |L1.18|
;;;158        }
;;;159    }
000012  bd10              POP      {r4,pc}
;;;160    
                          ENDP

                  |L1.20|
                          DCD      KeyIsInited

                          AREA ||i.GUI_X_Delay||, CODE, READONLY, ALIGN=1

                  GUI_X_Delay PROC
;;;62     
;;;63     void GUI_X_Delay(int period)
000000  b570              PUSH     {r4-r6,lr}
;;;64     {
000002  4604              MOV      r4,r0
;;;65       INT32U  ticks;
;;;66       ticks=(period*1000)/OS_TICKS_PER_SEC;
000004  f44f707a          MOV      r0,#0x3e8
000008  4360              MULS     r0,r4,r0
00000a  f44f717a          MOV      r1,#0x3e8
00000e  fb90f5f1          SDIV     r5,r0,r1
;;;67       OSTimeDly((INT16U)ticks);
000012  b2a8              UXTH     r0,r5
000014  f7fffffe          BL       OSTimeDly
;;;68     }
000018  bd70              POP      {r4-r6,pc}
;;;69     
                          ENDP


                          AREA ||i.GUI_X_ErrorOut||, CODE, READONLY, ALIGN=1

                  GUI_X_ErrorOut PROC
;;;209    
;;;210    void GUI_X_ErrorOut(const char *s)
000000  bf00              NOP      
;;;211    { 
;;;212    GUI_USE_PARA(s); 
;;;213    }
000002  4770              BX       lr
                          ENDP


                          AREA ||i.GUI_X_ExecIdle||, CODE, READONLY, ALIGN=1

                  GUI_X_ExecIdle PROC
;;;76     /*WM空闲时调用*/
;;;77     void GUI_X_ExecIdle(void) 
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79       //OS_X_Delay(1);
;;;80       OSTimeDly(50);
000002  2032              MOVS     r0,#0x32
000004  f7fffffe          BL       OSTimeDly
;;;81     }
000008  bd10              POP      {r4,pc}
;;;82     
                          ENDP


                          AREA ||i.GUI_X_GetKey||, CODE, READONLY, ALIGN=2

                  GUI_X_GetKey PROC
;;;168    
;;;169    int GUI_X_GetKey(void)
000000  b510              PUSH     {r4,lr}
;;;170    {
;;;171        int r;
;;;172        r = KeyPressed;
000002  4804              LDR      r0,|L5.20|
000004  6804              LDR      r4,[r0,#0]  ; KeyPressed
;;;173        CheckInit();
000006  f7fffffe          BL       CheckInit
;;;174        KeyPressed = 0;
00000a  2000              MOVS     r0,#0
00000c  4901              LDR      r1,|L5.20|
00000e  6008              STR      r0,[r1,#0]  ; KeyPressed
;;;175        return (r);
000010  4620              MOV      r0,r4
;;;176    }
000012  bd10              POP      {r4,pc}
;;;177    
                          ENDP

                  |L5.20|
                          DCD      KeyPressed

                          AREA ||i.GUI_X_GetTaskId||, CODE, READONLY, ALIGN=2

                  GUI_X_GetTaskId PROC
;;;113    
;;;114    U32 GUI_X_GetTaskId(void)
000000  4802              LDR      r0,|L6.12|
;;;115    { 
;;;116      return ((U32)(OSTCBCur->OSTCBPrio));
000002  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000004  f8900036          LDRB     r0,[r0,#0x36]
;;;117    }
000008  4770              BX       lr
;;;118    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      OSTCBCur

                          AREA ||i.GUI_X_GetTime||, CODE, READONLY, ALIGN=1

                  GUI_X_GetTime PROC
;;;57     
;;;58     int GUI_X_GetTime(void)
000000  b510              PUSH     {r4,lr}
;;;59     {
;;;60        return ((int)OSTimeGet());
000002  f7fffffe          BL       OSTimeGet
;;;61     }
000006  bd10              POP      {r4,pc}
;;;62     
                          ENDP


                          AREA ||i.GUI_X_Init||, CODE, READONLY, ALIGN=2

                  GUI_X_Init PROC
;;;162    /*被GUI_Init()调用,用来初始化一些GUI运行之前需要用的硬件,如键盘或者鼠标之类的.如果不需要的话,可以为空*/
;;;163    void GUI_X_Init(void)
000000  b510              PUSH     {r4,lr}
;;;164    {
;;;165      KeySem = OSSemCreate(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       OSSemCreate
000008  4901              LDR      r1,|L8.16|
00000a  6008              STR      r0,[r1,#0]  ; KeySem
;;;166    }
00000c  bd10              POP      {r4,pc}
;;;167    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      KeySem

                          AREA ||i.GUI_X_InitOS||, CODE, READONLY, ALIGN=2

                  GUI_X_InitOS PROC
;;;93     
;;;94     void GUI_X_InitOS (void)
000000  b510              PUSH     {r4,lr}
;;;95     { 
;;;96        DispSem = OSSemCreate(1);           //建立一个互斥型信号量
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       OSSemCreate
000008  4903              LDR      r1,|L9.24|
00000a  6008              STR      r0,[r1,#0]  ; DispSem
;;;97       EventMbox = OSMboxCreate((void *)0);	//建立一个邮箱
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       OSMboxCreate
000012  4902              LDR      r1,|L9.28|
000014  6008              STR      r0,[r1,#0]  ; EventMbox
;;;98     }
000016  bd10              POP      {r4,pc}
;;;99     
                          ENDP

                  |L9.24|
                          DCD      DispSem
                  |L9.28|
                          DCD      EventMbox

                          AREA ||i.GUI_X_Lock||, CODE, READONLY, ALIGN=2

                  GUI_X_Lock PROC
;;;100    
;;;101    void GUI_X_Lock(void)
000000  b508              PUSH     {r3,lr}
;;;102    { 
;;;103      INT8U err;
;;;104      OSSemPend(DispSem,0,&err);
000002  466a              MOV      r2,sp
000004  2100              MOVS     r1,#0
000006  4802              LDR      r0,|L10.16|
000008  6800              LDR      r0,[r0,#0]  ; DispSem
00000a  f7fffffe          BL       OSSemPend
;;;105    }
00000e  bd08              POP      {r3,pc}
;;;106    
                          ENDP

                  |L10.16|
                          DCD      DispSem

                          AREA ||i.GUI_X_Log||, CODE, READONLY, ALIGN=1

                  GUI_X_Log PROC
;;;199    
;;;200    void GUI_X_Log(const char *s) 
000000  bf00              NOP      
;;;201    { 
;;;202     GUI_USE_PARA(s); 
;;;203    }
000002  4770              BX       lr
;;;204    
                          ENDP


                          AREA ||i.GUI_X_SignalEvent||, CODE, READONLY, ALIGN=2

                  GUI_X_SignalEvent PROC
;;;133    
;;;134    void GUI_X_SignalEvent(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136      (void)OSMboxPost(EventMbox,(void *)1);
000002  2101              MOVS     r1,#1
000004  4802              LDR      r0,|L12.16|
000006  6800              LDR      r0,[r0,#0]  ; EventMbox
000008  f7fffffe          BL       OSMboxPost
;;;137    }
00000c  bd10              POP      {r4,pc}
;;;138    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      EventMbox

                          AREA ||i.GUI_X_StoreKey||, CODE, READONLY, ALIGN=2

                  GUI_X_StoreKey PROC
;;;193    
;;;194    void GUI_X_StoreKey(int k)
000000  b510              PUSH     {r4,lr}
;;;195    {
000002  4604              MOV      r4,r0
;;;196        KeyPressed = k;
000004  4803              LDR      r0,|L13.20|
000006  6004              STR      r4,[r0,#0]  ; KeyPressed
;;;197        OSSemPost(KeySem); //释放信号量
000008  4803              LDR      r0,|L13.24|
00000a  6800              LDR      r0,[r0,#0]  ; KeySem
00000c  f7fffffe          BL       OSSemPost
;;;198    }
000010  bd10              POP      {r4,pc}
;;;199    
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      KeyPressed
                  |L13.24|
                          DCD      KeySem

                          AREA ||i.GUI_X_Unlock||, CODE, READONLY, ALIGN=2

                  GUI_X_Unlock PROC
;;;107    
;;;108    void GUI_X_Unlock(void)
000000  b510              PUSH     {r4,lr}
;;;109    { 
;;;110      OSSemPost(DispSem);
000002  4802              LDR      r0,|L14.12|
000004  6800              LDR      r0,[r0,#0]  ; DispSem
000006  f7fffffe          BL       OSSemPost
;;;111    }
00000a  bd10              POP      {r4,pc}
;;;112    
                          ENDP

                  |L14.12|
                          DCD      DispSem

                          AREA ||i.GUI_X_WaitEvent||, CODE, READONLY, ALIGN=2

                  GUI_X_WaitEvent PROC
;;;126    
;;;127    void GUI_X_WaitEvent(void)
000000  b508              PUSH     {r3,lr}
;;;128    {
;;;129       INT8U err;
;;;130       (void)OSMboxPend(EventMbox,0,&err);
000002  466a              MOV      r2,sp
000004  2100              MOVS     r1,#0
000006  4802              LDR      r0,|L15.16|
000008  6800              LDR      r0,[r0,#0]  ; EventMbox
00000a  f7fffffe          BL       OSMboxPend
;;;131    }
00000e  bd08              POP      {r3,pc}
;;;132    
                          ENDP

                  |L15.16|
                          DCD      EventMbox

                          AREA ||i.GUI_X_WaitKey||, CODE, READONLY, ALIGN=2

                  GUI_X_WaitKey PROC
;;;178    
;;;179    int GUI_X_WaitKey(void)
000000  b538              PUSH     {r3-r5,lr}
;;;180    {
;;;181        int  r;
;;;182        INT8U  err;
;;;183        CheckInit();
000002  f7fffffe          BL       CheckInit
;;;184        if(KeyPressed==0)
000006  4808              LDR      r0,|L16.40|
000008  6800              LDR      r0,[r0,#0]  ; KeyPressed
00000a  b928              CBNZ     r0,|L16.24|
;;;185          {
;;;186            OSSemPend(KeySem,0,&err); //等待信号量
00000c  466a              MOV      r2,sp
00000e  2100              MOVS     r1,#0
000010  4806              LDR      r0,|L16.44|
000012  6800              LDR      r0,[r0,#0]  ; KeySem
000014  f7fffffe          BL       OSSemPend
                  |L16.24|
;;;187          }
;;;188        r= KeyPressed;
000018  4803              LDR      r0,|L16.40|
00001a  6804              LDR      r4,[r0,#0]  ; KeyPressed
;;;189        KeyPressed = 0;
00001c  2000              MOVS     r0,#0
00001e  4902              LDR      r1,|L16.40|
000020  6008              STR      r0,[r1,#0]  ; KeyPressed
;;;190        return (r);
000022  4620              MOV      r0,r4
;;;191    }
000024  bd38              POP      {r3-r5,pc}
;;;192    
                          ENDP

000026  0000              DCW      0x0000
                  |L16.40|
                          DCD      KeyPressed
                  |L16.44|
                          DCD      KeySem

                          AREA ||i.GUI_X_Warn||, CODE, READONLY, ALIGN=1

                  GUI_X_Warn PROC
;;;204    
;;;205    void GUI_X_Warn(const char *s) 
000000  bf00              NOP      
;;;206    {
;;;207     GUI_USE_PARA(s); 
;;;208    }
000002  4770              BX       lr
;;;209    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  DispSem
                          DCD      0x00000000
                  EventMbox
                          DCD      0x00000000
                  KeySem
                          DCD      0x00000000
                  KeyPressed
                          DCD      0x00000000
                  KeyIsInited
000010  00                DCB      0x00
