; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gui_bmp.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\gui_bmp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\GUI_BMP.c]
                          THUMB

                          AREA ||i.GUI_BMP_Draw||, CODE, READONLY, ALIGN=2

                  GUI_BMP_Draw PROC
;;;144    */
;;;145    int GUI_BMP_Draw(const void * pBMP, int x0, int y0) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b089              SUB      sp,sp,#0x24
000006  4682              MOV      r10,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
;;;146      #if (GUI_WINSUPPORT)
;;;147        GUI_RECT r;
;;;148      #endif
;;;149      int Ret = 0;
00000c  2000              MOVS     r0,#0
00000e  9006              STR      r0,[sp,#0x18]
;;;150      I32 Width, Height;
;;;151      U16 BitCount, Type;
;;;152      U32 ClrUsed, Compression;
;;;153      int NumColors;
;;;154      const U8 * pSrc = (const U8 *)pBMP;
000010  f8cda00c          STR      r10,[sp,#0xc]
;;;155      Type        = GUI__Read16(&pSrc); /* get type from BITMAPFILEHEADER */
000014  a803              ADD      r0,sp,#0xc
000016  f7fffffe          BL       GUI__Read16
00001a  9005              STR      r0,[sp,#0x14]
;;;156      pSrc += 12;                   /* skip rest of BITMAPFILEHEADER */
00001c  9803              LDR      r0,[sp,#0xc]
00001e  300c              ADDS     r0,r0,#0xc
000020  9003              STR      r0,[sp,#0xc]
;;;157      /* get values from BITMAPINFOHEADER */
;;;158      pSrc += 4;
000022  9803              LDR      r0,[sp,#0xc]
000024  1d00              ADDS     r0,r0,#4
000026  9003              STR      r0,[sp,#0xc]
;;;159      Width       = GUI__Read32(&pSrc);
000028  a803              ADD      r0,sp,#0xc
00002a  f7fffffe          BL       GUI__Read32
00002e  4680              MOV      r8,r0
;;;160      Height      = GUI__Read32(&pSrc);
000030  a803              ADD      r0,sp,#0xc
000032  f7fffffe          BL       GUI__Read32
000036  4605              MOV      r5,r0
;;;161      pSrc += 2;
000038  9803              LDR      r0,[sp,#0xc]
00003a  1c80              ADDS     r0,r0,#2
00003c  9003              STR      r0,[sp,#0xc]
;;;162      BitCount    = GUI__Read16(&pSrc);
00003e  a803              ADD      r0,sp,#0xc
000040  f7fffffe          BL       GUI__Read16
000044  4681              MOV      r9,r0
;;;163      Compression = GUI__Read32(&pSrc);
000046  a803              ADD      r0,sp,#0xc
000048  f7fffffe          BL       GUI__Read32
00004c  9004              STR      r0,[sp,#0x10]
;;;164      pSrc += 12;
00004e  9803              LDR      r0,[sp,#0xc]
000050  300c              ADDS     r0,r0,#0xc
000052  9003              STR      r0,[sp,#0xc]
;;;165      ClrUsed     = GUI__Read32(&pSrc);
000054  a803              ADD      r0,sp,#0xc
000056  f7fffffe          BL       GUI__Read32
00005a  4683              MOV      r11,r0
;;;166      pSrc += 4;
00005c  9803              LDR      r0,[sp,#0xc]
00005e  1d00              ADDS     r0,r0,#4
000060  9003              STR      r0,[sp,#0xc]
;;;167      /* calculate number of colors */
;;;168      switch (BitCount) {
000062  f1b90f04          CMP      r9,#4
000066  d014              BEQ      |L1.146|
000068  dc06              BGT      |L1.120|
00006a  f1b90f00          CMP      r9,#0
00006e  d00a              BEQ      |L1.134|
000070  f1b90f01          CMP      r9,#1
000074  d114              BNE      |L1.160|
000076  e00a              B        |L1.142|
                  |L1.120|
000078  f1b90f08          CMP      r9,#8
00007c  d00b              BEQ      |L1.150|
00007e  f1b90f18          CMP      r9,#0x18
000082  d10d              BNE      |L1.160|
000084  e00a              B        |L1.156|
                  |L1.134|
;;;169        case 0:   return 1; /* biBitCount = 0 (JPEG format) not supported. Please convert image ! */
000086  2001              MOVS     r0,#1
                  |L1.136|
;;;170        case 1:   NumColors = 2;   break;
;;;171        case 4:   NumColors = 16;  break;
;;;172        case 8:   NumColors = 256; break;
;;;173        case 24:  NumColors = 0;   break;
;;;174        default:
;;;175          return 1; /* biBitCount should be 1, 4, 8 or 24 */
;;;176      }
;;;177      if (NumColors && ClrUsed) {
;;;178        NumColors = ClrUsed;
;;;179      }
;;;180      /* check validity of bmp */
;;;181      if ((NumColors > LCD_MAX_LOG_COLORS) ||
;;;182          (Type != 0x4d42)                 || /* 'BM' */
;;;183          (Compression)                    || /* only uncompressed bitmaps */
;;;184          (Width  > 1024)                  ||
;;;185          (Height > 1024)) {
;;;186        return 1;
;;;187      }
;;;188      /* start output */
;;;189      GUI_LOCK();
;;;190      #if (GUI_WINSUPPORT)
;;;191        WM_ADDORG(x0,y0);
;;;192        r.x1 = (r.x0 = x0) + Width - 1;
;;;193        r.y1 = (r.y0 = y0) + Height - 1;
;;;194        WM_ITERATE_START(&r) {
;;;195      #endif
;;;196      /* Show bitmap */
;;;197      switch (BitCount) {
;;;198        case 1:
;;;199        case 4:
;;;200        case 8:
;;;201          Ret = _DrawBitmap_Pal(pSrc, x0, y0, Width, Height, BitCount, NumColors);
;;;202          break;
;;;203        case 24:
;;;204          Ret = _DrawBitmap_24bpp(pSrc, x0, y0, Width, Height);
;;;205          break;
;;;206      }
;;;207      #if (GUI_WINSUPPORT)
;;;208        } WM_ITERATE_END();
;;;209      #endif
;;;210      GUI_UNLOCK();
;;;211      return Ret;
;;;212    }
000088  b009              ADD      sp,sp,#0x24
00008a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.142|
00008e  2402              MOVS     r4,#2                 ;170
000090  e008              B        |L1.164|
                  |L1.146|
000092  2410              MOVS     r4,#0x10              ;171
000094  e006              B        |L1.164|
                  |L1.150|
000096  f44f7480          MOV      r4,#0x100             ;172
00009a  e003              B        |L1.164|
                  |L1.156|
00009c  2400              MOVS     r4,#0                 ;173
00009e  e001              B        |L1.164|
                  |L1.160|
0000a0  2001              MOVS     r0,#1                 ;175
0000a2  e7f1              B        |L1.136|
                  |L1.164|
0000a4  bf00              NOP                            ;170
0000a6  b11c              CBZ      r4,|L1.176|
0000a8  f1bb0f00          CMP      r11,#0                ;177
0000ac  d000              BEQ      |L1.176|
0000ae  465c              MOV      r4,r11                ;178
                  |L1.176|
0000b0  f5b47f80          CMP      r4,#0x100             ;181
0000b4  dc0c              BGT      |L1.208|
0000b6  9805              LDR      r0,[sp,#0x14]         ;182
0000b8  f5a0419a          SUB      r1,r0,#0x4d00         ;182
0000bc  3942              SUBS     r1,r1,#0x42           ;182
0000be  d107              BNE      |L1.208|
0000c0  9804              LDR      r0,[sp,#0x10]         ;183
0000c2  b928              CBNZ     r0,|L1.208|
0000c4  f5b86f80          CMP      r8,#0x400             ;184
0000c8  dc02              BGT      |L1.208|
0000ca  f5b56f80          CMP      r5,#0x400             ;185
0000ce  dd01              BLE      |L1.212|
                  |L1.208|
0000d0  2001              MOVS     r0,#1                 ;186
0000d2  e7d9              B        |L1.136|
                  |L1.212|
0000d4  f7fffffe          BL       GUI_Lock
0000d8  4823              LDR      r0,|L1.360|
0000da  6c40              LDR      r0,[r0,#0x44]         ;191  ; GUI_Context
0000dc  4406              ADD      r6,r6,r0              ;191
0000de  4822              LDR      r0,|L1.360|
0000e0  6c80              LDR      r0,[r0,#0x48]         ;191  ; GUI_Context
0000e2  4407              ADD      r7,r7,r0              ;191
0000e4  b230              SXTH     r0,r6                 ;192
0000e6  f8ad001c          STRH     r0,[sp,#0x1c]         ;192
0000ea  4440              ADD      r0,r0,r8              ;192
0000ec  1e40              SUBS     r0,r0,#1              ;192
0000ee  b200              SXTH     r0,r0                 ;192
0000f0  f8ad0020          STRH     r0,[sp,#0x20]         ;192
0000f4  b238              SXTH     r0,r7                 ;193
0000f6  f8ad001e          STRH     r0,[sp,#0x1e]         ;193
0000fa  4428              ADD      r0,r0,r5              ;193
0000fc  1e40              SUBS     r0,r0,#1              ;193
0000fe  b200              SXTH     r0,r0                 ;193
000100  f8ad0022          STRH     r0,[sp,#0x22]         ;193
000104  a807              ADD      r0,sp,#0x1c           ;194
000106  f7fffffe          BL       WM__InitIVRSearch
00010a  b340              CBZ      r0,|L1.350|
00010c  bf00              NOP                            ;194
                  |L1.270|
00010e  f1b90f01          CMP      r9,#1                 ;197
000112  d009              BEQ      |L1.296|
000114  f1b90f04          CMP      r9,#4                 ;197
000118  d007              BEQ      |L1.298|
00011a  f1b90f08          CMP      r9,#8                 ;197
00011e  d005              BEQ      |L1.300|
000120  f1b90f18          CMP      r9,#0x18              ;197
000124  d116              BNE      |L1.340|
000126  e00c              B        |L1.322|
                  |L1.296|
000128  bf00              NOP                            ;199
                  |L1.298|
00012a  bf00              NOP                            ;200
                  |L1.300|
00012c  4643              MOV      r3,r8                 ;201
00012e  463a              MOV      r2,r7                 ;201
000130  4631              MOV      r1,r6                 ;201
000132  e9cd5900          STRD     r5,r9,[sp,#0]         ;201
000136  9402              STR      r4,[sp,#8]            ;201
000138  9803              LDR      r0,[sp,#0xc]          ;201
00013a  f7fffffe          BL       _DrawBitmap_Pal
00013e  9006              STR      r0,[sp,#0x18]         ;201
000140  e008              B        |L1.340|
                  |L1.322|
000142  4643              MOV      r3,r8                 ;204
000144  463a              MOV      r2,r7                 ;204
000146  4631              MOV      r1,r6                 ;204
000148  9500              STR      r5,[sp,#0]            ;204
00014a  9803              LDR      r0,[sp,#0xc]          ;204
00014c  f7fffffe          BL       _DrawBitmap_24bpp
000150  9006              STR      r0,[sp,#0x18]         ;204
000152  bf00              NOP                            ;205
                  |L1.340|
000154  bf00              NOP                            ;202
000156  f7fffffe          BL       WM__GetNextIVR
00015a  2800              CMP      r0,#0                 ;208
00015c  d1d7              BNE      |L1.270|
                  |L1.350|
00015e  f7fffffe          BL       GUI_Unlock
000162  9806              LDR      r0,[sp,#0x18]         ;211
000164  e790              B        |L1.136|
;;;213    
                          ENDP

000166  0000              DCW      0x0000
                  |L1.360|
                          DCD      GUI_Context

                          AREA ||i.GUI_BMP_GetXSize||, CODE, READONLY, ALIGN=1

                  GUI_BMP_GetXSize PROC
;;;118    */
;;;119    int GUI_BMP_GetXSize(const void * pBMP) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;120      const U8 * pSrc = (const U8 *)pBMP;
000004  9400              STR      r4,[sp,#0]
;;;121      if (!pBMP) {
000006  b90c              CBNZ     r4,|L2.12|
;;;122        return 0;
000008  2000              MOVS     r0,#0
                  |L2.10|
;;;123      }
;;;124      pSrc += 18;                   /* skip rest of BITMAPFILEHEADER */
;;;125      return GUI__Read32(&pSrc);
;;;126    }
00000a  bd38              POP      {r3-r5,pc}
                  |L2.12|
00000c  9800              LDR      r0,[sp,#0]            ;124
00000e  3012              ADDS     r0,r0,#0x12           ;124
000010  9000              STR      r0,[sp,#0]            ;124
000012  4668              MOV      r0,sp                 ;125
000014  f7fffffe          BL       GUI__Read32
000018  e7f7              B        |L2.10|
;;;127    
                          ENDP


                          AREA ||i.GUI_BMP_GetYSize||, CODE, READONLY, ALIGN=1

                  GUI_BMP_GetYSize PROC
;;;131    */
;;;132    int GUI_BMP_GetYSize(const void * pBMP) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;133      const U8 * pSrc = (const U8 *)pBMP;
000004  9400              STR      r4,[sp,#0]
;;;134      if (!pBMP) {
000006  b90c              CBNZ     r4,|L3.12|
;;;135        return 0;
000008  2000              MOVS     r0,#0
                  |L3.10|
;;;136      }
;;;137      pSrc += 22;
;;;138      return labs((int)GUI__Read32(&pSrc));
;;;139    }
00000a  bd38              POP      {r3-r5,pc}
                  |L3.12|
00000c  9800              LDR      r0,[sp,#0]            ;137
00000e  3016              ADDS     r0,r0,#0x16           ;137
000010  9000              STR      r0,[sp,#0]            ;137
000012  4668              MOV      r0,sp                 ;138
000014  f7fffffe          BL       GUI__Read32
000018  1e05              SUBS     r5,r0,#0              ;138
00001a  db01              BLT      |L3.32|
00001c  4628              MOV      r0,r5                 ;138
00001e  e7f4              B        |L3.10|
                  |L3.32|
000020  4268              RSBS     r0,r5,#0              ;138
000022  e7f2              B        |L3.10|
;;;140    
                          ENDP


                          AREA ||i._DrawBitmap_24bpp||, CODE, READONLY, ALIGN=1

                  _DrawBitmap_24bpp PROC
;;;87     */
;;;88     static int _DrawBitmap_24bpp(const U8 * pData, int x0, int y0, int XSize, int YSize) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4605              MOV      r5,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
00000c  461e              MOV      r6,r3
;;;89       int x, y, BytesPerLine, Step;
;;;90       Step = _GetStep(&YSize, &y);
00000e  a904              ADD      r1,sp,#0x10
000010  a80e              ADD      r0,sp,#0x38
000012  f7fffffe          BL       _GetStep
000016  4683              MOV      r11,r0
;;;91       if (!Step) {
000018  f1bb0f00          CMP      r11,#0
00001c  d103              BNE      |L4.38|
;;;92         return 1;
00001e  2001              MOVS     r0,#1
                  |L4.32|
;;;93       }
;;;94       BytesPerLine = ((24 * XSize + 31) >> 5) << 2;
;;;95       for (; (y < YSize) && (y >= 0); y += Step) {
;;;96         for (x = 0; x < XSize; x++) {
;;;97           const U8 * pColor = pData + 3 * x;
;;;98           U8 r, g, b;
;;;99           b = *(pColor);
;;;100          g = *(pColor + 1);
;;;101          r = *(pColor + 2);
;;;102          LCD_SetPixelIndex(x0 + x, y0 + y, LCD_Color2Index(((U32)b << 16) | (g << 8) | r));
;;;103        }
;;;104        pData += BytesPerLine;
;;;105      }
;;;106      return 0;
;;;107    }
000020  b005              ADD      sp,sp,#0x14
000022  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.38|
000026  eb060046          ADD      r0,r6,r6,LSL #1       ;94
00002a  00c0              LSLS     r0,r0,#3              ;94
00002c  301f              ADDS     r0,r0,#0x1f           ;94
00002e  1140              ASRS     r0,r0,#5              ;94
000030  ea4f0a80          LSL      r10,r0,#2             ;94
000034  e024              B        |L4.128|
                  |L4.54|
000036  2400              MOVS     r4,#0                 ;96
000038  e01c              B        |L4.116|
                  |L4.58|
00003a  2003              MOVS     r0,#3                 ;97
00003c  fb005704          MLA      r7,r0,r4,r5           ;97
000040  7838              LDRB     r0,[r7,#0]            ;99
000042  9001              STR      r0,[sp,#4]            ;99
000044  7878              LDRB     r0,[r7,#1]            ;100
000046  9002              STR      r0,[sp,#8]            ;100
000048  78b8              LDRB     r0,[r7,#2]            ;101
00004a  9003              STR      r0,[sp,#0xc]          ;101
00004c  9901              LDR      r1,[sp,#4]            ;102
00004e  040a              LSLS     r2,r1,#16             ;102
000050  9902              LDR      r1,[sp,#8]            ;102
000052  ea422101          ORR      r1,r2,r1,LSL #8       ;102
000056  9a03              LDR      r2,[sp,#0xc]          ;102
000058  ea410002          ORR      r0,r1,r2              ;102
00005c  f7fffffe          BL       LCD_Color2Index
000060  9000              STR      r0,[sp,#0]            ;102
000062  9a04              LDR      r2,[sp,#0x10]         ;102
000064  eb090102          ADD      r1,r9,r2              ;102
000068  eb080004          ADD      r0,r8,r4              ;102
00006c  9a00              LDR      r2,[sp,#0]            ;102
00006e  f7fffffe          BL       LCD_SetPixelIndex
000072  1c64              ADDS     r4,r4,#1              ;96
                  |L4.116|
000074  42b4              CMP      r4,r6                 ;96
000076  dbe0              BLT      |L4.58|
000078  4455              ADD      r5,r5,r10             ;104
00007a  9804              LDR      r0,[sp,#0x10]         ;95
00007c  4458              ADD      r0,r0,r11             ;95
00007e  9004              STR      r0,[sp,#0x10]         ;95
                  |L4.128|
000080  990e              LDR      r1,[sp,#0x38]         ;95
000082  9804              LDR      r0,[sp,#0x10]         ;95
000084  4288              CMP      r0,r1                 ;95
000086  da02              BGE      |L4.142|
000088  9804              LDR      r0,[sp,#0x10]         ;95
00008a  2800              CMP      r0,#0                 ;95
00008c  dad3              BGE      |L4.54|
                  |L4.142|
00008e  2000              MOVS     r0,#0                 ;106
000090  e7c6              B        |L4.32|
;;;108    
                          ENDP


                          AREA ||i._DrawBitmap_Pal||, CODE, READONLY, ALIGN=2

                  _DrawBitmap_Pal PROC
;;;50     */
;;;51     static int _DrawBitmap_Pal(const U8 * pData, int x0, int y0, int XSize, int YSize, int Bpp, int NumColors) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b089              SUB      sp,sp,#0x24
000006  4604              MOV      r4,r0
000008  460f              MOV      r7,r1
00000a  4690              MOV      r8,r2
00000c  461d              MOV      r5,r3
00000e  f8dd904c          LDR      r9,[sp,#0x4c]
;;;52       int i, y, Step;
;;;53       int BytesPerLine = 0;
000012  2000              MOVS     r0,#0
000014  9007              STR      r0,[sp,#0x1c]
;;;54       Step = _GetStep(&YSize, &y);
000016  a908              ADD      r1,sp,#0x20
000018  a812              ADD      r0,sp,#0x48
00001a  f7fffffe          BL       _GetStep
00001e  4682              MOV      r10,r0
;;;55       if (!Step) {
000020  f1ba0f00          CMP      r10,#0
000024  d103              BNE      |L5.46|
;;;56         return 1;
000026  2001              MOVS     r0,#1
                  |L5.40|
;;;57       }
;;;58       for (i = 0; i < NumColors; i++) {
;;;59         U8 r, g, b;
;;;60         b = *(pData);
;;;61         g = *(pData + 1);
;;;62         r = *(pData + 2);
;;;63         pData += 4;
;;;64         LCD__aConvTable[i] = LCD_Color2Index(((U32)b << 16) | (g << 8) | r);
;;;65       }
;;;66       switch (Bpp) {
;;;67         case 1:
;;;68           BytesPerLine = ((XSize + 31) >> 5) << 2;
;;;69           break;
;;;70         case 4:
;;;71           BytesPerLine = (((XSize << 2) + 31) >> 5) << 2;
;;;72           break;
;;;73         case 8:
;;;74           BytesPerLine = ((XSize +  3) >> 2) << 2;
;;;75           break;
;;;76       }
;;;77       for (; (y < YSize) && (y >= 0); y += Step) {
;;;78         LCD_DrawBitmap(x0, y0 + y, XSize, 1, 1, 1, Bpp, XSize, pData, LCD__aConvTable);
;;;79         pData += BytesPerLine;
;;;80       }
;;;81       return 0;
;;;82     }
000028  b009              ADD      sp,sp,#0x24
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.46|
00002e  2600              MOVS     r6,#0                 ;58
000030  e013              B        |L5.90|
                  |L5.50|
000032  7820              LDRB     r0,[r4,#0]            ;60
000034  9005              STR      r0,[sp,#0x14]         ;60
000036  f894b001          LDRB     r11,[r4,#1]           ;61
00003a  78a0              LDRB     r0,[r4,#2]            ;62
00003c  9006              STR      r0,[sp,#0x18]         ;62
00003e  1d24              ADDS     r4,r4,#4              ;63
000040  9905              LDR      r1,[sp,#0x14]         ;64
000042  0409              LSLS     r1,r1,#16             ;64
000044  ea41210b          ORR      r1,r1,r11,LSL #8      ;64
000048  9a06              LDR      r2,[sp,#0x18]         ;64
00004a  ea410002          ORR      r0,r1,r2              ;64
00004e  f7fffffe          BL       LCD_Color2Index
000052  4921              LDR      r1,|L5.216|
000054  f8210016          STRH     r0,[r1,r6,LSL #1]     ;64
000058  1c76              ADDS     r6,r6,#1              ;58
                  |L5.90|
00005a  9814              LDR      r0,[sp,#0x50]         ;58
00005c  4286              CMP      r6,r0                 ;58
00005e  dbe8              BLT      |L5.50|
000060  f1b90f01          CMP      r9,#1                 ;66
000064  d006              BEQ      |L5.116|
000066  f1b90f04          CMP      r9,#4                 ;66
00006a  d009              BEQ      |L5.128|
00006c  f1b90f08          CMP      r9,#8                 ;66
000070  d112              BNE      |L5.152|
000072  e00c              B        |L5.142|
                  |L5.116|
000074  f105001f          ADD      r0,r5,#0x1f           ;68
000078  1140              ASRS     r0,r0,#5              ;68
00007a  0080              LSLS     r0,r0,#2              ;68
00007c  9007              STR      r0,[sp,#0x1c]         ;68
00007e  e00b              B        |L5.152|
                  |L5.128|
000080  201f              MOVS     r0,#0x1f              ;71
000082  eb000085          ADD      r0,r0,r5,LSL #2       ;71
000086  1140              ASRS     r0,r0,#5              ;71
000088  0080              LSLS     r0,r0,#2              ;71
00008a  9007              STR      r0,[sp,#0x1c]         ;71
00008c  e004              B        |L5.152|
                  |L5.142|
00008e  1ce8              ADDS     r0,r5,#3              ;74
000090  1080              ASRS     r0,r0,#2              ;74
000092  0080              LSLS     r0,r0,#2              ;74
000094  9007              STR      r0,[sp,#0x1c]         ;74
000096  bf00              NOP                            ;75
                  |L5.152|
000098  bf00              NOP                            ;69
00009a  e014              B        |L5.198|
                  |L5.156|
00009c  480e              LDR      r0,|L5.216|
00009e  e9cd9502          STRD     r9,r5,[sp,#8]         ;78
0000a2  e9cd4004          STRD     r4,r0,[sp,#0x10]      ;78
0000a6  2001              MOVS     r0,#1                 ;78
0000a8  9000              STR      r0,[sp,#0]            ;78
0000aa  9001              STR      r0,[sp,#4]            ;78
0000ac  9808              LDR      r0,[sp,#0x20]         ;78
0000ae  eb080100          ADD      r1,r8,r0              ;78
0000b2  2301              MOVS     r3,#1                 ;78
0000b4  462a              MOV      r2,r5                 ;78
0000b6  4638              MOV      r0,r7                 ;78
0000b8  f7fffffe          BL       LCD_DrawBitmap
0000bc  9807              LDR      r0,[sp,#0x1c]         ;79
0000be  4404              ADD      r4,r4,r0              ;79
0000c0  9808              LDR      r0,[sp,#0x20]         ;77
0000c2  4450              ADD      r0,r0,r10             ;77
0000c4  9008              STR      r0,[sp,#0x20]         ;77
                  |L5.198|
0000c6  9912              LDR      r1,[sp,#0x48]         ;77
0000c8  9808              LDR      r0,[sp,#0x20]         ;77
0000ca  4288              CMP      r0,r1                 ;77
0000cc  da02              BGE      |L5.212|
0000ce  9808              LDR      r0,[sp,#0x20]         ;77
0000d0  2800              CMP      r0,#0                 ;77
0000d2  dae3              BGE      |L5.156|
                  |L5.212|
0000d4  2000              MOVS     r0,#0                 ;81
0000d6  e7a7              B        |L5.40|
;;;83     
                          ENDP

                  |L5.216|
                          DCD      LCD__aConvTable

                          AREA ||i._GetStep||, CODE, READONLY, ALIGN=1

                  _GetStep PROC
;;;33     */
;;;34     static int _GetStep(int * pYSize, int * pY) {
000000  4602              MOV      r2,r0
;;;35       if (*pYSize > 0) {
000002  6810              LDR      r0,[r2,#0]
000004  2800              CMP      r0,#0
000006  dd05              BLE      |L6.20|
;;;36         *pY = *pYSize - 1;
000008  6810              LDR      r0,[r2,#0]
00000a  1e40              SUBS     r0,r0,#1
00000c  6008              STR      r0,[r1,#0]
;;;37         return -1;
00000e  f04f30ff          MOV      r0,#0xffffffff
                  |L6.18|
;;;38       } else if (*pYSize < 0) {
;;;39         *pYSize = -*pYSize;
;;;40         *pY = 0;
;;;41         return 1;
;;;42       } else {
;;;43         return 0;
;;;44       }
;;;45     }
000012  4770              BX       lr
                  |L6.20|
000014  6810              LDR      r0,[r2,#0]            ;38
000016  2800              CMP      r0,#0                 ;38
000018  da06              BGE      |L6.40|
00001a  6810              LDR      r0,[r2,#0]            ;39
00001c  4240              RSBS     r0,r0,#0              ;39
00001e  6010              STR      r0,[r2,#0]            ;39
000020  2000              MOVS     r0,#0                 ;40
000022  6008              STR      r0,[r1,#0]            ;40
000024  2001              MOVS     r0,#1                 ;41
000026  e7f4              B        |L6.18|
                  |L6.40|
000028  2000              MOVS     r0,#0                 ;43
00002a  e7f2              B        |L6.18|
;;;46     
                          ENDP

