; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\jdapimin.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\jdapimin.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\JPEG\jdapimin.c]
                          THUMB

                          AREA ||i.default_decompress_parms||, CODE, READONLY, ALIGN=2

                  default_decompress_parms PROC
;;;113    LOCAL(void)
;;;114    default_decompress_parms (j_decompress_ptr cinfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;115    {
000004  4604              MOV      r4,r0
;;;116      /* Guess the input colorspace, and set output colorspace accordingly. */
;;;117      /* (Wish JPEG committee had provided a real way to specify this...) */
;;;118      /* Note application may override our guesses. */
;;;119      switch (cinfo->num_components) {
000006  6a60              LDR      r0,[r4,#0x24]
000008  2801              CMP      r0,#1
00000a  d004              BEQ      |L1.22|
00000c  2803              CMP      r0,#3
00000e  d008              BEQ      |L1.34|
000010  2804              CMP      r0,#4
000012  d171              BNE      |L1.248|
000014  e067              B        |L1.230|
                  |L1.22|
;;;120      case 1:
;;;121        cinfo->jpeg_color_space = JCS_GRAYSCALE;
000016  2001              MOVS     r0,#1
000018  f8840028          STRB     r0,[r4,#0x28]
;;;122        cinfo->out_color_space = JCS_GRAYSCALE;
00001c  f8840029          STRB     r0,[r4,#0x29]
;;;123        break;
000020  e092              B        |L1.328|
                  |L1.34|
;;;124        
;;;125      case 3:
;;;126        if (cinfo->saw_JFIF_marker) {
000022  f8d40118          LDR      r0,[r4,#0x118]
000026  b118              CBZ      r0,|L1.48|
;;;127          cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
000028  2003              MOVS     r0,#3
00002a  f8840028          STRB     r0,[r4,#0x28]
00002e  e056              B        |L1.222|
                  |L1.48|
;;;128        } else if (cinfo->saw_Adobe_marker) {
000030  f8d40124          LDR      r0,[r4,#0x124]
000034  b1f8              CBZ      r0,|L1.118|
;;;129          switch (cinfo->Adobe_transform) {
000036  f8940128          LDRB     r0,[r4,#0x128]
00003a  b110              CBZ      r0,|L1.66|
00003c  2801              CMP      r0,#1
00003e  d108              BNE      |L1.82|
000040  e003              B        |L1.74|
                  |L1.66|
;;;130          case 0:
;;;131    	cinfo->jpeg_color_space = JCS_RGB;
000042  2002              MOVS     r0,#2
000044  f8840028          STRB     r0,[r4,#0x28]
;;;132    	break;
000048  e014              B        |L1.116|
                  |L1.74|
;;;133          case 1:
;;;134    	cinfo->jpeg_color_space = JCS_YCbCr;
00004a  2003              MOVS     r0,#3
00004c  f8840028          STRB     r0,[r4,#0x28]
;;;135    	break;
000050  e010              B        |L1.116|
                  |L1.82|
;;;136          default:
;;;137    	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
000052  2072              MOVS     r0,#0x72
000054  6821              LDR      r1,[r4,#0]
000056  6148              STR      r0,[r1,#0x14]
000058  f8940128          LDRB     r0,[r4,#0x128]
00005c  6821              LDR      r1,[r4,#0]
00005e  6188              STR      r0,[r1,#0x18]
000060  6820              LDR      r0,[r4,#0]
000062  f04f31ff          MOV      r1,#0xffffffff
000066  6842              LDR      r2,[r0,#4]
000068  4620              MOV      r0,r4
00006a  4790              BLX      r2
;;;138    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
00006c  2003              MOVS     r0,#3
00006e  f8840028          STRB     r0,[r4,#0x28]
;;;139    	break;
000072  bf00              NOP      
                  |L1.116|
000074  e033              B        |L1.222|
                  |L1.118|
;;;140          }
;;;141        } else {
;;;142          /* Saw no special markers, try to guess from the component IDs */
;;;143          int cid0 = cinfo->comp_info[0].component_id;
000076  f8540fd8          LDR      r0,[r4,#0xd8]!
00007a  6805              LDR      r5,[r0,#0]
;;;144          int cid1 = cinfo->comp_info[1].component_id;
00007c  6820              LDR      r0,[r4,#0]
00007e  6d46              LDR      r6,[r0,#0x54]
;;;145          int cid2 = cinfo->comp_info[2].component_id;
000080  f85409d8          LDR      r0,[r4],#-0xd8
000084  f8d070a8          LDR      r7,[r0,#0xa8]
;;;146    
;;;147          if (cid0 == 1 && cid1 == 2 && cid2 == 3)
000088  2d01              CMP      r5,#1
00008a  d107              BNE      |L1.156|
00008c  2e02              CMP      r6,#2
00008e  d105              BNE      |L1.156|
000090  2f03              CMP      r7,#3
000092  d103              BNE      |L1.156|
;;;148    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
000094  2003              MOVS     r0,#3
000096  f8840028          STRB     r0,[r4,#0x28]
00009a  e01f              B        |L1.220|
                  |L1.156|
;;;149          else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
00009c  2d52              CMP      r5,#0x52
00009e  d107              BNE      |L1.176|
0000a0  2e47              CMP      r6,#0x47
0000a2  d105              BNE      |L1.176|
0000a4  2f42              CMP      r7,#0x42
0000a6  d103              BNE      |L1.176|
;;;150    	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
0000a8  2002              MOVS     r0,#2
0000aa  f8840028          STRB     r0,[r4,#0x28]
0000ae  e015              B        |L1.220|
                  |L1.176|
;;;151          else {
;;;152    	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
0000b0  bf00              NOP      
0000b2  6820              LDR      r0,[r4,#0]
0000b4  f1000818          ADD      r8,r0,#0x18
0000b8  f8c85000          STR      r5,[r8,#0]
0000bc  f8c86004          STR      r6,[r8,#4]
0000c0  f8c87008          STR      r7,[r8,#8]
0000c4  206f              MOVS     r0,#0x6f
0000c6  6821              LDR      r1,[r4,#0]
0000c8  6148              STR      r0,[r1,#0x14]
0000ca  6820              LDR      r0,[r4,#0]
0000cc  2101              MOVS     r1,#1
0000ce  6842              LDR      r2,[r0,#4]
0000d0  4620              MOV      r0,r4
0000d2  4790              BLX      r2
0000d4  bf00              NOP      
;;;153    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
0000d6  2003              MOVS     r0,#3
0000d8  f8840028          STRB     r0,[r4,#0x28]
                  |L1.220|
;;;154          }
;;;155        }
0000dc  bf00              NOP      
                  |L1.222|
;;;156        /* Always guess RGB is proper output colorspace. */
;;;157        cinfo->out_color_space = JCS_RGB;
0000de  2002              MOVS     r0,#2
0000e0  f8840029          STRB     r0,[r4,#0x29]
;;;158        break;
0000e4  e030              B        |L1.328|
                  |L1.230|
;;;159        
;;;160      case 4:
;;;161        if (cinfo->saw_Adobe_marker) {
0000e6  f8d40124          LDR      r0,[r4,#0x124]
0000ea  b300              CBZ      r0,|L1.302|
;;;162          switch (cinfo->Adobe_transform) {
0000ec  f8940128          LDRB     r0,[r4,#0x128]
0000f0  b118              CBZ      r0,|L1.250|
0000f2  2802              CMP      r0,#2
0000f4  d109              BNE      |L1.266|
0000f6  e004              B        |L1.258|
                  |L1.248|
0000f8  e020              B        |L1.316|
                  |L1.250|
;;;163          case 0:
;;;164    	cinfo->jpeg_color_space = JCS_CMYK;
0000fa  2004              MOVS     r0,#4
0000fc  f8840028          STRB     r0,[r4,#0x28]
;;;165    	break;
000100  e014              B        |L1.300|
                  |L1.258|
;;;166          case 2:
;;;167    	cinfo->jpeg_color_space = JCS_YCCK;
000102  2005              MOVS     r0,#5
000104  f8840028          STRB     r0,[r4,#0x28]
;;;168    	break;
000108  e010              B        |L1.300|
                  |L1.266|
;;;169          default:
;;;170    	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
00010a  2072              MOVS     r0,#0x72
00010c  6821              LDR      r1,[r4,#0]
00010e  6148              STR      r0,[r1,#0x14]
000110  f8940128          LDRB     r0,[r4,#0x128]
000114  6821              LDR      r1,[r4,#0]
000116  6188              STR      r0,[r1,#0x18]
000118  6820              LDR      r0,[r4,#0]
00011a  f04f31ff          MOV      r1,#0xffffffff
00011e  6842              LDR      r2,[r0,#4]
000120  4620              MOV      r0,r4
000122  4790              BLX      r2
;;;171    	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
000124  2005              MOVS     r0,#5
000126  f8840028          STRB     r0,[r4,#0x28]
;;;172    	break;
00012a  bf00              NOP      
                  |L1.300|
00012c  e002              B        |L1.308|
                  |L1.302|
;;;173          }
;;;174        } else {
;;;175          /* No special markers, assume straight CMYK. */
;;;176          cinfo->jpeg_color_space = JCS_CMYK;
00012e  2004              MOVS     r0,#4
000130  f8840028          STRB     r0,[r4,#0x28]
                  |L1.308|
;;;177        }
;;;178        cinfo->out_color_space = JCS_CMYK;
000134  2004              MOVS     r0,#4
000136  f8840029          STRB     r0,[r4,#0x29]
;;;179        break;
00013a  e005              B        |L1.328|
                  |L1.316|
;;;180        
;;;181      default:
;;;182        cinfo->jpeg_color_space = JCS_UNKNOWN;
00013c  2000              MOVS     r0,#0
00013e  f8840028          STRB     r0,[r4,#0x28]
;;;183        cinfo->out_color_space = JCS_UNKNOWN;
000142  f8840029          STRB     r0,[r4,#0x29]
;;;184        break;
000146  bf00              NOP      
                  |L1.328|
000148  bf00              NOP                            ;123
;;;185      }
;;;186    
;;;187      /* Set defaults for other decompression parameters. */
;;;188      cinfo->scale_num = 1;		/* 1:1 scaling */
00014a  2001              MOVS     r0,#1
00014c  62e0              STR      r0,[r4,#0x2c]
;;;189      cinfo->scale_denom = 1;
00014e  6320              STR      r0,[r4,#0x30]
;;;190      cinfo->output_gamma = 1.0;
000150  2100              MOVS     r1,#0
000152  480e              LDR      r0,|L1.396|
000154  e9c4100e          STRD     r1,r0,[r4,#0x38]
;;;191      cinfo->buffered_image = FALSE;
000158  2000              MOVS     r0,#0
00015a  6420              STR      r0,[r4,#0x40]
;;;192      cinfo->raw_data_out = FALSE;
00015c  6460              STR      r0,[r4,#0x44]
;;;193      cinfo->dct_method = JDCT_DEFAULT;
00015e  f8840048          STRB     r0,[r4,#0x48]
;;;194      cinfo->do_fancy_upsampling = TRUE;
000162  2001              MOVS     r0,#1
000164  64e0              STR      r0,[r4,#0x4c]
;;;195      cinfo->do_block_smoothing = TRUE;
000166  6520              STR      r0,[r4,#0x50]
;;;196      cinfo->quantize_colors = FALSE;
000168  2000              MOVS     r0,#0
00016a  6560              STR      r0,[r4,#0x54]
;;;197      /* We set these in case application only sets quantize_colors. */
;;;198      cinfo->dither_mode = JDITHER_FS;
00016c  2002              MOVS     r0,#2
00016e  f8840058          STRB     r0,[r4,#0x58]
;;;199    #ifdef QUANT_2PASS_SUPPORTED
;;;200      cinfo->two_pass_quantize = TRUE;
000172  2001              MOVS     r0,#1
000174  65e0              STR      r0,[r4,#0x5c]
;;;201    #else
;;;202      cinfo->two_pass_quantize = FALSE;
;;;203    #endif
;;;204      cinfo->desired_number_of_colors = 256;
000176  0200              LSLS     r0,r0,#8
000178  6620              STR      r0,[r4,#0x60]
;;;205      cinfo->colormap = NULL;
00017a  2000              MOVS     r0,#0
00017c  f8c40088          STR      r0,[r4,#0x88]
;;;206      /* Initialize for no mode change in buffered-image mode. */
;;;207      cinfo->enable_1pass_quant = FALSE;
000180  6660              STR      r0,[r4,#0x64]
;;;208      cinfo->enable_external_quant = FALSE;
000182  66a0              STR      r0,[r4,#0x68]
;;;209      cinfo->enable_2pass_quant = FALSE;
000184  66e0              STR      r0,[r4,#0x6c]
;;;210    }
000186  e8bd81f0          POP      {r4-r8,pc}
;;;211    
                          ENDP

00018a  0000              DCW      0x0000
                  |L1.396|
                          DCD      0x3ff00000

                          AREA ||i.jpeg_CreateDecompress||, CODE, READONLY, ALIGN=1

                  jpeg_CreateDecompress PROC
;;;29     GLOBAL(void)
;;;30     jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;31     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;32       int i;
;;;33     
;;;34       /* Guard against version mismatches between library and caller. */
;;;35       cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
00000a  2000              MOVS     r0,#0
00000c  6060              STR      r0,[r4,#4]
;;;36       if (version != JPEG_LIB_VERSION)
00000e  2e3e              CMP      r6,#0x3e
000010  d00b              BEQ      |L2.42|
;;;37         ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
000012  200c              MOVS     r0,#0xc
000014  6821              LDR      r1,[r4,#0]
000016  6148              STR      r0,[r1,#0x14]
000018  203e              MOVS     r0,#0x3e
00001a  6821              LDR      r1,[r4,#0]
00001c  6188              STR      r0,[r1,#0x18]
00001e  6820              LDR      r0,[r4,#0]
000020  61c6              STR      r6,[r0,#0x1c]
000022  6820              LDR      r0,[r4,#0]
000024  6801              LDR      r1,[r0,#0]
000026  4620              MOV      r0,r4
000028  4788              BLX      r1
                  |L2.42|
;;;38       if (structsize != SIZEOF(struct jpeg_decompress_struct))
00002a  f5b77fe8          CMP      r7,#0x1d0
00002e  d00c              BEQ      |L2.74|
;;;39         ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
000030  2015              MOVS     r0,#0x15
000032  6821              LDR      r1,[r4,#0]
000034  6148              STR      r0,[r1,#0x14]
000036  f44f70e8          MOV      r0,#0x1d0
00003a  6821              LDR      r1,[r4,#0]
00003c  6188              STR      r0,[r1,#0x18]
00003e  6820              LDR      r0,[r4,#0]
000040  61c7              STR      r7,[r0,#0x1c]
000042  6820              LDR      r0,[r4,#0]
000044  6801              LDR      r1,[r0,#0]
000046  4620              MOV      r0,r4
000048  4788              BLX      r1
                  |L2.74|
;;;40     	     (int) SIZEOF(struct jpeg_decompress_struct), (int) structsize);
;;;41     
;;;42       /* For debugging purposes, we zero the whole master structure.
;;;43        * But the application has already set the err pointer, and may have set
;;;44        * client_data, so we have to save and restore those fields.
;;;45        * Note: if application hasn't set client_data, tools like Purify may
;;;46        * complain here.
;;;47        */
;;;48       {
;;;49         struct jpeg_error_mgr * err = cinfo->err;
00004a  f8d48000          LDR      r8,[r4,#0]
;;;50         void * client_data = cinfo->client_data; /* ignore Purify complaint here */
00004e  f8d4900c          LDR      r9,[r4,#0xc]
;;;51         MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
000052  f44f71e8          MOV      r1,#0x1d0
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       __aeabi_memclr4
;;;52         cinfo->err = err;
00005c  f8c48000          STR      r8,[r4,#0]
;;;53         cinfo->client_data = client_data;
000060  f8c4900c          STR      r9,[r4,#0xc]
;;;54       }
;;;55       cinfo->is_decompressor = TRUE;
000064  2001              MOVS     r0,#1
000066  6120              STR      r0,[r4,#0x10]
;;;56     
;;;57       /* Initialize a memory manager instance for this object */
;;;58       jinit_memory_mgr((j_common_ptr) cinfo);
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       jinit_memory_mgr
;;;59     
;;;60       /* Zero out pointers to permanent structures. */
;;;61       cinfo->progress = NULL;
00006e  2000              MOVS     r0,#0
000070  60a0              STR      r0,[r4,#8]
;;;62       cinfo->src = NULL;
000072  61a0              STR      r0,[r4,#0x18]
;;;63     
;;;64       for (i = 0; i < NUM_QUANT_TBLS; i++)
000074  2500              MOVS     r5,#0
000076  e005              B        |L2.132|
                  |L2.120|
;;;65         cinfo->quant_tbl_ptrs[i] = NULL;
000078  2100              MOVS     r1,#0
00007a  f10400a4          ADD      r0,r4,#0xa4
00007e  f8401025          STR      r1,[r0,r5,LSL #2]
000082  1c6d              ADDS     r5,r5,#1              ;64
                  |L2.132|
000084  2d04              CMP      r5,#4                 ;64
000086  dbf7              BLT      |L2.120|
;;;66     
;;;67       for (i = 0; i < NUM_HUFF_TBLS; i++) {
000088  2500              MOVS     r5,#0
00008a  e008              B        |L2.158|
                  |L2.140|
;;;68         cinfo->dc_huff_tbl_ptrs[i] = NULL;
00008c  2100              MOVS     r1,#0
00008e  f10400b4          ADD      r0,r4,#0xb4
000092  f8401025          STR      r1,[r0,r5,LSL #2]
;;;69         cinfo->ac_huff_tbl_ptrs[i] = NULL;
000096  3010              ADDS     r0,r0,#0x10
000098  f8401025          STR      r1,[r0,r5,LSL #2]
00009c  1c6d              ADDS     r5,r5,#1              ;67
                  |L2.158|
00009e  2d04              CMP      r5,#4                 ;67
0000a0  dbf4              BLT      |L2.140|
;;;70       }
;;;71     
;;;72       /* Initialize marker processor so application can override methods
;;;73        * for COM, APPn markers before calling jpeg_read_header.
;;;74        */
;;;75       cinfo->marker_list = NULL;
0000a2  2000              MOVS     r0,#0
0000a4  f8c40130          STR      r0,[r4,#0x130]
;;;76       jinit_marker_reader(cinfo);
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       jinit_marker_reader
;;;77     
;;;78       /* And initialize the overall input controller. */
;;;79       jinit_input_controller(cinfo);
0000ae  4620              MOV      r0,r4
0000b0  f7fffffe          BL       jinit_input_controller
;;;80     
;;;81       /* OK, I'm ready */
;;;82       cinfo->global_state = DSTATE_START;
0000b4  20c8              MOVS     r0,#0xc8
0000b6  6160              STR      r0,[r4,#0x14]
;;;83     }
0000b8  e8bd87f0          POP      {r4-r10,pc}
;;;84     
                          ENDP


                          AREA ||i.jpeg_abort_decompress||, CODE, READONLY, ALIGN=1

                  jpeg_abort_decompress PROC
;;;102    GLOBAL(void)
;;;103    jpeg_abort_decompress (j_decompress_ptr cinfo)
000000  b510              PUSH     {r4,lr}
;;;104    {
000002  4604              MOV      r4,r0
;;;105      jpeg_abort((j_common_ptr) cinfo); /* use common routine */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       jpeg_abort
;;;106    }
00000a  bd10              POP      {r4,pc}
;;;107    
                          ENDP


                          AREA ||i.jpeg_consume_input||, CODE, READONLY, ALIGN=1

                  jpeg_consume_input PROC
;;;286    GLOBAL(int)
;;;287    jpeg_consume_input (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;288    {
000002  4604              MOV      r4,r0
;;;289      int retcode = JPEG_SUSPENDED;
000004  2500              MOVS     r5,#0
;;;290    
;;;291      /* NB: every possible DSTATE value should be listed in this switch */
;;;292      switch (cinfo->global_state) {
000006  6960              LDR      r0,[r4,#0x14]
000008  38c8              SUBS     r0,r0,#0xc8
00000a  280b              CMP      r0,#0xb
00000c  d230              BCS      |L4.112|
00000e  e8dff000          TBB      [pc,r0]
000012  0612              DCB      0x06,0x12
000014  20222324          DCB      0x20,0x22,0x23,0x24
000018  2526272f          DCB      0x25,0x26,0x27,0x2f
00001c  2800              DCB      0x28,0x00
;;;293      case DSTATE_START:
;;;294        /* Start-of-datastream actions: reset appropriate modules */
;;;295        (*cinfo->inputctl->reset_input_controller) (cinfo);
00001e  f8d401b4          LDR      r0,[r4,#0x1b4]
000022  6841              LDR      r1,[r0,#4]
000024  4620              MOV      r0,r4
000026  4788              BLX      r1
;;;296        /* Initialize application's data source module */
;;;297        (*cinfo->src->init_source) (cinfo);
000028  69a0              LDR      r0,[r4,#0x18]
00002a  6881              LDR      r1,[r0,#8]
00002c  4620              MOV      r0,r4
00002e  4788              BLX      r1
;;;298        cinfo->global_state = DSTATE_INHEADER;
000030  20c9              MOVS     r0,#0xc9
000032  6160              STR      r0,[r4,#0x14]
;;;299        /*FALLTHROUGH*/
;;;300      case DSTATE_INHEADER:
000034  bf00              NOP      
;;;301        retcode = (*cinfo->inputctl->consume_input) (cinfo);
000036  f8d401b4          LDR      r0,[r4,#0x1b4]
00003a  6801              LDR      r1,[r0,#0]
00003c  4620              MOV      r0,r4
00003e  4788              BLX      r1
000040  4605              MOV      r5,r0
;;;302        if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
000042  2d01              CMP      r5,#1
000044  d104              BNE      |L4.80|
;;;303          /* Set up default parameters based on header data */
;;;304          default_decompress_parms(cinfo);
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       default_decompress_parms
;;;305          /* Set global state: ready for start_decompress */
;;;306          cinfo->global_state = DSTATE_READY;
00004c  20ca              MOVS     r0,#0xca
00004e  6160              STR      r0,[r4,#0x14]
                  |L4.80|
;;;307        }
;;;308        break;
000050  e019              B        |L4.134|
;;;309      case DSTATE_READY:
;;;310        /* Can't advance past first SOS until start_decompress is called */
;;;311        retcode = JPEG_REACHED_SOS;
000052  2501              MOVS     r5,#1
;;;312        break;
000054  e017              B        |L4.134|
;;;313      case DSTATE_PRELOAD:
;;;314      case DSTATE_PRESCAN:
000056  bf00              NOP      
;;;315      case DSTATE_SCANNING:
000058  bf00              NOP      
;;;316      case DSTATE_RAW_OK:
00005a  bf00              NOP      
;;;317      case DSTATE_BUFIMAGE:
00005c  bf00              NOP      
;;;318      case DSTATE_BUFPOST:
00005e  bf00              NOP      
;;;319      case DSTATE_STOPPING:
000060  bf00              NOP      
;;;320        retcode = (*cinfo->inputctl->consume_input) (cinfo);
000062  f8d401b4          LDR      r0,[r4,#0x1b4]
000066  6801              LDR      r1,[r0,#0]
000068  4620              MOV      r0,r4
00006a  4788              BLX      r1
00006c  4605              MOV      r5,r0
;;;321        break;
00006e  e00a              B        |L4.134|
                  |L4.112|
;;;322      default:
;;;323        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
000070  2014              MOVS     r0,#0x14
000072  6821              LDR      r1,[r4,#0]
000074  6148              STR      r0,[r1,#0x14]
000076  6821              LDR      r1,[r4,#0]
000078  6960              LDR      r0,[r4,#0x14]
00007a  6188              STR      r0,[r1,#0x18]
00007c  6820              LDR      r0,[r4,#0]
00007e  6801              LDR      r1,[r0,#0]
000080  4620              MOV      r0,r4
000082  4788              BLX      r1
000084  bf00              NOP                            ;292
                  |L4.134|
000086  bf00              NOP                            ;308
;;;324      }
;;;325      return retcode;
000088  4628              MOV      r0,r5
;;;326    }
00008a  bd70              POP      {r4-r6,pc}
;;;327    
                          ENDP


                          AREA ||i.jpeg_destroy_decompress||, CODE, READONLY, ALIGN=1

                  jpeg_destroy_decompress PROC
;;;90     GLOBAL(void)
;;;91     jpeg_destroy_decompress (j_decompress_ptr cinfo)
000000  b510              PUSH     {r4,lr}
;;;92     {
000002  4604              MOV      r4,r0
;;;93       jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       jpeg_destroy
;;;94     }
00000a  bd10              POP      {r4,pc}
;;;95     
                          ENDP


                          AREA ||i.jpeg_finish_decompress||, CODE, READONLY, ALIGN=1

                  jpeg_finish_decompress PROC
;;;368    GLOBAL(boolean)
;;;369    jpeg_finish_decompress (j_decompress_ptr cinfo)
000000  b510              PUSH     {r4,lr}
;;;370    {
000002  4604              MOV      r4,r0
;;;371      if ((cinfo->global_state == DSTATE_SCANNING ||
000004  6960              LDR      r0,[r4,#0x14]
000006  28cd              CMP      r0,#0xcd
000008  d002              BEQ      |L6.16|
;;;372           cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
00000a  6960              LDR      r0,[r4,#0x14]
00000c  28ce              CMP      r0,#0xce
00000e  d115              BNE      |L6.60|
                  |L6.16|
000010  6c20              LDR      r0,[r4,#0x40]
000012  b998              CBNZ     r0,|L6.60|
;;;373        /* Terminate final pass of non-buffered mode */
;;;374        if (cinfo->output_scanline < cinfo->output_height)
000014  6f61              LDR      r1,[r4,#0x74]
000016  f8d4008c          LDR      r0,[r4,#0x8c]
00001a  4288              CMP      r0,r1
00001c  d206              BCS      |L6.44|
;;;375          ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
00001e  2043              MOVS     r0,#0x43
000020  6821              LDR      r1,[r4,#0]
000022  6148              STR      r0,[r1,#0x14]
000024  6820              LDR      r0,[r4,#0]
000026  6801              LDR      r1,[r0,#0]
000028  4620              MOV      r0,r4
00002a  4788              BLX      r1
                  |L6.44|
;;;376        (*cinfo->master->finish_output_pass) (cinfo);
00002c  f8d401a4          LDR      r0,[r4,#0x1a4]
000030  6841              LDR      r1,[r0,#4]
000032  4620              MOV      r0,r4
000034  4788              BLX      r1
;;;377        cinfo->global_state = DSTATE_STOPPING;
000036  20d2              MOVS     r0,#0xd2
000038  6160              STR      r0,[r4,#0x14]
00003a  e012              B        |L6.98|
                  |L6.60|
;;;378      } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
00003c  6960              LDR      r0,[r4,#0x14]
00003e  28cf              CMP      r0,#0xcf
000040  d102              BNE      |L6.72|
;;;379        /* Finishing after a buffered-image operation */
;;;380        cinfo->global_state = DSTATE_STOPPING;
000042  20d2              MOVS     r0,#0xd2
000044  6160              STR      r0,[r4,#0x14]
000046  e00c              B        |L6.98|
                  |L6.72|
;;;381      } else if (cinfo->global_state != DSTATE_STOPPING) {
000048  6960              LDR      r0,[r4,#0x14]
00004a  28d2              CMP      r0,#0xd2
00004c  d009              BEQ      |L6.98|
;;;382        /* STOPPING = repeat call after a suspension, anything else is error */
;;;383        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
00004e  2014              MOVS     r0,#0x14
000050  6821              LDR      r1,[r4,#0]
000052  6148              STR      r0,[r1,#0x14]
000054  6821              LDR      r1,[r4,#0]
000056  6960              LDR      r0,[r4,#0x14]
000058  6188              STR      r0,[r1,#0x18]
00005a  6820              LDR      r0,[r4,#0]
00005c  6801              LDR      r1,[r0,#0]
00005e  4620              MOV      r0,r4
000060  4788              BLX      r1
                  |L6.98|
;;;384      }
;;;385      /* Read until EOI */
;;;386      while (! cinfo->inputctl->eoi_reached) {
000062  e007              B        |L6.116|
                  |L6.100|
;;;387        if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
000064  f8d401b4          LDR      r0,[r4,#0x1b4]
000068  6801              LDR      r1,[r0,#0]
00006a  4620              MOV      r0,r4
00006c  4788              BLX      r1
00006e  b908              CBNZ     r0,|L6.116|
;;;388          return FALSE;		/* Suspend, come back later */
000070  2000              MOVS     r0,#0
                  |L6.114|
;;;389      }
;;;390      /* Do final cleanup */
;;;391      (*cinfo->src->term_source) (cinfo);
;;;392      /* We can use jpeg_abort to release memory and reset global_state */
;;;393      jpeg_abort((j_common_ptr) cinfo);
;;;394      return TRUE;
;;;395    }
000072  bd10              POP      {r4,pc}
                  |L6.116|
000074  f8d401b4          LDR      r0,[r4,#0x1b4]        ;386
000078  6940              LDR      r0,[r0,#0x14]         ;386
00007a  2800              CMP      r0,#0                 ;386
00007c  d0f2              BEQ      |L6.100|
00007e  69a0              LDR      r0,[r4,#0x18]         ;391
000080  6981              LDR      r1,[r0,#0x18]         ;391
000082  4620              MOV      r0,r4                 ;391
000084  4788              BLX      r1                    ;391
000086  4620              MOV      r0,r4                 ;393
000088  f7fffffe          BL       jpeg_abort
00008c  2001              MOVS     r0,#1                 ;394
00008e  e7f0              B        |L6.114|
                          ENDP


                          AREA ||i.jpeg_has_multiple_scans||, CODE, READONLY, ALIGN=1

                  jpeg_has_multiple_scans PROC
;;;348    GLOBAL(boolean)
;;;349    jpeg_has_multiple_scans (j_decompress_ptr cinfo)
000000  b510              PUSH     {r4,lr}
;;;350    {
000002  4604              MOV      r4,r0
;;;351      /* Only valid after jpeg_read_header completes */
;;;352      if (cinfo->global_state < DSTATE_READY ||
000004  6960              LDR      r0,[r4,#0x14]
000006  28ca              CMP      r0,#0xca
000008  db02              BLT      |L7.16|
;;;353          cinfo->global_state > DSTATE_STOPPING)
00000a  6960              LDR      r0,[r4,#0x14]
00000c  28d2              CMP      r0,#0xd2
00000e  dd09              BLE      |L7.36|
                  |L7.16|
;;;354        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
000010  2014              MOVS     r0,#0x14
000012  6821              LDR      r1,[r4,#0]
000014  6148              STR      r0,[r1,#0x14]
000016  6821              LDR      r1,[r4,#0]
000018  6960              LDR      r0,[r4,#0x14]
00001a  6188              STR      r0,[r1,#0x18]
00001c  6820              LDR      r0,[r4,#0]
00001e  6801              LDR      r1,[r0,#0]
000020  4620              MOV      r0,r4
000022  4788              BLX      r1
                  |L7.36|
;;;355      return cinfo->inputctl->has_multiple_scans;
000024  f8d401b4          LDR      r0,[r4,#0x1b4]
000028  6900              LDR      r0,[r0,#0x10]
;;;356    }
00002a  bd10              POP      {r4,pc}
;;;357    
                          ENDP


                          AREA ||i.jpeg_input_complete||, CODE, READONLY, ALIGN=1

                  jpeg_input_complete PROC
;;;333    GLOBAL(boolean)
;;;334    jpeg_input_complete (j_decompress_ptr cinfo)
000000  b510              PUSH     {r4,lr}
;;;335    {
000002  4604              MOV      r4,r0
;;;336      /* Check for valid jpeg object */
;;;337      if (cinfo->global_state < DSTATE_START ||
000004  6960              LDR      r0,[r4,#0x14]
000006  28c8              CMP      r0,#0xc8
000008  db02              BLT      |L8.16|
;;;338          cinfo->global_state > DSTATE_STOPPING)
00000a  6960              LDR      r0,[r4,#0x14]
00000c  28d2              CMP      r0,#0xd2
00000e  dd09              BLE      |L8.36|
                  |L8.16|
;;;339        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
000010  2014              MOVS     r0,#0x14
000012  6821              LDR      r1,[r4,#0]
000014  6148              STR      r0,[r1,#0x14]
000016  6821              LDR      r1,[r4,#0]
000018  6960              LDR      r0,[r4,#0x14]
00001a  6188              STR      r0,[r1,#0x18]
00001c  6820              LDR      r0,[r4,#0]
00001e  6801              LDR      r1,[r0,#0]
000020  4620              MOV      r0,r4
000022  4788              BLX      r1
                  |L8.36|
;;;340      return cinfo->inputctl->eoi_reached;
000024  f8d401b4          LDR      r0,[r4,#0x1b4]
000028  6940              LDR      r0,[r0,#0x14]
;;;341    }
00002a  bd10              POP      {r4,pc}
;;;342    
                          ENDP


                          AREA ||i.jpeg_read_header||, CODE, READONLY, ALIGN=1

                  jpeg_read_header PROC
;;;240    GLOBAL(int)
;;;241    jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
000000  b570              PUSH     {r4-r6,lr}
;;;242    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;243      int retcode;
;;;244    
;;;245      if (cinfo->global_state != DSTATE_START &&
000006  6960              LDR      r0,[r4,#0x14]
000008  28c8              CMP      r0,#0xc8
00000a  d00c              BEQ      |L9.38|
;;;246          cinfo->global_state != DSTATE_INHEADER)
00000c  6960              LDR      r0,[r4,#0x14]
00000e  28c9              CMP      r0,#0xc9
000010  d009              BEQ      |L9.38|
;;;247        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
000012  2014              MOVS     r0,#0x14
000014  6821              LDR      r1,[r4,#0]
000016  6148              STR      r0,[r1,#0x14]
000018  6821              LDR      r1,[r4,#0]
00001a  6960              LDR      r0,[r4,#0x14]
00001c  6188              STR      r0,[r1,#0x18]
00001e  6820              LDR      r0,[r4,#0]
000020  6801              LDR      r1,[r0,#0]
000022  4620              MOV      r0,r4
000024  4788              BLX      r1
                  |L9.38|
;;;248    
;;;249      retcode = jpeg_consume_input(cinfo);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       jpeg_consume_input
00002c  4605              MOV      r5,r0
;;;250    
;;;251      switch (retcode) {
00002e  b19d              CBZ      r5,|L9.88|
000030  2d01              CMP      r5,#1
000032  d002              BEQ      |L9.58|
000034  2d02              CMP      r5,#2
000036  d110              BNE      |L9.90|
000038  e001              B        |L9.62|
                  |L9.58|
;;;252      case JPEG_REACHED_SOS:
;;;253        retcode = JPEG_HEADER_OK;
00003a  2501              MOVS     r5,#1
;;;254        break;
00003c  e00d              B        |L9.90|
                  |L9.62|
;;;255      case JPEG_REACHED_EOI:
;;;256        if (require_image)		/* Complain if application wanted an image */
00003e  b136              CBZ      r6,|L9.78|
;;;257          ERREXIT(cinfo, JERR_NO_IMAGE);
000040  2033              MOVS     r0,#0x33
000042  6821              LDR      r1,[r4,#0]
000044  6148              STR      r0,[r1,#0x14]
000046  6820              LDR      r0,[r4,#0]
000048  6801              LDR      r1,[r0,#0]
00004a  4620              MOV      r0,r4
00004c  4788              BLX      r1
                  |L9.78|
;;;258        /* Reset to start state; it would be safer to require the application to
;;;259         * call jpeg_abort, but we can't change it now for compatibility reasons.
;;;260         * A side effect is to free any temporary memory (there shouldn't be any).
;;;261         */
;;;262        jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       jpeg_abort
;;;263        retcode = JPEG_HEADER_TABLES_ONLY;
000054  2502              MOVS     r5,#2
;;;264        break;
000056  e000              B        |L9.90|
                  |L9.88|
;;;265      case JPEG_SUSPENDED:
;;;266        /* no work */
;;;267        break;
000058  bf00              NOP      
                  |L9.90|
00005a  bf00              NOP                            ;254
;;;268      }
;;;269    
;;;270      return retcode;
00005c  4628              MOV      r0,r5
;;;271    }
00005e  bd70              POP      {r4-r6,pc}
;;;272    
                          ENDP

