; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gui_uc.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\gui_uc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\GUI_UC.c]
                          THUMB

                          AREA ||i.GUI_UC_Encode||, CODE, READONLY, ALIGN=2

                  GUI_UC_Encode PROC
;;;63     */
;;;64     int GUI_UC_Encode(char* s, U16 Char) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;65       #if GUI_COMPILER_SUPPORTS_FP
;;;66         #if GUI_SUPPORT_UNICODE
;;;67           int r;
;;;68           GUI_LOCK();
000006  f7fffffe          BL       GUI_Lock
;;;69           r = GUI_Context.pUC_API->pfEncode(s, Char);
00000a  4805              LDR      r0,|L1.32|
00000c  6a00              LDR      r0,[r0,#0x20]  ; GUI_Context
00000e  4629              MOV      r1,r5
000010  68c2              LDR      r2,[r0,#0xc]
000012  4620              MOV      r0,r4
000014  4790              BLX      r2
000016  4606              MOV      r6,r0
;;;70           GUI_UNLOCK();
000018  f7fffffe          BL       GUI_Unlock
;;;71           return r;
00001c  4630              MOV      r0,r6
;;;72         #else
;;;73           *s = (U8)(Char);
;;;74           return Char;
;;;75         #endif
;;;76       #else
;;;77         GUI_USE_PARA(s);
;;;78         GUI_USE_PARA(Char);
;;;79         return 0;
;;;80       #endif
;;;81     }
00001e  bd70              POP      {r4-r6,pc}
;;;82     
                          ENDP

                  |L1.32|
                          DCD      GUI_Context

                          AREA ||i.GUI_UC_GetCharCode||, CODE, READONLY, ALIGN=2

                  GUI_UC_GetCharCode PROC
;;;47     */
;;;48     U16 GUI_UC_GetCharCode(const char GUI_UNI_PTR * s) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;49       #if GUI_SUPPORT_UNICODE
;;;50         U16 r;
;;;51         GUI_LOCK();
000004  f7fffffe          BL       GUI_Lock
;;;52         r =  GUI_Context.pUC_API->pfGetCharCode(s);
000008  4804              LDR      r0,|L2.28|
00000a  6a00              LDR      r0,[r0,#0x20]  ; GUI_Context
00000c  6801              LDR      r1,[r0,#0]
00000e  4620              MOV      r0,r4
000010  4788              BLX      r1
000012  4605              MOV      r5,r0
;;;53         GUI_UNLOCK();
000014  f7fffffe          BL       GUI_Unlock
;;;54         return r;
000018  4628              MOV      r0,r5
;;;55       #else
;;;56         return *(const U8 GUI_UNI_PTR *)s;
;;;57       #endif
;;;58     }
00001a  bd70              POP      {r4-r6,pc}
;;;59     
                          ENDP

                  |L2.28|
                          DCD      GUI_Context

                          AREA ||i.GUI_UC_GetCharSize||, CODE, READONLY, ALIGN=2

                  GUI_UC_GetCharSize PROC
;;;31     */
;;;32     int GUI_UC_GetCharSize(const char GUI_UNI_PTR * s) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;33       #if GUI_SUPPORT_UNICODE
;;;34         int r;
;;;35         GUI_LOCK();
000004  f7fffffe          BL       GUI_Lock
;;;36         r =  GUI_Context.pUC_API->pfGetCharSize(s);
000008  4804              LDR      r0,|L3.28|
00000a  6a00              LDR      r0,[r0,#0x20]  ; GUI_Context
00000c  6841              LDR      r1,[r0,#4]
00000e  4620              MOV      r0,r4
000010  4788              BLX      r1
000012  4605              MOV      r5,r0
;;;37         GUI_UNLOCK();
000014  f7fffffe          BL       GUI_Unlock
;;;38         return r;
000018  4628              MOV      r0,r5
;;;39       #else
;;;40         return 1;
;;;41       #endif
;;;42     }
00001a  bd70              POP      {r4-r6,pc}
;;;43     
                          ENDP

                  |L3.28|
                          DCD      GUI_Context

                          AREA ||i.GUI_UC__CalcSizeOfChar||, CODE, READONLY, ALIGN=2

                  GUI_UC__CalcSizeOfChar PROC
;;;86     */
;;;87     int GUI_UC__CalcSizeOfChar(U16 Char) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;88       #if GUI_SUPPORT_UNICODE
;;;89         return GUI_Context.pUC_API->pfCalcSizeOfChar(Char);
000004  4802              LDR      r0,|L4.16|
000006  6a00              LDR      r0,[r0,#0x20]  ; GUI_Context
000008  6881              LDR      r1,[r0,#8]
00000a  4620              MOV      r0,r4
00000c  4788              BLX      r1
;;;90       #else
;;;91         return 1;
;;;92       #endif
;;;93     }
00000e  bd10              POP      {r4,pc}
;;;94     
                          ENDP

                  |L4.16|
                          DCD      GUI_Context

                          AREA ||i.GUI_UC__GetCharCodeInc||, CODE, READONLY, ALIGN=2

                  GUI_UC__GetCharCodeInc PROC
;;;98     */
;;;99     U16 GUI_UC__GetCharCodeInc(const char GUI_UNI_PTR ** ps) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;100      const char GUI_UNI_PTR * s;
;;;101      U16 r;
;;;102      s   = *ps;
000004  6825              LDR      r5,[r4,#0]
;;;103      #if GUI_SUPPORT_UNICODE
;;;104        r   = GUI_UC__GetCharCode(s);
000006  4807              LDR      r0,|L5.36|
000008  6a00              LDR      r0,[r0,#0x20]  ; GUI_Context
00000a  6801              LDR      r1,[r0,#0]
00000c  4628              MOV      r0,r5
00000e  4788              BLX      r1
000010  4606              MOV      r6,r0
;;;105        s  += GUI_UC__GetCharSize(s);
000012  4804              LDR      r0,|L5.36|
000014  6a00              LDR      r0,[r0,#0x20]  ; GUI_Context
000016  6841              LDR      r1,[r0,#4]
000018  4628              MOV      r0,r5
00001a  4788              BLX      r1
00001c  4405              ADD      r5,r5,r0
;;;106      #else
;;;107        r   = *s;
;;;108        s  += 1;
;;;109      #endif
;;;110      *ps = s;
00001e  6025              STR      r5,[r4,#0]
;;;111      return r;
000020  4630              MOV      r0,r6
;;;112    }
000022  bd70              POP      {r4-r6,pc}
;;;113    
                          ENDP

                  |L5.36|
                          DCD      GUI_Context

                          AREA ||i.GUI_UC__NumBytes2NumChars||, CODE, READONLY, ALIGN=2

                  GUI_UC__NumBytes2NumChars PROC
;;;135    */
;;;136    int GUI_UC__NumBytes2NumChars(const char GUI_UNI_PTR * s, int NumBytes) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;137      int CharSize, Chars = 0, Bytes = 0;
000008  f04f0800          MOV      r8,#0
00000c  2500              MOVS     r5,#0
;;;138      while (NumBytes > Bytes) {
00000e  e008              B        |L6.34|
                  |L6.16|
;;;139        #if GUI_SUPPORT_UNICODE
;;;140          CharSize = GUI_UC__GetCharSize(s + Bytes);
000010  1970              ADDS     r0,r6,r5
000012  4a06              LDR      r2,|L6.44|
000014  6a12              LDR      r2,[r2,#0x20]  ; GUI_Context
000016  6851              LDR      r1,[r2,#4]
000018  4788              BLX      r1
00001a  4604              MOV      r4,r0
;;;141        #else
;;;142          CharSize = 1;
;;;143        #endif
;;;144        Bytes += CharSize;
00001c  4425              ADD      r5,r5,r4
;;;145        Chars++;
00001e  f1080801          ADD      r8,r8,#1
                  |L6.34|
000022  42af              CMP      r7,r5                 ;138
000024  dcf4              BGT      |L6.16|
;;;146      }
;;;147      return Chars;
000026  4640              MOV      r0,r8
;;;148    }
000028  e8bd81f0          POP      {r4-r8,pc}
;;;149    
                          ENDP

                  |L6.44|
                          DCD      GUI_Context

                          AREA ||i.GUI_UC__NumChars2NumBytes||, CODE, READONLY, ALIGN=2

                  GUI_UC__NumChars2NumBytes PROC
;;;117    */
;;;118    int GUI_UC__NumChars2NumBytes(const char GUI_UNI_PTR * s, int NumChars) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;119      int CharSize, NumBytes = 0;
000008  2700              MOVS     r7,#0
;;;120      while (NumChars--) {
00000a  e007              B        |L7.28|
                  |L7.12|
;;;121        #if GUI_SUPPORT_UNICODE
;;;122          CharSize = GUI_UC__GetCharSize(s);
00000c  4807              LDR      r0,|L7.44|
00000e  6a00              LDR      r0,[r0,#0x20]  ; GUI_Context
000010  6841              LDR      r1,[r0,#4]
000012  4628              MOV      r0,r5
000014  4788              BLX      r1
000016  4604              MOV      r4,r0
;;;123        #else
;;;124          CharSize = 1;
;;;125        #endif
;;;126        s += CharSize;    
000018  4425              ADD      r5,r5,r4
;;;127        NumBytes += CharSize;
00001a  4427              ADD      r7,r7,r4
                  |L7.28|
00001c  0030              MOVS     r0,r6                 ;120
00001e  f1a60601          SUB      r6,r6,#1              ;120
000022  d1f3              BNE      |L7.12|
;;;128      }
;;;129      return NumBytes;
000024  4638              MOV      r0,r7
;;;130    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;131    
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      GUI_Context
