; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lcd.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\LCD.c]
                          THUMB

                          AREA ||i.LCD_Color2Index||, CODE, READONLY, ALIGN=2

                  LCD_Color2Index PROC
;;;314    */
;;;315    int LCD_Color2Index(LCD_COLOR Color) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;316      return LCDDEV_L0_Color2Index(Color);
000004  4802              LDR      r0,|L1.16|
000006  6cc0              LDR      r0,[r0,#0x4c]  ; GUI_Context
000008  6801              LDR      r1,[r0,#0]
00000a  4620              MOV      r0,r4
00000c  4788              BLX      r1
;;;317    }
00000e  bd10              POP      {r4,pc}
;;;318    
                          ENDP

                  |L1.16|
                          DCD      GUI_Context

                          AREA ||i.LCD_DrawBitmap||, CODE, READONLY, ALIGN=2

                  LCD_DrawBitmap PROC
;;;149    */
;;;150    void LCD_DrawBitmap(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;151                           int BitsPerPixel, int BytesPerLine,
;;;152                           const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;153    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4605              MOV      r5,r0
000008  4690              MOV      r8,r2
00000a  461f              MOV      r7,r3
00000c  f8dda060          LDR      r10,[sp,#0x60]
000010  f8dd9068          LDR      r9,[sp,#0x68]
000014  9e1c              LDR      r6,[sp,#0x70]
;;;154      U8  Data = 0;
000016  2000              MOVS     r0,#0
000018  900a              STR      r0,[sp,#0x28]
;;;155      int x1, y1;
;;;156      /* Handle rotation if necessary */
;;;157      #if GUI_SUPPORT_ROTATION
;;;158      if (GUI_pLCD_APIList) {
00001a  4886              LDR      r0,|L2.564|
00001c  6800              LDR      r0,[r0,#0]  ; GUI_pLCD_APIList
00001e  b198              CBZ      r0,|L2.72|
;;;159        GUI_pLCD_APIList->pfDrawBitmap(x0, y0, xsize, ysize, xMul, yMul, BitsPerPixel, BytesPerLine, pPixel, pTrans);
000020  991b              LDR      r1,[sp,#0x6c]
000022  981d              LDR      r0,[sp,#0x74]
000024  e9cd9102          STRD     r9,r1,[sp,#8]
000028  e9cd6004          STRD     r6,r0,[sp,#0x10]
00002c  9819              LDR      r0,[sp,#0x64]
00002e  e9cda000          STRD     r10,r0,[sp,#0]
000032  4880              LDR      r0,|L2.564|
000034  6800              LDR      r0,[r0,#0]  ; GUI_pLCD_APIList
000036  463b              MOV      r3,r7
000038  4642              MOV      r2,r8
00003a  6804              LDR      r4,[r0,#0]
00003c  4628              MOV      r0,r5
00003e  990c              LDR      r1,[sp,#0x30]
000040  47a0              BLX      r4
                  |L2.66|
;;;160        return;
;;;161      }
;;;162      #endif
;;;163      /* Handle the optional Y-magnification */
;;;164      y1 = y0 + ysize - 1;
;;;165      x1 = x0 + xsize - 1;
;;;166    /*  Handle BITMAP without magnification */
;;;167      if ((xMul | yMul) == 1) {
;;;168        int Diff;
;;;169        /*  Clip y0 (top) */
;;;170        Diff = GUI_Context.ClipRect.y0 - y0;
;;;171        if (Diff > 0) {
;;;172          ysize -= Diff;
;;;173          if (ysize <= 0) {
;;;174    		    return;
;;;175          }
;;;176          y0     = GUI_Context.ClipRect.y0;
;;;177          #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;178            pPixel += (U32)     Diff * (U32)     BytesPerLine;
;;;179          #else
;;;180            pPixel += (unsigned)Diff * (unsigned)BytesPerLine;
;;;181          #endif
;;;182        }
;;;183        /*  Clip y1 (bottom) */
;;;184        Diff = y1 - GUI_Context.ClipRect.y1;
;;;185        if (Diff > 0) {
;;;186          ysize -= Diff;
;;;187          if (ysize <= 0) {
;;;188    		    return;
;;;189          }
;;;190        }
;;;191        /*        Clip right side    */
;;;192        Diff = x1 - GUI_Context.ClipRect.x1;
;;;193        if (Diff > 0) {
;;;194          xsize -= Diff;
;;;195        }
;;;196        /*        Clip left side ... (The difficult side ...)    */
;;;197        Diff = 0;
;;;198        if (x0 < GUI_Context.ClipRect.x0) {
;;;199          Diff = GUI_Context.ClipRect.x0 - x0;
;;;200    			xsize -= Diff;
;;;201    			switch (BitsPerPixel) {
;;;202    			case 1:
;;;203      			pPixel+= (Diff>>3); x0 += (Diff>>3)<<3; Diff &=7;
;;;204    				break;
;;;205    			case 2:
;;;206    	  		pPixel+= (Diff>>2); x0 += (Diff>>2)<<2; Diff &=3;
;;;207    				break;
;;;208    			case 4:
;;;209    				pPixel+= (Diff>>1); x0 += (Diff>>1)<<1; Diff &=1;
;;;210    				break;
;;;211    			case 8:
;;;212    				pPixel+= Diff;      x0 += Diff; Diff=0;
;;;213    				break;
;;;214    			case 16:
;;;215    				pPixel+= (Diff<<1); x0 += Diff; Diff=0;
;;;216    				break;
;;;217    			}
;;;218        }
;;;219        if (xsize <=0) {
;;;220    		  return;
;;;221        }
;;;222        LCDDEV_L0_DrawBitmap   (x0,y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;223      } else {
;;;224        /**** Handle BITMAP with magnification ***/
;;;225        int x,y;
;;;226        int yi;
;;;227        int Shift = 8-BitsPerPixel;
;;;228        for (y=y0, yi=0; yi<ysize; yi++, y+= yMul, pPixel+=BytesPerLine) {
;;;229          int yMax = y+yMul-1;
;;;230          /* Draw if within clip area (Optimization ... "if" is not required !) */
;;;231          if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;232            int BitsLeft =0;
;;;233            int xi;
;;;234            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;235            for (x=x0, xi=0; xi<xsize; xi++, x+=xMul) {
;;;236              U8  Index;
;;;237              if (!BitsLeft) {
;;;238                Data = *pDataLine++;
;;;239                BitsLeft =8;
;;;240              }
;;;241              Index = Data>>Shift;
;;;242              Data    <<= BitsPerPixel;
;;;243              BitsLeft -= BitsPerPixel;
;;;244              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) ==0)) {
;;;245                LCD_PIXELINDEX  OldColor = LCD_COLORINDEX;
;;;246                if (pTrans) {
;;;247                  LCD_COLORINDEX = *(pTrans+Index);
;;;248                } else {
;;;249                  LCD_COLORINDEX = Index;
;;;250                }
;;;251                LCD_FillRect(x,y, x+xMul-1, yMax);
;;;252                LCD_COLORINDEX = OldColor;
;;;253              }
;;;254            }
;;;255          }
;;;256        }
;;;257      }
;;;258    }
000042  b00f              ADD      sp,sp,#0x3c
000044  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.72|
000048  980c              LDR      r0,[sp,#0x30]         ;164
00004a  4438              ADD      r0,r0,r7              ;164
00004c  1e40              SUBS     r0,r0,#1              ;164
00004e  9008              STR      r0,[sp,#0x20]         ;164
000050  eb050008          ADD      r0,r5,r8              ;165
000054  1e40              SUBS     r0,r0,#1              ;165
000056  9009              STR      r0,[sp,#0x24]         ;165
000058  9819              LDR      r0,[sp,#0x64]         ;167
00005a  ea4a0000          ORR      r0,r10,r0             ;167
00005e  2801              CMP      r0,#1                 ;167
000060  d17b              BNE      |L2.346|
000062  4875              LDR      r0,|L2.568|
000064  f9b0100a          LDRSH    r1,[r0,#0xa]          ;170
000068  980c              LDR      r0,[sp,#0x30]         ;170
00006a  1a0c              SUBS     r4,r1,r0              ;170
00006c  2c00              CMP      r4,#0                 ;171
00006e  dd0a              BLE      |L2.134|
000070  1b3f              SUBS     r7,r7,r4              ;172
000072  2f00              CMP      r7,#0                 ;173
000074  dc00              BGT      |L2.120|
000076  e7e4              B        |L2.66|
                  |L2.120|
000078  486f              LDR      r0,|L2.568|
00007a  f9b0000a          LDRSH    r0,[r0,#0xa]          ;176
00007e  900c              STR      r0,[sp,#0x30]         ;176
000080  981b              LDR      r0,[sp,#0x6c]         ;180
000082  fb046600          MLA      r6,r4,r0,r6           ;180
                  |L2.134|
000086  486c              LDR      r0,|L2.568|
000088  f9b0100e          LDRSH    r1,[r0,#0xe]          ;184
00008c  9808              LDR      r0,[sp,#0x20]         ;184
00008e  1a44              SUBS     r4,r0,r1              ;184
000090  2c00              CMP      r4,#0                 ;185
000092  dd03              BLE      |L2.156|
000094  1b3f              SUBS     r7,r7,r4              ;186
000096  2f00              CMP      r7,#0                 ;187
000098  dc00              BGT      |L2.156|
00009a  e7d2              B        |L2.66|
                  |L2.156|
00009c  4866              LDR      r0,|L2.568|
00009e  f9b0100c          LDRSH    r1,[r0,#0xc]          ;192
0000a2  9809              LDR      r0,[sp,#0x24]         ;192
0000a4  1a44              SUBS     r4,r0,r1              ;192
0000a6  2c00              CMP      r4,#0                 ;193
0000a8  dd01              BLE      |L2.174|
0000aa  eba80804          SUB      r8,r8,r4              ;194
                  |L2.174|
0000ae  2400              MOVS     r4,#0                 ;197
0000b0  4861              LDR      r0,|L2.568|
0000b2  f9b00008          LDRSH    r0,[r0,#8]            ;198  ; GUI_Context
0000b6  42a8              CMP      r0,r5                 ;198
0000b8  dd39              BLE      |L2.302|
0000ba  485f              LDR      r0,|L2.568|
0000bc  f9b00008          LDRSH    r0,[r0,#8]            ;199  ; GUI_Context
0000c0  1b44              SUBS     r4,r0,r5              ;199
0000c2  eba80804          SUB      r8,r8,r4              ;200
0000c6  f1b90f04          CMP      r9,#4                 ;201
0000ca  d01e              BEQ      |L2.266|
0000cc  dc06              BGT      |L2.220|
0000ce  f1b90f01          CMP      r9,#1                 ;201
0000d2  d00a              BEQ      |L2.234|
0000d4  f1b90f02          CMP      r9,#2                 ;201
0000d8  d128              BNE      |L2.300|
0000da  e00e              B        |L2.250|
                  |L2.220|
0000dc  f1b90f08          CMP      r9,#8                 ;201
0000e0  d01b              BEQ      |L2.282|
0000e2  f1b90f10          CMP      r9,#0x10              ;201
0000e6  d121              BNE      |L2.300|
0000e8  e01b              B        |L2.290|
                  |L2.234|
0000ea  eb0606e4          ADD      r6,r6,r4,ASR #3       ;203
0000ee  10e0              ASRS     r0,r4,#3              ;203
0000f0  eb0505c0          ADD      r5,r5,r0,LSL #3       ;203
0000f4  f0040407          AND      r4,r4,#7              ;203
0000f8  e018              B        |L2.300|
                  |L2.250|
0000fa  eb0606a4          ADD      r6,r6,r4,ASR #2       ;206
0000fe  10a0              ASRS     r0,r4,#2              ;206
000100  eb050580          ADD      r5,r5,r0,LSL #2       ;206
000104  f0040403          AND      r4,r4,#3              ;206
000108  e010              B        |L2.300|
                  |L2.266|
00010a  eb060664          ADD      r6,r6,r4,ASR #1       ;209
00010e  1060              ASRS     r0,r4,#1              ;209
000110  eb050540          ADD      r5,r5,r0,LSL #1       ;209
000114  f0040401          AND      r4,r4,#1              ;209
000118  e008              B        |L2.300|
                  |L2.282|
00011a  4426              ADD      r6,r6,r4              ;212
00011c  4425              ADD      r5,r5,r4              ;212
00011e  2400              MOVS     r4,#0                 ;212
000120  e004              B        |L2.300|
                  |L2.290|
000122  eb060644          ADD      r6,r6,r4,LSL #1       ;215
000126  4425              ADD      r5,r5,r4              ;215
000128  2400              MOVS     r4,#0                 ;215
00012a  bf00              NOP                            ;216
                  |L2.300|
00012c  bf00              NOP                            ;204
                  |L2.302|
00012e  f1b80f00          CMP      r8,#0                 ;219
000132  dc00              BGT      |L2.310|
000134  e785              B        |L2.66|
                  |L2.310|
000136  991b              LDR      r1,[sp,#0x6c]         ;222
000138  981d              LDR      r0,[sp,#0x74]         ;222
00013a  e9cd9100          STRD     r9,r1,[sp,#0]         ;222
00013e  e9cd6402          STRD     r6,r4,[sp,#8]         ;222
000142  9004              STR      r0,[sp,#0x10]         ;222
000144  483c              LDR      r0,|L2.568|
000146  6cc0              LDR      r0,[r0,#0x4c]         ;222  ; GUI_Context
000148  463b              MOV      r3,r7                 ;222
00014a  4642              MOV      r2,r8                 ;222
00014c  f8d0c00c          LDR      r12,[r0,#0xc]         ;222
000150  4628              MOV      r0,r5                 ;222
000152  990c              LDR      r1,[sp,#0x30]         ;222
000154  47e0              BLX      r12                   ;222
000156  e06a              B        |L2.558|
000158  e7ff              B        |L2.346|
                  |L2.346|
00015a  f1c90008          RSB      r0,r9,#8              ;227
00015e  9005              STR      r0,[sp,#0x14]         ;227
000160  9c0c              LDR      r4,[sp,#0x30]         ;228
000162  2000              MOVS     r0,#0                 ;228
000164  9006              STR      r0,[sp,#0x18]         ;228
000166  e05e              B        |L2.550|
                  |L2.360|
000168  9819              LDR      r0,[sp,#0x64]         ;229
00016a  4420              ADD      r0,r0,r4              ;229
00016c  1e40              SUBS     r0,r0,#1              ;229
00016e  9004              STR      r0,[sp,#0x10]         ;229
000170  4831              LDR      r0,|L2.568|
000172  f9b0100a          LDRSH    r1,[r0,#0xa]          ;231
000176  9804              LDR      r0,[sp,#0x10]         ;231
000178  4281              CMP      r1,r0                 ;231
00017a  dc4d              BGT      |L2.536|
00017c  482e              LDR      r0,|L2.568|
00017e  f9b0000e          LDRSH    r0,[r0,#0xe]          ;231
000182  42a0              CMP      r0,r4                 ;231
000184  db48              BLT      |L2.536|
000186  2000              MOVS     r0,#0                 ;232
000188  9003              STR      r0,[sp,#0xc]          ;232
00018a  9601              STR      r6,[sp,#4]            ;234
00018c  9507              STR      r5,[sp,#0x1c]         ;235
00018e  9002              STR      r0,[sp,#8]            ;235
000190  e03e              B        |L2.528|
                  |L2.402|
000192  9803              LDR      r0,[sp,#0xc]          ;237
000194  b938              CBNZ     r0,|L2.422|
000196  9801              LDR      r0,[sp,#4]            ;238
000198  7800              LDRB     r0,[r0,#0]            ;238
00019a  900a              STR      r0,[sp,#0x28]         ;238
00019c  9801              LDR      r0,[sp,#4]            ;238
00019e  1c40              ADDS     r0,r0,#1              ;238
0001a0  9001              STR      r0,[sp,#4]            ;238
0001a2  2008              MOVS     r0,#8                 ;239
0001a4  9003              STR      r0,[sp,#0xc]          ;239
                  |L2.422|
0001a6  9905              LDR      r1,[sp,#0x14]         ;241
0001a8  980a              LDR      r0,[sp,#0x28]         ;241
0001aa  fa40fb01          ASR      r11,r0,r1             ;241
0001ae  980a              LDR      r0,[sp,#0x28]         ;242
0001b0  fa00f009          LSL      r0,r0,r9              ;242
0001b4  b2c0              UXTB     r0,r0                 ;242
0001b6  900a              STR      r0,[sp,#0x28]         ;242
0001b8  9803              LDR      r0,[sp,#0xc]          ;243
0001ba  eba00009          SUB      r0,r0,r9              ;243
0001be  9003              STR      r0,[sp,#0xc]          ;243
0001c0  f1bb0f00          CMP      r11,#0                ;244
0001c4  d104              BNE      |L2.464|
0001c6  481c              LDR      r0,|L2.568|
0001c8  7c00              LDRB     r0,[r0,#0x10]         ;244  ; GUI_Context
0001ca  f0100f02          TST      r0,#2                 ;244
0001ce  d119              BNE      |L2.516|
                  |L2.464|
0001d0  4819              LDR      r0,|L2.568|
0001d2  8840              LDRH     r0,[r0,#2]            ;245  ; GUI_Context
0001d4  9000              STR      r0,[sp,#0]            ;245
0001d6  981d              LDR      r0,[sp,#0x74]         ;246
0001d8  b128              CBZ      r0,|L2.486|
0001da  981d              LDR      r0,[sp,#0x74]         ;247
0001dc  f830001b          LDRH     r0,[r0,r11,LSL #1]    ;247
0001e0  4915              LDR      r1,|L2.568|
0001e2  8048              STRH     r0,[r1,#2]            ;247
0001e4  e002              B        |L2.492|
                  |L2.486|
0001e6  4814              LDR      r0,|L2.568|
0001e8  f8a0b002          STRH     r11,[r0,#2]           ;249
                  |L2.492|
0001ec  9807              LDR      r0,[sp,#0x1c]         ;251
0001ee  4450              ADD      r0,r0,r10             ;251
0001f0  1e42              SUBS     r2,r0,#1              ;251
0001f2  4621              MOV      r1,r4                 ;251
0001f4  9b04              LDR      r3,[sp,#0x10]         ;251
0001f6  9807              LDR      r0,[sp,#0x1c]         ;251
0001f8  f7fffffe          BL       LCD_FillRect
0001fc  490e              LDR      r1,|L2.568|
0001fe  9800              LDR      r0,[sp,#0]            ;252
000200  8048              STRH     r0,[r1,#2]            ;252
000202  bf00              NOP                            ;253
                  |L2.516|
000204  9802              LDR      r0,[sp,#8]            ;235
000206  1c40              ADDS     r0,r0,#1              ;235
000208  9002              STR      r0,[sp,#8]            ;235
00020a  9807              LDR      r0,[sp,#0x1c]         ;235
00020c  4450              ADD      r0,r0,r10             ;235
00020e  9007              STR      r0,[sp,#0x1c]         ;235
                  |L2.528|
000210  9802              LDR      r0,[sp,#8]            ;235
000212  4540              CMP      r0,r8                 ;235
000214  dbbd              BLT      |L2.402|
000216  bf00              NOP                            ;255
                  |L2.536|
000218  9806              LDR      r0,[sp,#0x18]         ;228
00021a  1c40              ADDS     r0,r0,#1              ;228
00021c  9006              STR      r0,[sp,#0x18]         ;228
00021e  9819              LDR      r0,[sp,#0x64]         ;228
000220  4404              ADD      r4,r4,r0              ;228
000222  981b              LDR      r0,[sp,#0x6c]         ;228
000224  4406              ADD      r6,r6,r0              ;228
                  |L2.550|
000226  9806              LDR      r0,[sp,#0x18]         ;228
000228  42b8              CMP      r0,r7                 ;228
00022a  db9d              BLT      |L2.360|
00022c  bf00              NOP                            ;257
                  |L2.558|
00022e  bf00              NOP      
000230  e707              B        |L2.66|
;;;259    
                          ENDP

000232  0000              DCW      0x0000
                  |L2.564|
                          DCD      GUI_pLCD_APIList
                  |L2.568|
                          DCD      GUI_Context

                          AREA ||i.LCD_DrawHLine||, CODE, READONLY, ALIGN=2

                  LCD_DrawHLine PROC
;;;119    */
;;;120    void LCD_DrawHLine(int x0, int y,  int x1) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;121      /* Perform clipping and check if there is something to do */
;;;122      RETURN_IF_Y_OUT();
000008  4813              LDR      r0,|L3.88|
00000a  f9b0000a          LDRSH    r0,[r0,#0xa]
00000e  42a8              CMP      r0,r5
000010  dd00              BLE      |L3.20|
                  |L3.18|
;;;123      CLIP_X();
;;;124      if (x1<x0)
;;;125        return;
;;;126      /* Call driver to draw */
;;;127      LCDDEV_L0_DrawHLine(x0, y, x1);
;;;128    }
000012  bd70              POP      {r4-r6,pc}
                  |L3.20|
000014  4810              LDR      r0,|L3.88|
000016  f9b0000e          LDRSH    r0,[r0,#0xe]          ;122
00001a  42a8              CMP      r0,r5                 ;122
00001c  da00              BGE      |L3.32|
00001e  e7f8              B        |L3.18|
                  |L3.32|
000020  480d              LDR      r0,|L3.88|
000022  f9b00008          LDRSH    r0,[r0,#8]            ;123  ; GUI_Context
000026  42a0              CMP      r0,r4                 ;123
000028  dd02              BLE      |L3.48|
00002a  480b              LDR      r0,|L3.88|
00002c  f9b04008          LDRSH    r4,[r0,#8]            ;123  ; GUI_Context
                  |L3.48|
000030  4809              LDR      r0,|L3.88|
000032  f9b0000c          LDRSH    r0,[r0,#0xc]          ;123
000036  42b0              CMP      r0,r6                 ;123
000038  da02              BGE      |L3.64|
00003a  4807              LDR      r0,|L3.88|
00003c  f9b0600c          LDRSH    r6,[r0,#0xc]          ;123
                  |L3.64|
000040  42a6              CMP      r6,r4                 ;124
000042  da00              BGE      |L3.70|
000044  e7e5              B        |L3.18|
                  |L3.70|
000046  4804              LDR      r0,|L3.88|
000048  6cc0              LDR      r0,[r0,#0x4c]         ;127  ; GUI_Context
00004a  4632              MOV      r2,r6                 ;127
00004c  4629              MOV      r1,r5                 ;127
00004e  6903              LDR      r3,[r0,#0x10]         ;127
000050  4620              MOV      r0,r4                 ;127
000052  4798              BLX      r3                    ;127
000054  bf00              NOP      
000056  e7dc              B        |L3.18|
;;;129    
                          ENDP

                  |L3.88|
                          DCD      GUI_Context

                          AREA ||i.LCD_DrawPixel||, CODE, READONLY, ALIGN=2

                  LCD_DrawPixel PROC
;;;105    */
;;;106    void LCD_DrawPixel(int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;107      RETURN_IF_Y_OUT();
000006  4816              LDR      r0,|L4.96|
000008  f9b0000a          LDRSH    r0,[r0,#0xa]
00000c  42a8              CMP      r0,r5
00000e  dd00              BLE      |L4.18|
                  |L4.16|
;;;108      RETURN_IF_X_OUT();
;;;109      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
;;;110        LCDDEV_L0_XorPixel(x, y);
;;;111      } else {
;;;112        LCDDEV_L0_SetPixelIndex(x, y, LCD_COLORINDEX);
;;;113      }
;;;114    }
000010  bd70              POP      {r4-r6,pc}
                  |L4.18|
000012  4813              LDR      r0,|L4.96|
000014  f9b0000e          LDRSH    r0,[r0,#0xe]          ;107
000018  42a8              CMP      r0,r5                 ;107
00001a  da00              BGE      |L4.30|
00001c  e7f8              B        |L4.16|
                  |L4.30|
00001e  4810              LDR      r0,|L4.96|
000020  f9b00008          LDRSH    r0,[r0,#8]            ;108  ; GUI_Context
000024  42a0              CMP      r0,r4                 ;108
000026  dd00              BLE      |L4.42|
000028  e7f2              B        |L4.16|
                  |L4.42|
00002a  480d              LDR      r0,|L4.96|
00002c  f9b0000c          LDRSH    r0,[r0,#0xc]          ;108
000030  42a0              CMP      r0,r4                 ;108
000032  da00              BGE      |L4.54|
000034  e7ec              B        |L4.16|
                  |L4.54|
000036  480a              LDR      r0,|L4.96|
000038  7c00              LDRB     r0,[r0,#0x10]         ;109  ; GUI_Context
00003a  f0100f01          TST      r0,#1                 ;109
00003e  d006              BEQ      |L4.78|
000040  4807              LDR      r0,|L4.96|
000042  6cc0              LDR      r0,[r0,#0x4c]         ;110  ; GUI_Context
000044  4629              MOV      r1,r5                 ;110
000046  6a82              LDR      r2,[r0,#0x28]         ;110
000048  4620              MOV      r0,r4                 ;110
00004a  4790              BLX      r2                    ;110
00004c  e006              B        |L4.92|
                  |L4.78|
00004e  4804              LDR      r0,|L4.96|
000050  8842              LDRH     r2,[r0,#2]            ;112  ; GUI_Context
000052  6cc0              LDR      r0,[r0,#0x4c]         ;112  ; GUI_Context
000054  4629              MOV      r1,r5                 ;112
000056  6a43              LDR      r3,[r0,#0x24]         ;112
000058  4620              MOV      r0,r4                 ;112
00005a  4798              BLX      r3                    ;112
                  |L4.92|
00005c  bf00              NOP      
00005e  e7d7              B        |L4.16|
;;;115    
                          ENDP

                  |L4.96|
                          DCD      GUI_Context

                          AREA ||i.LCD_FillRect||, CODE, READONLY, ALIGN=2

                  LCD_FillRect PROC
;;;133    */
;;;134    void LCD_FillRect(int x0, int y0, int x1, int y1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;135      /* Perform clipping and check if there is something to do */
;;;136      CLIP_X();
00000c  4818              LDR      r0,|L5.112|
00000e  f9b00008          LDRSH    r0,[r0,#8]  ; GUI_Context
000012  42a0              CMP      r0,r4
000014  dd02              BLE      |L5.28|
000016  4816              LDR      r0,|L5.112|
000018  f9b04008          LDRSH    r4,[r0,#8]  ; GUI_Context
                  |L5.28|
00001c  4814              LDR      r0,|L5.112|
00001e  f9b0000c          LDRSH    r0,[r0,#0xc]
000022  42b0              CMP      r0,r6
000024  da02              BGE      |L5.44|
000026  4812              LDR      r0,|L5.112|
000028  f9b0600c          LDRSH    r6,[r0,#0xc]
                  |L5.44|
;;;137      if (x1<x0)
00002c  42a6              CMP      r6,r4
00002e  da01              BGE      |L5.52|
                  |L5.48|
;;;138        return;
;;;139      CLIP_Y();
;;;140      if (y1<y0)
;;;141        return;
;;;142      /* Call driver to draw */
;;;143      LCDDEV_L0_FillRect(x0,y0,x1,y1);
;;;144    }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L5.52|
000034  480e              LDR      r0,|L5.112|
000036  f9b0000a          LDRSH    r0,[r0,#0xa]          ;139
00003a  42a8              CMP      r0,r5                 ;139
00003c  dd02              BLE      |L5.68|
00003e  480c              LDR      r0,|L5.112|
000040  f9b0500a          LDRSH    r5,[r0,#0xa]          ;139
                  |L5.68|
000044  480a              LDR      r0,|L5.112|
000046  f9b0000e          LDRSH    r0,[r0,#0xe]          ;139
00004a  42b8              CMP      r0,r7                 ;139
00004c  da02              BGE      |L5.84|
00004e  4808              LDR      r0,|L5.112|
000050  f9b0700e          LDRSH    r7,[r0,#0xe]          ;139
                  |L5.84|
000054  42af              CMP      r7,r5                 ;140
000056  da00              BGE      |L5.90|
000058  e7ea              B        |L5.48|
                  |L5.90|
00005a  4805              LDR      r0,|L5.112|
00005c  6cc0              LDR      r0,[r0,#0x4c]         ;143  ; GUI_Context
00005e  463b              MOV      r3,r7                 ;143
000060  4632              MOV      r2,r6                 ;143
000062  4629              MOV      r1,r5                 ;143
000064  f8d0c018          LDR      r12,[r0,#0x18]        ;143
000068  4620              MOV      r0,r4                 ;143
00006a  47e0              BLX      r12                   ;143
00006c  bf00              NOP      
00006e  e7df              B        |L5.48|
;;;145    
                          ENDP

                  |L5.112|
                          DCD      GUI_Context

                          AREA ||i.LCD_Index2Color||, CODE, READONLY, ALIGN=2

                  LCD_Index2Color PROC
;;;322    */
;;;323    LCD_COLOR LCD_Index2Color(int Index) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;324      return LCDDEV_L0_Index2Color(Index);
000004  4802              LDR      r0,|L6.16|
000006  6cc0              LDR      r0,[r0,#0x4c]  ; GUI_Context
000008  6841              LDR      r1,[r0,#4]
00000a  4620              MOV      r0,r4
00000c  4788              BLX      r1
;;;325    }
00000e  bd10              POP      {r4,pc}
;;;326    
                          ENDP

                  |L6.16|
                          DCD      GUI_Context

                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=1

                  LCD_Init PROC
;;;271    */
;;;272    int LCD_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;273      int r = 0;
000002  2400              MOVS     r4,#0
;;;274      GUI_DEBUG_LOG("\nLCD_Init...");
;;;275      LCD_SetClipRectMax();
000004  f7fffffe          BL       LCD_SetClipRectMax
;;;276      r |= LCD_L0_Init();
000008  f7fffffe          BL       LCD_L0_Init
00000c  4304              ORRS     r4,r4,r0
;;;277      #if GUI_NUM_LAYERS > 1
;;;278        r |= LCD_L0_1_Init();
;;;279      #endif
;;;280      #if GUI_NUM_LAYERS > 2
;;;281        r |= LCD_L0_2_Init();
;;;282      #endif
;;;283      #if GUI_NUM_LAYERS > 3
;;;284        r |= LCD_L0_3_Init();
;;;285      #endif
;;;286      #if GUI_NUM_LAYERS > 4
;;;287        r |= LCD_L0_4_Init();
;;;288      #endif
;;;289      LCD_InitLUT();
00000e  f7fffffe          BL       LCD_InitLUT
;;;290      {
;;;291      #if GUI_NUM_LAYERS > 1
;;;292        int i;
;;;293        for (i = GUI_NUM_LAYERS - 1; i >= 0; i--) {
;;;294          GUI_SelectLayer(i);
;;;295      #else
;;;296        {
;;;297      #endif
;;;298          #if (GUI_DEFAULT_BKCOLOR != GUI_INVALID_COLOR)
;;;299            /* Clear video memory */
;;;300            LCD_SetDrawMode(GUI_DRAWMODE_REV);
000012  2004              MOVS     r0,#4
000014  f7fffffe          BL       LCD_SetDrawMode
;;;301            LCD_FillRect(0,0, GUI_XMAX, GUI_YMAX);
000018  f64073ff          MOV      r3,#0xfff
00001c  461a              MOV      r2,r3
00001e  2100              MOVS     r1,#0
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       LCD_FillRect
;;;302            LCD_SetDrawMode(0);
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       LCD_SetDrawMode
;;;303          #endif
;;;304        }
;;;305      }
;;;306      /* Switch LCD on */
;;;307      LCD_On();
00002c  f7fffffe          BL       LCD_L0_On
;;;308      return r;
000030  4620              MOV      r0,r4
;;;309    }
000032  bd10              POP      {r4,pc}
;;;310    
                          ENDP


                          AREA ||i.LCD_SetBkColor||, CODE, READONLY, ALIGN=2

                  LCD_SetBkColor PROC
;;;330    */
;;;331    void LCD_SetBkColor(GUI_COLOR color) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;332      if (GUI_Context.BkColor != color) {
000004  4806              LDR      r0,|L8.32|
000006  6b80              LDR      r0,[r0,#0x38]  ; GUI_Context
000008  42a0              CMP      r0,r4
00000a  d007              BEQ      |L8.28|
;;;333        GUI_Context.BkColor = color;
00000c  4804              LDR      r0,|L8.32|
00000e  6384              STR      r4,[r0,#0x38]  ; GUI_Context
;;;334        LCD_SetBkColorIndex(LCD_Color2Index(color));
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       LCD_Color2Index
000016  4605              MOV      r5,r0
000018  f7fffffe          BL       LCD_SetBkColorIndex
                  |L8.28|
;;;335      }
;;;336    }
00001c  bd70              POP      {r4-r6,pc}
;;;337    
                          ENDP

00001e  0000              DCW      0x0000
                  |L8.32|
                          DCD      GUI_Context

                          AREA ||i.LCD_SetBkColorIndex||, CODE, READONLY, ALIGN=2

                  LCD_SetBkColorIndex PROC
;;;82     */
;;;83     void LCD_SetBkColorIndex(int Index) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;84       LCD_ACOLORINDEX[_GetColorIndex(0)] = Index;
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       _GetColorIndex
00000a  4902              LDR      r1,|L9.20|
00000c  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;85     }
000010  bd10              POP      {r4,pc}
;;;86     
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      GUI_Context

                          AREA ||i.LCD_SetClipRectMax||, CODE, READONLY, ALIGN=2

                  LCD_SetClipRectMax PROC
;;;263    */
;;;264    void LCD_SetClipRectMax(void) {
000000  b510              PUSH     {r4,lr}
;;;265      LCDDEV_L0_GetRect(&GUI_Context.ClipRect);
000002  4803              LDR      r0,|L10.16|
000004  6cc0              LDR      r0,[r0,#0x4c]  ; GUI_Context
000006  6a01              LDR      r1,[r0,#0x20]
000008  4801              LDR      r0,|L10.16|
00000a  3008              ADDS     r0,r0,#8
00000c  4788              BLX      r1
;;;266    }
00000e  bd10              POP      {r4,pc}
;;;267    
                          ENDP

                  |L10.16|
                          DCD      GUI_Context

                          AREA ||i.LCD_SetColor||, CODE, READONLY, ALIGN=2

                  LCD_SetColor PROC
;;;341    */
;;;342    void LCD_SetColor(GUI_COLOR color) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;343      if (GUI_Context.Color != color) {
000004  4806              LDR      r0,|L11.32|
000006  6b40              LDR      r0,[r0,#0x34]  ; GUI_Context
000008  42a0              CMP      r0,r4
00000a  d007              BEQ      |L11.28|
;;;344        GUI_Context.Color = color;
00000c  4804              LDR      r0,|L11.32|
00000e  6344              STR      r4,[r0,#0x34]  ; GUI_Context
;;;345        LCD_SetColorIndex(LCD_Color2Index(color));
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       LCD_Color2Index
000016  4605              MOV      r5,r0
000018  f7fffffe          BL       LCD_SetColorIndex
                  |L11.28|
;;;346      }
;;;347    }
00001c  bd70              POP      {r4-r6,pc}
;;;348    
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
                          DCD      GUI_Context

                          AREA ||i.LCD_SetColorIndex||, CODE, READONLY, ALIGN=2

                  LCD_SetColorIndex PROC
;;;74     */
;;;75     void LCD_SetColorIndex(int Index) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;76       LCD_ACOLORINDEX[_GetColorIndex(1)] = Index;
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       _GetColorIndex
00000a  4902              LDR      r1,|L12.20|
00000c  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;77     }
000010  bd10              POP      {r4,pc}
;;;78     
                          ENDP

000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      GUI_Context

                          AREA ||i.LCD_SetDrawMode||, CODE, READONLY, ALIGN=2

                  LCD_SetDrawMode PROC
;;;90     */
;;;91     LCD_DRAWMODE LCD_SetDrawMode(LCD_DRAWMODE dm) {
000000  b510              PUSH     {r4,lr}
000002  4601              MOV      r1,r0
;;;92       LCD_DRAWMODE OldDM = GUI_Context.DrawMode;
000004  4a08              LDR      r2,|L13.40|
000006  7c10              LDRB     r0,[r2,#0x10]  ; GUI_Context
;;;93       if ((GUI_Context.DrawMode^dm) & LCD_DRAWMODE_REV) {
000008  7c12              LDRB     r2,[r2,#0x10]  ; GUI_Context
00000a  404a              EORS     r2,r2,r1
00000c  f0120f04          TST      r2,#4
000010  d007              BEQ      |L13.34|
;;;94         LCD_PIXELINDEX temp = LCD_BKCOLORINDEX;
000012  4b05              LDR      r3,|L13.40|
000014  881a              LDRH     r2,[r3,#0]  ; GUI_Context
;;;95         LCD_BKCOLORINDEX    = LCD_COLORINDEX;
000016  885b              LDRH     r3,[r3,#2]  ; GUI_Context
000018  4c03              LDR      r4,|L13.40|
00001a  8023              STRH     r3,[r4,#0]
;;;96         LCD_COLORINDEX = temp;
00001c  4623              MOV      r3,r4
00001e  805a              STRH     r2,[r3,#2]
;;;97       }
000020  bf00              NOP      
                  |L13.34|
;;;98       GUI_Context.DrawMode = dm;
000022  4b01              LDR      r3,|L13.40|
000024  7419              STRB     r1,[r3,#0x10]
;;;99       return OldDM;
;;;100    }
000026  bd10              POP      {r4,pc}
;;;101    
                          ENDP

                  |L13.40|
                          DCD      GUI_Context

                          AREA ||i._GetColorIndex||, CODE, READONLY, ALIGN=2

                  _GetColorIndex PROC
;;;60     */
;;;61     static int _GetColorIndex(int i)  /* i is 0 or 1 */ {
000000  4601              MOV      r1,r0
;;;62       return  (GUI_Context.DrawMode & LCD_DRAWMODE_REV) ? i-1 : i;
000002  4804              LDR      r0,|L14.20|
000004  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000006  f0100f04          TST      r0,#4
00000a  d001              BEQ      |L14.16|
00000c  1e48              SUBS     r0,r1,#1
                  |L14.14|
;;;63     }
00000e  4770              BX       lr
                  |L14.16|
000010  4608              MOV      r0,r1                 ;62
000012  e7fc              B        |L14.14|
;;;64     
                          ENDP

                  |L14.20|
                          DCD      GUI_Context
