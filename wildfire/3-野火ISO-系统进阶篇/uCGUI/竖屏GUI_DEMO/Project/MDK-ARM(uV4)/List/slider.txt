; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\slider.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\slider.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Widget\SLIDER.c]
                          THUMB

                          AREA ||i.SLIDER_Callback||, CODE, READONLY, ALIGN=1

                  SLIDER_Callback PROC
;;;255    */
;;;256    void SLIDER_Callback (WM_MESSAGE *pMsg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;257      SLIDER_Handle hObj;
;;;258      SLIDER_Obj* pObj;
;;;259      hObj = pMsg->hWin;
000004  f9b45004          LDRSH    r5,[r4,#4]
;;;260      pObj = (SLIDER_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       GUI_ALLOC_h2p
00000e  4606              MOV      r6,r0
;;;261      /* Let widget handle the standard messages */
;;;262      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       WIDGET_HandleActive
000018  b900              CBNZ     r0,|L1.28|
                  |L1.26|
;;;263        return;
;;;264      }
;;;265      switch (pMsg->MsgId) {
;;;266      case WM_PAINT:
;;;267        GUI_DEBUG_LOG("SLIDER: _Callback(WM_PAINT)\n");
;;;268        _Paint(pObj, hObj);
;;;269        return;
;;;270      case WM_TOUCH:
;;;271        _OnTouch(hObj, pObj, pMsg);
;;;272        break;
;;;273      case WM_KEY:
;;;274        _OnKey(hObj, pMsg);
;;;275        break;
;;;276      }
;;;277      WM_DefaultProc(pMsg);
;;;278    }
00001a  bd70              POP      {r4-r6,pc}
                  |L1.28|
00001c  6820              LDR      r0,[r4,#0]            ;265
00001e  280c              CMP      r0,#0xc               ;265
000020  d008              BEQ      |L1.52|
000022  280e              CMP      r0,#0xe               ;265
000024  d00c              BEQ      |L1.64|
000026  280f              CMP      r0,#0xf               ;265
000028  d10f              BNE      |L1.74|
00002a  4629              MOV      r1,r5                 ;268
00002c  4630              MOV      r0,r6                 ;268
00002e  f7fffffe          BL       _Paint
000032  e7f2              B        |L1.26|
                  |L1.52|
000034  4622              MOV      r2,r4                 ;271
000036  4631              MOV      r1,r6                 ;271
000038  4628              MOV      r0,r5                 ;271
00003a  f7fffffe          BL       _OnTouch
00003e  e004              B        |L1.74|
                  |L1.64|
000040  4621              MOV      r1,r4                 ;274
000042  4628              MOV      r0,r5                 ;274
000044  f7fffffe          BL       _OnKey
000048  bf00              NOP                            ;275
                  |L1.74|
00004a  bf00              NOP                            ;272
00004c  4620              MOV      r0,r4                 ;277
00004e  f7fffffe          BL       WM_DefaultProc
000052  bf00              NOP      
000054  e7e1              B        |L1.26|
;;;279    
                          ENDP


                          AREA ||i.SLIDER_CreateEx||, CODE, READONLY, ALIGN=2

                  SLIDER_CreateEx PROC
;;;293    */
;;;294    SLIDER_Handle SLIDER_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;295                                  int WinFlags, int ExFlags, int Id)
;;;296    {
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  e9dd5b13          LDRD     r5,r11,[sp,#0x4c]
;;;297      SLIDER_Handle hObj;
;;;298      /* Create the window */
;;;299      WM_LOCK();
000010  f7fffffe          BL       GUI_Lock
;;;300      #if SLIDER_SUPPORT_TRANSPARENCY
;;;301        WinFlags |= WM_CF_HASTRANS;
000014  f0450501          ORR      r5,r5,#1
;;;302      #endif
;;;303      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, SLIDER_Callback, sizeof(SLIDER_Obj) - sizeof(WM_Obj));
000018  222c              MOVS     r2,#0x2c
00001a  4b19              LDR      r3,|L2.128|
00001c  b2a8              UXTH     r0,r5
00001e  9912              LDR      r1,[sp,#0x48]
000020  e9cd3202          STRD     r3,r2,[sp,#8]
000024  e9cd1000          STRD     r1,r0,[sp,#0]
000028  4652              MOV      r2,r10
00002a  4649              MOV      r1,r9
00002c  4640              MOV      r0,r8
00002e  9b08              LDR      r3,[sp,#0x20]
000030  f7fffffe          BL       WM_CreateWindowAsChild
000034  4606              MOV      r6,r0
;;;304      if (hObj) {
000036  b1ee              CBZ      r6,|L2.116|
;;;305        SLIDER_Obj * pObj;
;;;306        U16 InitState;
;;;307        pObj = (SLIDER_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GUI_ALLOC_h2p
00003e  4604              MOV      r4,r0
;;;308        /* Handle SpecialFlags */
;;;309        InitState = WIDGET_STATE_FOCUSSABLE;
000040  2710              MOVS     r7,#0x10
;;;310        if (ExFlags & SLIDER_CF_VERTICAL) {
000042  f01b0f08          TST      r11,#8
000046  d001              BEQ      |L2.76|
;;;311          InitState |= WIDGET_CF_VERTICAL;
000048  f0470708          ORR      r7,r7,#8
                  |L2.76|
;;;312        }
;;;313        /* init widget specific variables */
;;;314        WIDGET__Init(&pObj->Widget, Id, InitState);
00004c  463a              MOV      r2,r7
00004e  4620              MOV      r0,r4
000050  9915              LDR      r1,[sp,#0x54]
000052  f7fffffe          BL       WIDGET__Init
;;;315        /* init member variables */
;;;316        SLIDER_INIT_ID(pObj);
;;;317        pObj->Props = SLIDER__DefaultProps;
000056  4a0b              LDR      r2,|L2.132|
000058  ca07              LDM      r2,{r0-r2}
00005a  e9c4120b          STRD     r1,r2,[r4,#0x2c]
00005e  62a0              STR      r0,[r4,#0x28]
;;;318        pObj->Width       = 8;
000060  2008              MOVS     r0,#8
000062  f8a40048          STRH     r0,[r4,#0x48]
;;;319        pObj->Max         = 100;
000066  2064              MOVS     r0,#0x64
000068  63a0              STR      r0,[r4,#0x38]
;;;320        pObj->Min         = 0;
00006a  2000              MOVS     r0,#0
00006c  6360              STR      r0,[r4,#0x34]
;;;321        pObj->NumTicks    = -1;
00006e  1e40              SUBS     r0,r0,#1
000070  6460              STR      r0,[r4,#0x44]
;;;322      } else {
000072  bf00              NOP      
                  |L2.116|
;;;323        GUI_DEBUG_ERROROUT_IF(hObj==0, "SLIDER_Create failed")
;;;324      }
;;;325      WM_UNLOCK();
000074  f7fffffe          BL       GUI_Unlock
;;;326      return hObj;
000078  4630              MOV      r0,r6
;;;327    }
00007a  b009              ADD      sp,sp,#0x24
00007c  e8bd8ff0          POP      {r4-r11,pc}
;;;328    
                          ENDP

                  |L2.128|
                          DCD      SLIDER_Callback
                  |L2.132|
                          DCD      SLIDER__DefaultProps

                          AREA ||i.SLIDER_Dec||, CODE, READONLY, ALIGN=1

                  SLIDER_Dec PROC
;;;338    */
;;;339    void SLIDER_Dec(SLIDER_Handle hObj) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;340      SLIDER_Obj* pObj;
;;;341      if (hObj) {
000004  b1ad              CBZ      r5,|L3.50|
;;;342        WM_LOCK();
000006  f7fffffe          BL       GUI_Lock
;;;343        pObj = SLIDER_H2P(hObj);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       GUI_ALLOC_h2p
000010  4604              MOV      r4,r0
;;;344        if (pObj->v > pObj->Min) {
000012  6b61              LDR      r1,[r4,#0x34]
000014  6be0              LDR      r0,[r4,#0x3c]
000016  4288              CMP      r0,r1
000018  dd09              BLE      |L3.46|
;;;345          pObj->v--;
00001a  6be0              LDR      r0,[r4,#0x3c]
00001c  1e40              SUBS     r0,r0,#1
00001e  63e0              STR      r0,[r4,#0x3c]
;;;346          WM_InvalidateWindow(hObj);
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       WM_InvalidateWindow
;;;347          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
000026  2105              MOVS     r1,#5
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       WM_NotifyParent
                  |L3.46|
;;;348        }
;;;349        WM_UNLOCK();
00002e  f7fffffe          BL       GUI_Unlock
                  |L3.50|
;;;350      }
;;;351    }
000032  bd70              POP      {r4-r6,pc}
;;;352    
                          ENDP


                          AREA ||i.SLIDER_GetValue||, CODE, READONLY, ALIGN=1

                  SLIDER_GetValue PROC
;;;492    */
;;;493    int SLIDER_GetValue(SLIDER_Handle hObj) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;494      int r = 0;
000004  2600              MOVS     r6,#0
;;;495      SLIDER_Obj* pObj;
;;;496      if (hObj) {
000006  b144              CBZ      r4,|L4.26|
;;;497        WM_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;498        pObj = SLIDER_H2P(hObj);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4605              MOV      r5,r0
;;;499        r = pObj->v;
000014  6bee              LDR      r6,[r5,#0x3c]
;;;500        WM_UNLOCK();
000016  f7fffffe          BL       GUI_Unlock
                  |L4.26|
;;;501      }
;;;502      return r;
00001a  4630              MOV      r0,r6
;;;503    }
00001c  bd70              POP      {r4-r6,pc}
;;;504    
                          ENDP


                          AREA ||i.SLIDER_Inc||, CODE, READONLY, ALIGN=1

                  SLIDER_Inc PROC
;;;356    */
;;;357    void SLIDER_Inc(SLIDER_Handle hObj) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;358      SLIDER_Obj* pObj;
;;;359      if (hObj) {
000004  b1ad              CBZ      r5,|L5.50|
;;;360        WM_LOCK();
000006  f7fffffe          BL       GUI_Lock
;;;361        pObj = SLIDER_H2P(hObj);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       GUI_ALLOC_h2p
000010  4604              MOV      r4,r0
;;;362        if (pObj->v < pObj->Max) {
000012  e9d4100e          LDRD     r1,r0,[r4,#0x38]
000016  4288              CMP      r0,r1
000018  da09              BGE      |L5.46|
;;;363          pObj->v++;
00001a  6be0              LDR      r0,[r4,#0x3c]
00001c  1c40              ADDS     r0,r0,#1
00001e  63e0              STR      r0,[r4,#0x3c]
;;;364          WM_InvalidateWindow(hObj);
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       WM_InvalidateWindow
;;;365          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
000026  2105              MOVS     r1,#5
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       WM_NotifyParent
                  |L5.46|
;;;366        }
;;;367        WM_UNLOCK();
00002e  f7fffffe          BL       GUI_Unlock
                  |L5.50|
;;;368      }
;;;369    }
000032  bd70              POP      {r4-r6,pc}
;;;370    
                          ENDP


                          AREA ||i.SLIDER_SetBkColor||, CODE, READONLY, ALIGN=1

                  SLIDER_SetBkColor PROC
;;;456    */
;;;457    void SLIDER_SetBkColor(SLIDER_Handle hObj, GUI_COLOR Color) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;458      if (hObj) {
000006  b1b5              CBZ      r5,|L6.54|
;;;459        SLIDER_Obj * pObj;
;;;460        WM_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;461        pObj = SLIDER_H2P(hObj);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4606              MOV      r6,r0
;;;462        pObj->Props.BkColor = Color;
000014  62b4              STR      r4,[r6,#0x28]
;;;463        #if SLIDER_SUPPORT_TRANSPARENCY
;;;464          if (Color <= 0xFFFFFF) {
000016  f1b47f80          CMP      r4,#0x1000000
00001a  d203              BCS      |L6.36|
;;;465            WM_ClrHasTrans(hObj);
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       WM_ClrHasTrans
000022  e002              B        |L6.42|
                  |L6.36|
;;;466          } else {
;;;467            WM_SetHasTrans(hObj);
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       WM_SetHasTrans
                  |L6.42|
;;;468          }
;;;469        #endif
;;;470        WM_InvalidateWindow(hObj);
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       WM_InvalidateWindow
;;;471        WM_UNLOCK();
000030  f7fffffe          BL       GUI_Unlock
;;;472      }
000034  bf00              NOP      
                  |L6.54|
;;;473    }
000036  bd70              POP      {r4-r6,pc}
;;;474    
                          ENDP


                          AREA ||i.SLIDER_SetDefaultBkColor||, CODE, READONLY, ALIGN=2

                  SLIDER_SetDefaultBkColor PROC
;;;478    */
;;;479    void SLIDER_SetDefaultBkColor(GUI_COLOR Color) {
000000  4901              LDR      r1,|L7.8|
;;;480      SLIDER__DefaultProps.BkColor = Color;
000002  6008              STR      r0,[r1,#0]  ; SLIDER__DefaultProps
;;;481    }
000004  4770              BX       lr
;;;482    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SLIDER__DefaultProps

                          AREA ||i.SLIDER_SetNumTicks||, CODE, READONLY, ALIGN=1

                  SLIDER_SetNumTicks PROC
;;;441    */
;;;442    void SLIDER_SetNumTicks(SLIDER_Handle hObj, int NumTicks) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;443      if (hObj && (NumTicks >= 0)) {
000006  b175              CBZ      r5,|L8.38|
000008  2c00              CMP      r4,#0
00000a  db0c              BLT      |L8.38|
;;;444        SLIDER_Obj* pObj;
;;;445        WM_LOCK();
00000c  f7fffffe          BL       GUI_Lock
;;;446        pObj = SLIDER_H2P(hObj);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       GUI_ALLOC_h2p
000016  4606              MOV      r6,r0
;;;447        pObj->NumTicks = NumTicks;
000018  6474              STR      r4,[r6,#0x44]
;;;448        WM_InvalidateWindow(hObj);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       WM_InvalidateWindow
;;;449        WM_UNLOCK();
000020  f7fffffe          BL       GUI_Unlock
;;;450      }
000024  bf00              NOP      
                  |L8.38|
;;;451    }
000026  bd70              POP      {r4-r6,pc}
;;;452    
                          ENDP


                          AREA ||i.SLIDER_SetRange||, CODE, READONLY, ALIGN=1

                  SLIDER_SetRange PROC
;;;416    */
;;;417    void SLIDER_SetRange(SLIDER_Handle hObj, int Min, int Max) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;418      if (hObj) {
00000a  b1c7              CBZ      r7,|L9.62|
;;;419        SLIDER_Obj* pObj;
;;;420        WM_LOCK();
00000c  f7fffffe          BL       GUI_Lock
;;;421        pObj = SLIDER_H2P(hObj);
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       GUI_ALLOC_h2p
000016  4605              MOV      r5,r0
;;;422        if (Max < Min) {
000018  42a6              CMP      r6,r4
00001a  da00              BGE      |L9.30|
;;;423          Max = Min;
00001c  4626              MOV      r6,r4
                  |L9.30|
;;;424        }
;;;425        pObj->Min = Min;
00001e  636c              STR      r4,[r5,#0x34]
;;;426        pObj->Max = Max;
000020  63ae              STR      r6,[r5,#0x38]
;;;427        if (pObj->v < Min) {
000022  6be8              LDR      r0,[r5,#0x3c]
000024  42a0              CMP      r0,r4
000026  da00              BGE      |L9.42|
;;;428          pObj->v = Min;
000028  63ec              STR      r4,[r5,#0x3c]
                  |L9.42|
;;;429        }
;;;430        if (pObj->v > Max) {
00002a  6be8              LDR      r0,[r5,#0x3c]
00002c  42b0              CMP      r0,r6
00002e  dd00              BLE      |L9.50|
;;;431          pObj->v = Max;
000030  63ee              STR      r6,[r5,#0x3c]
                  |L9.50|
;;;432        }
;;;433        WM_InvalidateWindow(hObj);
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       WM_InvalidateWindow
;;;434        WM_UNLOCK();
000038  f7fffffe          BL       GUI_Unlock
;;;435      }
00003c  bf00              NOP      
                  |L9.62|
;;;436    }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;437    
                          ENDP


                          AREA ||i.SLIDER_SetValue||, CODE, READONLY, ALIGN=1

                  SLIDER_SetValue PROC
;;;391    */
;;;392    void SLIDER_SetValue(SLIDER_Handle hObj, int v) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;393      SLIDER_Obj* pObj;
;;;394      if (hObj) {
000006  b1d6              CBZ      r6,|L10.62|
;;;395        WM_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;396        pObj = SLIDER_H2P(hObj);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4604              MOV      r4,r0
;;;397        /* Put in min/max range */
;;;398        if (v < pObj->Min) {
000014  6b60              LDR      r0,[r4,#0x34]
000016  42a8              CMP      r0,r5
000018  dd00              BLE      |L10.28|
;;;399          v = pObj->Min;
00001a  6b65              LDR      r5,[r4,#0x34]
                  |L10.28|
;;;400        }
;;;401        if (v > pObj->Max) {
00001c  6ba0              LDR      r0,[r4,#0x38]
00001e  42a8              CMP      r0,r5
000020  da00              BGE      |L10.36|
;;;402          v = pObj->Max;
000022  6ba5              LDR      r5,[r4,#0x38]
                  |L10.36|
;;;403        }
;;;404        if (pObj->v != v) {
000024  6be0              LDR      r0,[r4,#0x3c]
000026  42a8              CMP      r0,r5
000028  d007              BEQ      |L10.58|
;;;405          pObj->v = v;
00002a  63e5              STR      r5,[r4,#0x3c]
;;;406          WM_InvalidateWindow(hObj);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       WM_InvalidateWindow
;;;407          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
000032  2105              MOVS     r1,#5
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       WM_NotifyParent
                  |L10.58|
;;;408        }
;;;409        WM_UNLOCK();
00003a  f7fffffe          BL       GUI_Unlock
                  |L10.62|
;;;410      }
;;;411    }
00003e  bd70              POP      {r4-r6,pc}
;;;412    
                          ENDP


                          AREA ||i.SLIDER_SetWidth||, CODE, READONLY, ALIGN=1

                  SLIDER_SetWidth PROC
;;;374    */
;;;375    void SLIDER_SetWidth(SLIDER_Handle hObj, int Width) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;376      SLIDER_Obj* pObj;
;;;377      if (hObj) {
000006  b18e              CBZ      r6,|L11.44|
;;;378        WM_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;379        pObj = SLIDER_H2P(hObj);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4604              MOV      r4,r0
;;;380        if (pObj->Width != Width) {
000014  f9b40048          LDRSH    r0,[r4,#0x48]
000018  42a8              CMP      r0,r5
00001a  d005              BEQ      |L11.40|
;;;381          pObj->Width = Width;
00001c  b228              SXTH     r0,r5
00001e  f8a40048          STRH     r0,[r4,#0x48]
;;;382          WM_InvalidateWindow(hObj);
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       WM_InvalidateWindow
                  |L11.40|
;;;383        }
;;;384        WM_UNLOCK();
000028  f7fffffe          BL       GUI_Unlock
                  |L11.44|
;;;385      }
;;;386    }
00002c  bd70              POP      {r4-r6,pc}
;;;387    
                          ENDP


                          AREA ||i._OnKey||, CODE, READONLY, ALIGN=1

                  _OnKey PROC
;;;203    */
;;;204    static void  _OnKey(SLIDER_Handle hObj, WM_MESSAGE*pMsg) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;205      const WM_KEY_INFO* pKeyInfo;
;;;206      int Key;
;;;207      pKeyInfo = (const WM_KEY_INFO*)(pMsg->Data.p);
000008  68a5              LDR      r5,[r4,#8]
;;;208      Key = pKeyInfo->Key;
00000a  682f              LDR      r7,[r5,#0]
;;;209      if (pKeyInfo->PressedCnt > 0) {
00000c  6868              LDR      r0,[r5,#4]
00000e  2800              CMP      r0,#0
000010  dd0e              BLE      |L12.48|
;;;210        switch (Key) {
000012  2f10              CMP      r7,#0x10
000014  d005              BEQ      |L12.34|
000016  2f12              CMP      r7,#0x12
000018  d107              BNE      |L12.42|
;;;211          case GUI_KEY_RIGHT:
;;;212            SLIDER_Inc(hObj);
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       SLIDER_Inc
;;;213            break;                    /* Send to parent by not doing anything */
000020  e005              B        |L12.46|
                  |L12.34|
;;;214          case GUI_KEY_LEFT:
;;;215            SLIDER_Dec(hObj);
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       SLIDER_Dec
;;;216            break;                    /* Send to parent by not doing anything */
000028  e001              B        |L12.46|
                  |L12.42|
;;;217          default:
;;;218            return;
;;;219        }
;;;220      }
;;;221    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L12.46|
00002e  bf00              NOP                            ;213
                  |L12.48|
000030  bf00              NOP      
000032  e7fa              B        |L12.42|
;;;222    
                          ENDP


                          AREA ||i._OnTouch||, CODE, READONLY, ALIGN=1

                  _OnTouch PROC
;;;163    */
;;;164    static void _OnTouch(SLIDER_Handle hObj, SLIDER_Obj* pObj, WM_MESSAGE*pMsg) {
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
000004  460c              MOV      r4,r1
000006  4617              MOV      r7,r2
;;;165      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
000008  f8d78008          LDR      r8,[r7,#8]
;;;166      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
00000c  68b8              LDR      r0,[r7,#8]
00000e  2800              CMP      r0,#0
000010  d05b              BEQ      |L13.202|
;;;167        if (pState->Pressed) {
000012  f8980008          LDRB     r0,[r8,#8]
000016  2800              CMP      r0,#0
000018  d04f              BEQ      |L13.186|
;;;168          int x0, xsize, x, Sel, Range;
;;;169          Range = (pObj->Max - pObj->Min);
00001a  e9d4100d          LDRD     r1,r0,[r4,#0x34]
00001e  eba00b01          SUB      r11,r0,r1
;;;170          x0    = 1 + pObj->Width / 2;  /* 1 pixel focus rectangle + width of actual slider */
000022  f9b40048          LDRSH    r0,[r4,#0x48]
000026  eb0071d0          ADD      r1,r0,r0,LSR #31
00002a  1049              ASRS     r1,r1,#1
00002c  f1010a01          ADD      r10,r1,#1
;;;171          x     = (pObj->Widget.State & WIDGET_STATE_VERTICAL) ? pState->y : pState->x;
000030  f8940026          LDRB     r0,[r4,#0x26]
000034  f0100f08          TST      r0,#8
000038  d002              BEQ      |L13.64|
00003a  f8d80004          LDR      r0,[r8,#4]
00003e  e001              B        |L13.68|
                  |L13.64|
000040  f8d80000          LDR      r0,[r8,#0]
                  |L13.68|
000044  4605              MOV      r5,r0
;;;172          x    -= x0;
000046  eba5050a          SUB      r5,r5,r10
;;;173          xsize = WIDGET__GetWindowSizeX(hObj) - 2 * x0;
00004a  9800              LDR      r0,[sp,#0]
00004c  f7fffffe          BL       WIDGET__GetWindowSizeX
000050  2102              MOVS     r1,#2
000052  fb01091a          MLS      r9,r1,r10,r0
;;;174          if (x <= 0) {
000056  2d00              CMP      r5,#0
000058  dc01              BGT      |L13.94|
;;;175            Sel = pObj->Min;
00005a  6b66              LDR      r6,[r4,#0x34]
00005c  e015              B        |L13.138|
                  |L13.94|
;;;176          } else if (x >= xsize) {
00005e  454d              CMP      r5,r9
000060  db01              BLT      |L13.102|
;;;177            Sel = pObj->Max;
000062  6ba6              LDR      r6,[r4,#0x38]
000064  e011              B        |L13.138|
                  |L13.102|
;;;178          } else {
;;;179            int Div;
;;;180            Div = xsize ? xsize : 1;     /* Make sure we do not divide by 0, even though xsize should never be 0 in this case anyhow */
000066  f1b90f00          CMP      r9,#0
00006a  d001              BEQ      |L13.112|
00006c  4649              MOV      r1,r9
00006e  e000              B        |L13.114|
                  |L13.112|
000070  2101              MOVS     r1,#1
                  |L13.114|
000072  4608              MOV      r0,r1
;;;181            Sel = pObj->Min + ((U32)Range * (U32)x + Div / 2) / Div;
000074  4601              MOV      r1,r0
000076  eb0072d1          ADD      r2,r0,r1,LSR #31
00007a  1052              ASRS     r2,r2,#1
00007c  fb0b2205          MLA      r2,r11,r5,r2
000080  fbb2f2f0          UDIV     r2,r2,r0
000084  6b63              LDR      r3,[r4,#0x34]
000086  18d6              ADDS     r6,r2,r3
;;;182          }
000088  bf00              NOP      
                  |L13.138|
;;;183          if (WM_IsFocussable(hObj)) {
00008a  9800              LDR      r0,[sp,#0]
00008c  f7fffffe          BL       WM_IsFocussable
000090  b110              CBZ      r0,|L13.152|
;;;184            WM_SetFocus(hObj);
000092  9800              LDR      r0,[sp,#0]
000094  f7fffffe          BL       WM_SetFocus
                  |L13.152|
;;;185          }
;;;186          WM_SetCapture(hObj, 1);
000098  2101              MOVS     r1,#1
00009a  9800              LDR      r0,[sp,#0]
00009c  f7fffffe          BL       WM_SetCapture
;;;187          SLIDER_SetValue(hObj, Sel);
0000a0  4631              MOV      r1,r6
0000a2  9800              LDR      r0,[sp,#0]
0000a4  f7fffffe          BL       SLIDER_SetValue
;;;188          if ((pObj->Widget.State & SLIDER_STATE_PRESSED) == 0){   
0000a8  8ce0              LDRH     r0,[r4,#0x26]
0000aa  f4107f80          TST      r0,#0x100
0000ae  d103              BNE      |L13.184|
;;;189            _SliderPressed(hObj, pObj);
0000b0  4621              MOV      r1,r4
0000b2  9800              LDR      r0,[sp,#0]
0000b4  f7fffffe          BL       _SliderPressed
                  |L13.184|
;;;190          }
;;;191        } else {
0000b8  e007              B        |L13.202|
                  |L13.186|
;;;192          /* React only if button was pressed before ... avoid problems with moving / hiding windows above (such as dropdown) */
;;;193          if (pObj->Widget.State & SLIDER_STATE_PRESSED) {   
0000ba  8ce0              LDRH     r0,[r4,#0x26]
0000bc  f4107f80          TST      r0,#0x100
0000c0  d003              BEQ      |L13.202|
;;;194            _SliderReleased(hObj, pObj);
0000c2  4621              MOV      r1,r4
0000c4  9800              LDR      r0,[sp,#0]
0000c6  f7fffffe          BL       _SliderReleased
                  |L13.202|
;;;195          }
;;;196        }
;;;197      }
;;;198    }
0000ca  e8bd8ffe          POP      {r1-r11,pc}
;;;199    
                          ENDP


                          AREA ||i._Paint||, CODE, READONLY, ALIGN=1

                  _Paint PROC
;;;74     */
;;;75     static void _Paint(SLIDER_Obj* pObj, WM_HWIN hObj) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b089              SUB      sp,sp,#0x24
000006  4604              MOV      r4,r0
000008  468a              MOV      r10,r1
;;;76       GUI_RECT r, rFocus, rSlider, rSlot;
;;;77       int x0, xsize, i, Range, NumTicks;
;;;78       WIDGET__GetClientRect(&pObj->Widget, &rFocus);
00000a  a905              ADD      r1,sp,#0x14
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       WIDGET__GetClientRect
;;;79       GUI__ReduceRect(&r, &rFocus, 1);
000012  2201              MOVS     r2,#1
000014  a905              ADD      r1,sp,#0x14
000016  a807              ADD      r0,sp,#0x1c
000018  f7fffffe          BL       GUI__ReduceRect
;;;80       NumTicks = pObj->NumTicks;
00001c  6c65              LDR      r5,[r4,#0x44]
;;;81       xsize    = r.x1 - r.x0  + 1 - pObj->Width;
00001e  f9bd0020          LDRSH    r0,[sp,#0x20]
000022  f9bd101c          LDRSH    r1,[sp,#0x1c]
000026  1a40              SUBS     r0,r0,r1
000028  1c40              ADDS     r0,r0,#1
00002a  f9b41048          LDRSH    r1,[r4,#0x48]
00002e  1a47              SUBS     r7,r0,r1
;;;82       x0       = r.x0 + pObj->Width / 2;
000030  f9b40048          LDRSH    r0,[r4,#0x48]
000034  eb0071d0          ADD      r1,r0,r0,LSR #31
000038  f9bd201c          LDRSH    r2,[sp,#0x1c]
00003c  eb020661          ADD      r6,r2,r1,ASR #1
;;;83       Range    = pObj->Max - pObj->Min;
000040  e9d4100d          LDRD     r1,r0,[r4,#0x34]
000044  eba00901          SUB      r9,r0,r1
;;;84       if (Range == 0) {
000048  f1b90f00          CMP      r9,#0
00004c  d101              BNE      |L14.82|
;;;85         Range = 1;
00004e  f04f0901          MOV      r9,#1
                  |L14.82|
;;;86       }
;;;87       /* Fill with parents background color */
;;;88       #if !SLIDER_SUPPORT_TRANSPARENCY   /* Not needed any more, since window is transparent*/
;;;89         if (pObj->Props.BkColor == GUI_INVALID_COLOR) {
;;;90           LCD_SetBkColor(WIDGET__GetBkColor(hObj));
;;;91         } else {
;;;92           LCD_SetBkColor(pObj->Props.BkColor);
;;;93         }
;;;94         GUI_Clear();
;;;95       #else
;;;96         if (!WM_GetHasTrans(hObj)) {
000052  4650              MOV      r0,r10
000054  f7fffffe          BL       WM_GetHasTrans
000058  b920              CBNZ     r0,|L14.100|
;;;97           LCD_SetBkColor(pObj->Props.BkColor);
00005a  6aa0              LDR      r0,[r4,#0x28]
00005c  f7fffffe          BL       LCD_SetBkColor
;;;98           GUI_Clear();
000060  f7fffffe          BL       GUI_Clear
                  |L14.100|
;;;99         }
;;;100      #endif
;;;101      /* Calculate Slider position */
;;;102      rSlider    = r;
000064  e9dd0107          LDRD     r0,r1,[sp,#0x1c]
000068  e9cd0103          STRD     r0,r1,[sp,#0xc]
;;;103      rSlider.y0 = 5;
00006c  2005              MOVS     r0,#5
00006e  f8ad000e          STRH     r0,[sp,#0xe]
;;;104      rSlider.x0 = x0 + (U32)xsize * (U32)(pObj->v - pObj->Min) / Range - pObj->Width / 2;
000072  6b62              LDR      r2,[r4,#0x34]
000074  6be1              LDR      r1,[r4,#0x3c]
000076  1a89              SUBS     r1,r1,r2
000078  4379              MULS     r1,r7,r1
00007a  fbb1f1f9          UDIV     r1,r1,r9
00007e  4431              ADD      r1,r1,r6
000080  f9b40048          LDRSH    r0,[r4,#0x48]
000084  eb0072d0          ADD      r2,r0,r0,LSR #31
000088  eba10162          SUB      r1,r1,r2,ASR #1
00008c  b209              SXTH     r1,r1
00008e  f8ad100c          STRH     r1,[sp,#0xc]
;;;105      rSlider.x1 = rSlider.x0 + pObj->Width;
000092  f8bd000c          LDRH     r0,[sp,#0xc]
000096  f8b41048          LDRH     r1,[r4,#0x48]
00009a  4408              ADD      r0,r0,r1
00009c  b200              SXTH     r0,r0
00009e  f8ad0010          STRH     r0,[sp,#0x10]
;;;106      /* Calculate Slot position */
;;;107      rSlot.x0 = x0;
0000a2  b230              SXTH     r0,r6
0000a4  f8ad0004          STRH     r0,[sp,#4]
;;;108      rSlot.x1 = x0 + xsize;
0000a8  19f0              ADDS     r0,r6,r7
0000aa  b200              SXTH     r0,r0
0000ac  f8ad0008          STRH     r0,[sp,#8]
;;;109      rSlot.y0 = (rSlider.y0 + rSlider.y1) / 2 - 1;
0000b0  f9bd100e          LDRSH    r1,[sp,#0xe]
0000b4  f9bd2012          LDRSH    r2,[sp,#0x12]
0000b8  1888              ADDS     r0,r1,r2
0000ba  eb0071d0          ADD      r1,r0,r0,LSR #31
0000be  1049              ASRS     r1,r1,#1
0000c0  1e49              SUBS     r1,r1,#1
0000c2  b209              SXTH     r1,r1
0000c4  f8ad1006          STRH     r1,[sp,#6]
;;;110      rSlot.y1 = rSlot.y0 + 3;
0000c8  f8bd0006          LDRH     r0,[sp,#6]
0000cc  1cc0              ADDS     r0,r0,#3
0000ce  b200              SXTH     r0,r0
0000d0  f8ad000a          STRH     r0,[sp,#0xa]
;;;111      WIDGET__EFFECT_DrawDownRect(&pObj->Widget, &rSlot);        /* Draw slot */
0000d4  a901              ADD      r1,sp,#4
0000d6  4620              MOV      r0,r4
0000d8  f7fffffe          BL       WIDGET__EFFECT_DrawDownRect
;;;112      /* Draw the ticks */
;;;113      if (NumTicks < 0) {
0000dc  2d00              CMP      r5,#0
0000de  da07              BGE      |L14.240|
;;;114        NumTicks = Range + 1;
0000e0  f1090501          ADD      r5,r9,#1
;;;115        if (NumTicks > (xsize / 5)) {
0000e4  2005              MOVS     r0,#5
0000e6  fb97f0f0          SDIV     r0,r7,r0
0000ea  42a8              CMP      r0,r5
0000ec  da00              BGE      |L14.240|
;;;116          NumTicks = 11;
0000ee  250b              MOVS     r5,#0xb
                  |L14.240|
;;;117        }
;;;118      }
;;;119      if (NumTicks > 1) {
0000f0  2d01              CMP      r5,#1
0000f2  dd16              BLE      |L14.290|
;;;120        LCD_SetColor(GUI_BLACK);
0000f4  2000              MOVS     r0,#0
0000f6  f7fffffe          BL       LCD_SetColor
;;;121        for (i = 0; i < NumTicks; i++) {
0000fa  f04f0800          MOV      r8,#0
0000fe  e00e              B        |L14.286|
                  |L14.256|
;;;122          int x = x0 + xsize * i / (NumTicks - 1);
000100  fb07f008          MUL      r0,r7,r8
000104  1e69              SUBS     r1,r5,#1
000106  fb90f0f1          SDIV     r0,r0,r1
00010a  eb000b06          ADD      r11,r0,r6
;;;123          WIDGET__DrawVLine(&pObj->Widget, x, 1, 3);
00010e  2303              MOVS     r3,#3
000110  2201              MOVS     r2,#1
000112  4659              MOV      r1,r11
000114  4620              MOV      r0,r4
000116  f7fffffe          BL       WIDGET__DrawVLine
00011a  f1080801          ADD      r8,r8,#1              ;121
                  |L14.286|
00011e  45a8              CMP      r8,r5                 ;121
000120  dbee              BLT      |L14.256|
                  |L14.290|
;;;124        }
;;;125      }
;;;126      /* Draw the slider itself */
;;;127      LCD_SetColor(pObj->Props.Color);
000122  6ae0              LDR      r0,[r4,#0x2c]
000124  f7fffffe          BL       LCD_SetColor
;;;128      WIDGET__FillRectEx(&pObj->Widget, &rSlider);
000128  a903              ADD      r1,sp,#0xc
00012a  4620              MOV      r0,r4
00012c  f7fffffe          BL       WIDGET__FillRectEx
;;;129      LCD_SetColor(GUI_BLACK);
000130  2000              MOVS     r0,#0
000132  f7fffffe          BL       LCD_SetColor
;;;130      WIDGET__EFFECT_DrawUpRect(&pObj->Widget, &rSlider);
000136  a903              ADD      r1,sp,#0xc
000138  4620              MOV      r0,r4
00013a  f7fffffe          BL       WIDGET__EFFECT_DrawUpRect
;;;131      /* Draw focus */
;;;132      if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
00013e  f8940026          LDRB     r0,[r4,#0x26]
000142  f0100f01          TST      r0,#1
000146  d007              BEQ      |L14.344|
;;;133        LCD_SetColor(pObj->Props.FocusColor);
000148  6b20              LDR      r0,[r4,#0x30]
00014a  f7fffffe          BL       LCD_SetColor
;;;134        WIDGET__DrawFocusRect(&pObj->Widget, &rFocus, 0);
00014e  2200              MOVS     r2,#0
000150  a905              ADD      r1,sp,#0x14
000152  4620              MOV      r0,r4
000154  f7fffffe          BL       WIDGET__DrawFocusRect
                  |L14.344|
;;;135      }
;;;136    }
000158  b009              ADD      sp,sp,#0x24
00015a  e8bd8ff0          POP      {r4-r11,pc}
;;;137    
                          ENDP


                          AREA ||i._SliderPressed||, CODE, READONLY, ALIGN=1

                  _SliderPressed PROC
;;;141    */
;;;142    static void _SliderPressed(SLIDER_Handle hObj, SLIDER_Obj* pObj) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;143      WIDGET_OrState(hObj, SLIDER_STATE_PRESSED);
000006  f44f7180          MOV      r1,#0x100
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       WIDGET_OrState
;;;144      if (pObj->Widget.Win.Status & WM_SF_ISVIS) {
000010  7f20              LDRB     r0,[r4,#0x1c]
000012  f0100f02          TST      r0,#2
000016  d003              BEQ      |L15.32|
;;;145        WM_NotifyParent(hObj, WM_NOTIFICATION_CLICKED);
000018  2101              MOVS     r1,#1
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       WM_NotifyParent
                  |L15.32|
;;;146      }
;;;147    }
000020  bd70              POP      {r4-r6,pc}
;;;148    
                          ENDP


                          AREA ||i._SliderReleased||, CODE, READONLY, ALIGN=1

                  _SliderReleased PROC
;;;152    */
;;;153    static void _SliderReleased(SLIDER_Handle hObj, SLIDER_Obj* pObj) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;154      WIDGET_AndState(hObj, SLIDER_STATE_PRESSED);
000006  f44f7180          MOV      r1,#0x100
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       WIDGET_AndState
;;;155      if (pObj->Widget.Win.Status & WM_SF_ISVIS) {
000010  7f20              LDRB     r0,[r4,#0x1c]
000012  f0100f02          TST      r0,#2
000016  d003              BEQ      |L16.32|
;;;156        WM_NotifyParent(hObj, WM_NOTIFICATION_RELEASED);
000018  2102              MOVS     r1,#2
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       WM_NotifyParent
                  |L16.32|
;;;157      }
;;;158    }
000020  bd70              POP      {r4-r6,pc}
;;;159    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  SLIDER__DefaultProps
                          DCD      0x00c0c0c0
                          DCD      0x00c0c0c0
                          DCD      0x00000000
