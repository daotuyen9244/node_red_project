; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gui_drawgraph.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\gui_drawgraph.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\GUI_DrawGraph.c]
                          THUMB

                          AREA ||i.GUI_DrawGraph||, CODE, READONLY, ALIGN=2

                  GUI_DrawGraph PROC
;;;81     */  
;;;82     void GUI_DrawGraph(I16 *pay, int NumPoints, int x0, int y0) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;83       GUI_LOCK();
00000c  f7fffffe          BL       GUI_Lock
;;;84       #if (GUI_WINSUPPORT)
;;;85         WM_ADDORG(x0,y0);
000010  480c              LDR      r0,|L1.68|
000012  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000014  4404              ADD      r4,r4,r0
000016  480b              LDR      r0,|L1.68|
000018  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00001a  4405              ADD      r5,r5,r0
;;;86         WM_ITERATE_START(NULL); {
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       WM__InitIVRSearch
000022  b150              CBZ      r0,|L1.58|
000024  bf00              NOP      
                  |L1.38|
;;;87       #endif
;;;88       _DrawGraph(pay, NumPoints, x0, y0);
000026  462b              MOV      r3,r5
000028  4622              MOV      r2,r4
00002a  4639              MOV      r1,r7
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       _DrawGraph
;;;89       #if (GUI_WINSUPPORT)
;;;90         } WM_ITERATE_END();
000032  f7fffffe          BL       WM__GetNextIVR
000036  2800              CMP      r0,#0
000038  d1f5              BNE      |L1.38|
                  |L1.58|
;;;91       #endif
;;;92       GUI_UNLOCK();
00003a  f7fffffe          BL       GUI_Unlock
;;;93     }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;94     
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      GUI_Context

                          AREA ||i._DrawGraph||, CODE, READONLY, ALIGN=2

                  _DrawGraph PROC
;;;32     */
;;;33     static void _DrawGraph(I16 *pay, int NumPoints, int xOff, int yOff) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4681              MOV      r9,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  469a              MOV      r10,r3
;;;34       int i;
;;;35       int y0, y1;
;;;36       int yClip0, yClip1;
;;;37       /* Perform high level clipping in x */
;;;38       yClip0 = GUI_Context.pClipRect_HL->y0;
00000c  4833              LDR      r0,|L2.220|
00000e  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
000010  f9b00002          LDRSH    r0,[r0,#2]
000014  9001              STR      r0,[sp,#4]
;;;39       yClip1 = GUI_Context.pClipRect_HL->y1;
000016  4831              LDR      r0,|L2.220|
000018  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
00001a  f9b00006          LDRSH    r0,[r0,#6]
00001e  9000              STR      r0,[sp,#0]
;;;40       i=0;
000020  2500              MOVS     r5,#0
;;;41       if (GUI_Context.pClipRect_HL) {
000022  482e              LDR      r0,|L2.220|
000024  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
000026  b1d0              CBZ      r0,|L2.94|
;;;42         if (xOff < GUI_Context.pClipRect_HL->x0)
000028  482c              LDR      r0,|L2.220|
00002a  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
00002c  f9b00000          LDRSH    r0,[r0,#0]
000030  42a0              CMP      r0,r4
000032  dd04              BLE      |L2.62|
;;;43           i = GUI_Context.pClipRect_HL->x0 - xOff;
000034  4829              LDR      r0,|L2.220|
000036  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
000038  f9b00000          LDRSH    r0,[r0,#0]
00003c  1b05              SUBS     r5,r0,r4
                  |L2.62|
;;;44         if (xOff+NumPoints-1 > GUI_Context.pClipRect_HL->x1)
00003e  eb040008          ADD      r0,r4,r8
000042  1e40              SUBS     r0,r0,#1
000044  4925              LDR      r1,|L2.220|
000046  6949              LDR      r1,[r1,#0x14]  ; GUI_Context
000048  f9b11004          LDRSH    r1,[r1,#4]
00004c  4288              CMP      r0,r1
00004e  dd06              BLE      |L2.94|
;;;45           NumPoints = GUI_Context.pClipRect_HL->x1 - xOff + 1;
000050  4822              LDR      r0,|L2.220|
000052  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
000054  f9b00004          LDRSH    r0,[r0,#4]
000058  1b00              SUBS     r0,r0,r4
00005a  f1000801          ADD      r8,r0,#1
                  |L2.94|
;;;46       }
;;;47       /* Start drawing if there is something left to do after x-clipping */
;;;48       if (i < NumPoints) {
00005e  4545              CMP      r5,r8
000060  da39              BGE      |L2.214|
;;;49         y0 = *(pay + i++) + yOff;
000062  4628              MOV      r0,r5
000064  1c6d              ADDS     r5,r5,#1
000066  f9390010          LDRSH    r0,[r9,r0,LSL #1]
00006a  eb00070a          ADD      r7,r0,r10
;;;50         /* Iterate */
;;;51         for (; i < NumPoints; i++) {
00006e  e030              B        |L2.210|
                  |L2.112|
;;;52           /* Perform high level clipping in y */
;;;53           y1 = *(pay + i) + yOff;
000070  f9390015          LDRSH    r0,[r9,r5,LSL #1]
000074  eb00060a          ADD      r6,r0,r10
;;;54           if ((y0 >= yClip0) || (y1 >= yClip0)) {
000078  9801              LDR      r0,[sp,#4]
00007a  4287              CMP      r7,r0
00007c  da02              BGE      |L2.132|
00007e  9801              LDR      r0,[sp,#4]
000080  4286              CMP      r6,r0
000082  db24              BLT      |L2.206|
                  |L2.132|
;;;55             if ((y0 <= yClip1) || (y1 <= yClip1)) {
000084  9800              LDR      r0,[sp,#0]
000086  4287              CMP      r7,r0
000088  dd02              BLE      |L2.144|
00008a  9800              LDR      r0,[sp,#0]
00008c  4286              CMP      r6,r0
00008e  dc1e              BGT      |L2.206|
                  |L2.144|
;;;56               int y01;
;;;57               y01 = (y1 + y0) / 2;
000090  19f0              ADDS     r0,r6,r7
000092  eb0071d0          ADD      r1,r0,r0,LSR #31
000096  ea4f0b61          ASR      r11,r1,#1
;;;58               if (y0 <= y1) {
00009a  42b7              CMP      r7,r6
00009c  dc0b              BGT      |L2.182|
;;;59                 LCD_DrawVLine(i + xOff - 1, y0, y01);
00009e  1929              ADDS     r1,r5,r4
0000a0  1e48              SUBS     r0,r1,#1
0000a2  465a              MOV      r2,r11
0000a4  4639              MOV      r1,r7
0000a6  f7fffffe          BL       LCD_DrawVLine
;;;60                 LCD_DrawVLine(i + xOff, y01, y1);
0000aa  1928              ADDS     r0,r5,r4
0000ac  4632              MOV      r2,r6
0000ae  4659              MOV      r1,r11
0000b0  f7fffffe          BL       LCD_DrawVLine
0000b4  e00a              B        |L2.204|
                  |L2.182|
;;;61               } else {
;;;62                 LCD_DrawVLine(i + xOff - 1, y01, y0);
0000b6  1929              ADDS     r1,r5,r4
0000b8  1e48              SUBS     r0,r1,#1
0000ba  463a              MOV      r2,r7
0000bc  4659              MOV      r1,r11
0000be  f7fffffe          BL       LCD_DrawVLine
;;;63                 LCD_DrawVLine(i + xOff, y1, y01);
0000c2  1928              ADDS     r0,r5,r4
0000c4  465a              MOV      r2,r11
0000c6  4631              MOV      r1,r6
0000c8  f7fffffe          BL       LCD_DrawVLine
                  |L2.204|
;;;64               }
;;;65             }
0000cc  bf00              NOP      
                  |L2.206|
;;;66           }
;;;67           y0 = y1;
0000ce  4637              MOV      r7,r6
0000d0  1c6d              ADDS     r5,r5,#1              ;51
                  |L2.210|
0000d2  4545              CMP      r5,r8                 ;51
0000d4  dbcc              BLT      |L2.112|
                  |L2.214|
;;;68         }
;;;69       }
;;;70     }
0000d6  e8bd9ffc          POP      {r2-r12,pc}
;;;71     
                          ENDP

0000da  0000              DCW      0x0000
                  |L2.220|
                          DCD      GUI_Context
