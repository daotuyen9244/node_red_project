; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guiaacircle.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guiaacircle.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\AntiAlias\GUIAACircle.c]
                          THUMB

                          AREA ||i.FillCircle||, CODE, READONLY, ALIGN=2

                  FillCircle PROC
;;;41     */
;;;42     static void FillCircle(int x0, int y0, int r) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;43       int i, x;
;;;44       int sqmax = r*r+r/2;
00000a  4620              MOV      r0,r4
00000c  eb0471d0          ADD      r1,r4,r0,LSR #31
000010  1049              ASRS     r1,r1,#1
000012  fb041104          MLA      r1,r4,r4,r1
000016  9100              STR      r1,[sp,#0]
;;;45       int yMin, yMax;
;;;46       /* First step : find uppermost and lowermost coordinates */
;;;47       yMin = y0 - r;
000018  eba80904          SUB      r9,r8,r4
;;;48       yMax = y0 + r;
00001c  eb080a04          ADD      r10,r8,r4
;;;49       /* Use Clipping rect to reduce calculation (if possible) */
;;;50       if (GUI_Context.pClipRect_HL) {
000020  4828              LDR      r0,|L1.196|
000022  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
000024  b198              CBZ      r0,|L1.78|
;;;51         if (yMax > GUI_Context.pClipRect_HL->y1)
000026  4827              LDR      r0,|L1.196|
000028  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
00002a  f9b00006          LDRSH    r0,[r0,#6]
00002e  4550              CMP      r0,r10
000030  da03              BGE      |L1.58|
;;;52           yMax = GUI_Context.pClipRect_HL->y1;
000032  4824              LDR      r0,|L1.196|
000034  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
000036  f9b0a006          LDRSH    r10,[r0,#6]
                  |L1.58|
;;;53         if (yMin < GUI_Context.pClipRect_HL->y0)
00003a  4822              LDR      r0,|L1.196|
00003c  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
00003e  f9b00002          LDRSH    r0,[r0,#2]
000042  4548              CMP      r0,r9
000044  dd03              BLE      |L1.78|
;;;54           yMin = GUI_Context.pClipRect_HL->y0;
000046  481f              LDR      r0,|L1.196|
000048  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
00004a  f9b09002          LDRSH    r9,[r0,#2]
                  |L1.78|
;;;55       }
;;;56       /* Draw top half */
;;;57       for (i=0, x=r; i<r; i++) {
00004e  2600              MOVS     r6,#0
000050  4625              MOV      r5,r4
000052  e016              B        |L1.130|
                  |L1.84|
;;;58         int y = y0-i;
000054  eba80b06          SUB      r11,r8,r6
;;;59         if ((y >= yMin) && (y <= yMax)) {
000058  45cb              CMP      r11,r9
00005a  db11              BLT      |L1.128|
00005c  45d3              CMP      r11,r10
00005e  dc0f              BGT      |L1.128|
;;;60           /* calc proper x-value */
;;;61           while ((i*i+x*x) >sqmax)
000060  e000              B        |L1.100|
                  |L1.98|
;;;62             --x;
000062  1e6d              SUBS     r5,r5,#1
                  |L1.100|
000064  fb06f006          MUL      r0,r6,r6              ;61
000068  fb050105          MLA      r1,r5,r5,r0           ;61
00006c  9800              LDR      r0,[sp,#0]            ;61
00006e  4281              CMP      r1,r0                 ;61
000070  dcf7              BGT      |L1.98|
;;;63           LCD_HL_DrawHLine (x0-x, y, x0+x);
000072  197a              ADDS     r2,r7,r5
000074  1b78              SUBS     r0,r7,r5
000076  4913              LDR      r1,|L1.196|
000078  6dc9              LDR      r1,[r1,#0x5c]  ; GUI_Context
00007a  680b              LDR      r3,[r1,#0]
00007c  4659              MOV      r1,r11
00007e  4798              BLX      r3
                  |L1.128|
000080  1c76              ADDS     r6,r6,#1              ;57
                  |L1.130|
000082  42a6              CMP      r6,r4                 ;57
000084  dbe6              BLT      |L1.84|
;;;64         }
;;;65       }
;;;66       /* Draw bottom half */
;;;67       for (i=0, x=r; i<r; i++) {
000086  2600              MOVS     r6,#0
000088  4625              MOV      r5,r4
00008a  e016              B        |L1.186|
                  |L1.140|
;;;68         int y = y0 + i;
00008c  eb080b06          ADD      r11,r8,r6
;;;69         if ((y >= yMin) && (y <= yMax)) {
000090  45cb              CMP      r11,r9
000092  db11              BLT      |L1.184|
000094  45d3              CMP      r11,r10
000096  dc0f              BGT      |L1.184|
;;;70           /* calc proper x-value */
;;;71           while ((i*i+x*x) >sqmax)
000098  e000              B        |L1.156|
                  |L1.154|
;;;72             --x;
00009a  1e6d              SUBS     r5,r5,#1
                  |L1.156|
00009c  fb06f006          MUL      r0,r6,r6              ;71
0000a0  fb050105          MLA      r1,r5,r5,r0           ;71
0000a4  9800              LDR      r0,[sp,#0]            ;71
0000a6  4281              CMP      r1,r0                 ;71
0000a8  dcf7              BGT      |L1.154|
;;;73           LCD_HL_DrawHLine (x0-x, y, x0+x);
0000aa  197a              ADDS     r2,r7,r5
0000ac  1b78              SUBS     r0,r7,r5
0000ae  4905              LDR      r1,|L1.196|
0000b0  6dc9              LDR      r1,[r1,#0x5c]  ; GUI_Context
0000b2  680b              LDR      r3,[r1,#0]
0000b4  4659              MOV      r1,r11
0000b6  4798              BLX      r3
                  |L1.184|
0000b8  1c76              ADDS     r6,r6,#1              ;67
                  |L1.186|
0000ba  42a6              CMP      r6,r4                 ;67
0000bc  dbe6              BLT      |L1.140|
;;;74         }
;;;75       }
;;;76     }
0000be  e8bd8ff8          POP      {r3-r11,pc}
;;;77     
                          ENDP

0000c2  0000              DCW      0x0000
                  |L1.196|
                          DCD      GUI_Context

                          AREA ||i.GL_FillCircleAA_HiRes||, CODE, READONLY, ALIGN=1

                  GL_FillCircleAA_HiRes PROC
;;;87     */
;;;88     void GL_FillCircleAA_HiRes(int x0, int y0, int r) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;89     /* Init AA Subsystem, pass horizontal limits */
;;;90       GUI_AA_Init_HiRes(x0-r, x0+r);
000008  1961              ADDS     r1,r4,r5
00000a  1b60              SUBS     r0,r4,r5
00000c  f7fffffe          BL       GUI_AA_Init_HiRes
;;;91     /* Do the actual drawing */
;;;92       FillCircle(x0, y0, r);
000010  462a              MOV      r2,r5
000012  4631              MOV      r1,r6
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       FillCircle
;;;93     /* Cleanup */
;;;94       GUI_AA_Exit();
00001a  f7fffffe          BL       GUI_AA_Exit
;;;95     }
00001e  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP


                          AREA ||i.GUI_AA_FillCircle||, CODE, READONLY, ALIGN=2

                  GUI_AA_FillCircle PROC
;;;100    */
;;;101    void GUI_AA_FillCircle(int x0, int y0, int r) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;102      #if (GUI_WINSUPPORT)
;;;103        GUI_RECT Rect;
;;;104      #endif
;;;105      GUI_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;106      #if (GUI_WINSUPPORT)
;;;107        WM_ADDORG_AA(x0,y0);
00000c  f7fffffe          BL       WM__GetOrgX_AA
000010  4405              ADD      r5,r5,r0
000012  f7fffffe          BL       WM__GetOrgY_AA
000016  4406              ADD      r6,r6,r0
;;;108      #endif
;;;109      if (!GUI_Context.AA_HiResEnable) {
000018  481a              LDR      r0,|L3.132|
00001a  f8900061          LDRB     r0,[r0,#0x61]  ; GUI_Context
00001e  b958              CBNZ     r0,|L3.56|
;;;110        x0 *= GUI_Context.AA_Factor;
000020  4818              LDR      r0,|L3.132|
000022  f8900060          LDRB     r0,[r0,#0x60]  ; GUI_Context
000026  4345              MULS     r5,r0,r5
;;;111        y0 *= GUI_Context.AA_Factor;
000028  4816              LDR      r0,|L3.132|
00002a  f8900060          LDRB     r0,[r0,#0x60]  ; GUI_Context
00002e  4346              MULS     r6,r0,r6
;;;112        r  *= GUI_Context.AA_Factor;
000030  4814              LDR      r0,|L3.132|
000032  f8900060          LDRB     r0,[r0,#0x60]  ; GUI_Context
000036  4344              MULS     r4,r0,r4
                  |L3.56|
;;;113      }
;;;114      #if (GUI_WINSUPPORT)
;;;115        Rect.x0 = GUI_AA_HiRes2Pixel(x0 - r);
000038  1b28              SUBS     r0,r5,r4
00003a  f7fffffe          BL       GUI_AA_HiRes2Pixel
00003e  f8ad0000          STRH     r0,[sp,#0]
;;;116        Rect.x1 = GUI_AA_HiRes2Pixel(x0 + r);
000042  1928              ADDS     r0,r5,r4
000044  f7fffffe          BL       GUI_AA_HiRes2Pixel
000048  f8ad0004          STRH     r0,[sp,#4]
;;;117        Rect.y0 = GUI_AA_HiRes2Pixel(y0 - r);
00004c  1b30              SUBS     r0,r6,r4
00004e  f7fffffe          BL       GUI_AA_HiRes2Pixel
000052  f8ad0002          STRH     r0,[sp,#2]
;;;118        Rect.y1 = GUI_AA_HiRes2Pixel(y0 + r);
000056  1930              ADDS     r0,r6,r4
000058  f7fffffe          BL       GUI_AA_HiRes2Pixel
00005c  f8ad0006          STRH     r0,[sp,#6]
;;;119        WM_ITERATE_START(&Rect); {
000060  4668              MOV      r0,sp
000062  f7fffffe          BL       WM__InitIVRSearch
000066  b148              CBZ      r0,|L3.124|
000068  bf00              NOP      
                  |L3.106|
;;;120      #endif
;;;121      GL_FillCircleAA_HiRes(x0, y0, r);
00006a  4622              MOV      r2,r4
00006c  4631              MOV      r1,r6
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       GL_FillCircleAA_HiRes
;;;122      #if (GUI_WINSUPPORT)
;;;123        } WM_ITERATE_END();
000074  f7fffffe          BL       WM__GetNextIVR
000078  2800              CMP      r0,#0
00007a  d1f6              BNE      |L3.106|
                  |L3.124|
;;;124      #endif
;;;125      GUI_UNLOCK();
00007c  f7fffffe          BL       GUI_Unlock
;;;126    }
000080  bd7c              POP      {r2-r6,pc}
;;;127    
                          ENDP

000082  0000              DCW      0x0000
                  |L3.132|
                          DCD      GUI_Context
