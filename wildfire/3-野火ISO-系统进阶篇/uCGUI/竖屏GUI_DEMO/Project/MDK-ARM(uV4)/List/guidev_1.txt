; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guidev_1.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guidev_1.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\MemDev\GUIDEV_1.c]
                          THUMB

                          AREA ||i._DrawBitLine1BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;94     */
;;;95     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;96                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;97     {
000004  4682              MOV      r10,r0
000006  460f              MOV      r7,r1
000008  4693              MOV      r11,r2
00000a  4698              MOV      r8,r3
00000c  f8dd9034          LDR      r9,[sp,#0x34]
000010  9c0b              LDR      r4,[sp,#0x2c]
;;;98       PIXELINDEX pixels;
;;;99       PIXELINDEX Index1;
;;;100      unsigned int PixelCnt;
;;;101      GUI_USE_PARA(pUsage);
000012  bf00              NOP      
;;;102      PixelCnt = 8 - (Diff & 7);
000014  980a              LDR      r0,[sp,#0x28]
000016  f0000007          AND      r0,r0,#7
00001a  f1c00508          RSB      r5,r0,#8
;;;103      pixels = (*p) << (Diff & 7);
00001e  f8980000          LDRB     r0,[r8,#0]
000022  990a              LDR      r1,[sp,#0x28]
000024  f0010107          AND      r1,r1,#7
000028  4088              LSLS     r0,r0,r1
00002a  b2c6              UXTB     r6,r0
;;;104      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d"
;;;105                        ,x,pDev->x0, GUI_Context.ClipRect.x0);
;;;106      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00002c  4839              LDR      r0,|L1.276|
00002e  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000030  f0100003          ANDS     r0,r0,#3
000034  d004              BEQ      |L1.64|
000036  2801              CMP      r0,#1
000038  d048              BEQ      |L1.204|
00003a  2802              CMP      r0,#2
00003c  d166              BNE      |L1.268|
00003e  e01f              B        |L1.128|
                  |L1.64|
;;;107      case 0:    /* Write mode */
;;;108        do {
000040  bf00              NOP      
                  |L1.66|
;;;109          /* Prepare loop */
;;;110          if (PixelCnt > xsize) {
000042  42a5              CMP      r5,r4
000044  d900              BLS      |L1.72|
;;;111            PixelCnt = xsize;
000046  4625              MOV      r5,r4
                  |L1.72|
;;;112          }
;;;113          xsize -= PixelCnt;
000048  1b64              SUBS     r4,r4,r5
;;;114          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;115          do {
00004a  bf00              NOP      
                  |L1.76|
;;;116            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + ((U8)pixels >> 7)));
00004c  ea4f1ce6          ASR      r12,r6,#7
000050  990c              LDR      r1,[sp,#0x30]
000052  f831201c          LDRH     r2,[r1,r12,LSL #1]
000056  4638              MOV      r0,r7
000058  1c7f              ADDS     r7,r7,#1
00005a  f8d91028          LDR      r1,[r9,#0x28]
00005e  6a4b              LDR      r3,[r1,#0x24]
000060  4659              MOV      r1,r11
000062  4798              BLX      r3
;;;117            pixels <<= 1;
000064  0670              LSLS     r0,r6,#25
000066  0e06              LSRS     r6,r0,#24
;;;118          } while (--PixelCnt);
000068  1e68              SUBS     r0,r5,#1
00006a  0005              MOVS     r5,r0
00006c  d1ee              BNE      |L1.76|
;;;119          /* Check if an other Source byte needs to be loaded */
;;;120          if (xsize == 0) {
00006e  b90c              CBNZ     r4,|L1.116|
                  |L1.112|
;;;121            return;
;;;122          }
;;;123          PixelCnt = 8;
;;;124          pixels = *(++p);
;;;125        } while (1);
;;;126      case LCD_DRAWMODE_TRANS:
;;;127        Index1 = *(pTrans + 1);
;;;128        do {
;;;129          /* Prepare loop */
;;;130          if (PixelCnt > xsize) {
;;;131            PixelCnt = xsize;
;;;132          }
;;;133          xsize -= PixelCnt;
;;;134          while (pixels) {
;;;135            if ((pixels & 0x80)) {
;;;136              (*pDev->pAPIList->pfSetPixelIndex)(x, y, Index1);
;;;137            }
;;;138            x++;
;;;139            pixels <<= 1;
;;;140            if (--PixelCnt == 0) {
;;;141              break;
;;;142            }
;;;143          }
;;;144          /* Check if an other Source byte needs to be loaded */
;;;145          if (xsize == 0) {
;;;146            return;
;;;147          }
;;;148          x += PixelCnt;
;;;149          PixelCnt = 8;
;;;150          pixels = *(++p);
;;;151        } while (1);
;;;152      case LCD_DRAWMODE_XOR:;
;;;153      PixelLoopXor:
;;;154        if (PixelCnt > xsize) {
;;;155          PixelCnt = xsize;
;;;156        }
;;;157        xsize -= PixelCnt;
;;;158        do {
;;;159          if ((pixels & 0x80)) {
;;;160            (*pDev->pAPIList->pfXorPixel)(x, y);
;;;161          }
;;;162          x++;
;;;163          pDest++;
;;;164          pixels <<= 1;
;;;165        } while (--PixelCnt);
;;;166        if (xsize) {
;;;167          PixelCnt = 8;
;;;168          pixels = *(++p);
;;;169          goto PixelLoopXor;
;;;170        }
;;;171        break;
;;;172      }
;;;173    }
000070  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.116|
000074  2508              MOVS     r5,#8                 ;123
000076  f1080001          ADD      r0,r8,#1              ;124
00007a  4680              MOV      r8,r0                 ;124
00007c  7806              LDRB     r6,[r0,#0]            ;124
00007e  e7e0              B        |L1.66|
                  |L1.128|
000080  980c              LDR      r0,[sp,#0x30]         ;127
000082  7880              LDRB     r0,[r0,#2]            ;127
000084  9000              STR      r0,[sp,#0]            ;127
000086  bf00              NOP                            ;128
                  |L1.136|
000088  42a5              CMP      r5,r4                 ;130
00008a  d900              BLS      |L1.142|
00008c  4625              MOV      r5,r4                 ;131
                  |L1.142|
00008e  1b64              SUBS     r4,r4,r5              ;133
000090  e010              B        |L1.180|
                  |L1.146|
000092  f0160f80          TST      r6,#0x80              ;135
000096  d006              BEQ      |L1.166|
000098  f8d90028          LDR      r0,[r9,#0x28]         ;136
00009c  6a43              LDR      r3,[r0,#0x24]         ;136
00009e  4659              MOV      r1,r11                ;136
0000a0  4638              MOV      r0,r7                 ;136
0000a2  9a00              LDR      r2,[sp,#0]            ;136
0000a4  4798              BLX      r3                    ;136
                  |L1.166|
0000a6  1c7f              ADDS     r7,r7,#1              ;138
0000a8  0670              LSLS     r0,r6,#25             ;139
0000aa  0e06              LSRS     r6,r0,#24             ;139
0000ac  1e68              SUBS     r0,r5,#1              ;140
0000ae  0005              MOVS     r5,r0                 ;140
0000b0  d100              BNE      |L1.180|
0000b2  e001              B        |L1.184|
                  |L1.180|
0000b4  2e00              CMP      r6,#0                 ;134
0000b6  d1ec              BNE      |L1.146|
                  |L1.184|
0000b8  bf00              NOP                            ;141
0000ba  b904              CBNZ     r4,|L1.190|
0000bc  e7d8              B        |L1.112|
                  |L1.190|
0000be  442f              ADD      r7,r7,r5              ;148
0000c0  2508              MOVS     r5,#8                 ;149
0000c2  f1080001          ADD      r0,r8,#1              ;150
0000c6  4680              MOV      r8,r0                 ;150
0000c8  7806              LDRB     r6,[r0,#0]            ;150
0000ca  e7dd              B        |L1.136|
                  |L1.204|
0000cc  bf00              NOP                            ;153
                  |L1.206|
0000ce  42a5              CMP      r5,r4                 ;154
0000d0  d900              BLS      |L1.212|
0000d2  4625              MOV      r5,r4                 ;155
                  |L1.212|
0000d4  1b64              SUBS     r4,r4,r5              ;157
0000d6  bf00              NOP                            ;158
                  |L1.216|
0000d8  f0160f80          TST      r6,#0x80              ;159
0000dc  d005              BEQ      |L1.234|
0000de  f8d90028          LDR      r0,[r9,#0x28]         ;160
0000e2  4659              MOV      r1,r11                ;160
0000e4  6a82              LDR      r2,[r0,#0x28]         ;160
0000e6  4638              MOV      r0,r7                 ;160
0000e8  4790              BLX      r2                    ;160
                  |L1.234|
0000ea  1c7f              ADDS     r7,r7,#1              ;162
0000ec  980e              LDR      r0,[sp,#0x38]         ;163
0000ee  1c40              ADDS     r0,r0,#1              ;163
0000f0  900e              STR      r0,[sp,#0x38]         ;163
0000f2  0670              LSLS     r0,r6,#25             ;164
0000f4  0e06              LSRS     r6,r0,#24             ;164
0000f6  1e68              SUBS     r0,r5,#1              ;165
0000f8  0005              MOVS     r5,r0                 ;165
0000fa  d1ed              BNE      |L1.216|
0000fc  b12c              CBZ      r4,|L1.266|
0000fe  2508              MOVS     r5,#8                 ;167
000100  f1080001          ADD      r0,r8,#1              ;168
000104  4680              MOV      r8,r0                 ;168
000106  7806              LDRB     r6,[r0,#0]            ;168
000108  e7e1              B        |L1.206|
                  |L1.266|
00010a  bf00              NOP                            ;171
                  |L1.268|
00010c  bf00              NOP                            ;171
00010e  bf00              NOP      
000110  e7ae              B        |L1.112|
;;;174    
                          ENDP

000112  0000              DCW      0x0000
                  |L1.276|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine2BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine2BPP PROC
;;;178    */
;;;179    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;180                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;181    {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4698              MOV      r8,r3
00000a  f8ddb044          LDR      r11,[sp,#0x44]
00000e  e9dda40e          LDRD     r10,r4,[sp,#0x38]
;;;182      U8 pixels;
;;;183      U8  PixelCnt;
;;;184      GUI_USE_PARA(pUsage);
000012  bf00              NOP      
;;;185      GUI_USE_PARA(pDest);
000014  9812              LDR      r0,[sp,#0x48]
000016  9012              STR      r0,[sp,#0x48]
;;;186      PixelCnt = 4 - (Diff & 3);
000018  f00a0003          AND      r0,r10,#3
00001c  f1c00504          RSB      r5,r0,#4
;;;187      pixels = (*p) << ((Diff & 3) << 1);
000020  f8980000          LDRB     r0,[r8,#0]
000024  ea4f718a          LSL      r1,r10,#30
000028  0f49              LSRS     r1,r1,#29
00002a  4088              LSLS     r0,r0,r1
00002c  b2c6              UXTB     r6,r0
;;;188      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00002e  4826              LDR      r0,|L2.200|
000030  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000032  f0100003          ANDS     r0,r0,#3
000036  d002              BEQ      |L2.62|
000038  2802              CMP      r0,#2
00003a  d142              BNE      |L2.194|
00003c  e01f              B        |L2.126|
                  |L2.62|
;;;189      case 0:    /* Write mode */
;;;190      PixelLoopWrite:
00003e  bf00              NOP      
                  |L2.64|
;;;191        if (PixelCnt > xsize) {
000040  42a5              CMP      r5,r4
000042  dd00              BLE      |L2.70|
;;;192          PixelCnt = xsize;
000044  b2e5              UXTB     r5,r4
                  |L2.70|
;;;193        }
;;;194        xsize -= PixelCnt;
000046  1b64              SUBS     r4,r4,r5
;;;195        do {
000048  bf00              NOP      
                  |L2.74|
;;;196          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 6)));
00004a  ea4f1ca6          ASR      r12,r6,#6
00004e  9910              LDR      r1,[sp,#0x40]
000050  f831201c          LDRH     r2,[r1,r12,LSL #1]
000054  4638              MOV      r0,r7
000056  1c7f              ADDS     r7,r7,#1
000058  f8db1028          LDR      r1,[r11,#0x28]
00005c  6a4b              LDR      r3,[r1,#0x24]
00005e  9902              LDR      r1,[sp,#8]
000060  4798              BLX      r3
;;;197          pixels <<= 2;
000062  06b0              LSLS     r0,r6,#26
000064  0e06              LSRS     r6,r0,#24
;;;198        } while (--PixelCnt);
000066  1e68              SUBS     r0,r5,#1
000068  b2c0              UXTB     r0,r0
00006a  0005              MOVS     r5,r0
00006c  d1ed              BNE      |L2.74|
;;;199        if (xsize) {
00006e  b12c              CBZ      r4,|L2.124|
;;;200          PixelCnt = 4;
000070  2504              MOVS     r5,#4
;;;201          pixels = *(++p);
000072  f1080001          ADD      r0,r8,#1
000076  4680              MOV      r8,r0
000078  7806              LDRB     r6,[r0,#0]
;;;202          goto PixelLoopWrite;
00007a  e7e1              B        |L2.64|
                  |L2.124|
;;;203        }
;;;204        break;
00007c  e021              B        |L2.194|
                  |L2.126|
;;;205      case LCD_DRAWMODE_TRANS:
;;;206      PixelLoopTrans:
00007e  bf00              NOP      
                  |L2.128|
;;;207        if (PixelCnt > xsize)
000080  42a5              CMP      r5,r4
000082  dd00              BLE      |L2.134|
;;;208          PixelCnt = xsize;
000084  b2e5              UXTB     r5,r4
                  |L2.134|
;;;209        xsize -= PixelCnt;
000086  1b64              SUBS     r4,r4,r5
;;;210        do {
000088  bf00              NOP      
                  |L2.138|
;;;211          if (pixels & 0xc0) {
00008a  f0160fc0          TST      r6,#0xc0
00008e  d009              BEQ      |L2.164|
;;;212            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 6)));
000090  11b1              ASRS     r1,r6,#6
000092  9810              LDR      r0,[sp,#0x40]
000094  f8302011          LDRH     r2,[r0,r1,LSL #1]
000098  f8db0028          LDR      r0,[r11,#0x28]
00009c  6a43              LDR      r3,[r0,#0x24]
00009e  4638              MOV      r0,r7
0000a0  9902              LDR      r1,[sp,#8]
0000a2  4798              BLX      r3
                  |L2.164|
;;;213          }
;;;214          x++;
0000a4  1c7f              ADDS     r7,r7,#1
;;;215          pixels <<= 2;
0000a6  06b0              LSLS     r0,r6,#26
0000a8  0e06              LSRS     r6,r0,#24
;;;216        } while (--PixelCnt);
0000aa  1e68              SUBS     r0,r5,#1
0000ac  b2c0              UXTB     r0,r0
0000ae  0005              MOVS     r5,r0
0000b0  d1eb              BNE      |L2.138|
;;;217        if (xsize) {
0000b2  b12c              CBZ      r4,|L2.192|
;;;218          PixelCnt = 4;
0000b4  2504              MOVS     r5,#4
;;;219          pixels = *(++p);
0000b6  f1080001          ADD      r0,r8,#1
0000ba  4680              MOV      r8,r0
0000bc  7806              LDRB     r6,[r0,#0]
;;;220          goto PixelLoopTrans;
0000be  e7df              B        |L2.128|
                  |L2.192|
;;;221        }
;;;222        break;
0000c0  bf00              NOP      
                  |L2.194|
0000c2  bf00              NOP                            ;204
;;;223      }
;;;224    }
0000c4  e8bd9fff          POP      {r0-r12,pc}
;;;225    
                          ENDP

                  |L2.200|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine4BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine4BPP PROC
;;;229    */
;;;230    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;231                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;232    {
000004  b081              SUB      sp,sp,#4
000006  4683              MOV      r11,r0
000008  460d              MOV      r5,r1
00000a  4699              MOV      r9,r3
00000c  e9dda60e          LDRD     r10,r6,[sp,#0x38]
000010  e9dd7810          LDRD     r7,r8,[sp,#0x40]
;;;233      U8 pixels;
;;;234      GUI_USE_PARA(pUsage);
000014  bf00              NOP      
;;;235      GUI_USE_PARA(pDest);
000016  9812              LDR      r0,[sp,#0x48]
000018  9012              STR      r0,[sp,#0x48]
;;;236      pixels = (*p) << ((Diff & 1) << 2);
00001a  f8990000          LDRB     r0,[r9,#0]
00001e  ea4f71ca          LSL      r1,r10,#31
000022  0f49              LSRS     r1,r1,#29
000024  4088              LSLS     r0,r0,r1
000026  b2c4              UXTB     r4,r0
;;;237      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000028  4848              LDR      r0,|L3.332|
00002a  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00002c  f0100003          ANDS     r0,r0,#3
000030  d002              BEQ      |L3.56|
000032  2802              CMP      r0,#2
000034  d142              BNE      |L3.188|
000036  e042              B        |L3.190|
                  |L3.56|
;;;238    /*
;;;239              * Write mode *
;;;240    */
;;;241      case 0:
;;;242        /* Draw incomplete bytes to the left of center area */
;;;243        if (Diff) {
000038  f1ba0f00          CMP      r10,#0
00003c  d00e              BEQ      |L3.92|
;;;244          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 4)));
00003e  1121              ASRS     r1,r4,#4
000040  f8372011          LDRH     r2,[r7,r1,LSL #1]
000044  4628              MOV      r0,r5
000046  1c6d              ADDS     r5,r5,#1
000048  f8d81028          LDR      r1,[r8,#0x28]
00004c  6a4b              LDR      r3,[r1,#0x24]
00004e  9903              LDR      r1,[sp,#0xc]
000050  4798              BLX      r3
;;;245          xsize--;
000052  1e76              SUBS     r6,r6,#1
;;;246          pixels = *++p;
000054  f1090001          ADD      r0,r9,#1
000058  4681              MOV      r9,r0
00005a  7804              LDRB     r4,[r0,#0]
                  |L3.92|
;;;247        }
;;;248        /* Draw center area (2 pixels in one byte) */
;;;249        if (xsize >= 2) {
00005c  2e02              CMP      r6,#2
00005e  db22              BLT      |L3.166|
;;;250          int i = xsize >> 1;
000060  1070              ASRS     r0,r6,#1
000062  9000              STR      r0,[sp,#0]
;;;251          xsize &= 1;
000064  f0060601          AND      r6,r6,#1
;;;252          do {
000068  bf00              NOP      
                  |L3.106|
;;;253            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >>  4)));
00006a  1121              ASRS     r1,r4,#4
00006c  f8372011          LDRH     r2,[r7,r1,LSL #1]
000070  4628              MOV      r0,r5
000072  1c6d              ADDS     r5,r5,#1
000074  f8d81028          LDR      r1,[r8,#0x28]
000078  6a4b              LDR      r3,[r1,#0x24]
00007a  9903              LDR      r1,[sp,#0xc]
00007c  4798              BLX      r3
;;;254            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels  & 15)));
00007e  f004010f          AND      r1,r4,#0xf
000082  f8372011          LDRH     r2,[r7,r1,LSL #1]
000086  4628              MOV      r0,r5
000088  1c6d              ADDS     r5,r5,#1
00008a  f8d81028          LDR      r1,[r8,#0x28]
00008e  6a4b              LDR      r3,[r1,#0x24]
000090  9903              LDR      r1,[sp,#0xc]
000092  4798              BLX      r3
;;;255            pixels = *++p;
000094  f1090001          ADD      r0,r9,#1
000098  4681              MOV      r9,r0
00009a  7804              LDRB     r4,[r0,#0]
;;;256          } while (--i);
00009c  9800              LDR      r0,[sp,#0]
00009e  1e40              SUBS     r0,r0,#1
0000a0  9000              STR      r0,[sp,#0]
0000a2  d1e2              BNE      |L3.106|
;;;257        }
0000a4  bf00              NOP      
                  |L3.166|
;;;258        /* Draw incomplete bytes to the right of center area */
;;;259        if (xsize) {
0000a6  b14e              CBZ      r6,|L3.188|
;;;260          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 4)));
0000a8  1121              ASRS     r1,r4,#4
0000aa  f8372011          LDRH     r2,[r7,r1,LSL #1]
0000ae  4628              MOV      r0,r5
0000b0  1c6d              ADDS     r5,r5,#1
0000b2  f8d81028          LDR      r1,[r8,#0x28]
0000b6  6a4b              LDR      r3,[r1,#0x24]
0000b8  9903              LDR      r1,[sp,#0xc]
0000ba  4798              BLX      r3
                  |L3.188|
;;;261        }
;;;262        break;
0000bc  e042              B        |L3.324|
                  |L3.190|
;;;263    /*
;;;264              * Transparent draw mode *
;;;265    */
;;;266      case LCD_DRAWMODE_TRANS:
;;;267        /* Draw incomplete bytes to the left of center area */
;;;268        if (Diff) {
0000be  f1ba0f00          CMP      r10,#0
0000c2  d011              BEQ      |L3.232|
;;;269          if (pixels & 0xF0) {
0000c4  f0140ff0          TST      r4,#0xf0
0000c8  d008              BEQ      |L3.220|
;;;270            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 4)));
0000ca  1120              ASRS     r0,r4,#4
0000cc  f8372010          LDRH     r2,[r7,r0,LSL #1]
0000d0  f8d80028          LDR      r0,[r8,#0x28]
0000d4  6a43              LDR      r3,[r0,#0x24]
0000d6  4628              MOV      r0,r5
0000d8  9903              LDR      r1,[sp,#0xc]
0000da  4798              BLX      r3
                  |L3.220|
;;;271          }
;;;272          x++;
0000dc  1c6d              ADDS     r5,r5,#1
;;;273          xsize--;
0000de  1e76              SUBS     r6,r6,#1
;;;274          pixels = *++p;
0000e0  f1090001          ADD      r0,r9,#1
0000e4  4681              MOV      r9,r0
0000e6  7804              LDRB     r4,[r0,#0]
                  |L3.232|
;;;275        }
;;;276        /* Draw center area (2 pixels in one byte) */
;;;277        while (xsize >= 2) {
0000e8  e01d              B        |L3.294|
                  |L3.234|
;;;278          /* Draw 1. (left) pixel */
;;;279          if (pixels & 0xF0) {
0000ea  f0140ff0          TST      r4,#0xf0
0000ee  d008              BEQ      |L3.258|
;;;280            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 4)));
0000f0  1120              ASRS     r0,r4,#4
0000f2  f8372010          LDRH     r2,[r7,r0,LSL #1]
0000f6  f8d80028          LDR      r0,[r8,#0x28]
0000fa  6a43              LDR      r3,[r0,#0x24]
0000fc  4628              MOV      r0,r5
0000fe  9903              LDR      r1,[sp,#0xc]
000100  4798              BLX      r3
                  |L3.258|
;;;281          }
;;;282          /* Draw 2. (right) pixel */
;;;283          if (pixels &= 15) {
000102  f004000f          AND      r0,r4,#0xf
000106  0004              MOVS     r4,r0
000108  d007              BEQ      |L3.282|
;;;284            (*pDev->pAPIList->pfSetPixelIndex)(x + 1, y, *(pTrans + pixels));
00010a  f8372014          LDRH     r2,[r7,r4,LSL #1]
00010e  f8d80028          LDR      r0,[r8,#0x28]
000112  6a43              LDR      r3,[r0,#0x24]
000114  1c68              ADDS     r0,r5,#1
000116  9903              LDR      r1,[sp,#0xc]
000118  4798              BLX      r3
                  |L3.282|
;;;285          }
;;;286          x += 2;
00011a  1cad              ADDS     r5,r5,#2
;;;287          xsize -= 2;
00011c  1eb6              SUBS     r6,r6,#2
;;;288          pixels = *++p;
00011e  f1090001          ADD      r0,r9,#1
000122  4681              MOV      r9,r0
000124  7804              LDRB     r4,[r0,#0]
                  |L3.294|
000126  2e02              CMP      r6,#2                 ;277
000128  dadf              BGE      |L3.234|
;;;289        }
;;;290        /* Draw incomplete bytes to the right of center area */
;;;291        if (xsize) {
00012a  b156              CBZ      r6,|L3.322|
;;;292          if (pixels >>= 4) {
00012c  1120              ASRS     r0,r4,#4
00012e  0004              MOVS     r4,r0
000130  d007              BEQ      |L3.322|
;;;293            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + pixels));
000132  f8372014          LDRH     r2,[r7,r4,LSL #1]
000136  f8d80028          LDR      r0,[r8,#0x28]
00013a  6a43              LDR      r3,[r0,#0x24]
00013c  4628              MOV      r0,r5
00013e  9903              LDR      r1,[sp,#0xc]
000140  4798              BLX      r3
                  |L3.322|
;;;294          }
;;;295        }
;;;296        break;
000142  bf00              NOP      
                  |L3.324|
000144  bf00              NOP                            ;262
;;;297      }
;;;298    }
000146  b005              ADD      sp,sp,#0x14
000148  e8bd8ff0          POP      {r4-r11,pc}
;;;299    
                          ENDP

                  |L3.332|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine8BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine8BPP PROC
;;;303    */
;;;304    static void _DrawBitLine8BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;305                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest) {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
00000c  e9ddab0c          LDRD     r10,r11,[sp,#0x30]
000010  e9dd890a          LDRD     r8,r9,[sp,#0x28]
;;;306      GUI_USE_PARA(pUsage);
000014  bf00              NOP      
;;;307      GUI_USE_PARA(pDest);
000016  bf00              NOP      
;;;308      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000018  4818              LDR      r0,|L4.124|
00001a  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00001c  f0100003          ANDS     r0,r0,#3
000020  d002              BEQ      |L4.40|
000022  2802              CMP      r0,#2
000024  d126              BNE      |L4.116|
000026  e011              B        |L4.76|
                  |L4.40|
;;;309      case 0:    /* Write mode */
;;;310        do {
000028  bf00              NOP      
                  |L4.42|
;;;311          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + *pSrc));
00002a  7821              LDRB     r1,[r4,#0]
00002c  f8392011          LDRH     r2,[r9,r1,LSL #1]
000030  4628              MOV      r0,r5
000032  1c6d              ADDS     r5,r5,#1
000034  f8da1028          LDR      r1,[r10,#0x28]
000038  6a4b              LDR      r3,[r1,#0x24]
00003a  4639              MOV      r1,r7
00003c  4798              BLX      r3
;;;312          pSrc++;
00003e  1c64              ADDS     r4,r4,#1
;;;313        } while (--xsize);
000040  f1a80001          SUB      r0,r8,#1
000044  ea5f0800          MOVS     r8,r0
000048  d1ef              BNE      |L4.42|
;;;314        break;
00004a  e013              B        |L4.116|
                  |L4.76|
;;;315      case LCD_DRAWMODE_TRANS:
;;;316        do {
00004c  bf00              NOP      
                  |L4.78|
;;;317          if (*pSrc) {
00004e  7820              LDRB     r0,[r4,#0]
000050  b140              CBZ      r0,|L4.100|
;;;318            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + *pSrc));
000052  7820              LDRB     r0,[r4,#0]
000054  f8392010          LDRH     r2,[r9,r0,LSL #1]
000058  f8da0028          LDR      r0,[r10,#0x28]
00005c  4639              MOV      r1,r7
00005e  6a43              LDR      r3,[r0,#0x24]
000060  4628              MOV      r0,r5
000062  4798              BLX      r3
                  |L4.100|
;;;319          }
;;;320          x++;
000064  1c6d              ADDS     r5,r5,#1
;;;321          pSrc++;
000066  1c64              ADDS     r4,r4,#1
;;;322        } while (--xsize);
000068  f1a80001          SUB      r0,r8,#1
00006c  ea5f0800          MOVS     r8,r0
000070  d1ed              BNE      |L4.78|
;;;323        break;
000072  bf00              NOP      
                  |L4.116|
000074  bf00              NOP                            ;314
;;;324      }
;;;325    }
000076  e8bd9ff0          POP      {r4-r12,pc}
;;;326    
                          ENDP

00007a  0000              DCW      0x0000
                  |L4.124|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine8BPP_DDB||, CODE, READONLY, ALIGN=2

                  _DrawBitLine8BPP_DDB PROC
;;;330    */
;;;331    static void _DrawBitLine8BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize, GUI_MEMDEV* pDev, PIXELINDEX* pDest) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
00000c  e9dd9a09          LDRD     r9,r10,[sp,#0x24]
000010  f8dd8020          LDR      r8,[sp,#0x20]
;;;332      GUI_USE_PARA(pUsage);
000014  bf00              NOP      
;;;333      GUI_USE_PARA(pDest);
000016  bf00              NOP      
;;;334      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000018  4816              LDR      r0,|L5.116|
00001a  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00001c  f0100003          ANDS     r0,r0,#3
000020  d002              BEQ      |L5.40|
000022  2802              CMP      r0,#2
000024  d122              BNE      |L5.108|
000026  e00f              B        |L5.72|
                  |L5.40|
;;;335      case 0:    /* Write mode */
;;;336        do {
000028  bf00              NOP      
                  |L5.42|
;;;337          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *pSrc);
00002a  7822              LDRB     r2,[r4,#0]
00002c  4628              MOV      r0,r5
00002e  1c6d              ADDS     r5,r5,#1
000030  f8d91028          LDR      r1,[r9,#0x28]
000034  6a4b              LDR      r3,[r1,#0x24]
000036  4639              MOV      r1,r7
000038  4798              BLX      r3
;;;338          pSrc++;
00003a  1c64              ADDS     r4,r4,#1
;;;339        } while (--xsize);
00003c  f1a80001          SUB      r0,r8,#1
000040  ea5f0800          MOVS     r8,r0
000044  d1f1              BNE      |L5.42|
;;;340        break;
000046  e011              B        |L5.108|
                  |L5.72|
;;;341      case LCD_DRAWMODE_TRANS:
;;;342        do {
000048  bf00              NOP      
                  |L5.74|
;;;343          if (*pSrc) {
00004a  7820              LDRB     r0,[r4,#0]
00004c  b130              CBZ      r0,|L5.92|
;;;344            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *pSrc);
00004e  7822              LDRB     r2,[r4,#0]
000050  f8d90028          LDR      r0,[r9,#0x28]
000054  4639              MOV      r1,r7
000056  6a43              LDR      r3,[r0,#0x24]
000058  4628              MOV      r0,r5
00005a  4798              BLX      r3
                  |L5.92|
;;;345          }
;;;346          x++;
00005c  1c6d              ADDS     r5,r5,#1
;;;347          pSrc++;
00005e  1c64              ADDS     r4,r4,#1
;;;348        } while (--xsize);
000060  f1a80001          SUB      r0,r8,#1
000064  ea5f0800          MOVS     r8,r0
000068  d1ef              BNE      |L5.74|
;;;349        break;
00006a  bf00              NOP      
                  |L5.108|
00006c  bf00              NOP                            ;340
;;;350      }
;;;351    }
00006e  e8bd87f0          POP      {r4-r10,pc}
;;;352    
                          ENDP

000072  0000              DCW      0x0000
                  |L5.116|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmap||, CODE, READONLY, ALIGN=2

                  _DrawBitmap PROC
;;;356    */
;;;357    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;358                            int BitsPerPixel, int BytesPerLine,
;;;359                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;360    {
000004  b087              SUB      sp,sp,#0x1c
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  469a              MOV      r10,r3
00000c  e9ddb917          LDRD     r11,r9,[sp,#0x5c]
;;;361      int i;
;;;362      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000010  4947              LDR      r1,|L6.304|
000012  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000016  f7fffffe          BL       GUI_ALLOC_h2p
00001a  4606              MOV      r6,r0
;;;363      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
00001c  8b30              LDRH     r0,[r6,#0x18]
00001e  b120              CBZ      r0,|L6.42|
000020  f9b60018          LDRSH    r0,[r6,#0x18]
000024  f7fffffe          BL       GUI_ALLOC_h2p
000028  e000              B        |L6.44|
                  |L6.42|
00002a  2000              MOVS     r0,#0
                  |L6.44|
00002c  9006              STR      r0,[sp,#0x18]
;;;364      unsigned    BytesPerLineDest;
;;;365      PIXELINDEX* pDest;
;;;366      BytesPerLineDest = pDev->BytesPerLine;
00002e  68f0              LDR      r0,[r6,#0xc]
000030  9005              STR      r0,[sp,#0x14]
;;;367      x0 += Diff;
000032  9807              LDR      r0,[sp,#0x1c]
000034  4458              ADD      r0,r0,r11
000036  9007              STR      r0,[sp,#0x1c]
;;;368      /* Mark all affected pixels dirty unless transparency is set */
;;;369      if (pUsage) {
000038  9806              LDR      r0,[sp,#0x18]
00003a  b160              CBZ      r0,|L6.86|
;;;370        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
00003c  483c              LDR      r0,|L6.304|
00003e  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000040  f0100f02          TST      r0,#2
000044  d107              BNE      |L6.86|
;;;371          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
000046  4643              MOV      r3,r8
000048  463a              MOV      r2,r7
00004a  f8cda000          STR      r10,[sp,#0]
00004e  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000052  f7fffffe          BL       GUI_USAGE_AddRect
                  |L6.86|
;;;372        }
;;;373      }
;;;374      pDest = _XY2PTR_BITOFFSET(x0, y0, 0);
000056  2200              MOVS     r2,#0
000058  4639              MOV      r1,r7
00005a  9807              LDR      r0,[sp,#0x1c]
00005c  f7fffffe          BL       _XY2PTR_BITOFFSET
000060  4605              MOV      r5,r0
;;;375    #if BITSPERPIXEL == 16
;;;376      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;377      if (BitsPerPixel == 16) {
;;;378        for (i = 0; i < ysize; i++) {
;;;379          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDev, pDest);
;;;380          pData += BytesPerLine;
;;;381          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;382        }
;;;383        return;
;;;384      }
;;;385    #endif
;;;386      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;387      if (BitsPerPixel == 8) {
000062  9814              LDR      r0,[sp,#0x50]
000064  2808              CMP      r0,#8
000066  d124              BNE      |L6.178|
;;;388        for (i = 0; i < ysize; i++) {
000068  2400              MOVS     r4,#0
00006a  e01d              B        |L6.168|
                  |L6.108|
;;;389          if (pTrans) {
00006c  f1b90f00          CMP      r9,#0
000070  d00a              BEQ      |L6.136|
;;;390            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDev, pDest);
000072  19e2              ADDS     r2,r4,r7
000074  e9cd8900          STRD     r8,r9,[sp,#0]
000078  e9cd6502          STRD     r6,r5,[sp,#8]
00007c  9b16              LDR      r3,[sp,#0x58]
00007e  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000082  f7fffffe          BL       _DrawBitLine8BPP
000086  e008              B        |L6.154|
                  |L6.136|
;;;391          } else {
;;;392            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDev, pDest);
000088  19e2              ADDS     r2,r4,r7
00008a  e9cd8600          STRD     r8,r6,[sp,#0]
00008e  9502              STR      r5,[sp,#8]
000090  9b16              LDR      r3,[sp,#0x58]
000092  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000096  f7fffffe          BL       _DrawBitLine8BPP_DDB
                  |L6.154|
;;;393          }
;;;394          pData += BytesPerLine;
00009a  e9dd1015          LDRD     r1,r0,[sp,#0x54]
00009e  4408              ADD      r0,r0,r1
0000a0  9016              STR      r0,[sp,#0x58]
;;;395          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
0000a2  9805              LDR      r0,[sp,#0x14]
0000a4  4405              ADD      r5,r5,r0
0000a6  1c64              ADDS     r4,r4,#1              ;388
                  |L6.168|
0000a8  4554              CMP      r4,r10                ;388
0000aa  dbdf              BLT      |L6.108|
                  |L6.172|
;;;396        }
;;;397        return;
;;;398      }
;;;399      /* Use aID for bitmaps without palette */
;;;400      if (!pTrans) {
;;;401        pTrans = aID;
;;;402      }
;;;403      for (i = 0; i < ysize; i++) {
;;;404        switch (BitsPerPixel) {
;;;405        case 1:
;;;406          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;407          break;
;;;408        case 2:
;;;409          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;410          break;
;;;411        case 4:
;;;412          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;413          break;
;;;414        }
;;;415        pData += BytesPerLine;
;;;416        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;417      }
;;;418    }
0000ac  b00b              ADD      sp,sp,#0x2c
0000ae  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.178|
0000b2  f1b90f00          CMP      r9,#0                 ;400
0000b6  d101              BNE      |L6.188|
0000b8  f8df9078          LDR      r9,|L6.308|
                  |L6.188|
0000bc  2400              MOVS     r4,#0                 ;403
0000be  e033              B        |L6.296|
                  |L6.192|
0000c0  9814              LDR      r0,[sp,#0x50]         ;404
0000c2  2801              CMP      r0,#1                 ;404
0000c4  d004              BEQ      |L6.208|
0000c6  2802              CMP      r0,#2                 ;404
0000c8  d00e              BEQ      |L6.232|
0000ca  2804              CMP      r0,#4                 ;404
0000cc  d124              BNE      |L6.280|
0000ce  e017              B        |L6.256|
                  |L6.208|
0000d0  19e2              ADDS     r2,r4,r7              ;406
0000d2  e9cdb800          STRD     r11,r8,[sp,#0]        ;406
0000d6  e9cd9602          STRD     r9,r6,[sp,#8]         ;406
0000da  9504              STR      r5,[sp,#0x10]         ;406
0000dc  9b16              LDR      r3,[sp,#0x58]         ;406
0000de  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;406
0000e2  f7fffffe          BL       _DrawBitLine1BPP
0000e6  e017              B        |L6.280|
                  |L6.232|
0000e8  19e2              ADDS     r2,r4,r7              ;409
0000ea  e9cdb800          STRD     r11,r8,[sp,#0]        ;409
0000ee  e9cd9602          STRD     r9,r6,[sp,#8]         ;409
0000f2  9504              STR      r5,[sp,#0x10]         ;409
0000f4  9b16              LDR      r3,[sp,#0x58]         ;409
0000f6  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;409
0000fa  f7fffffe          BL       _DrawBitLine2BPP
0000fe  e00b              B        |L6.280|
                  |L6.256|
000100  19e2              ADDS     r2,r4,r7              ;412
000102  e9cdb800          STRD     r11,r8,[sp,#0]        ;412
000106  e9cd9602          STRD     r9,r6,[sp,#8]         ;412
00010a  9504              STR      r5,[sp,#0x10]         ;412
00010c  9b16              LDR      r3,[sp,#0x58]         ;412
00010e  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;412
000112  f7fffffe          BL       _DrawBitLine4BPP
000116  bf00              NOP                            ;413
                  |L6.280|
000118  bf00              NOP                            ;407
00011a  e9dd1015          LDRD     r1,r0,[sp,#0x54]      ;415
00011e  4408              ADD      r0,r0,r1              ;415
000120  9016              STR      r0,[sp,#0x58]         ;415
000122  9805              LDR      r0,[sp,#0x14]         ;416
000124  4405              ADD      r5,r5,r0              ;416
000126  1c64              ADDS     r4,r4,#1              ;403
                  |L6.296|
000128  4554              CMP      r4,r10                ;403
00012a  dbc9              BLT      |L6.192|
00012c  bf00              NOP      
00012e  e7bd              B        |L6.172|
;;;419    
                          ENDP

                  |L6.304|
                          DCD      GUI_Context
                  |L6.308|
                          DCD      aID

                          AREA ||i._DrawHLine||, CODE, READONLY, ALIGN=1

                  _DrawHLine PROC
;;;490    */
;;;491    static void _DrawHLine(int x0, int y, int x1) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;492      _FillRect(x0, y, x1, y);
000008  4623              MOV      r3,r4
00000a  4632              MOV      r2,r6
00000c  4621              MOV      r1,r4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       _FillRect
;;;493    }
000014  bd70              POP      {r4-r6,pc}
;;;494    
                          ENDP


                          AREA ||i._DrawVLine||, CODE, READONLY, ALIGN=2

                  _DrawVLine PROC
;;;498    */
;;;499    static void _DrawVLine(int x , int y0, int y1) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;500      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00000a  492a              LDR      r1,|L8.180|
00000c  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000010  f7fffffe          BL       GUI_ALLOC_h2p
000014  4680              MOV      r8,r0
;;;501      GUI_USAGE_h hUsage = pDev->hUsage; 
000016  f9b8b018          LDRSH    r11,[r8,#0x18]
;;;502      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
00001a  f1bb0f00          CMP      r11,#0
00001e  d003              BEQ      |L8.40|
000020  4658              MOV      r0,r11
000022  f7fffffe          BL       GUI_ALLOC_h2p
000026  e000              B        |L8.42|
                  |L8.40|
000028  2000              MOVS     r0,#0
                  |L8.42|
00002a  4605              MOV      r5,r0
;;;503      U8* pData;
;;;504      int Bit, Mask;
;;;505      pData = _XY2PTR_BITOFFSET(x, y0, &Bit);
00002c  aa01              ADD      r2,sp,#4
00002e  4631              MOV      r1,r6
000030  4650              MOV      r0,r10
000032  f7fffffe          BL       _XY2PTR_BITOFFSET
000036  4604              MOV      r4,r0
;;;506      Mask  = (1 << Bit);
000038  2001              MOVS     r0,#1
00003a  9901              LDR      r1,[sp,#4]
00003c  fa00f901          LSL      r9,r0,r1
;;;507      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000040  481c              LDR      r0,|L8.180|
000042  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000044  f0100f01          TST      r0,#1
000048  d013              BEQ      |L8.114|
;;;508        do {
00004a  bf00              NOP      
                  |L8.76|
;;;509          *pData ^= Mask;
00004c  7820              LDRB     r0,[r4,#0]
00004e  ea800009          EOR      r0,r0,r9
000052  7020              STRB     r0,[r4,#0]
;;;510          if (pUsage) {
000054  b12d              CBZ      r5,|L8.98|
;;;511            GUI_USAGE_AddPixel(pUsage, x, y0);
000056  68a8              LDR      r0,[r5,#8]
000058  4632              MOV      r2,r6
00005a  4651              MOV      r1,r10
00005c  6803              LDR      r3,[r0,#0]
00005e  4628              MOV      r0,r5
000060  4798              BLX      r3
                  |L8.98|
;;;512          }
;;;513          pData += pDev->BytesPerLine;
000062  f8d8000c          LDR      r0,[r8,#0xc]
000066  4404              ADD      r4,r4,r0
;;;514        } while (++y0 <= y1);
000068  1c70              ADDS     r0,r6,#1
00006a  4606              MOV      r6,r0
00006c  42b8              CMP      r0,r7
00006e  dded              BLE      |L8.76|
000070  e01e              B        |L8.176|
                  |L8.114|
;;;515      } else {
;;;516        int Pixel;
;;;517        Pixel = (LCD_COLORINDEX & 1) << Bit;
000072  4810              LDR      r0,|L8.180|
000074  7880              LDRB     r0,[r0,#2]  ; GUI_Context
000076  f0000001          AND      r0,r0,#1
00007a  9901              LDR      r1,[sp,#4]
00007c  4088              LSLS     r0,r0,r1
00007e  9000              STR      r0,[sp,#0]
;;;518        do {
000080  bf00              NOP      
                  |L8.130|
;;;519          *pData &= ~Mask;
000082  7820              LDRB     r0,[r4,#0]
000084  ea200009          BIC      r0,r0,r9
000088  7020              STRB     r0,[r4,#0]
;;;520          *pData |= Pixel;
00008a  7820              LDRB     r0,[r4,#0]
00008c  9900              LDR      r1,[sp,#0]
00008e  4308              ORRS     r0,r0,r1
000090  7020              STRB     r0,[r4,#0]
;;;521          if (pUsage) {
000092  b12d              CBZ      r5,|L8.160|
;;;522            GUI_USAGE_AddPixel(pUsage, x, y0);
000094  68a8              LDR      r0,[r5,#8]
000096  4632              MOV      r2,r6
000098  4651              MOV      r1,r10
00009a  6803              LDR      r3,[r0,#0]
00009c  4628              MOV      r0,r5
00009e  4798              BLX      r3
                  |L8.160|
;;;523          }
;;;524          pData += pDev->BytesPerLine;
0000a0  f8d8000c          LDR      r0,[r8,#0xc]
0000a4  4404              ADD      r4,r4,r0
;;;525        } while (++y0 <= y1);
0000a6  1c70              ADDS     r0,r6,#1
0000a8  4606              MOV      r6,r0
0000aa  42b8              CMP      r0,r7
0000ac  dde9              BLE      |L8.130|
;;;526      }
0000ae  bf00              NOP      
                  |L8.176|
;;;527    }
0000b0  e8bd9ffc          POP      {r2-r12,pc}
;;;528    
                          ENDP

                  |L8.180|
                          DCD      GUI_Context

                          AREA ||i._FillRect||, CODE, READONLY, ALIGN=2

                  _FillRect PROC
;;;423    */
;;;424    static void _FillRect(int x0, int y0, int x1, int y1) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4693              MOV      r11,r2
00000a  4699              MOV      r9,r3
;;;425      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00000c  4954              LDR      r1,|L9.352|
00000e  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000012  f7fffffe          BL       GUI_ALLOC_h2p
000016  9003              STR      r0,[sp,#0xc]
;;;426      U8* pData;
;;;427      int Bit, Len;
;;;428      int RemPixels;
;;;429      Len = x1 - x0 + 1;
000018  ebab0008          SUB      r0,r11,r8
00001c  1c40              ADDS     r0,r0,#1
00001e  9001              STR      r0,[sp,#4]
;;;430      /* Mark rectangle as modified */
;;;431      if (pDev->hUsage) {
000020  9803              LDR      r0,[sp,#0xc]
000022  8b00              LDRH     r0,[r0,#0x18]
000024  b178              CBZ      r0,|L9.70|
;;;432        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
000026  9903              LDR      r1,[sp,#0xc]
000028  f9b10018          LDRSH    r0,[r1,#0x18]
00002c  f7fffffe          BL       GUI_ALLOC_h2p
000030  4607              MOV      r7,r0
000032  eba90006          SUB      r0,r9,r6
000036  1c40              ADDS     r0,r0,#1
000038  9000              STR      r0,[sp,#0]
00003a  4632              MOV      r2,r6
00003c  4641              MOV      r1,r8
00003e  4638              MOV      r0,r7
000040  9b01              LDR      r3,[sp,#4]
000042  f7fffffe          BL       GUI_USAGE_AddRect
                  |L9.70|
;;;433      }
;;;434      /* Do the drawing */
;;;435      for (; y0 <= y1; y0++) {
000046  e086              B        |L9.342|
                  |L9.72|
;;;436        pData = _XY2PTR_BITOFFSET(x0, y0, &Bit);
000048  aa02              ADD      r2,sp,#8
00004a  4631              MOV      r1,r6
00004c  4640              MOV      r0,r8
00004e  f7fffffe          BL       _XY2PTR_BITOFFSET
000052  4604              MOV      r4,r0
;;;437        RemPixels = Len;
000054  9d01              LDR      r5,[sp,#4]
;;;438        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000056  4842              LDR      r0,|L9.352|
000058  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00005a  f0100f01          TST      r0,#1
00005e  d032              BEQ      |L9.198|
;;;439          if (Bit < 7) {
000060  9802              LDR      r0,[sp,#8]
000062  2807              CMP      r0,#7
000064  da10              BGE      |L9.136|
;;;440            while ((Bit >= 0) && RemPixels--) {
000066  e007              B        |L9.120|
                  |L9.104|
;;;441              *pData ^= 1 << (Bit--);
000068  7820              LDRB     r0,[r4,#0]
00006a  9a02              LDR      r2,[sp,#8]
00006c  1e51              SUBS     r1,r2,#1
00006e  9102              STR      r1,[sp,#8]
000070  2101              MOVS     r1,#1
000072  4091              LSLS     r1,r1,r2
000074  4048              EORS     r0,r0,r1
000076  7020              STRB     r0,[r4,#0]
                  |L9.120|
000078  9802              LDR      r0,[sp,#8]            ;440
00007a  2800              CMP      r0,#0                 ;440
00007c  db03              BLT      |L9.134|
00007e  0028              MOVS     r0,r5                 ;440
000080  f1a50501          SUB      r5,r5,#1              ;440
000084  d1f0              BNE      |L9.104|
                  |L9.134|
;;;442            }
;;;443            pData++;
000086  1c64              ADDS     r4,r4,#1
                  |L9.136|
;;;444          }
;;;445          if (RemPixels > 0) {
000088  2d00              CMP      r5,#0
00008a  dd63              BLE      |L9.340|
;;;446            int NumBytes = RemPixels >> 3;
00008c  10e8              ASRS     r0,r5,#3
;;;447            if (NumBytes > 0) {
00008e  2800              CMP      r0,#0
000090  dd09              BLE      |L9.166|
;;;448              RemPixels -= NumBytes << 3;
000092  eba505c0          SUB      r5,r5,r0,LSL #3
;;;449              do {
000096  bf00              NOP      
                  |L9.152|
;;;450                *pData ^= *pData;
000098  7821              LDRB     r1,[r4,#0]
00009a  4049              EORS     r1,r1,r1
00009c  7021              STRB     r1,[r4,#0]
;;;451                pData++;
00009e  1c64              ADDS     r4,r4,#1
;;;452              } while (--NumBytes);
0000a0  1e41              SUBS     r1,r0,#1
0000a2  0008              MOVS     r0,r1
0000a4  d1f8              BNE      |L9.152|
                  |L9.166|
;;;453            }
;;;454            Bit = 7;
0000a6  2107              MOVS     r1,#7
0000a8  9102              STR      r1,[sp,#8]
;;;455            while (RemPixels--) {
0000aa  e007              B        |L9.188|
                  |L9.172|
;;;456              *pData ^= 1 << (Bit--);
0000ac  7821              LDRB     r1,[r4,#0]
0000ae  9b02              LDR      r3,[sp,#8]
0000b0  1e5a              SUBS     r2,r3,#1
0000b2  9202              STR      r2,[sp,#8]
0000b4  2201              MOVS     r2,#1
0000b6  409a              LSLS     r2,r2,r3
0000b8  4051              EORS     r1,r1,r2
0000ba  7021              STRB     r1,[r4,#0]
                  |L9.188|
0000bc  0029              MOVS     r1,r5                 ;455
0000be  f1a50501          SUB      r5,r5,#1              ;455
0000c2  d1f3              BNE      |L9.172|
;;;457            }
;;;458          }
0000c4  e046              B        |L9.340|
                  |L9.198|
;;;459        } else {  /* Fill */
;;;460          int Color, FillByte;
;;;461          Color    = (LCD_COLORINDEX & 1);
0000c6  4826              LDR      r0,|L9.352|
0000c8  7880              LDRB     r0,[r0,#2]  ; GUI_Context
0000ca  f0000a01          AND      r10,r0,#1
;;;462          FillByte = (-Color) & 0xFF;
0000ce  f1ca0000          RSB      r0,r10,#0
0000d2  b2c0              UXTB     r0,r0
0000d4  9000              STR      r0,[sp,#0]
;;;463          if (Bit < 7) {
0000d6  9802              LDR      r0,[sp,#8]
0000d8  2807              CMP      r0,#7
0000da  da16              BGE      |L9.266|
;;;464            while ((Bit >= 0) && RemPixels--) {
0000dc  e00d              B        |L9.250|
                  |L9.222|
;;;465              *pData &= ~(1 << Bit);
0000de  7820              LDRB     r0,[r4,#0]
0000e0  2101              MOVS     r1,#1
0000e2  9a02              LDR      r2,[sp,#8]
0000e4  4091              LSLS     r1,r1,r2
0000e6  4388              BICS     r0,r0,r1
0000e8  7020              STRB     r0,[r4,#0]
;;;466              *pData |= Color << (Bit--);
0000ea  7820              LDRB     r0,[r4,#0]
0000ec  9a02              LDR      r2,[sp,#8]
0000ee  1e51              SUBS     r1,r2,#1
0000f0  9102              STR      r1,[sp,#8]
0000f2  fa0af102          LSL      r1,r10,r2
0000f6  4308              ORRS     r0,r0,r1
0000f8  7020              STRB     r0,[r4,#0]
                  |L9.250|
0000fa  9802              LDR      r0,[sp,#8]            ;464
0000fc  2800              CMP      r0,#0                 ;464
0000fe  db03              BLT      |L9.264|
000100  0028              MOVS     r0,r5                 ;464
000102  f1a50501          SUB      r5,r5,#1              ;464
000106  d1ea              BNE      |L9.222|
                  |L9.264|
;;;467            }
;;;468            pData++;
000108  1c64              ADDS     r4,r4,#1
                  |L9.266|
;;;469          }
;;;470          if (RemPixels > 0) {
00010a  2d00              CMP      r5,#0
00010c  dd21              BLE      |L9.338|
;;;471            int NumBytes = RemPixels >> 3;
00010e  10ef              ASRS     r7,r5,#3
;;;472            if (NumBytes > 0) {
000110  2f00              CMP      r7,#0
000112  dd08              BLE      |L9.294|
;;;473              GUI_MEMSET(pData, FillByte, NumBytes);
000114  9800              LDR      r0,[sp,#0]
000116  b2c1              UXTB     r1,r0
000118  463a              MOV      r2,r7
00011a  4620              MOV      r0,r4
00011c  f7fffffe          BL       GUI__memset
;;;474              pData += NumBytes;
000120  443c              ADD      r4,r4,r7
;;;475              RemPixels -= NumBytes << 3;
000122  eba505c7          SUB      r5,r5,r7,LSL #3
                  |L9.294|
;;;476            }
;;;477            Bit = 7;
000126  2007              MOVS     r0,#7
000128  9002              STR      r0,[sp,#8]
;;;478            while (RemPixels--) {
00012a  e00d              B        |L9.328|
                  |L9.300|
;;;479              *pData &= ~(1 << Bit);
00012c  7820              LDRB     r0,[r4,#0]
00012e  2101              MOVS     r1,#1
000130  9a02              LDR      r2,[sp,#8]
000132  4091              LSLS     r1,r1,r2
000134  4388              BICS     r0,r0,r1
000136  7020              STRB     r0,[r4,#0]
;;;480              *pData |= Color << (Bit--);
000138  7820              LDRB     r0,[r4,#0]
00013a  9a02              LDR      r2,[sp,#8]
00013c  1e51              SUBS     r1,r2,#1
00013e  9102              STR      r1,[sp,#8]
000140  fa0af102          LSL      r1,r10,r2
000144  4308              ORRS     r0,r0,r1
000146  7020              STRB     r0,[r4,#0]
                  |L9.328|
000148  0028              MOVS     r0,r5                 ;478
00014a  f1a50501          SUB      r5,r5,#1              ;478
00014e  d1ed              BNE      |L9.300|
;;;481            }
;;;482          }
000150  bf00              NOP      
                  |L9.338|
;;;483        }
000152  bf00              NOP      
                  |L9.340|
000154  1c76              ADDS     r6,r6,#1              ;435
                  |L9.342|
000156  454e              CMP      r6,r9                 ;435
000158  f77faf76          BLE      |L9.72|
;;;484      }
;;;485    }
00015c  e8bd9fff          POP      {r0-r12,pc}
;;;486    
                          ENDP

                  |L9.352|
                          DCD      GUI_Context

                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=1

                  _GetPixelIndex PROC
;;;563    */
;;;564    static unsigned int _GetPixelIndex(int x, int y) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;565      U8* pData;
;;;566      int Bit;
;;;567      pData = _XY2PTR_BITOFFSET(x, y, &Bit);
000006  466a              MOV      r2,sp
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _XY2PTR_BITOFFSET
000010  4606              MOV      r6,r0
;;;568      return (*pData >> Bit) & 1;
000012  7830              LDRB     r0,[r6,#0]
000014  9900              LDR      r1,[sp,#0]
000016  4108              ASRS     r0,r0,r1
000018  f0000001          AND      r0,r0,#1
;;;569    }
00001c  bdf8              POP      {r3-r7,pc}
;;;570    
                          ENDP


                          AREA ||i._SetPixelIndex||, CODE, READONLY, ALIGN=2

                  _SetPixelIndex PROC
;;;532    */
;;;533    static void _SetPixelIndex(int x, int y, int Index) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;534      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00000a  4916              LDR      r1,|L11.100|
00000c  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000010  f7fffffe          BL       GUI_ALLOC_h2p
000014  4605              MOV      r5,r0
;;;535      U8* pData;
;;;536      int Bit;
;;;537      pData   = _XY2PTR_BITOFFSET(x, y, &Bit);
000016  466a              MOV      r2,sp
000018  4639              MOV      r1,r7
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       _XY2PTR_BITOFFSET
000020  4604              MOV      r4,r0
;;;538      *pData &= ~(1 << Bit);
000022  7820              LDRB     r0,[r4,#0]
000024  2101              MOVS     r1,#1
000026  9a00              LDR      r2,[sp,#0]
000028  4091              LSLS     r1,r1,r2
00002a  4388              BICS     r0,r0,r1
00002c  7020              STRB     r0,[r4,#0]
;;;539      *pData |= (Index & 1) << Bit;
00002e  7820              LDRB     r0,[r4,#0]
000030  f0080101          AND      r1,r8,#1
000034  9a00              LDR      r2,[sp,#0]
000036  4091              LSLS     r1,r1,r2
000038  4308              ORRS     r0,r0,r1
00003a  7020              STRB     r0,[r4,#0]
;;;540      if (pDev->hUsage) {
00003c  8b28              LDRH     r0,[r5,#0x18]
00003e  b178              CBZ      r0,|L11.96|
;;;541        GUI_USAGE_AddPixel(GUI_USAGE_H2P(pDev->hUsage), x, y);
000040  f9b50018          LDRSH    r0,[r5,#0x18]
000044  f7fffffe          BL       GUI_ALLOC_h2p
000048  4682              MOV      r10,r0
00004a  f9b50018          LDRSH    r0,[r5,#0x18]
00004e  f7fffffe          BL       GUI_ALLOC_h2p
000052  6880              LDR      r0,[r0,#8]
000054  463a              MOV      r2,r7
000056  4631              MOV      r1,r6
000058  f8d09000          LDR      r9,[r0,#0]
00005c  4650              MOV      r0,r10
00005e  47c8              BLX      r9
                  |L11.96|
;;;542      }
;;;543    }
000060  e8bd8ff8          POP      {r3-r11,pc}
;;;544    
                          ENDP

                  |L11.100|
                          DCD      GUI_Context

                          AREA ||i._XY2PTR_BITOFFSET||, CODE, READONLY, ALIGN=2

                  _XY2PTR_BITOFFSET PROC
;;;70     */
;;;71     static U8* _XY2PTR_BITOFFSET(int x, int y, int* pBitOffset) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;72       GUI_ALLOC_DATATYPE_U Offset;
;;;73       GUI_MEMDEV* pDev;
;;;74       U8* pData;
;;;75       pDev  = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00000a  490f              LDR      r1,|L12.72|
00000c  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000010  f7fffffe          BL       GUI_ALLOC_h2p
000014  4605              MOV      r5,r0
;;;76       pData = (U8*)(pDev + 1);
000016  f105092c          ADD      r9,r5,#0x2c
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds", x, y);
;;;80         }
;;;81       #endif
;;;82       x -= pDev->x0;
00001a  f9b50000          LDRSH    r0,[r5,#0]
00001e  1a24              SUBS     r4,r4,r0
;;;83       y -= pDev->y0;
000020  f9b50002          LDRSH    r0,[r5,#2]
000024  1a36              SUBS     r6,r6,r0
;;;84       Offset = (GUI_ALLOC_DATATYPE_U)(y) * (GUI_ALLOC_DATATYPE_U)(pDev->BytesPerLine) + (x >> 3);
000026  89a8              LDRH     r0,[r5,#0xc]
000028  4370              MULS     r0,r6,r0
00002a  eb0000e4          ADD      r0,r0,r4,ASR #3
00002e  fa1ff880          UXTH     r8,r0
;;;85       if (pBitOffset) {
000032  b127              CBZ      r7,|L12.62|
;;;86         *pBitOffset = 7 - (x & 7);
000034  f0040007          AND      r0,r4,#7
000038  f1c00007          RSB      r0,r0,#7
00003c  6038              STR      r0,[r7,#0]
                  |L12.62|
;;;87       }
;;;88       return pData + Offset;
00003e  eb090008          ADD      r0,r9,r8
;;;89     }
000042  e8bd87f0          POP      {r4-r10,pc}
;;;90     
                          ENDP

000046  0000              DCW      0x0000
                  |L12.72|
                          DCD      GUI_Context

                          AREA ||i._XorPixel||, CODE, READONLY, ALIGN=2

                  _XorPixel PROC
;;;548    */
;;;549    static void _XorPixel(int x, int y) {
000000  e92d43f8          PUSH     {r3-r9,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;550      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000008  4912              LDR      r1,|L13.84|
00000a  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4604              MOV      r4,r0
;;;551      U8* pData;
;;;552      int Bit;
;;;553      pData   = _XY2PTR_BITOFFSET(x, y, &Bit);
000014  466a              MOV      r2,sp
000016  4631              MOV      r1,r6
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       _XY2PTR_BITOFFSET
00001e  4607              MOV      r7,r0
;;;554      *pData ^= (1 << Bit);
000020  7838              LDRB     r0,[r7,#0]
000022  2101              MOVS     r1,#1
000024  9a00              LDR      r2,[sp,#0]
000026  4091              LSLS     r1,r1,r2
000028  4048              EORS     r0,r0,r1
00002a  7038              STRB     r0,[r7,#0]
;;;555      if (pDev->hUsage) {
00002c  8b20              LDRH     r0,[r4,#0x18]
00002e  b178              CBZ      r0,|L13.80|
;;;556        GUI_USAGE_AddPixel(GUI_USAGE_H2P(pDev->hUsage), x, y);
000030  f9b40018          LDRSH    r0,[r4,#0x18]
000034  f7fffffe          BL       GUI_ALLOC_h2p
000038  4681              MOV      r9,r0
00003a  f9b40018          LDRSH    r0,[r4,#0x18]
00003e  f7fffffe          BL       GUI_ALLOC_h2p
000042  6880              LDR      r0,[r0,#8]
000044  4632              MOV      r2,r6
000046  4629              MOV      r1,r5
000048  f8d08000          LDR      r8,[r0,#0]
00004c  4648              MOV      r0,r9
00004e  47c0              BLX      r8
                  |L13.80|
;;;557      }
;;;558    }
000050  e8bd83f8          POP      {r3-r9,pc}
;;;559    
                          ENDP

                  |L13.84|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f
                  GUI_MEMDEV__APIList1
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
