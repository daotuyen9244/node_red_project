; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\radio.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\radio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Widget\RADIO.c]
                          THUMB

                          AREA ||i.RADIO_AddValue||, CODE, READONLY, ALIGN=1

                  RADIO_AddValue PROC
;;;407    */
;;;408    void RADIO_AddValue(RADIO_Handle hObj, int Add) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;409      if (hObj) {
000006  b174              CBZ      r4,|L1.38|
;;;410        RADIO_Obj* pObj;
;;;411        WM_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;412        pObj = RADIO_H2P(hObj);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4606              MOV      r6,r0
;;;413        RADIO_SetValue(hObj, pObj->Sel + Add);
000014  f9b60048          LDRSH    r0,[r6,#0x48]
000018  1941              ADDS     r1,r0,r5
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       RADIO_SetValue
;;;414        WM_UNLOCK();
000020  f7fffffe          BL       GUI_Unlock
;;;415      }
000024  bf00              NOP      
                  |L1.38|
;;;416    }
000026  bd70              POP      {r4-r6,pc}
;;;417    
                          ENDP


                          AREA ||i.RADIO_Callback||, CODE, READONLY, ALIGN=1

                  RADIO_Callback PROC
;;;307    */
;;;308    void RADIO_Callback (WM_MESSAGE* pMsg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;309      RADIO_Handle hObj;
;;;310      RADIO_Obj*   pObj;
;;;311      hObj = pMsg->hWin;
000004  f9b46004          LDRSH    r6,[r4,#4]
;;;312      pObj = (RADIO_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       GUI_ALLOC_h2p
00000e  4605              MOV      r5,r0
;;;313      /* Let widget handle the standard messages */
;;;314      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
000010  4621              MOV      r1,r4
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       WIDGET_HandleActive
000018  b900              CBNZ     r0,|L2.28|
                  |L2.26|
;;;315        return;
;;;316      }
;;;317      switch (pMsg->MsgId) {
;;;318      case WM_PAINT:
;;;319        GUI_DEBUG_LOG("RADIO: _Callback(WM_PAINT)\n");
;;;320        _OnPaint(hObj, pObj);
;;;321        return;
;;;322      case WM_GET_RADIOGROUP:
;;;323        pMsg->Data.v = pObj->GroupId;
;;;324        return;
;;;325      case WM_TOUCH:
;;;326        _OnTouch(hObj, pObj, pMsg);
;;;327        break;
;;;328      case WM_KEY:
;;;329        _OnKey(hObj, pMsg);
;;;330        break;
;;;331      case WM_DELETE:
;;;332        GUI_ARRAY_Delete(&pObj->TextArray);
;;;333        break;
;;;334      }
;;;335      WM_DefaultProc(pMsg);
;;;336    }
00001a  bd70              POP      {r4-r6,pc}
                  |L2.28|
00001c  6820              LDR      r0,[r4,#0]            ;317
00001e  280e              CMP      r0,#0xe               ;317
000020  d019              BEQ      |L2.86|
000022  dc04              BGT      |L2.46|
000024  280b              CMP      r0,#0xb               ;317
000026  d01b              BEQ      |L2.96|
000028  280c              CMP      r0,#0xc               ;317
00002a  d11e              BNE      |L2.106|
00002c  e00d              B        |L2.74|
                  |L2.46|
00002e  280f              CMP      r0,#0xf               ;317
000030  d002              BEQ      |L2.56|
000032  282b              CMP      r0,#0x2b              ;317
000034  d119              BNE      |L2.106|
000036  e004              B        |L2.66|
                  |L2.56|
000038  4629              MOV      r1,r5                 ;320
00003a  4630              MOV      r0,r6                 ;320
00003c  f7fffffe          BL       _OnPaint
000040  e7eb              B        |L2.26|
                  |L2.66|
000042  f8950050          LDRB     r0,[r5,#0x50]         ;323
000046  60a0              STR      r0,[r4,#8]            ;323
000048  e7e7              B        |L2.26|
                  |L2.74|
00004a  4622              MOV      r2,r4                 ;326
00004c  4629              MOV      r1,r5                 ;326
00004e  4630              MOV      r0,r6                 ;326
000050  f7fffffe          BL       _OnTouch
000054  e009              B        |L2.106|
                  |L2.86|
000056  4621              MOV      r1,r4                 ;329
000058  4630              MOV      r0,r6                 ;329
00005a  f7fffffe          BL       _OnKey
00005e  e004              B        |L2.106|
                  |L2.96|
000060  f1050044          ADD      r0,r5,#0x44           ;332
000064  f7fffffe          BL       GUI_ARRAY_Delete
000068  bf00              NOP                            ;333
                  |L2.106|
00006a  bf00              NOP                            ;327
00006c  4620              MOV      r0,r4                 ;335
00006e  f7fffffe          BL       WM_DefaultProc
000072  bf00              NOP      
000074  e7d1              B        |L2.26|
;;;337    
                          ENDP


                          AREA ||i.RADIO_CreateEx||, CODE, READONLY, ALIGN=2

                  RADIO_CreateEx PROC
;;;351    */
;;;352    RADIO_Handle RADIO_CreateEx(int x0, int y0, int xSize, int ySize, WM_HWIN hParent,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;353                                int WinFlags, int ExFlags, int Id, int NumItems, int Spacing)
;;;354    {
000004  b085              SUB      sp,sp,#0x14
000006  4691              MOV      r9,r2
000008  f8ddb050          LDR      r11,[sp,#0x50]
00000c  f8dda048          LDR      r10,[sp,#0x48]
000010  e9dd5616          LDRD     r5,r6,[sp,#0x58]
;;;355      RADIO_Handle hObj;
;;;356      int Height, i;
;;;357      WM_LOCK();
000014  f7fffffe          BL       GUI_Lock
;;;358      /* Calculate helper variables */
;;;359      Height   = RADIO__DefaultProps.apBmRadio[0]->YSize + RADIO_BORDER * 2;
000018  4832              LDR      r0,|L3.228|
00001a  6900              LDR      r0,[r0,#0x10]  ; RADIO__DefaultProps
00001c  8840              LDRH     r0,[r0,#2]
00001e  1d00              ADDS     r0,r0,#4
000020  9004              STR      r0,[sp,#0x10]
;;;360      Spacing  = (Spacing  <= 0) ? RADIO_SPACING_DEFAULT : Spacing;
000022  2e00              CMP      r6,#0
000024  dc01              BGT      |L3.42|
000026  2014              MOVS     r0,#0x14
000028  e000              B        |L3.44|
                  |L3.42|
00002a  4630              MOV      r0,r6
                  |L3.44|
00002c  4606              MOV      r6,r0
;;;361      NumItems = (NumItems <= 0) ? 2                     : NumItems;
00002e  2d00              CMP      r5,#0
000030  dc01              BGT      |L3.54|
000032  2002              MOVS     r0,#2
000034  e000              B        |L3.56|
                  |L3.54|
000036  4628              MOV      r0,r5
                  |L3.56|
000038  4605              MOV      r5,r0
;;;362      if (ySize == 0) {
00003a  9808              LDR      r0,[sp,#0x20]
00003c  b920              CBNZ     r0,|L3.72|
;;;363        ySize  = Height + ((NumItems - 1) * Spacing);
00003e  1e68              SUBS     r0,r5,#1
000040  9904              LDR      r1,[sp,#0x10]
000042  fb001006          MLA      r0,r0,r6,r1
000046  9008              STR      r0,[sp,#0x20]
                  |L3.72|
;;;364      }
;;;365      if (xSize == 0) {
000048  f1b90f00          CMP      r9,#0
00004c  d104              BNE      |L3.88|
;;;366        xSize  = RADIO__DefaultProps.apBmRadio[0]->XSize + RADIO_BORDER * 2;
00004e  4825              LDR      r0,|L3.228|
000050  6900              LDR      r0,[r0,#0x10]  ; RADIO__DefaultProps
000052  8800              LDRH     r0,[r0,#0]
000054  f1000904          ADD      r9,r0,#4
                  |L3.88|
;;;367      }
;;;368    #if WM_SUPPORT_TRANSPARENCY
;;;369      WinFlags |= WM_CF_HASTRANS;
000058  9813              LDR      r0,[sp,#0x4c]
00005a  f0400001          ORR      r0,r0,#1
00005e  9013              STR      r0,[sp,#0x4c]
;;;370    #endif
;;;371      /* Create the window */
;;;372      hObj = WM_CreateWindowAsChild(x0, y0, xSize, ySize, hParent, WinFlags, RADIO_Callback, sizeof(RADIO_Obj) - sizeof(WM_Obj));
000060  2134              MOVS     r1,#0x34
000062  4a21              LDR      r2,|L3.232|
000064  9813              LDR      r0,[sp,#0x4c]
000066  b280              UXTH     r0,r0
000068  e9cda000          STRD     r10,r0,[sp,#0]
00006c  e9cd2102          STRD     r2,r1,[sp,#8]
000070  464a              MOV      r2,r9
000072  9b08              LDR      r3,[sp,#0x20]
000074  e9dd0105          LDRD     r0,r1,[sp,#0x14]
000078  f7fffffe          BL       WM_CreateWindowAsChild
00007c  4607              MOV      r7,r0
;;;373      if (hObj) {
00007e  b357              CBZ      r7,|L3.214|
;;;374        RADIO_Obj* pObj;
;;;375        pObj = (RADIO_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000080  4638              MOV      r0,r7
000082  f7fffffe          BL       GUI_ALLOC_h2p
000086  4604              MOV      r4,r0
;;;376        /* Init sub-classes */
;;;377        GUI_ARRAY_CREATE(&pObj->TextArray);
;;;378        for (i = 0; i < NumItems; i++) {
000088  f04f0800          MOV      r8,#0
00008c  e007              B        |L3.158|
                  |L3.142|
;;;379          GUI_ARRAY_AddItem(&pObj->TextArray, NULL, 0);
00008e  2200              MOVS     r2,#0
000090  4611              MOV      r1,r2
000092  f1040044          ADD      r0,r4,#0x44
000096  f7fffffe          BL       GUI_ARRAY_AddItem
00009a  f1080801          ADD      r8,r8,#1              ;378
                  |L3.158|
00009e  45a8              CMP      r8,r5                 ;378
0000a0  dbf5              BLT      |L3.142|
;;;380        }
;;;381        /* Init widget specific variables */
;;;382        ExFlags &= RADIO_TEXTPOS_LEFT;
0000a2  f40b7b80          AND      r11,r11,#0x100
;;;383        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE | ExFlags);
0000a6  f04b0210          ORR      r2,r11,#0x10
0000aa  4620              MOV      r0,r4
0000ac  9915              LDR      r1,[sp,#0x54]
0000ae  f7fffffe          BL       WIDGET__Init
;;;384        /* Init member variables */
;;;385        RADIO_INIT_ID(pObj);
;;;386        pObj->Props = RADIO__DefaultProps;
0000b2  221c              MOVS     r2,#0x1c
0000b4  490b              LDR      r1,|L3.228|
0000b6  f1040028          ADD      r0,r4,#0x28
0000ba  f7fffffe          BL       __aeabi_memcpy4
;;;387        pObj->Props.BkColor= WM_GetBkColor(hParent);
0000be  4650              MOV      r0,r10
0000c0  f7fffffe          BL       WM_GetBkColor
0000c4  f8440f28          STR      r0,[r4,#0x28]!
;;;388        pObj->NumItems     = NumItems;
0000c8  84e5              STRH     r5,[r4,#0x26]
;;;389        pObj->Spacing      = Spacing;
0000ca  8466              STRH     r6,[r4,#0x22]
;;;390        pObj->Height       = Height;
0000cc  9804              LDR      r0,[sp,#0x10]
0000ce  84a0              STRH     r0,[r4,#0x24]
0000d0  f1a40428          SUB      r4,r4,#0x28
;;;391      } else {
0000d4  bf00              NOP      
                  |L3.214|
;;;392        GUI_DEBUG_ERROROUT_IF(hObj==0, "RADIO_Create failed")
;;;393      }
;;;394      WM_UNLOCK();
0000d6  f7fffffe          BL       GUI_Unlock
;;;395      return hObj;
0000da  4638              MOV      r0,r7
;;;396    }
0000dc  b009              ADD      sp,sp,#0x24
0000de  e8bd8ff0          POP      {r4-r11,pc}
;;;397    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L3.228|
                          DCD      RADIO__DefaultProps
                  |L3.232|
                          DCD      RADIO_Callback

                          AREA ||i.RADIO_Dec||, CODE, READONLY, ALIGN=1

                  RADIO_Dec PROC
;;;421    */
;;;422    void RADIO_Dec(RADIO_Handle hObj) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;423      RADIO_AddValue(hObj, -1);
000004  f04f31ff          MOV      r1,#0xffffffff
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       RADIO_AddValue
;;;424    }
00000e  bd10              POP      {r4,pc}
;;;425    
                          ENDP


                          AREA ||i.RADIO_GetValue||, CODE, READONLY, ALIGN=1

                  RADIO_GetValue PROC
;;;464    */
;;;465    int RADIO_GetValue(RADIO_Handle hObj) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;466      int r = 0;
000004  2500              MOVS     r5,#0
;;;467      if (hObj) {
000006  b154              CBZ      r4,|L5.30|
;;;468        RADIO_Obj* pObj;
;;;469        WM_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;470        pObj = RADIO_H2P(hObj);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4606              MOV      r6,r0
;;;471        r = pObj->Sel;
000014  f9b65048          LDRSH    r5,[r6,#0x48]
;;;472        WM_UNLOCK();
000018  f7fffffe          BL       GUI_Unlock
;;;473      }
00001c  bf00              NOP      
                  |L5.30|
;;;474      return r;
00001e  4628              MOV      r0,r5
;;;475    }
000020  bd70              POP      {r4-r6,pc}
;;;476    
                          ENDP


                          AREA ||i.RADIO_Inc||, CODE, READONLY, ALIGN=1

                  RADIO_Inc PROC
;;;429    */
;;;430    void RADIO_Inc(RADIO_Handle hObj) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;431      RADIO_AddValue(hObj,  1);
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RADIO_AddValue
;;;432    }
00000c  bd10              POP      {r4,pc}
;;;433    
                          ENDP


                          AREA ||i.RADIO_SetValue||, CODE, READONLY, ALIGN=2

                  RADIO_SetValue PROC
;;;437    */
;;;438    void RADIO_SetValue(RADIO_Handle hObj, int v) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;439      if (hObj) {
000006  b1ed              CBZ      r5,|L7.68|
;;;440        RADIO_Obj* pObj;
;;;441        WM_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;442        pObj = RADIO_H2P(hObj);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4606              MOV      r6,r0
;;;443        if (pObj->GroupId && RADIO__pfHandleSetValue) {
000014  f8960050          LDRB     r0,[r6,#0x50]
000018  b148              CBZ      r0,|L7.46|
00001a  480b              LDR      r0,|L7.72|
00001c  6800              LDR      r0,[r0,#0]  ; RADIO__pfHandleSetValue
00001e  b130              CBZ      r0,|L7.46|
;;;444          (*RADIO__pfHandleSetValue)(hObj, pObj, v);
000020  4622              MOV      r2,r4
000022  4631              MOV      r1,r6
000024  4628              MOV      r0,r5
000026  4b08              LDR      r3,|L7.72|
000028  681b              LDR      r3,[r3,#0]  ; RADIO__pfHandleSetValue
00002a  4798              BLX      r3
00002c  e007              B        |L7.62|
                  |L7.46|
;;;445        } else {
;;;446          if (v < 0) {
00002e  2c00              CMP      r4,#0
000030  da00              BGE      |L7.52|
;;;447            v = 0;
000032  2400              MOVS     r4,#0
                  |L7.52|
;;;448          }
;;;449          RADIO__SetValue(hObj, pObj, v);
000034  4622              MOV      r2,r4
000036  4631              MOV      r1,r6
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       RADIO__SetValue
                  |L7.62|
;;;450        }
;;;451        WM_UNLOCK();
00003e  f7fffffe          BL       GUI_Unlock
;;;452      }
000042  bf00              NOP      
                  |L7.68|
;;;453    }
000044  bd70              POP      {r4-r6,pc}
;;;454    
                          ENDP

000046  0000              DCW      0x0000
                  |L7.72|
                          DCD      RADIO__pfHandleSetValue

                          AREA ||i.RADIO__SetValue||, CODE, READONLY, ALIGN=1

                  RADIO__SetValue PROC
;;;286    */
;;;287    void RADIO__SetValue(RADIO_Handle hObj, RADIO_Obj* pObj, int v) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;288      if (v >= (int)pObj->NumItems) {
000008  f8b4004e          LDRH     r0,[r4,#0x4e]
00000c  42a8              CMP      r0,r5
00000e  dc02              BGT      |L8.22|
;;;289        v = pObj->NumItems - 1;
000010  f8b4004e          LDRH     r0,[r4,#0x4e]
000014  1e45              SUBS     r5,r0,#1
                  |L8.22|
;;;290      }
;;;291      if (v != pObj->Sel) {
000016  f9b40048          LDRSH    r0,[r4,#0x48]
00001a  42a8              CMP      r0,r5
00001c  d009              BEQ      |L8.50|
;;;292        pObj->Sel = v;
00001e  b228              SXTH     r0,r5
000020  f8a40048          STRH     r0,[r4,#0x48]
;;;293        WM_InvalidateWindow(hObj);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       WM_InvalidateWindow
;;;294        WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
00002a  2105              MOVS     r1,#5
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       WM_NotifyParent
                  |L8.50|
;;;295      }
;;;296    }
000032  bd70              POP      {r4-r6,pc}
;;;297    
                          ENDP


                          AREA ||i._OnKey||, CODE, READONLY, ALIGN=1

                  _OnKey PROC
;;;234    */
;;;235    static void  _OnKey(RADIO_Handle hObj, WM_MESSAGE* pMsg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;236      WM_KEY_INFO* pKeyInfo;
;;;237      pKeyInfo = (WM_KEY_INFO*)(pMsg->Data.p);
000006  68a5              LDR      r5,[r4,#8]
;;;238      if (pKeyInfo->PressedCnt > 0) {
000008  6868              LDR      r0,[r5,#4]
00000a  2800              CMP      r0,#0
00000c  dd15              BLE      |L9.58|
;;;239        switch (pKeyInfo->Key) {
00000e  6828              LDR      r0,[r5,#0]
000010  2810              CMP      r0,#0x10
000012  d00b              BEQ      |L9.44|
000014  2811              CMP      r0,#0x11
000016  d00a              BEQ      |L9.46|
000018  2812              CMP      r0,#0x12
00001a  d002              BEQ      |L9.34|
00001c  2813              CMP      r0,#0x13
00001e  d10a              BNE      |L9.54|
000020  e000              B        |L9.36|
                  |L9.34|
;;;240        case GUI_KEY_RIGHT:
;;;241        case GUI_KEY_DOWN:
000022  bf00              NOP      
                  |L9.36|
;;;242          RADIO_Inc(hObj);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       RADIO_Inc
;;;243          break;                    /* Send to parent by not doing anything */
00002a  e005              B        |L9.56|
                  |L9.44|
;;;244        case GUI_KEY_LEFT:
;;;245        case GUI_KEY_UP:
00002c  bf00              NOP      
                  |L9.46|
;;;246          RADIO_Dec(hObj);
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       RADIO_Dec
;;;247          break;                    /* Send to parent by not doing anything */
000034  e000              B        |L9.56|
                  |L9.54|
;;;248        default:
;;;249          return;
;;;250        }
;;;251      }
;;;252    }
000036  bd70              POP      {r4-r6,pc}
                  |L9.56|
000038  bf00              NOP                            ;243
                  |L9.58|
00003a  bf00              NOP      
00003c  e7fb              B        |L9.54|
;;;253    
                          ENDP


                          AREA ||i._OnPaint||, CODE, READONLY, ALIGN=2

                  _OnPaint PROC
;;;113    */
;;;114    static void _OnPaint(RADIO_Handle hObj, RADIO_Obj* pObj) {
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  460c              MOV      r4,r1
;;;115      const GUI_BITMAP* pBmRadio;
;;;116      const GUI_BITMAP* pBmCheck;
;;;117      const char* pText;
;;;118      GUI_FONTINFO FontInfo;
;;;119      GUI_RECT Rect, r, rFocus = {0};
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
00000c  9006              STR      r0,[sp,#0x18]
;;;120      int i, y, HasFocus, FontDistY;
;;;121      U8 SpaceAbove, CHeight, FocusBorder;
;;;122    
;;;123      /* Init some data */
;;;124      WIDGET__GetClientRect(&pObj->Widget, &rFocus);
00000e  a905              ADD      r1,sp,#0x14
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       WIDGET__GetClientRect
;;;125      HasFocus  = (pObj->Widget.State & WIDGET_STATE_FOCUS) ? 1 : 0;
000016  f8940026          LDRB     r0,[r4,#0x26]
00001a  f0000b01          AND      r11,r0,#1
;;;126      pBmRadio  = pObj->Props.apBmRadio[WM__IsEnabled(hObj)];
00001e  980d              LDR      r0,[sp,#0x34]
000020  f7fffffe          BL       WM__IsEnabled
000024  4601              MOV      r1,r0
000026  f1040038          ADD      r0,r4,#0x38
00002a  f8506021          LDR      r6,[r0,r1,LSL #2]
;;;127      pBmCheck  = pObj->Props.pBmCheck;
00002e  f8d4a040          LDR      r10,[r4,#0x40]
;;;128      rFocus.x1 = pBmRadio->XSize + RADIO_BORDER * 2 - 1;
000032  8830              LDRH     r0,[r6,#0]
000034  1cc0              ADDS     r0,r0,#3
000036  b200              SXTH     r0,r0
000038  f8ad0018          STRH     r0,[sp,#0x18]
;;;129      rFocus.y1 = pObj->Height + ((pObj->NumItems - 1) * pObj->Spacing) - 1;
00003c  f104044a          ADD      r4,r4,#0x4a
000040  8861              LDRH     r1,[r4,#2]
000042  88a0              LDRH     r0,[r4,#4]
000044  f1a00001          SUB      r0,r0,#1
000048  f834294a          LDRH     r2,[r4],#-0x4a
00004c  fb001002          MLA      r0,r0,r2,r1
000050  f1a00001          SUB      r0,r0,#1
000054  b200              SXTH     r0,r0
000056  f8ad001a          STRH     r0,[sp,#0x1a]
;;;130    
;;;131      /* Select font and text color */
;;;132      LCD_SetColor(pObj->Props.TextColor);
00005a  6ae0              LDR      r0,[r4,#0x2c]
00005c  f7fffffe          BL       LCD_SetColor
;;;133      GUI_SetFont(pObj->Props.pFont);
000060  6b60              LDR      r0,[r4,#0x34]
000062  f7fffffe          BL       GUI_SetFont
;;;134      GUI_SetTextMode(GUI_TM_TRANS);
000066  2002              MOVS     r0,#2
000068  f7fffffe          BL       GUI_SetTextMode
;;;135    
;;;136      /* Get font infos */
;;;137      GUI_GetFontInfo(pObj->Props.pFont, &FontInfo);
00006c  a90b              ADD      r1,sp,#0x2c
00006e  6b60              LDR      r0,[r4,#0x34]
000070  f7fffffe          BL       GUI_GetFontInfo
;;;138      FontDistY   = GUI_GetFontDistY();
000074  f7fffffe          BL       GUI_GetFontDistY
000078  9004              STR      r0,[sp,#0x10]
;;;139      CHeight     = FontInfo.CHeight;
00007a  f89d9030          LDRB     r9,[sp,#0x30]
;;;140      SpaceAbove  = FontInfo.Baseline - CHeight;
00007e  f89d002e          LDRB     r0,[sp,#0x2e]
000082  eba00009          SUB      r0,r0,r9
000086  b2c0              UXTB     r0,r0
000088  9003              STR      r0,[sp,#0xc]
;;;141      Rect.x0     = pBmRadio->XSize + RADIO_BORDER * 2 + 2;
00008a  8830              LDRH     r0,[r6,#0]
00008c  1d80              ADDS     r0,r0,#6
00008e  b200              SXTH     r0,r0
000090  f8ad0024          STRH     r0,[sp,#0x24]
;;;142      Rect.y0     = (CHeight <= pObj->Height) ? ((pObj->Height - CHeight) / 2) : 0;
000094  f8b4104c          LDRH     r1,[r4,#0x4c]
000098  4549              CMP      r1,r9
00009a  db07              BLT      |L10.172|
00009c  f8b4104c          LDRH     r1,[r4,#0x4c]
0000a0  eba10009          SUB      r0,r1,r9
0000a4  eb0071d0          ADD      r1,r0,r0,LSR #31
0000a8  1049              ASRS     r1,r1,#1
0000aa  e000              B        |L10.174|
                  |L10.172|
0000ac  2100              MOVS     r1,#0
                  |L10.174|
0000ae  b209              SXTH     r1,r1
0000b0  f8ad1026          STRH     r1,[sp,#0x26]
;;;143      Rect.y1     = Rect.y0 + CHeight - 1;
0000b4  f8bd0026          LDRH     r0,[sp,#0x26]
0000b8  4448              ADD      r0,r0,r9
0000ba  1e40              SUBS     r0,r0,#1
0000bc  b200              SXTH     r0,r0
0000be  f8ad002a          STRH     r0,[sp,#0x2a]
;;;144      FocusBorder = (FontDistY <= 12) ? 2 : 3;
0000c2  9804              LDR      r0,[sp,#0x10]
0000c4  280c              CMP      r0,#0xc
0000c6  dc01              BGT      |L10.204|
0000c8  2002              MOVS     r0,#2
0000ca  e000              B        |L10.206|
                  |L10.204|
0000cc  2003              MOVS     r0,#3
                  |L10.206|
0000ce  9002              STR      r0,[sp,#8]
;;;145      if (Rect.y0 < FocusBorder) {
0000d0  f9bd1026          LDRSH    r1,[sp,#0x26]
0000d4  9802              LDR      r0,[sp,#8]
0000d6  4281              CMP      r1,r0
0000d8  da03              BGE      |L10.226|
;;;146        FocusBorder = Rect.y0;
0000da  f8bd0026          LDRH     r0,[sp,#0x26]
0000de  b2c0              UXTB     r0,r0
0000e0  9002              STR      r0,[sp,#8]
                  |L10.226|
;;;147      }
;;;148    
;;;149      /* Clear inside ... Just in case      */
;;;150      /* Fill with parents background color */
;;;151    #if WM_SUPPORT_TRANSPARENCY
;;;152      if (!WM_GetHasTrans(hObj))
0000e2  980d              LDR      r0,[sp,#0x34]
0000e4  f7fffffe          BL       WM_GetHasTrans
0000e8  b968              CBNZ     r0,|L10.262|
;;;153    #endif
;;;154      {
;;;155        if (pObj->Props.BkColor != GUI_INVALID_COLOR) {
0000ea  f06f4170          MVN      r1,#0xf0000000
0000ee  6aa0              LDR      r0,[r4,#0x28]
0000f0  4288              CMP      r0,r1
0000f2  d003              BEQ      |L10.252|
;;;156          LCD_SetBkColor(pObj->Props.BkColor);
0000f4  6aa0              LDR      r0,[r4,#0x28]
0000f6  f7fffffe          BL       LCD_SetBkColor
0000fa  e002              B        |L10.258|
                  |L10.252|
;;;157        } else {
;;;158          LCD_SetBkColor(RADIO_DEFAULT_BKCOLOR);
0000fc  4837              LDR      r0,|L10.476|
0000fe  f7fffffe          BL       LCD_SetBkColor
                  |L10.258|
;;;159        }
;;;160        GUI_Clear();
000102  f7fffffe          BL       GUI_Clear
                  |L10.262|
;;;161      }
;;;162    
;;;163      /* Iterate over all items */
;;;164      for (i = 0; i < pObj->NumItems; i++) {
000106  2500              MOVS     r5,#0
000108  e057              B        |L10.442|
                  |L10.266|
;;;165        y = i * pObj->Spacing;
00010a  f8b4004a          LDRH     r0,[r4,#0x4a]
00010e  fb00f805          MUL      r8,r0,r5
;;;166        /* Draw the radio button bitmap */
;;;167        GUI_DrawBitmap(pBmRadio, RADIO_BORDER, RADIO_BORDER + y);
000112  f1080202          ADD      r2,r8,#2
000116  2102              MOVS     r1,#2
000118  4630              MOV      r0,r6
00011a  f7fffffe          BL       GUI_DrawBitmap
;;;168        /* Draw the check bitmap */
;;;169        if (pObj->Sel == i) {
00011e  f9b40048          LDRSH    r0,[r4,#0x48]
000122  42a8              CMP      r0,r5
000124  d116              BNE      |L10.340|
;;;170          GUI_DrawBitmap(pBmCheck, RADIO_BORDER +  (pBmRadio->XSize - pBmCheck->XSize) / 2, 
000126  8870              LDRH     r0,[r6,#2]
000128  f8ba3002          LDRH     r3,[r10,#2]
00012c  1ac0              SUBS     r0,r0,r3
00012e  9001              STR      r0,[sp,#4]
000130  eb0070d0          ADD      r0,r0,r0,LSR #31
000134  1040              ASRS     r0,r0,#1
000136  1c80              ADDS     r0,r0,#2
000138  eb000208          ADD      r2,r0,r8
00013c  8830              LDRH     r0,[r6,#0]
00013e  f8ba3000          LDRH     r3,[r10,#0]
000142  1ac0              SUBS     r0,r0,r3
000144  9000              STR      r0,[sp,#0]
000146  eb0070d0          ADD      r0,r0,r0,LSR #31
00014a  1040              ASRS     r0,r0,#1
00014c  1c81              ADDS     r1,r0,#2
00014e  4650              MOV      r0,r10
000150  f7fffffe          BL       GUI_DrawBitmap
                  |L10.340|
;;;171                                   RADIO_BORDER + ((pBmRadio->YSize - pBmCheck->YSize) / 2) + y);
;;;172        }
;;;173        /* Draw text if available */
;;;174        pText = (const char*)GUI_ARRAY_GetpItem(&pObj->TextArray, i);
000154  4629              MOV      r1,r5
000156  f1040044          ADD      r0,r4,#0x44
00015a  f7fffffe          BL       GUI_ARRAY_GetpItem
00015e  4607              MOV      r7,r0
;;;175        if (pText) {
000160  b357              CBZ      r7,|L10.440|
;;;176          if (*pText) {
000162  7838              LDRB     r0,[r7,#0]
000164  b340              CBZ      r0,|L10.440|
;;;177            r = Rect;
000166  e9dd0109          LDRD     r0,r1,[sp,#0x24]
00016a  e9cd0107          STRD     r0,r1,[sp,#0x1c]
;;;178            r.x1 = r.x0 + GUI_GetStringDistX(pText) - 2;
00016e  4638              MOV      r0,r7
000170  f7fffffe          BL       GUI_GetStringDistX
000174  f8bd101c          LDRH     r1,[sp,#0x1c]
000178  4408              ADD      r0,r0,r1
00017a  1e80              SUBS     r0,r0,#2
00017c  b200              SXTH     r0,r0
00017e  f8ad0020          STRH     r0,[sp,#0x20]
;;;179            GUI_MoveRect(&r, 0, y);
000182  4642              MOV      r2,r8
000184  2100              MOVS     r1,#0
000186  a807              ADD      r0,sp,#0x1c
000188  f7fffffe          BL       GUI_MoveRect
;;;180            GUI_DispStringAt(pText, r.x0, r.y0 - SpaceAbove);
00018c  f9bd301e          LDRSH    r3,[sp,#0x1e]
000190  9803              LDR      r0,[sp,#0xc]
000192  1a1a              SUBS     r2,r3,r0
000194  f9bd101c          LDRSH    r1,[sp,#0x1c]
000198  4638              MOV      r0,r7
00019a  f7fffffe          BL       GUI_DispStringAt
;;;181            /* Calculate focus rect */
;;;182            if (HasFocus && (pObj->Sel == i)) {
00019e  f1bb0f00          CMP      r11,#0
0001a2  d009              BEQ      |L10.440|
0001a4  f9b40048          LDRSH    r0,[r4,#0x48]
0001a8  42a8              CMP      r0,r5
0001aa  d105              BNE      |L10.440|
;;;183              GUI__ReduceRect(&rFocus, &r, -FocusBorder);
0001ac  9802              LDR      r0,[sp,#8]
0001ae  4242              RSBS     r2,r0,#0
0001b0  a907              ADD      r1,sp,#0x1c
0001b2  a805              ADD      r0,sp,#0x14
0001b4  f7fffffe          BL       GUI__ReduceRect
                  |L10.440|
0001b8  1c6d              ADDS     r5,r5,#1              ;164
                  |L10.442|
0001ba  f8b4004e          LDRH     r0,[r4,#0x4e]         ;164
0001be  42a8              CMP      r0,r5                 ;164
0001c0  dca3              BGT      |L10.266|
;;;184            }
;;;185          }
;;;186        }
;;;187      }
;;;188    
;;;189      /* Draw the focus rect */
;;;190      if (HasFocus) {
0001c2  f1bb0f00          CMP      r11,#0
0001c6  d006              BEQ      |L10.470|
;;;191        LCD_SetColor(pObj->Props.FocusColor);
0001c8  6b20              LDR      r0,[r4,#0x30]
0001ca  f7fffffe          BL       LCD_SetColor
;;;192        GUI_DrawFocusRect(&rFocus, 0);
0001ce  2100              MOVS     r1,#0
0001d0  a805              ADD      r0,sp,#0x14
0001d2  f7fffffe          BL       GUI_DrawFocusRect
                  |L10.470|
;;;193      }
;;;194    }
0001d6  b00f              ADD      sp,sp,#0x3c
0001d8  e8bd8ff0          POP      {r4-r11,pc}
;;;195    
                          ENDP

                  |L10.476|
                          DCD      0x00c0c0c0

                          AREA ||i._OnTouch||, CODE, READONLY, ALIGN=1

                  _OnTouch PROC
;;;199    */
;;;200    static void _OnTouch(RADIO_Handle hObj, RADIO_Obj* pObj, WM_MESSAGE*pMsg) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4682              MOV      r10,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;201      int Notification;
;;;202      int Hit = 0;
00000a  f04f0b00          MOV      r11,#0
;;;203      GUI_PID_STATE* pState = (GUI_PID_STATE*)pMsg->Data.p;
00000e  f8d68008          LDR      r8,[r6,#8]
;;;204      if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
000012  68b0              LDR      r0,[r6,#8]
000014  b308              CBZ      r0,|L11.90|
;;;205        if (pState->Pressed) {
000016  f8980008          LDRB     r0,[r8,#8]
00001a  b1d0              CBZ      r0,|L11.82|
;;;206          int y, Sel;
;;;207          y   = pState->y;
00001c  f8d87004          LDR      r7,[r8,#4]
;;;208          Sel = y   / pObj->Spacing;
000020  f8340f4a          LDRH     r0,[r4,#0x4a]!
000024  fb97f9f0          SDIV     r9,r7,r0
;;;209          y  -= Sel * pObj->Spacing;
000028  8820              LDRH     r0,[r4,#0]
00002a  fb097710          MLS      r7,r9,r0,r7
;;;210          if (y <= pObj->Height) {
00002e  8860              LDRH     r0,[r4,#2]
000030  f1a4044a          SUB      r4,r4,#0x4a
000034  42b8              CMP      r0,r7
000036  db03              BLT      |L11.64|
;;;211            RADIO_SetValue(hObj, Sel);
000038  4649              MOV      r1,r9
00003a  4650              MOV      r0,r10
00003c  f7fffffe          BL       RADIO_SetValue
                  |L11.64|
;;;212          }
;;;213          if (WM_IsFocussable(hObj)) {
000040  4650              MOV      r0,r10
000042  f7fffffe          BL       WM_IsFocussable
000046  b110              CBZ      r0,|L11.78|
;;;214            WM_SetFocus(hObj);
000048  4650              MOV      r0,r10
00004a  f7fffffe          BL       WM_SetFocus
                  |L11.78|
;;;215          }
;;;216          Notification = WM_NOTIFICATION_CLICKED;
00004e  2501              MOVS     r5,#1
;;;217        } else {
000050  e004              B        |L11.92|
                  |L11.82|
;;;218          Hit = 1;
000052  f04f0b01          MOV      r11,#1
;;;219          Notification = WM_NOTIFICATION_RELEASED;
000056  2502              MOVS     r5,#2
000058  e000              B        |L11.92|
                  |L11.90|
;;;220        }
;;;221      } else {
;;;222        Notification = WM_NOTIFICATION_MOVED_OUT;
00005a  2503              MOVS     r5,#3
                  |L11.92|
;;;223      }
;;;224      WM_NotifyParent(hObj, Notification);
00005c  4629              MOV      r1,r5
00005e  4650              MOV      r0,r10
000060  f7fffffe          BL       WM_NotifyParent
;;;225      if (Hit == 1) {
000064  f1bb0f01          CMP      r11,#1
000068  d103              BNE      |L11.114|
;;;226        GUI_DEBUG_LOG("RADIO: Hit\n");
;;;227        GUI_StoreKey(pObj->Widget.Id);
00006a  f9b40024          LDRSH    r0,[r4,#0x24]
00006e  f7fffffe          BL       GUI_StoreKey
                  |L11.114|
;;;228      }
;;;229    }
000072  e8bd9ff0          POP      {r4-r12,pc}
;;;230    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  RADIO__DefaultProps
                          DCD      0x00c0c0c0
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_Font13_1
                          DCD      RADIO__abmRadio
                          DCD      RADIO__abmRadio+0x14
                          DCD      RADIO__bmCheck
                  RADIO__pfHandleSetValue
                          DCD      0x00000000
