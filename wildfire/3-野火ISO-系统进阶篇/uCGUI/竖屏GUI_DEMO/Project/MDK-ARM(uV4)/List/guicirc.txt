; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guicirc.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guicirc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\GUICirc.c]
                          THUMB

                          AREA ||i.Draw8Point||, CODE, READONLY, ALIGN=2

                  Draw8Point PROC
;;;46     */
;;;47     static void Draw8Point(int x0,int y0, int xoff, int yoff) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;48       LCD_HL_DrawPixel(x0+xoff,y0+yoff);
00000c  1931              ADDS     r1,r6,r4
00000e  19e8              ADDS     r0,r5,r7
000010  4b18              LDR      r3,|L1.116|
000012  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
000014  685a              LDR      r2,[r3,#4]
000016  4790              BLX      r2
;;;49       LCD_HL_DrawPixel(x0-xoff,y0+yoff);
000018  1931              ADDS     r1,r6,r4
00001a  1be8              SUBS     r0,r5,r7
00001c  4b15              LDR      r3,|L1.116|
00001e  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
000020  685a              LDR      r2,[r3,#4]
000022  4790              BLX      r2
;;;50       LCD_HL_DrawPixel(x0+yoff,y0+xoff);
000024  19f1              ADDS     r1,r6,r7
000026  1928              ADDS     r0,r5,r4
000028  4b12              LDR      r3,|L1.116|
00002a  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
00002c  685a              LDR      r2,[r3,#4]
00002e  4790              BLX      r2
;;;51       LCD_HL_DrawPixel(x0+yoff,y0-xoff);
000030  1bf1              SUBS     r1,r6,r7
000032  1928              ADDS     r0,r5,r4
000034  4b0f              LDR      r3,|L1.116|
000036  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
000038  685a              LDR      r2,[r3,#4]
00003a  4790              BLX      r2
;;;52       if (yoff) {
00003c  b1bc              CBZ      r4,|L1.110|
;;;53         LCD_HL_DrawPixel(x0+xoff,y0-yoff);
00003e  1b31              SUBS     r1,r6,r4
000040  19e8              ADDS     r0,r5,r7
000042  4b0c              LDR      r3,|L1.116|
000044  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
000046  685a              LDR      r2,[r3,#4]
000048  4790              BLX      r2
;;;54         LCD_HL_DrawPixel(x0-xoff,y0-yoff);
00004a  1b31              SUBS     r1,r6,r4
00004c  1be8              SUBS     r0,r5,r7
00004e  4b09              LDR      r3,|L1.116|
000050  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
000052  685a              LDR      r2,[r3,#4]
000054  4790              BLX      r2
;;;55         LCD_HL_DrawPixel(x0-yoff,y0+xoff);
000056  19f1              ADDS     r1,r6,r7
000058  1b28              SUBS     r0,r5,r4
00005a  4b06              LDR      r3,|L1.116|
00005c  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
00005e  685a              LDR      r2,[r3,#4]
000060  4790              BLX      r2
;;;56         LCD_HL_DrawPixel(x0-yoff,y0-xoff);
000062  1bf1              SUBS     r1,r6,r7
000064  1b28              SUBS     r0,r5,r4
000066  4b03              LDR      r3,|L1.116|
000068  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
00006a  685a              LDR      r2,[r3,#4]
00006c  4790              BLX      r2
                  |L1.110|
;;;57       }
;;;58     }
00006e  e8bd81f0          POP      {r4-r8,pc}
;;;59     
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      GUI_Context

                          AREA ||i.GL_DrawCircle||, CODE, READONLY, ALIGN=1

                  GL_DrawCircle PROC
;;;69     */
;;;70     void GL_DrawCircle(int x0, int y0, int r) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;71       I32 i;
;;;72       int imax = ((I32)((I32)r*707))/1000+1;
00000a  f24020c3          MOV      r0,#0x2c3
00000e  4360              MULS     r0,r4,r0
000010  f44f717a          MOV      r1,#0x3e8
000014  fb90f0f1          SDIV     r0,r0,r1
000018  f1000901          ADD      r9,r0,#1
;;;73       I32 sqmax = (I32)r*(I32)r+(I32)r/2;
00001c  eb0471d4          ADD      r1,r4,r4,LSR #31
000020  1049              ASRS     r1,r1,#1
000022  fb041a04          MLA      r10,r4,r4,r1
;;;74       I32 y=r;
000026  4626              MOV      r6,r4
;;;75       Draw8Point(x0,y0,r,0);
000028  2300              MOVS     r3,#0
00002a  4622              MOV      r2,r4
00002c  4641              MOV      r1,r8
00002e  4638              MOV      r0,r7
000030  f7fffffe          BL       Draw8Point
;;;76       for (i=1; i<= imax; i++) {
000034  2501              MOVS     r5,#1
000036  e013              B        |L2.96|
                  |L2.56|
;;;77         if ((i*i+y*y) >sqmax) {
000038  fb05f005          MUL      r0,r5,r5
00003c  fb060006          MLA      r0,r6,r6,r0
000040  4550              CMP      r0,r10
000042  dd06              BLE      |L2.82|
;;;78           Draw8Point(x0,y0,i,y);
000044  4633              MOV      r3,r6
000046  462a              MOV      r2,r5
000048  4641              MOV      r1,r8
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       Draw8Point
;;;79           y--;
000050  1e76              SUBS     r6,r6,#1
                  |L2.82|
;;;80         }
;;;81         Draw8Point(x0,y0,i,y);
000052  4633              MOV      r3,r6
000054  462a              MOV      r2,r5
000056  4641              MOV      r1,r8
000058  4638              MOV      r0,r7
00005a  f7fffffe          BL       Draw8Point
00005e  1c6d              ADDS     r5,r5,#1              ;76
                  |L2.96|
000060  454d              CMP      r5,r9                 ;76
000062  dde9              BLE      |L2.56|
;;;82       }
;;;83     }
000064  e8bd87f0          POP      {r4-r10,pc}
;;;84     
                          ENDP


                          AREA ||i.GL_DrawEllipse||, CODE, READONLY, ALIGN=1

                  GL_DrawEllipse PROC
;;;218    */
;;;219    void GL_DrawEllipse(int x0, int y0, int rx, int ry) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  461f              MOV      r7,r3
;;;220      I32 OutConst, Sum, SumY;
;;;221      int x,y;
;;;222      int xOld;
;;;223      U32 _rx = rx;
00000c  46cb              MOV      r11,r9
;;;224      U32 _ry = ry;
00000e  9700              STR      r7,[sp,#0]
;;;225      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
000010  fb0bf00b          MUL      r0,r11,r11
000014  9f00              LDR      r7,[sp,#0]
000016  4378              MULS     r0,r7,r0
000018  fb00f107          MUL      r1,r0,r7
00001c  fb0bf00b          MUL      r0,r11,r11
000020  4378              MULS     r0,r7,r0
000022  eb010050          ADD      r0,r1,r0,LSR #1
000026  9003              STR      r0,[sp,#0xc]
;;;226                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;227      xOld = x = rx;
000028  46c8              MOV      r8,r9
00002a  46ca              MOV      r10,r9
;;;228      for (y=0; y<=ry; y++) {
00002c  2400              MOVS     r4,#0
00002e  e050              B        |L3.210|
                  |L3.48|
;;;229        if (y==ry) {
000030  42bc              CMP      r4,r7
000032  d102              BNE      |L3.58|
;;;230          x=0;
000034  f04f0800          MOV      r8,#0
000038  e01c              B        |L3.116|
                  |L3.58|
;;;231        } else {
;;;232          SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
00003a  fb09f009          MUL      r0,r9,r9
00003e  fb04f104          MUL      r1,r4,r4
000042  4348              MULS     r0,r1,r0
000044  9001              STR      r0,[sp,#4]
;;;233          while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
000046  e001              B        |L3.76|
                  |L3.72|
;;;234                 (x>0) && (Sum>OutConst)) x--;
000048  f1a80801          SUB      r8,r8,#1
                  |L3.76|
00004c  fb07f007          MUL      r0,r7,r7              ;233
000050  fb08f108          MUL      r1,r8,r8              ;233
000054  9a01              LDR      r2,[sp,#4]            ;233
000056  fb002001          MLA      r0,r0,r1,r2           ;233
00005a  9002              STR      r0,[sp,#8]            ;233
00005c  f1b80f00          CMP      r8,#0
000060  dd05              BLE      |L3.110|
000062  e9dd0102          LDRD     r0,r1,[sp,#8]
000066  4288              CMP      r0,r1
000068  dd01              BLE      |L3.110|
00006a  2001              MOVS     r0,#1
00006c  e000              B        |L3.112|
                  |L3.110|
00006e  2000              MOVS     r0,#0
                  |L3.112|
000070  2800              CMP      r0,#0
000072  d1e9              BNE      |L3.72|
                  |L3.116|
;;;235        }
;;;236        /* Since we draw lines, we can not draw on the first
;;;237            iteration
;;;238        */
;;;239        if (y) {
000074  b35c              CBZ      r4,|L3.206|
;;;240          GL_DrawLine1(x0-xOld,y0-y+1,x0-x,y0-y);
000076  1b33              SUBS     r3,r6,r4
000078  eba50208          SUB      r2,r5,r8
00007c  eba60c04          SUB      r12,r6,r4
000080  f10c0101          ADD      r1,r12,#1
000084  eba5000a          SUB      r0,r5,r10
000088  f7fffffe          BL       GL_DrawLine1
;;;241          GL_DrawLine1(x0-xOld,y0+y-1,x0-x,y0+y);
00008c  1933              ADDS     r3,r6,r4
00008e  eba50208          SUB      r2,r5,r8
000092  eb060c04          ADD      r12,r6,r4
000096  f1ac0101          SUB      r1,r12,#1
00009a  eba5000a          SUB      r0,r5,r10
00009e  f7fffffe          BL       GL_DrawLine1
;;;242          GL_DrawLine1(x0+xOld,y0-y+1,x0+x,y0-y);
0000a2  1b33              SUBS     r3,r6,r4
0000a4  eb050208          ADD      r2,r5,r8
0000a8  eba60c04          SUB      r12,r6,r4
0000ac  f10c0101          ADD      r1,r12,#1
0000b0  eb05000a          ADD      r0,r5,r10
0000b4  f7fffffe          BL       GL_DrawLine1
;;;243          GL_DrawLine1(x0+xOld,y0+y-1,x0+x,y0+y);
0000b8  1933              ADDS     r3,r6,r4
0000ba  eb050208          ADD      r2,r5,r8
0000be  eb060c04          ADD      r12,r6,r4
0000c2  f1ac0101          SUB      r1,r12,#1
0000c6  eb05000a          ADD      r0,r5,r10
0000ca  f7fffffe          BL       GL_DrawLine1
                  |L3.206|
;;;244        }
;;;245        xOld = x;
0000ce  46c2              MOV      r10,r8
0000d0  1c64              ADDS     r4,r4,#1              ;228
                  |L3.210|
0000d2  42bc              CMP      r4,r7                 ;228
0000d4  ddac              BLE      |L3.48|
;;;246      }
;;;247    }
0000d6  e8bd9fff          POP      {r0-r12,pc}
;;;248    
                          ENDP


                          AREA ||i.GL_FillCircle||, CODE, READONLY, ALIGN=2

                  GL_FillCircle PROC
;;;112    */
;;;113    void GL_FillCircle(int x0, int y0, int r) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;114      I32 i;
;;;115      int imax = ((I32)((I32)r*707))/1000+1;
00000a  f24020c3          MOV      r0,#0x2c3
00000e  4370              MULS     r0,r6,r0
000010  f44f717a          MOV      r1,#0x3e8
000014  fb90f0f1          SDIV     r0,r0,r1
000018  f1000901          ADD      r9,r0,#1
;;;116      I32 sqmax = (I32)r*(I32)r+(I32)r/2;
00001c  eb0671d6          ADD      r1,r6,r6,LSR #31
000020  1049              ASRS     r1,r1,#1
000022  fb061a06          MLA      r10,r6,r6,r1
;;;117      I32 x=r;
000026  4634              MOV      r4,r6
;;;118      LCD_HL_DrawHLine(x0-r,y0,x0+r);
000028  19aa              ADDS     r2,r5,r6
00002a  1ba8              SUBS     r0,r5,r6
00002c  4926              LDR      r1,|L4.200|
00002e  6dc9              LDR      r1,[r1,#0x5c]  ; GUI_Context
000030  680b              LDR      r3,[r1,#0]
000032  4641              MOV      r1,r8
000034  4798              BLX      r3
;;;119      for (i=1; i<= imax; i++) {
000036  2701              MOVS     r7,#1
000038  e041              B        |L4.190|
                  |L4.58|
;;;120        if ((i*i+x*x) >sqmax) {
00003a  fb07f007          MUL      r0,r7,r7
00003e  fb040004          MLA      r0,r4,r4,r0
000042  4550              CMP      r0,r10
000044  dd24              BLE      |L4.144|
;;;121          /* draw lines from outside */
;;;122          if (x>imax) {
000046  454c              CMP      r4,r9
000048  dd21              BLE      |L4.142|
;;;123            LCD_HL_DrawHLine (x0-i+1,y0+x, x0+i-1);
00004a  eb050c07          ADD      r12,r5,r7
00004e  f1ac0201          SUB      r2,r12,#1
000052  eb080104          ADD      r1,r8,r4
000056  eba50c07          SUB      r12,r5,r7
00005a  f10c0001          ADD      r0,r12,#1
00005e  f8dfc068          LDR      r12,|L4.200|
000062  f8dcc05c          LDR      r12,[r12,#0x5c]  ; GUI_Context
000066  f8dc3000          LDR      r3,[r12,#0]
00006a  4798              BLX      r3
;;;124            LCD_HL_DrawHLine (x0-i+1,y0-x, x0+i-1);
00006c  eb050c07          ADD      r12,r5,r7
000070  f1ac0201          SUB      r2,r12,#1
000074  eba80104          SUB      r1,r8,r4
000078  eba50c07          SUB      r12,r5,r7
00007c  f10c0001          ADD      r0,r12,#1
000080  f8dfc044          LDR      r12,|L4.200|
000084  f8dcc05c          LDR      r12,[r12,#0x5c]  ; GUI_Context
000088  f8dc3000          LDR      r3,[r12,#0]
00008c  4798              BLX      r3
                  |L4.142|
;;;125          }
;;;126          x--;
00008e  1e64              SUBS     r4,r4,#1
                  |L4.144|
;;;127        }
;;;128        /* draw lines from inside (center) */
;;;129        LCD_HL_DrawHLine(x0-x,y0+i, x0+x);
000090  192a              ADDS     r2,r5,r4
000092  eb080107          ADD      r1,r8,r7
000096  1b28              SUBS     r0,r5,r4
000098  f8dfc02c          LDR      r12,|L4.200|
00009c  f8dcc05c          LDR      r12,[r12,#0x5c]  ; GUI_Context
0000a0  f8dc3000          LDR      r3,[r12,#0]
0000a4  4798              BLX      r3
;;;130        LCD_HL_DrawHLine(x0-x,y0-i, x0+x);
0000a6  192a              ADDS     r2,r5,r4
0000a8  eba80107          SUB      r1,r8,r7
0000ac  1b28              SUBS     r0,r5,r4
0000ae  f8dfc018          LDR      r12,|L4.200|
0000b2  f8dcc05c          LDR      r12,[r12,#0x5c]  ; GUI_Context
0000b6  f8dc3000          LDR      r3,[r12,#0]
0000ba  4798              BLX      r3
0000bc  1c7f              ADDS     r7,r7,#1              ;119
                  |L4.190|
0000be  454f              CMP      r7,r9                 ;119
0000c0  ddbb              BLE      |L4.58|
;;;131      }
;;;132    }
0000c2  e8bd87f0          POP      {r4-r10,pc}
;;;133    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L4.200|
                          DCD      GUI_Context

                          AREA ||i.GL_FillEllipse||, CODE, READONLY, ALIGN=2

                  GL_FillEllipse PROC
;;;171    */
;;;172    void GL_FillEllipse(int x0, int y0, int rx, int ry) {
000000  e92d4ffe          PUSH     {r1-r11,lr}
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
;;;173      I32 OutConst, Sum, SumY;
;;;174      int x,y;
;;;175      U32 _rx = rx;
00000c  46b2              MOV      r10,r6
;;;176      U32 _ry = ry;
00000e  46a3              MOV      r11,r4
;;;177      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
000010  fb0af00a          MUL      r0,r10,r10
000014  fb00f00b          MUL      r0,r0,r11
000018  fb00f10b          MUL      r1,r0,r11
00001c  fb0af00a          MUL      r0,r10,r10
000020  fb00f00b          MUL      r0,r0,r11
000024  eb010050          ADD      r0,r1,r0,LSR #1
000028  9002              STR      r0,[sp,#8]
;;;178                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;179      x = rx;
00002a  4635              MOV      r5,r6
;;;180      for (y=0; y<=ry; y++) {
00002c  2700              MOVS     r7,#0
00002e  e036              B        |L5.158|
                  |L5.48|
;;;181        SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
000030  fb06f006          MUL      r0,r6,r6
000034  fb07f107          MUL      r1,r7,r7
000038  4348              MULS     r0,r1,r0
00003a  9000              STR      r0,[sp,#0]
;;;182        while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
00003c  e000              B        |L5.64|
                  |L5.62|
;;;183               (x>0) && (Sum>OutConst))
;;;184        {
;;;185          x--;
00003e  1e6d              SUBS     r5,r5,#1
                  |L5.64|
000040  fb04f004          MUL      r0,r4,r4              ;182
000044  fb05f105          MUL      r1,r5,r5              ;182
000048  9a00              LDR      r2,[sp,#0]            ;182
00004a  fb002001          MLA      r0,r0,r1,r2           ;182
00004e  9001              STR      r0,[sp,#4]            ;182
000050  2d00              CMP      r5,#0                 ;183
000052  dd05              BLE      |L5.96|
000054  e9dd0101          LDRD     r0,r1,[sp,#4]         ;183
000058  4288              CMP      r0,r1                 ;183
00005a  dd01              BLE      |L5.96|
00005c  2001              MOVS     r0,#1                 ;183
00005e  e000              B        |L5.98|
                  |L5.96|
000060  2000              MOVS     r0,#0                 ;183
                  |L5.98|
000062  2800              CMP      r0,#0                 ;183
000064  d1eb              BNE      |L5.62|
;;;186        }
;;;187        LCD_HL_DrawHLine(x0-x, y0+y, x0+x);
000066  eb080205          ADD      r2,r8,r5
00006a  eb090107          ADD      r1,r9,r7
00006e  eba80005          SUB      r0,r8,r5
000072  f8dfc034          LDR      r12,|L5.168|
000076  f8dcc05c          LDR      r12,[r12,#0x5c]  ; GUI_Context
00007a  f8dc3000          LDR      r3,[r12,#0]
00007e  4798              BLX      r3
;;;188        if (y)
000080  b167              CBZ      r7,|L5.156|
;;;189          LCD_HL_DrawHLine(x0-x, y0-y, x0+x);
000082  eb080205          ADD      r2,r8,r5
000086  eba90107          SUB      r1,r9,r7
00008a  eba80005          SUB      r0,r8,r5
00008e  f8dfc018          LDR      r12,|L5.168|
000092  f8dcc05c          LDR      r12,[r12,#0x5c]  ; GUI_Context
000096  f8dc3000          LDR      r3,[r12,#0]
00009a  4798              BLX      r3
                  |L5.156|
00009c  1c7f              ADDS     r7,r7,#1              ;180
                  |L5.158|
00009e  42a7              CMP      r7,r4                 ;180
0000a0  ddc6              BLE      |L5.48|
;;;190      }
;;;191    }
0000a2  e8bd8ffe          POP      {r1-r11,pc}
;;;192    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L5.168|
                          DCD      GUI_Context

                          AREA ||i.GUI_DrawCircle||, CODE, READONLY, ALIGN=2

                  GUI_DrawCircle PROC
;;;88     */
;;;89     void GUI_DrawCircle(int x0, int y0, int r) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;90       #if (GUI_WINSUPPORT)
;;;91         GUI_RECT Rect;
;;;92       #endif
;;;93       GUI_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;94       #if (GUI_WINSUPPORT)
;;;95         WM_ADDORG(x0,y0);
00000c  4813              LDR      r0,|L6.92|
00000e  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000010  4406              ADD      r6,r6,r0
000012  4812              LDR      r0,|L6.92|
000014  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000016  4405              ADD      r5,r5,r0
;;;96         Rect.x0 = x0-r;
000018  1b30              SUBS     r0,r6,r4
00001a  b200              SXTH     r0,r0
00001c  f8ad0000          STRH     r0,[sp,#0]
;;;97         Rect.x1 = x0+r;
000020  1930              ADDS     r0,r6,r4
000022  b200              SXTH     r0,r0
000024  f8ad0004          STRH     r0,[sp,#4]
;;;98         Rect.y0 = y0-r;
000028  1b28              SUBS     r0,r5,r4
00002a  b200              SXTH     r0,r0
00002c  f8ad0002          STRH     r0,[sp,#2]
;;;99         Rect.y1 = y0+r;
000030  1928              ADDS     r0,r5,r4
000032  b200              SXTH     r0,r0
000034  f8ad0006          STRH     r0,[sp,#6]
;;;100        WM_ITERATE_START(&Rect); {
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       WM__InitIVRSearch
00003e  b148              CBZ      r0,|L6.84|
000040  bf00              NOP      
                  |L6.66|
;;;101      #endif
;;;102        GL_DrawCircle( x0, y0, r);
000042  4622              MOV      r2,r4
000044  4629              MOV      r1,r5
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       GL_DrawCircle
;;;103      #if (GUI_WINSUPPORT)
;;;104        } WM_ITERATE_END();
00004c  f7fffffe          BL       WM__GetNextIVR
000050  2800              CMP      r0,#0
000052  d1f6              BNE      |L6.66|
                  |L6.84|
;;;105      #endif
;;;106      GUI_UNLOCK();
000054  f7fffffe          BL       GUI_Unlock
;;;107    }
000058  bd7c              POP      {r2-r6,pc}
;;;108    
                          ENDP

00005a  0000              DCW      0x0000
                  |L6.92|
                          DCD      GUI_Context

                          AREA ||i.GUI_DrawEllipse||, CODE, READONLY, ALIGN=2

                  GUI_DrawEllipse PROC
;;;252    */
;;;253    void GUI_DrawEllipse(int x0, int y0, int rx, int ry) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;254      #if (GUI_WINSUPPORT)
;;;255        GUI_RECT r;
;;;256      #endif
;;;257      GUI_LOCK();
00000c  f7fffffe          BL       GUI_Lock
;;;258      #if (GUI_WINSUPPORT)
;;;259        WM_ADDORG(x0,y0);
000010  4814              LDR      r0,|L7.100|
000012  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000014  4404              ADD      r4,r4,r0
000016  4813              LDR      r0,|L7.100|
000018  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00001a  4405              ADD      r5,r5,r0
;;;260      /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;261        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
00001c  1ba0              SUBS     r0,r4,r6
00001e  b200              SXTH     r0,r0
000020  f8ad0000          STRH     r0,[sp,#0]
000024  19a0              ADDS     r0,r4,r6
000026  b200              SXTH     r0,r0
000028  f8ad0004          STRH     r0,[sp,#4]
00002c  1be8              SUBS     r0,r5,r7
00002e  b200              SXTH     r0,r0
000030  f8ad0002          STRH     r0,[sp,#2]
000034  19e8              ADDS     r0,r5,r7
000036  b200              SXTH     r0,r0
000038  f8ad0006          STRH     r0,[sp,#6]
;;;262        WM_ITERATE_START(&r); {
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       WM__InitIVRSearch
000042  b150              CBZ      r0,|L7.90|
000044  bf00              NOP      
                  |L7.70|
;;;263      #endif
;;;264      GL_DrawEllipse(x0, y0, rx, ry);
000046  463b              MOV      r3,r7
000048  4632              MOV      r2,r6
00004a  4629              MOV      r1,r5
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       GL_DrawEllipse
;;;265      #if (GUI_WINSUPPORT)
;;;266        } WM_ITERATE_END();
000052  f7fffffe          BL       WM__GetNextIVR
000056  2800              CMP      r0,#0
000058  d1f5              BNE      |L7.70|
                  |L7.90|
;;;267      #endif
;;;268      GUI_UNLOCK();
00005a  f7fffffe          BL       GUI_Unlock
;;;269    }
00005e  e8bd81fc          POP      {r2-r8,pc}
;;;270    
                          ENDP

000062  0000              DCW      0x0000
                  |L7.100|
                          DCD      GUI_Context

                          AREA ||i.GUI_FillCircle||, CODE, READONLY, ALIGN=2

                  GUI_FillCircle PROC
;;;137    */
;;;138    void GUI_FillCircle(int x0, int y0, int r) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;139      GUI_LOCK();
000008  f7fffffe          BL       GUI_Lock
;;;140      #if (GUI_WINSUPPORT)
;;;141        WM_ADDORG(x0,y0);
00000c  480b              LDR      r0,|L8.60|
00000e  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000010  4404              ADD      r4,r4,r0
000012  480a              LDR      r0,|L8.60|
000014  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000016  4405              ADD      r5,r5,r0
;;;142        WM_ITERATE_START(NULL); {
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       WM__InitIVRSearch
00001e  b148              CBZ      r0,|L8.52|
000020  bf00              NOP      
                  |L8.34|
;;;143      #endif
;;;144      GL_FillCircle(x0,y0,r);
000022  4632              MOV      r2,r6
000024  4629              MOV      r1,r5
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       GL_FillCircle
;;;145      #if (GUI_WINSUPPORT)
;;;146        } WM_ITERATE_END();
00002c  f7fffffe          BL       WM__GetNextIVR
000030  2800              CMP      r0,#0
000032  d1f6              BNE      |L8.34|
                  |L8.52|
;;;147      #endif
;;;148      GUI_UNLOCK();
000034  f7fffffe          BL       GUI_Unlock
;;;149    }
000038  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      GUI_Context

                          AREA ||i.GUI_FillEllipse||, CODE, READONLY, ALIGN=2

                  GUI_FillEllipse PROC
;;;196    */
;;;197    void GUI_FillEllipse(int x0, int y0, int rx, int ry) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;198      #if (GUI_WINSUPPORT)
;;;199        GUI_RECT r;
;;;200      #endif
;;;201      GUI_LOCK();
00000c  f7fffffe          BL       GUI_Lock
;;;202      #if (GUI_WINSUPPORT)
;;;203        WM_ADDORG(x0,y0);
000010  4814              LDR      r0,|L9.100|
000012  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000014  4404              ADD      r4,r4,r0
000016  4813              LDR      r0,|L9.100|
000018  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00001a  4405              ADD      r5,r5,r0
;;;204        /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;205        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
00001c  1ba0              SUBS     r0,r4,r6
00001e  b200              SXTH     r0,r0
000020  f8ad0000          STRH     r0,[sp,#0]
000024  19a0              ADDS     r0,r4,r6
000026  b200              SXTH     r0,r0
000028  f8ad0004          STRH     r0,[sp,#4]
00002c  1be8              SUBS     r0,r5,r7
00002e  b200              SXTH     r0,r0
000030  f8ad0002          STRH     r0,[sp,#2]
000034  19e8              ADDS     r0,r5,r7
000036  b200              SXTH     r0,r0
000038  f8ad0006          STRH     r0,[sp,#6]
;;;206        WM_ITERATE_START(&r); {
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       WM__InitIVRSearch
000042  b150              CBZ      r0,|L9.90|
000044  bf00              NOP      
                  |L9.70|
;;;207      #endif
;;;208      GL_FillEllipse (x0,y0, rx, ry);
000046  463b              MOV      r3,r7
000048  4632              MOV      r2,r6
00004a  4629              MOV      r1,r5
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       GL_FillEllipse
;;;209      #if (GUI_WINSUPPORT)
;;;210        } WM_ITERATE_END();
000052  f7fffffe          BL       WM__GetNextIVR
000056  2800              CMP      r0,#0
000058  d1f5              BNE      |L9.70|
                  |L9.90|
;;;211      #endif
;;;212      GUI_UNLOCK();
00005a  f7fffffe          BL       GUI_Unlock
;;;213    }
00005e  e8bd81fc          POP      {r2-r8,pc}
;;;214    
                          ENDP

000062  0000              DCW      0x0000
                  |L9.100|
                          DCD      GUI_Context
