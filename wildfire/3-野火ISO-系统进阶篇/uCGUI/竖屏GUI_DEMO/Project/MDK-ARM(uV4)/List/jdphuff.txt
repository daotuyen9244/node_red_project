; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\jdphuff.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\jdphuff.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\JPEG\jdphuff.c]
                          THUMB

                          AREA ||i.decode_mcu_AC_first||, CODE, READONLY, ALIGN=2

                  decode_mcu_AC_first PROC
;;;356    METHODDEF(boolean)
;;;357    decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;358    {   
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
;;;359      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
000008  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;360      int Se = cinfo->Se;
00000c  f8d40194          LDR      r0,[r4,#0x194]
000010  900c              STR      r0,[sp,#0x30]
;;;361      int Al = cinfo->Al;
000012  f8d4019c          LDR      r0,[r4,#0x19c]
000016  900b              STR      r0,[sp,#0x2c]
;;;362      register int s, k, r;
;;;363      unsigned int EOBRUN;
;;;364      JBLOCKROW block;
;;;365      BITREAD_STATE_VARS;
;;;366      d_derived_tbl * tbl;
;;;367    
;;;368      /* Process restart marker if needed; may have to suspend */
;;;369      if (cinfo->restart_interval) {
000018  f8d40114          LDR      r0,[r4,#0x114]
00001c  b148              CBZ      r0,|L1.50|
;;;370        if (entropy->restarts_to_go == 0)
00001e  6aa8              LDR      r0,[r5,#0x28]
000020  b938              CBNZ     r0,|L1.50|
;;;371          if (! process_restart(cinfo))
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       process_restart
000028  b918              CBNZ     r0,|L1.50|
;;;372    	return FALSE;
00002a  2000              MOVS     r0,#0
                  |L1.44|
;;;373      }
;;;374    
;;;375      /* If we've run out of data, just leave the MCU set to zeroes.
;;;376       * This way, we return uniform gray for the remainder of the segment.
;;;377       */
;;;378      if (! entropy->pub.insufficient_data) {
;;;379    
;;;380        /* Load up working state.
;;;381         * We can avoid loading/saving bitread state if in an EOB run.
;;;382         */
;;;383        EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
;;;384    
;;;385        /* There is always only one block per MCU */
;;;386    
;;;387        if (EOBRUN > 0)		/* if it's a band of zeroes... */
;;;388          EOBRUN--;			/* ...process it now (we do nothing) */
;;;389        else {
;;;390          BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;391          block = MCU_data[0];
;;;392          tbl = entropy->ac_derived_tbl;
;;;393    
;;;394          for (k = cinfo->Ss; k <= Se; k++) {
;;;395    	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
;;;396    	r = s >> 4;
;;;397    	s &= 15;
;;;398    	if (s) {
;;;399    	  k += r;
;;;400    	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
;;;401    	  r = GET_BITS(s);
;;;402    	  s = HUFF_EXTEND(r, s);
;;;403    	  /* Scale and output coefficient in natural (dezigzagged) order */
;;;404    	  (*block)[jpeg_natural_order[k]] = (JCOEF) (s << Al);
;;;405    	} else {
;;;406    	  if (r == 15) {	/* ZRL */
;;;407    	    k += 15;		/* skip 15 zeroes in band */
;;;408    	  } else {		/* EOBr, run length is 2^r + appended bits */
;;;409    	    EOBRUN = 1 << r;
;;;410    	    if (r) {		/* EOBr, r > 0 */
;;;411    	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
;;;412    	      r = GET_BITS(r);
;;;413    	      EOBRUN += r;
;;;414    	    }
;;;415    	    EOBRUN--;		/* this band is processed at this moment */
;;;416    	    break;		/* force end-of-band */
;;;417    	  }
;;;418    	}
;;;419          }
;;;420    
;;;421          BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;422        }
;;;423    
;;;424        /* Completed MCU, so update state */
;;;425        entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
;;;426      }
;;;427    
;;;428      /* Account for restart interval (no-op if not using restarts) */
;;;429      entropy->restarts_to_go--;
;;;430    
;;;431      return TRUE;
;;;432    }
00002c  b00f              ADD      sp,sp,#0x3c
00002e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.50|
000032  68a8              LDR      r0,[r5,#8]            ;378
000034  2800              CMP      r0,#0                 ;378
000036  d17d              BNE      |L1.308|
000038  f8d5a014          LDR      r10,[r5,#0x14]        ;383
00003c  f1ba0f00          CMP      r10,#0                ;387
000040  d002              BEQ      |L1.72|
000042  f1aa0a01          SUB      r10,r10,#1            ;388
000046  e0bc              B        |L1.450|
                  |L1.72|
000048  9409              STR      r4,[sp,#0x24]         ;390
00004a  69a0              LDR      r0,[r4,#0x18]         ;390
00004c  6800              LDR      r0,[r0,#0]            ;390
00004e  9005              STR      r0,[sp,#0x14]         ;390
000050  69a0              LDR      r0,[r4,#0x18]         ;390
000052  6840              LDR      r0,[r0,#4]            ;390
000054  9006              STR      r0,[sp,#0x18]         ;390
000056  f8d5b00c          LDR      r11,[r5,#0xc]         ;390
00005a  692f              LDR      r7,[r5,#0x10]         ;390
00005c  980e              LDR      r0,[sp,#0x38]         ;391
00005e  6800              LDR      r0,[r0,#0]            ;391
000060  900a              STR      r0,[sp,#0x28]         ;391
000062  6be8              LDR      r0,[r5,#0x3c]         ;392
000064  9004              STR      r0,[sp,#0x10]         ;392
000066  f8d49190          LDR      r9,[r4,#0x190]        ;394
00006a  e09c              B        |L1.422|
                  |L1.108|
00006c  2f08              CMP      r7,#8                 ;395
00006e  da10              BGE      |L1.146|
000070  2300              MOVS     r3,#0                 ;395
000072  463a              MOV      r2,r7                 ;395
000074  4659              MOV      r1,r11                ;395
000076  a805              ADD      r0,sp,#0x14           ;395
000078  f7fffffe          BL       jpeg_fill_bit_buffer
00007c  b908              CBNZ     r0,|L1.130|
00007e  2000              MOVS     r0,#0                 ;395
000080  e7d4              B        |L1.44|
                  |L1.130|
000082  f8ddb01c          LDR      r11,[sp,#0x1c]        ;395
000086  9f08              LDR      r7,[sp,#0x20]         ;395
000088  2f08              CMP      r7,#8                 ;395
00008a  da02              BGE      |L1.146|
00008c  2001              MOVS     r0,#1                 ;395
00008e  9003              STR      r0,[sp,#0xc]          ;395
000090  e019              B        |L1.198|
                  |L1.146|
000092  f1a70008          SUB      r0,r7,#8              ;395
000096  fa4bf000          ASR      r0,r11,r0             ;395
00009a  b2c0              UXTB     r0,r0                 ;395
00009c  9002              STR      r0,[sp,#8]            ;395
00009e  9804              LDR      r0,[sp,#0x10]         ;395
0000a0  f1000190          ADD      r1,r0,#0x90           ;395
0000a4  9802              LDR      r0,[sp,#8]            ;395
0000a6  f8510020          LDR      r0,[r1,r0,LSL #2]     ;395
0000aa  9003              STR      r0,[sp,#0xc]          ;395
0000ac  b140              CBZ      r0,|L1.192|
0000ae  9803              LDR      r0,[sp,#0xc]          ;395
0000b0  1a3f              SUBS     r7,r7,r0              ;395
0000b2  9804              LDR      r0,[sp,#0x10]         ;395
0000b4  f5006092          ADD      r0,r0,#0x490          ;395
0000b8  9902              LDR      r1,[sp,#8]            ;395
0000ba  f8108001          LDRB     r8,[r0,r1]            ;395
0000be  e012              B        |L1.230|
                  |L1.192|
0000c0  2009              MOVS     r0,#9                 ;395
0000c2  9003              STR      r0,[sp,#0xc]          ;395
0000c4  bf00              NOP                            ;395
                  |L1.198|
0000c6  9803              LDR      r0,[sp,#0xc]          ;395
0000c8  9000              STR      r0,[sp,#0]            ;395
0000ca  463a              MOV      r2,r7                 ;395
0000cc  4659              MOV      r1,r11                ;395
0000ce  a805              ADD      r0,sp,#0x14           ;395
0000d0  9b04              LDR      r3,[sp,#0x10]         ;395
0000d2  f7fffffe          BL       jpeg_huff_decode
0000d6  f1b00800          SUBS     r8,r0,#0              ;395
0000da  da01              BGE      |L1.224|
0000dc  2000              MOVS     r0,#0                 ;395
0000de  e7a5              B        |L1.44|
                  |L1.224|
0000e0  f8ddb01c          LDR      r11,[sp,#0x1c]        ;395
0000e4  9f08              LDR      r7,[sp,#0x20]         ;395
                  |L1.230|
0000e6  ea4f1628          ASR      r6,r8,#4              ;396
0000ea  f008080f          AND      r8,r8,#0xf            ;397
0000ee  f1b80f00          CMP      r8,#0                 ;398
0000f2  d032              BEQ      |L1.346|
0000f4  44b1              ADD      r9,r9,r6              ;399
0000f6  4547              CMP      r7,r8                 ;400
0000f8  da0b              BGE      |L1.274|
0000fa  4643              MOV      r3,r8                 ;400
0000fc  463a              MOV      r2,r7                 ;400
0000fe  4659              MOV      r1,r11                ;400
000100  a805              ADD      r0,sp,#0x14           ;400
000102  f7fffffe          BL       jpeg_fill_bit_buffer
000106  b908              CBNZ     r0,|L1.268|
000108  2000              MOVS     r0,#0                 ;400
00010a  e78f              B        |L1.44|
                  |L1.268|
00010c  f8ddb01c          LDR      r11,[sp,#0x1c]        ;400
000110  9f08              LDR      r7,[sp,#0x20]         ;400
                  |L1.274|
000112  eba70108          SUB      r1,r7,r8              ;401
000116  460f              MOV      r7,r1                 ;401
000118  fa4bf001          ASR      r0,r11,r1             ;401
00011c  2101              MOVS     r1,#1                 ;401
00011e  fa01f108          LSL      r1,r1,r8              ;401
000122  1e49              SUBS     r1,r1,#1              ;401
000124  ea000601          AND      r6,r0,r1              ;401
000128  4829              LDR      r0,|L1.464|
00012a  f8500028          LDR      r0,[r0,r8,LSL #2]     ;402
00012e  42b0              CMP      r0,r6                 ;402
000130  dd06              BLE      |L1.320|
000132  e000              B        |L1.310|
                  |L1.308|
000134  e047              B        |L1.454|
                  |L1.310|
000136  4827              LDR      r0,|L1.468|
000138  f8500028          LDR      r0,[r0,r8,LSL #2]     ;402
00013c  4430              ADD      r0,r0,r6              ;402
00013e  e000              B        |L1.322|
                  |L1.320|
000140  4630              MOV      r0,r6                 ;402
                  |L1.322|
000142  4680              MOV      r8,r0                 ;402
000144  980b              LDR      r0,[sp,#0x2c]         ;404
000146  fa08f000          LSL      r0,r8,r0              ;404
00014a  b201              SXTH     r1,r0                 ;404
00014c  4822              LDR      r0,|L1.472|
00014e  f8502029          LDR      r2,[r0,r9,LSL #2]     ;404
000152  980a              LDR      r0,[sp,#0x28]         ;404
000154  f8201012          STRH     r1,[r0,r2,LSL #1]     ;404
000158  e023              B        |L1.418|
                  |L1.346|
00015a  2e0f              CMP      r6,#0xf               ;406
00015c  d102              BNE      |L1.356|
00015e  f109090f          ADD      r9,r9,#0xf            ;407
000162  e01e              B        |L1.418|
                  |L1.356|
000164  2001              MOVS     r0,#1                 ;409
000166  fa00fa06          LSL      r10,r0,r6             ;409
00016a  b1be              CBZ      r6,|L1.412|
00016c  42b7              CMP      r7,r6                 ;411
00016e  da0b              BGE      |L1.392|
000170  4633              MOV      r3,r6                 ;411
000172  463a              MOV      r2,r7                 ;411
000174  4659              MOV      r1,r11                ;411
000176  a805              ADD      r0,sp,#0x14           ;411
000178  f7fffffe          BL       jpeg_fill_bit_buffer
00017c  b908              CBNZ     r0,|L1.386|
00017e  2000              MOVS     r0,#0                 ;411
000180  e754              B        |L1.44|
                  |L1.386|
000182  f8ddb01c          LDR      r11,[sp,#0x1c]        ;411
000186  9f08              LDR      r7,[sp,#0x20]         ;411
                  |L1.392|
000188  1bb9              SUBS     r1,r7,r6              ;412
00018a  460f              MOV      r7,r1                 ;412
00018c  fa4bf001          ASR      r0,r11,r1             ;412
000190  2101              MOVS     r1,#1                 ;412
000192  40b1              LSLS     r1,r1,r6              ;412
000194  1e49              SUBS     r1,r1,#1              ;412
000196  ea000601          AND      r6,r0,r1              ;412
00019a  44b2              ADD      r10,r10,r6            ;413
                  |L1.412|
00019c  f1aa0a01          SUB      r10,r10,#1            ;415
0001a0  e005              B        |L1.430|
                  |L1.418|
0001a2  f1090901          ADD      r9,r9,#1              ;394
                  |L1.422|
0001a6  980c              LDR      r0,[sp,#0x30]         ;394
0001a8  4581              CMP      r9,r0                 ;394
0001aa  f77faf5f          BLE      |L1.108|
                  |L1.430|
0001ae  bf00              NOP                            ;416
0001b0  9805              LDR      r0,[sp,#0x14]         ;421
0001b2  69a1              LDR      r1,[r4,#0x18]         ;421
0001b4  6008              STR      r0,[r1,#0]            ;421
0001b6  9806              LDR      r0,[sp,#0x18]         ;421
0001b8  69a1              LDR      r1,[r4,#0x18]         ;421
0001ba  6048              STR      r0,[r1,#4]            ;421
0001bc  f8c5b00c          STR      r11,[r5,#0xc]         ;421
0001c0  612f              STR      r7,[r5,#0x10]         ;421
                  |L1.450|
0001c2  f8c5a014          STR      r10,[r5,#0x14]        ;425
                  |L1.454|
0001c6  6aa8              LDR      r0,[r5,#0x28]         ;429
0001c8  1e40              SUBS     r0,r0,#1              ;429
0001ca  62a8              STR      r0,[r5,#0x28]         ;429
0001cc  2001              MOVS     r0,#1                 ;431
0001ce  e72d              B        |L1.44|
;;;433    
                          ENDP

                  |L1.464|
                          DCD      extend_test
                  |L1.468|
                          DCD      extend_offset
                  |L1.472|
                          DCD      jpeg_natural_order

                          AREA ||i.decode_mcu_AC_refine||, CODE, READONLY, ALIGN=2

                  decode_mcu_AC_refine PROC
;;;490    METHODDEF(boolean)
;;;491    decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;492    {   
000004  b0cf              SUB      sp,sp,#0x13c
000006  4606              MOV      r6,r0
;;;493      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
000008  f8d671bc          LDR      r7,[r6,#0x1bc]
;;;494      int Se = cinfo->Se;
00000c  f8d60194          LDR      r0,[r6,#0x194]
000010  904e              STR      r0,[sp,#0x138]
;;;495      int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
000012  f896119c          LDRB     r1,[r6,#0x19c]
000016  2001              MOVS     r0,#1
000018  4088              LSLS     r0,r0,r1
00001a  904d              STR      r0,[sp,#0x134]
;;;496      int m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
00001c  f896119c          LDRB     r1,[r6,#0x19c]
000020  f04f30ff          MOV      r0,#0xffffffff
000024  4088              LSLS     r0,r0,r1
000026  904c              STR      r0,[sp,#0x130]
;;;497      register int s, k, r;
;;;498      unsigned int EOBRUN;
;;;499      JBLOCKROW block;
;;;500      JCOEFPTR thiscoef;
;;;501      BITREAD_STATE_VARS;
;;;502      d_derived_tbl * tbl;
;;;503      int num_newnz;
;;;504      int newnz_pos[DCTSIZE2];
;;;505    
;;;506      /* Process restart marker if needed; may have to suspend */
;;;507      if (cinfo->restart_interval) {
000028  f8d60114          LDR      r0,[r6,#0x114]
00002c  b148              CBZ      r0,|L2.66|
;;;508        if (entropy->restarts_to_go == 0)
00002e  6ab8              LDR      r0,[r7,#0x28]
000030  b938              CBNZ     r0,|L2.66|
;;;509          if (! process_restart(cinfo))
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       process_restart
000038  b918              CBNZ     r0,|L2.66|
;;;510    	return FALSE;
00003a  2000              MOVS     r0,#0
                  |L2.60|
;;;511      }
;;;512    
;;;513      /* If we've run out of data, don't modify the MCU.
;;;514       */
;;;515      if (! entropy->pub.insufficient_data) {
;;;516    
;;;517        /* Load up working state */
;;;518        BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;519        EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
;;;520    
;;;521        /* There is always only one block per MCU */
;;;522        block = MCU_data[0];
;;;523        tbl = entropy->ac_derived_tbl;
;;;524    
;;;525        /* If we are forced to suspend, we must undo the assignments to any newly
;;;526         * nonzero coefficients in the block, because otherwise we'd get confused
;;;527         * next time about which coefficients were already nonzero.
;;;528         * But we need not undo addition of bits to already-nonzero coefficients;
;;;529         * instead, we can test the current bit to see if we already did it.
;;;530         */
;;;531        num_newnz = 0;
;;;532    
;;;533        /* initialize coefficient loop counter to start of band */
;;;534        k = cinfo->Ss;
;;;535    
;;;536        if (EOBRUN == 0) {
;;;537          for (; k <= Se; k++) {
;;;538    	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
;;;539    	r = s >> 4;
;;;540    	s &= 15;
;;;541    	if (s) {
;;;542    	  if (s != 1)		/* size of new coef should always be 1 */
;;;543    	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
;;;544    	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
;;;545    	  if (GET_BITS(1))
;;;546    	    s = p1;		/* newly nonzero coef is positive */
;;;547    	  else
;;;548    	    s = m1;		/* newly nonzero coef is negative */
;;;549    	} else {
;;;550    	  if (r != 15) {
;;;551    	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
;;;552    	    if (r) {
;;;553    	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
;;;554    	      r = GET_BITS(r);
;;;555    	      EOBRUN += r;
;;;556    	    }
;;;557    	    break;		/* rest of block is handled by EOB logic */
;;;558    	  }
;;;559    	  /* note s = 0 for processing ZRL */
;;;560    	}
;;;561    	/* Advance over already-nonzero coefs and r still-zero coefs,
;;;562    	 * appending correction bits to the nonzeroes.  A correction bit is 1
;;;563    	 * if the absolute value of the coefficient must be increased.
;;;564    	 */
;;;565    	do {
;;;566    	  thiscoef = *block + jpeg_natural_order[k];
;;;567    	  if (*thiscoef != 0) {
;;;568    	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
;;;569    	    if (GET_BITS(1)) {
;;;570    	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
;;;571    		if (*thiscoef >= 0)
;;;572    		  *thiscoef += p1;
;;;573    		else
;;;574    		  *thiscoef += m1;
;;;575    	      }
;;;576    	    }
;;;577    	  } else {
;;;578    	    if (--r < 0)
;;;579    	      break;		/* reached target zero coefficient */
;;;580    	  }
;;;581    	  k++;
;;;582    	} while (k <= Se);
;;;583    	if (s) {
;;;584    	  int pos = jpeg_natural_order[k];
;;;585    	  /* Output newly nonzero coefficient */
;;;586    	  (*block)[pos] = (JCOEF) s;
;;;587    	  /* Remember its position in case we have to suspend */
;;;588    	  newnz_pos[num_newnz++] = pos;
;;;589    	}
;;;590          }
;;;591        }
;;;592    
;;;593        if (EOBRUN > 0) {
;;;594          /* Scan any remaining coefficient positions after the end-of-band
;;;595           * (the last newly nonzero coefficient, if any).  Append a correction
;;;596           * bit to each already-nonzero coefficient.  A correction bit is 1
;;;597           * if the absolute value of the coefficient must be increased.
;;;598           */
;;;599          for (; k <= Se; k++) {
;;;600    	thiscoef = *block + jpeg_natural_order[k];
;;;601    	if (*thiscoef != 0) {
;;;602    	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
;;;603    	  if (GET_BITS(1)) {
;;;604    	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
;;;605    	      if (*thiscoef >= 0)
;;;606    		*thiscoef += p1;
;;;607    	      else
;;;608    		*thiscoef += m1;
;;;609    	    }
;;;610    	  }
;;;611    	}
;;;612          }
;;;613          /* Count one block completed in EOB run */
;;;614          EOBRUN--;
;;;615        }
;;;616    
;;;617        /* Completed MCU, so update state */
;;;618        BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;619        entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
;;;620      }
;;;621    
;;;622      /* Account for restart interval (no-op if not using restarts) */
;;;623      entropy->restarts_to_go--;
;;;624    
;;;625      return TRUE;
;;;626    
;;;627    undoit:
;;;628      /* Re-zero any output coefficients that we made newly nonzero */
;;;629      while (num_newnz > 0)
;;;630        (*block)[newnz_pos[--num_newnz]] = 0;
;;;631    
;;;632      return FALSE;
;;;633    }
00003c  b051              ADD      sp,sp,#0x144
00003e  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.66|
000042  68b8              LDR      r0,[r7,#8]            ;515
000044  2800              CMP      r0,#0                 ;515
000046  d170              BNE      |L2.298|
000048  9649              STR      r6,[sp,#0x124]        ;518
00004a  69b0              LDR      r0,[r6,#0x18]         ;518
00004c  6800              LDR      r0,[r0,#0]            ;518
00004e  9045              STR      r0,[sp,#0x114]        ;518
000050  69b0              LDR      r0,[r6,#0x18]         ;518
000052  6840              LDR      r0,[r0,#4]            ;518
000054  9046              STR      r0,[sp,#0x118]        ;518
000056  f8d7a00c          LDR      r10,[r7,#0xc]         ;518
00005a  693d              LDR      r5,[r7,#0x10]         ;518
00005c  6978              LDR      r0,[r7,#0x14]         ;519
00005e  904b              STR      r0,[sp,#0x12c]        ;519
000060  9850              LDR      r0,[sp,#0x140]        ;522
000062  6800              LDR      r0,[r0,#0]            ;522
000064  904a              STR      r0,[sp,#0x128]        ;522
000066  6bf8              LDR      r0,[r7,#0x3c]         ;523
000068  9044              STR      r0,[sp,#0x110]        ;523
00006a  2000              MOVS     r0,#0                 ;531
00006c  9043              STR      r0,[sp,#0x10c]        ;531
00006e  f8d68190          LDR      r8,[r6,#0x190]        ;534
000072  984b              LDR      r0,[sp,#0x12c]        ;536
000074  2800              CMP      r0,#0                 ;536
000076  d17d              BNE      |L2.372|
000078  e0e1              B        |L2.574|
                  |L2.122|
00007a  2d08              CMP      r5,#8                 ;538
00007c  da0f              BGE      |L2.158|
00007e  2300              MOVS     r3,#0                 ;538
000080  462a              MOV      r2,r5                 ;538
000082  4651              MOV      r1,r10                ;538
000084  a845              ADD      r0,sp,#0x114          ;538
000086  f7fffffe          BL       jpeg_fill_bit_buffer
00008a  b900              CBNZ     r0,|L2.142|
00008c  e127              B        |L2.734|
                  |L2.142|
00008e  f8dda11c          LDR      r10,[sp,#0x11c]       ;538
000092  9d48              LDR      r5,[sp,#0x120]        ;538
000094  2d08              CMP      r5,#8                 ;538
000096  da02              BGE      |L2.158|
000098  2001              MOVS     r0,#1                 ;538
00009a  9002              STR      r0,[sp,#8]            ;538
00009c  e019              B        |L2.210|
                  |L2.158|
00009e  f1a50008          SUB      r0,r5,#8              ;538
0000a2  fa4af000          ASR      r0,r10,r0             ;538
0000a6  b2c0              UXTB     r0,r0                 ;538
0000a8  9001              STR      r0,[sp,#4]            ;538
0000aa  9844              LDR      r0,[sp,#0x110]        ;538
0000ac  f1000190          ADD      r1,r0,#0x90           ;538
0000b0  9801              LDR      r0,[sp,#4]            ;538
0000b2  f8510020          LDR      r0,[r1,r0,LSL #2]     ;538
0000b6  9002              STR      r0,[sp,#8]            ;538
0000b8  b140              CBZ      r0,|L2.204|
0000ba  9802              LDR      r0,[sp,#8]            ;538
0000bc  1a2d              SUBS     r5,r5,r0              ;538
0000be  9844              LDR      r0,[sp,#0x110]        ;538
0000c0  f5006092          ADD      r0,r0,#0x490          ;538
0000c4  9901              LDR      r1,[sp,#4]            ;538
0000c6  f810b001          LDRB     r11,[r0,r1]           ;538
0000ca  e011              B        |L2.240|
                  |L2.204|
0000cc  2009              MOVS     r0,#9                 ;538
0000ce  9002              STR      r0,[sp,#8]            ;538
0000d0  bf00              NOP                            ;538
                  |L2.210|
0000d2  9802              LDR      r0,[sp,#8]            ;538
0000d4  9000              STR      r0,[sp,#0]            ;538
0000d6  462a              MOV      r2,r5                 ;538
0000d8  4651              MOV      r1,r10                ;538
0000da  a845              ADD      r0,sp,#0x114          ;538
0000dc  9b44              LDR      r3,[sp,#0x110]        ;538
0000de  f7fffffe          BL       jpeg_huff_decode
0000e2  f1b00b00          SUBS     r11,r0,#0             ;538
0000e6  da00              BGE      |L2.234|
0000e8  e0f9              B        |L2.734|
                  |L2.234|
0000ea  f8dda11c          LDR      r10,[sp,#0x11c]       ;538
0000ee  9d48              LDR      r5,[sp,#0x120]        ;538
                  |L2.240|
0000f0  ea4f192b          ASR      r9,r11,#4             ;539
0000f4  f00b0b0f          AND      r11,r11,#0xf          ;540
0000f8  f1bb0f00          CMP      r11,#0                ;541
0000fc  d026              BEQ      |L2.332|
0000fe  f1bb0f01          CMP      r11,#1                ;542
000102  d008              BEQ      |L2.278|
000104  2076              MOVS     r0,#0x76              ;543
000106  6831              LDR      r1,[r6,#0]            ;543
000108  6148              STR      r0,[r1,#0x14]         ;543
00010a  6830              LDR      r0,[r6,#0]            ;543
00010c  f04f31ff          MOV      r1,#0xffffffff        ;543
000110  6842              LDR      r2,[r0,#4]            ;543
000112  4630              MOV      r0,r6                 ;543
000114  4790              BLX      r2                    ;543
                  |L2.278|
000116  2d01              CMP      r5,#1                 ;544
000118  da0b              BGE      |L2.306|
00011a  2301              MOVS     r3,#1                 ;544
00011c  462a              MOV      r2,r5                 ;544
00011e  4651              MOV      r1,r10                ;544
000120  a845              ADD      r0,sp,#0x114          ;544
000122  f7fffffe          BL       jpeg_fill_bit_buffer
000126  b908              CBNZ     r0,|L2.300|
000128  e0d9              B        |L2.734|
                  |L2.298|
00012a  e0d3              B        |L2.724|
                  |L2.300|
00012c  f8dda11c          LDR      r10,[sp,#0x11c]       ;544
000130  9d48              LDR      r5,[sp,#0x120]        ;544
                  |L2.306|
000132  1e68              SUBS     r0,r5,#1              ;545
000134  4605              MOV      r5,r0                 ;545
000136  fa4af000          ASR      r0,r10,r0             ;545
00013a  f0100f01          TST      r0,#1                 ;545
00013e  d002              BEQ      |L2.326|
000140  f8ddb134          LDR      r11,[sp,#0x134]       ;546
000144  e029              B        |L2.410|
                  |L2.326|
000146  f8ddb130          LDR      r11,[sp,#0x130]       ;548
00014a  e026              B        |L2.410|
                  |L2.332|
00014c  f1b90f0f          CMP      r9,#0xf               ;550
000150  d023              BEQ      |L2.410|
000152  2001              MOVS     r0,#1                 ;551
000154  fa00f009          LSL      r0,r0,r9              ;551
000158  904b              STR      r0,[sp,#0x12c]        ;551
00015a  f1b90f00          CMP      r9,#0                 ;552
00015e  d01b              BEQ      |L2.408|
000160  454d              CMP      r5,r9                 ;553
000162  da0b              BGE      |L2.380|
000164  464b              MOV      r3,r9                 ;553
000166  462a              MOV      r2,r5                 ;553
000168  4651              MOV      r1,r10                ;553
00016a  a845              ADD      r0,sp,#0x114          ;553
00016c  f7fffffe          BL       jpeg_fill_bit_buffer
000170  b908              CBNZ     r0,|L2.374|
000172  e0b4              B        |L2.734|
                  |L2.372|
000174  e068              B        |L2.584|
                  |L2.374|
000176  f8dda11c          LDR      r10,[sp,#0x11c]       ;553
00017a  9d48              LDR      r5,[sp,#0x120]        ;553
                  |L2.380|
00017c  eba50109          SUB      r1,r5,r9              ;554
000180  460d              MOV      r5,r1                 ;554
000182  fa4af001          ASR      r0,r10,r1             ;554
000186  2101              MOVS     r1,#1                 ;554
000188  fa01f109          LSL      r1,r1,r9              ;554
00018c  1e49              SUBS     r1,r1,#1              ;554
00018e  ea000901          AND      r9,r0,r1              ;554
000192  984b              LDR      r0,[sp,#0x12c]        ;555
000194  4448              ADD      r0,r0,r9              ;555
000196  904b              STR      r0,[sp,#0x12c]        ;555
                  |L2.408|
000198  e055              B        |L2.582|
                  |L2.410|
00019a  bf00              NOP                            ;565
                  |L2.412|
00019c  4858              LDR      r0,|L2.768|
00019e  f8501028          LDR      r1,[r0,r8,LSL #2]     ;566
0001a2  984a              LDR      r0,[sp,#0x128]        ;566
0001a4  eb000441          ADD      r4,r0,r1,LSL #1       ;566
0001a8  8820              LDRH     r0,[r4,#0]            ;567
0001aa  b340              CBZ      r0,|L2.510|
0001ac  2d01              CMP      r5,#1                 ;568
0001ae  da0a              BGE      |L2.454|
0001b0  2301              MOVS     r3,#1                 ;568
0001b2  462a              MOV      r2,r5                 ;568
0001b4  4651              MOV      r1,r10                ;568
0001b6  a845              ADD      r0,sp,#0x114          ;568
0001b8  f7fffffe          BL       jpeg_fill_bit_buffer
0001bc  b900              CBNZ     r0,|L2.448|
0001be  e08e              B        |L2.734|
                  |L2.448|
0001c0  f8dda11c          LDR      r10,[sp,#0x11c]       ;568
0001c4  9d48              LDR      r5,[sp,#0x120]        ;568
                  |L2.454|
0001c6  1e68              SUBS     r0,r5,#1              ;569
0001c8  4605              MOV      r5,r0                 ;569
0001ca  fa4af000          ASR      r0,r10,r0             ;569
0001ce  f0100f01          TST      r0,#1                 ;569
0001d2  d01a              BEQ      |L2.522|
0001d4  f9b40000          LDRSH    r0,[r4,#0]            ;570
0001d8  994d              LDR      r1,[sp,#0x134]        ;570
0001da  4208              TST      r0,r1                 ;570
0001dc  d115              BNE      |L2.522|
0001de  f9b40000          LDRSH    r0,[r4,#0]            ;571
0001e2  2800              CMP      r0,#0                 ;571
0001e4  db05              BLT      |L2.498|
0001e6  8821              LDRH     r1,[r4,#0]            ;572
0001e8  984d              LDR      r0,[sp,#0x134]        ;572
0001ea  4408              ADD      r0,r0,r1              ;572
0001ec  b200              SXTH     r0,r0                 ;572
0001ee  8020              STRH     r0,[r4,#0]            ;572
0001f0  e00b              B        |L2.522|
                  |L2.498|
0001f2  8821              LDRH     r1,[r4,#0]            ;574
0001f4  984c              LDR      r0,[sp,#0x130]        ;574
0001f6  4408              ADD      r0,r0,r1              ;574
0001f8  b200              SXTH     r0,r0                 ;574
0001fa  8020              STRH     r0,[r4,#0]            ;574
0001fc  e005              B        |L2.522|
                  |L2.510|
0001fe  f1a90001          SUB      r0,r9,#1              ;578
000202  f1b00900          SUBS     r9,r0,#0              ;578
000206  da00              BGE      |L2.522|
000208  e004              B        |L2.532|
                  |L2.522|
00020a  f1080801          ADD      r8,r8,#1              ;581
00020e  984e              LDR      r0,[sp,#0x138]        ;582
000210  4580              CMP      r8,r0                 ;582
000212  ddc3              BLE      |L2.412|
                  |L2.532|
000214  bf00              NOP                            ;579
000216  f1bb0f00          CMP      r11,#0                ;583
00021a  d00e              BEQ      |L2.570|
00021c  4938              LDR      r1,|L2.768|
00021e  f8510028          LDR      r0,[r1,r8,LSL #2]     ;584
000222  fa0ff28b          SXTH     r2,r11                ;586
000226  994a              LDR      r1,[sp,#0x128]        ;586
000228  f8212010          STRH     r2,[r1,r0,LSL #1]     ;586
00022c  9943              LDR      r1,[sp,#0x10c]        ;588
00022e  1c4a              ADDS     r2,r1,#1              ;588
000230  9243              STR      r2,[sp,#0x10c]        ;588
000232  aa03              ADD      r2,sp,#0xc            ;588
000234  f8420021          STR      r0,[r2,r1,LSL #2]     ;588
000238  bf00              NOP                            ;589
                  |L2.570|
00023a  f1080801          ADD      r8,r8,#1              ;537
                  |L2.574|
00023e  984e              LDR      r0,[sp,#0x138]        ;537
000240  4580              CMP      r8,r0                 ;537
000242  f77faf1a          BLE      |L2.122|
                  |L2.582|
000246  bf00              NOP                            ;557
                  |L2.584|
000248  984b              LDR      r0,[sp,#0x12c]        ;593
00024a  b3c0              CBZ      r0,|L2.702|
00024c  e031              B        |L2.690|
                  |L2.590|
00024e  482c              LDR      r0,|L2.768|
000250  f8501028          LDR      r1,[r0,r8,LSL #2]     ;600
000254  984a              LDR      r0,[sp,#0x128]        ;600
000256  eb000441          ADD      r4,r0,r1,LSL #1       ;600
00025a  8820              LDRH     r0,[r4,#0]            ;601
00025c  b308              CBZ      r0,|L2.674|
00025e  2d01              CMP      r5,#1                 ;602
000260  da0a              BGE      |L2.632|
000262  2301              MOVS     r3,#1                 ;602
000264  462a              MOV      r2,r5                 ;602
000266  4651              MOV      r1,r10                ;602
000268  a845              ADD      r0,sp,#0x114          ;602
00026a  f7fffffe          BL       jpeg_fill_bit_buffer
00026e  b900              CBNZ     r0,|L2.626|
000270  e035              B        |L2.734|
                  |L2.626|
000272  f8dda11c          LDR      r10,[sp,#0x11c]       ;602
000276  9d48              LDR      r5,[sp,#0x120]        ;602
                  |L2.632|
000278  1e68              SUBS     r0,r5,#1              ;603
00027a  4605              MOV      r5,r0                 ;603
00027c  fa4af000          ASR      r0,r10,r0             ;603
000280  f0100f01          TST      r0,#1                 ;603
000284  d013              BEQ      |L2.686|
000286  f9b40000          LDRSH    r0,[r4,#0]            ;604
00028a  994d              LDR      r1,[sp,#0x134]        ;604
00028c  4208              TST      r0,r1                 ;604
00028e  d10e              BNE      |L2.686|
000290  f9b40000          LDRSH    r0,[r4,#0]            ;605
000294  2800              CMP      r0,#0                 ;605
000296  db05              BLT      |L2.676|
000298  8821              LDRH     r1,[r4,#0]            ;606
00029a  984d              LDR      r0,[sp,#0x134]        ;606
00029c  4408              ADD      r0,r0,r1              ;606
00029e  b200              SXTH     r0,r0                 ;606
0002a0  8020              STRH     r0,[r4,#0]            ;606
                  |L2.674|
0002a2  e004              B        |L2.686|
                  |L2.676|
0002a4  8821              LDRH     r1,[r4,#0]            ;608
0002a6  984c              LDR      r0,[sp,#0x130]        ;608
0002a8  4408              ADD      r0,r0,r1              ;608
0002aa  b200              SXTH     r0,r0                 ;608
0002ac  8020              STRH     r0,[r4,#0]            ;608
                  |L2.686|
0002ae  f1080801          ADD      r8,r8,#1              ;599
                  |L2.690|
0002b2  984e              LDR      r0,[sp,#0x138]        ;599
0002b4  4580              CMP      r8,r0                 ;599
0002b6  ddca              BLE      |L2.590|
0002b8  984b              LDR      r0,[sp,#0x12c]        ;614
0002ba  1e40              SUBS     r0,r0,#1              ;614
0002bc  904b              STR      r0,[sp,#0x12c]        ;614
                  |L2.702|
0002be  9845              LDR      r0,[sp,#0x114]        ;618
0002c0  69b1              LDR      r1,[r6,#0x18]         ;618
0002c2  6008              STR      r0,[r1,#0]            ;618
0002c4  9846              LDR      r0,[sp,#0x118]        ;618
0002c6  69b1              LDR      r1,[r6,#0x18]         ;618
0002c8  6048              STR      r0,[r1,#4]            ;618
0002ca  f8c7a00c          STR      r10,[r7,#0xc]         ;618
0002ce  613d              STR      r5,[r7,#0x10]         ;618
0002d0  984b              LDR      r0,[sp,#0x12c]        ;619
0002d2  6178              STR      r0,[r7,#0x14]         ;619
                  |L2.724|
0002d4  6ab8              LDR      r0,[r7,#0x28]         ;623
0002d6  1e40              SUBS     r0,r0,#1              ;623
0002d8  62b8              STR      r0,[r7,#0x28]         ;623
0002da  2001              MOVS     r0,#1                 ;625
0002dc  e6ae              B        |L2.60|
                  |L2.734|
0002de  e009              B        |L2.756|
                  |L2.736|
0002e0  2100              MOVS     r1,#0                 ;630
0002e2  9843              LDR      r0,[sp,#0x10c]        ;630
0002e4  1e40              SUBS     r0,r0,#1              ;630
0002e6  aa03              ADD      r2,sp,#0xc            ;630
0002e8  9043              STR      r0,[sp,#0x10c]        ;630
0002ea  f8522020          LDR      r2,[r2,r0,LSL #2]     ;630
0002ee  984a              LDR      r0,[sp,#0x128]        ;630
0002f0  f8201012          STRH     r1,[r0,r2,LSL #1]     ;630
                  |L2.756|
0002f4  9843              LDR      r0,[sp,#0x10c]        ;629
0002f6  2800              CMP      r0,#0                 ;629
0002f8  dcf2              BGT      |L2.736|
0002fa  2000              MOVS     r0,#0                 ;632
0002fc  e69e              B        |L2.60|
;;;634    
                          ENDP

0002fe  0000              DCW      0x0000
                  |L2.768|
                          DCD      jpeg_natural_order

                          AREA ||i.decode_mcu_DC_first||, CODE, READONLY, ALIGN=2

                  decode_mcu_DC_first PROC
;;;285    METHODDEF(boolean)
;;;286    decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;287    {   
000004  b091              SUB      sp,sp,#0x44
000006  4604              MOV      r4,r0
;;;288      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
000008  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;289      int Al = cinfo->Al;
00000c  f8d4019c          LDR      r0,[r4,#0x19c]
000010  9010              STR      r0,[sp,#0x40]
;;;290      register int s, r;
;;;291      int blkn, ci;
;;;292      JBLOCKROW block;
;;;293      BITREAD_STATE_VARS;
;;;294      savable_state state;
;;;295      d_derived_tbl * tbl;
;;;296      jpeg_component_info * compptr;
;;;297    
;;;298      /* Process restart marker if needed; may have to suspend */
;;;299      if (cinfo->restart_interval) {
000012  f8d40114          LDR      r0,[r4,#0x114]
000016  b148              CBZ      r0,|L3.44|
;;;300        if (entropy->restarts_to_go == 0)
000018  6aa8              LDR      r0,[r5,#0x28]
00001a  b938              CBNZ     r0,|L3.44|
;;;301          if (! process_restart(cinfo))
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       process_restart
000022  b918              CBNZ     r0,|L3.44|
;;;302    	return FALSE;
000024  2000              MOVS     r0,#0
                  |L3.38|
;;;303      }
;;;304    
;;;305      /* If we've run out of data, just leave the MCU set to zeroes.
;;;306       * This way, we return uniform gray for the remainder of the segment.
;;;307       */
;;;308      if (! entropy->pub.insufficient_data) {
;;;309    
;;;310        /* Load up working state */
;;;311        BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;312        ASSIGN_STATE(state, entropy->saved);
;;;313    
;;;314        /* Outer loop handles each block in the MCU */
;;;315    
;;;316        for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
;;;317          block = MCU_data[blkn];
;;;318          ci = cinfo->MCU_membership[blkn];
;;;319          compptr = cinfo->cur_comp_info[ci];
;;;320          tbl = entropy->derived_tbls[compptr->dc_tbl_no];
;;;321    
;;;322          /* Decode a single block's worth of coefficients */
;;;323    
;;;324          /* Section F.2.2.1: decode the DC coefficient difference */
;;;325          HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
;;;326          if (s) {
;;;327    	CHECK_BIT_BUFFER(br_state, s, return FALSE);
;;;328    	r = GET_BITS(s);
;;;329    	s = HUFF_EXTEND(r, s);
;;;330          }
;;;331    
;;;332          /* Convert DC difference to actual value, update last_dc_val */
;;;333          s += state.last_dc_val[ci];
;;;334          state.last_dc_val[ci] = s;
;;;335          /* Scale and output the coefficient (assumes jpeg_natural_order[0]=0) */
;;;336          (*block)[0] = (JCOEF) (s << Al);
;;;337        }
;;;338    
;;;339        /* Completed MCU, so update state */
;;;340        BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;341        ASSIGN_STATE(entropy->saved, state);
;;;342      }
;;;343    
;;;344      /* Account for restart interval (no-op if not using restarts) */
;;;345      entropy->restarts_to_go--;
;;;346    
;;;347      return TRUE;
;;;348    }
000026  b013              ADD      sp,sp,#0x4c
000028  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.44|
00002c  68a8              LDR      r0,[r5,#8]            ;308
00002e  2800              CMP      r0,#0                 ;308
000030  d17d              BNE      |L3.302|
000032  940d              STR      r4,[sp,#0x34]         ;311
000034  69a0              LDR      r0,[r4,#0x18]         ;311
000036  6800              LDR      r0,[r0,#0]            ;311
000038  9009              STR      r0,[sp,#0x24]         ;311
00003a  69a0              LDR      r0,[r4,#0x18]         ;311
00003c  6840              LDR      r0,[r0,#4]            ;311
00003e  900a              STR      r0,[sp,#0x28]         ;311
000040  f8d5900c          LDR      r9,[r5,#0xc]          ;311
000044  692f              LDR      r7,[r5,#0x10]         ;311
000046  2214              MOVS     r2,#0x14              ;312
000048  f1050114          ADD      r1,r5,#0x14           ;312
00004c  a804              ADD      r0,sp,#0x10           ;312
00004e  f7fffffe          BL       __aeabi_memcpy4
000052  f04f0800          MOV      r8,#0                 ;316
000056  e081              B        |L3.348|
                  |L3.88|
000058  9812              LDR      r0,[sp,#0x48]         ;317
00005a  f8500028          LDR      r0,[r0,r8,LSL #2]     ;317
00005e  900e              STR      r0,[sp,#0x38]         ;317
000060  f50470b4          ADD      r0,r4,#0x168          ;318
000064  f850a028          LDR      r10,[r0,r8,LSL #2]    ;318
000068  381c              SUBS     r0,r0,#0x1c           ;319
00006a  f850002a          LDR      r0,[r0,r10,LSL #2]    ;319
00006e  9003              STR      r0,[sp,#0xc]          ;319
000070  9803              LDR      r0,[sp,#0xc]          ;320
000072  6941              LDR      r1,[r0,#0x14]         ;320
000074  f105002c          ADD      r0,r5,#0x2c           ;320
000078  f850b021          LDR      r11,[r0,r1,LSL #2]    ;320
00007c  2f08              CMP      r7,#8                 ;325
00007e  da10              BGE      |L3.162|
000080  2300              MOVS     r3,#0                 ;325
000082  463a              MOV      r2,r7                 ;325
000084  4649              MOV      r1,r9                 ;325
000086  a809              ADD      r0,sp,#0x24           ;325
000088  f7fffffe          BL       jpeg_fill_bit_buffer
00008c  b908              CBNZ     r0,|L3.146|
00008e  2000              MOVS     r0,#0                 ;325
000090  e7c9              B        |L3.38|
                  |L3.146|
000092  f8dd902c          LDR      r9,[sp,#0x2c]         ;325
000096  9f0c              LDR      r7,[sp,#0x30]         ;325
000098  2f08              CMP      r7,#8                 ;325
00009a  da02              BGE      |L3.162|
00009c  2001              MOVS     r0,#1                 ;325
00009e  9002              STR      r0,[sp,#8]            ;325
0000a0  e016              B        |L3.208|
                  |L3.162|
0000a2  f1a70008          SUB      r0,r7,#8              ;325
0000a6  fa49f000          ASR      r0,r9,r0              ;325
0000aa  b2c0              UXTB     r0,r0                 ;325
0000ac  9001              STR      r0,[sp,#4]            ;325
0000ae  f10b0190          ADD      r1,r11,#0x90          ;325
0000b2  9801              LDR      r0,[sp,#4]            ;325
0000b4  f8510020          LDR      r0,[r1,r0,LSL #2]     ;325
0000b8  9002              STR      r0,[sp,#8]            ;325
0000ba  b130              CBZ      r0,|L3.202|
0000bc  9802              LDR      r0,[sp,#8]            ;325
0000be  1a3f              SUBS     r7,r7,r0              ;325
0000c0  f50b6092          ADD      r0,r11,#0x490         ;325
0000c4  9901              LDR      r1,[sp,#4]            ;325
0000c6  5c46              LDRB     r6,[r0,r1]            ;325
0000c8  e011              B        |L3.238|
                  |L3.202|
0000ca  2009              MOVS     r0,#9                 ;325
0000cc  9002              STR      r0,[sp,#8]            ;325
0000ce  bf00              NOP                            ;325
                  |L3.208|
0000d0  9802              LDR      r0,[sp,#8]            ;325
0000d2  465b              MOV      r3,r11                ;325
0000d4  463a              MOV      r2,r7                 ;325
0000d6  4649              MOV      r1,r9                 ;325
0000d8  9000              STR      r0,[sp,#0]            ;325
0000da  a809              ADD      r0,sp,#0x24           ;325
0000dc  f7fffffe          BL       jpeg_huff_decode
0000e0  1e06              SUBS     r6,r0,#0              ;325
0000e2  da01              BGE      |L3.232|
0000e4  2000              MOVS     r0,#0                 ;325
0000e6  e79e              B        |L3.38|
                  |L3.232|
0000e8  f8dd902c          LDR      r9,[sp,#0x2c]         ;325
0000ec  9f0c              LDR      r7,[sp,#0x30]         ;325
                  |L3.238|
0000ee  b336              CBZ      r6,|L3.318|
0000f0  42b7              CMP      r7,r6                 ;327
0000f2  da0b              BGE      |L3.268|
0000f4  4633              MOV      r3,r6                 ;327
0000f6  463a              MOV      r2,r7                 ;327
0000f8  4649              MOV      r1,r9                 ;327
0000fa  a809              ADD      r0,sp,#0x24           ;327
0000fc  f7fffffe          BL       jpeg_fill_bit_buffer
000100  b908              CBNZ     r0,|L3.262|
000102  2000              MOVS     r0,#0                 ;327
000104  e78f              B        |L3.38|
                  |L3.262|
000106  f8dd902c          LDR      r9,[sp,#0x2c]         ;327
00010a  9f0c              LDR      r7,[sp,#0x30]         ;327
                  |L3.268|
00010c  1bb9              SUBS     r1,r7,r6              ;328
00010e  460f              MOV      r7,r1                 ;328
000110  fa49f001          ASR      r0,r9,r1              ;328
000114  2101              MOVS     r1,#1                 ;328
000116  40b1              LSLS     r1,r1,r6              ;328
000118  1e49              SUBS     r1,r1,#1              ;328
00011a  4008              ANDS     r0,r0,r1              ;328
00011c  900f              STR      r0,[sp,#0x3c]         ;328
00011e  481c              LDR      r0,|L3.400|
000120  f8501026          LDR      r1,[r0,r6,LSL #2]     ;329
000124  980f              LDR      r0,[sp,#0x3c]         ;329
000126  4281              CMP      r1,r0                 ;329
000128  dd07              BLE      |L3.314|
00012a  481a              LDR      r0,|L3.404|
00012c  e000              B        |L3.304|
                  |L3.302|
00012e  e029              B        |L3.388|
                  |L3.304|
000130  f8501026          LDR      r1,[r0,r6,LSL #2]     ;329
000134  980f              LDR      r0,[sp,#0x3c]         ;329
000136  4408              ADD      r0,r0,r1              ;329
000138  e000              B        |L3.316|
                  |L3.314|
00013a  980f              LDR      r0,[sp,#0x3c]         ;329
                  |L3.316|
00013c  4606              MOV      r6,r0                 ;329
                  |L3.318|
00013e  a805              ADD      r0,sp,#0x14           ;333
000140  f850002a          LDR      r0,[r0,r10,LSL #2]    ;333
000144  4406              ADD      r6,r6,r0              ;333
000146  a805              ADD      r0,sp,#0x14           ;334
000148  f840602a          STR      r6,[r0,r10,LSL #2]    ;334
00014c  9810              LDR      r0,[sp,#0x40]         ;336
00014e  fa06f000          LSL      r0,r6,r0              ;336
000152  b201              SXTH     r1,r0                 ;336
000154  980e              LDR      r0,[sp,#0x38]         ;336
000156  8001              STRH     r1,[r0,#0]            ;336
000158  f1080801          ADD      r8,r8,#1              ;316
                  |L3.348|
00015c  f8d40164          LDR      r0,[r4,#0x164]        ;316
000160  4540              CMP      r0,r8                 ;316
000162  f73faf79          BGT      |L3.88|
000166  9809              LDR      r0,[sp,#0x24]         ;340
000168  69a1              LDR      r1,[r4,#0x18]         ;340
00016a  6008              STR      r0,[r1,#0]            ;340
00016c  980a              LDR      r0,[sp,#0x28]         ;340
00016e  69a1              LDR      r1,[r4,#0x18]         ;340
000170  6048              STR      r0,[r1,#4]            ;340
000172  f8c5900c          STR      r9,[r5,#0xc]          ;340
000176  612f              STR      r7,[r5,#0x10]         ;340
000178  2214              MOVS     r2,#0x14              ;341
00017a  a904              ADD      r1,sp,#0x10           ;341
00017c  f1050014          ADD      r0,r5,#0x14           ;341
000180  f7fffffe          BL       __aeabi_memcpy4
                  |L3.388|
000184  6aa8              LDR      r0,[r5,#0x28]         ;345
000186  1e40              SUBS     r0,r0,#1              ;345
000188  62a8              STR      r0,[r5,#0x28]         ;345
00018a  2001              MOVS     r0,#1                 ;347
00018c  e74b              B        |L3.38|
;;;349    
                          ENDP

00018e  0000              DCW      0x0000
                  |L3.400|
                          DCD      extend_test
                  |L3.404|
                          DCD      extend_offset

                          AREA ||i.decode_mcu_DC_refine||, CODE, READONLY, ALIGN=1

                  decode_mcu_DC_refine PROC
;;;441    METHODDEF(boolean)
;;;442    decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;443    {   
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  468a              MOV      r10,r1
;;;444      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
00000a  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;445      int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
00000e  f894119c          LDRB     r1,[r4,#0x19c]
000012  2001              MOVS     r0,#1
000014  fa00fb01          LSL      r11,r0,r1
;;;446      int blkn;
;;;447      JBLOCKROW block;
;;;448      BITREAD_STATE_VARS;
;;;449    
;;;450      /* Process restart marker if needed; may have to suspend */
;;;451      if (cinfo->restart_interval) {
000018  f8d40114          LDR      r0,[r4,#0x114]
00001c  b148              CBZ      r0,|L4.50|
;;;452        if (entropy->restarts_to_go == 0)
00001e  6aa8              LDR      r0,[r5,#0x28]
000020  b938              CBNZ     r0,|L4.50|
;;;453          if (! process_restart(cinfo))
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       process_restart
000028  b918              CBNZ     r0,|L4.50|
;;;454    	return FALSE;
00002a  2000              MOVS     r0,#0
                  |L4.44|
;;;455      }
;;;456    
;;;457      /* Not worth the cycles to check insufficient_data here,
;;;458       * since we will not change the data anyway if we read zeroes.
;;;459       */
;;;460    
;;;461      /* Load up working state */
;;;462      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
;;;463    
;;;464      /* Outer loop handles each block in the MCU */
;;;465    
;;;466      for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
;;;467        block = MCU_data[blkn];
;;;468    
;;;469        /* Encoded data is simply the next bit of the two's-complement DC value */
;;;470        CHECK_BIT_BUFFER(br_state, 1, return FALSE);
;;;471        if (GET_BITS(1))
;;;472          (*block)[0] |= p1;
;;;473        /* Note: since we use |=, repeating the assignment later is safe */
;;;474      }
;;;475    
;;;476      /* Completed MCU, so update state */
;;;477      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
;;;478    
;;;479      /* Account for restart interval (no-op if not using restarts) */
;;;480      entropy->restarts_to_go--;
;;;481    
;;;482      return TRUE;
;;;483    }
00002c  b005              ADD      sp,sp,#0x14
00002e  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.50|
000032  9404              STR      r4,[sp,#0x10]         ;462
000034  69a0              LDR      r0,[r4,#0x18]         ;462
000036  6800              LDR      r0,[r0,#0]            ;462
000038  9000              STR      r0,[sp,#0]            ;462
00003a  69a0              LDR      r0,[r4,#0x18]         ;462
00003c  6840              LDR      r0,[r0,#4]            ;462
00003e  9001              STR      r0,[sp,#4]            ;462
000040  f8d5800c          LDR      r8,[r5,#0xc]          ;462
000044  692e              LDR      r6,[r5,#0x10]         ;462
000046  2700              MOVS     r7,#0                 ;466
000048  e01e              B        |L4.136|
                  |L4.74|
00004a  f85a9027          LDR      r9,[r10,r7,LSL #2]    ;467
00004e  2e01              CMP      r6,#1                 ;470
000050  da0b              BGE      |L4.106|
000052  2301              MOVS     r3,#1                 ;470
000054  4632              MOV      r2,r6                 ;470
000056  4641              MOV      r1,r8                 ;470
000058  4668              MOV      r0,sp                 ;470
00005a  f7fffffe          BL       jpeg_fill_bit_buffer
00005e  b908              CBNZ     r0,|L4.100|
000060  2000              MOVS     r0,#0                 ;470
000062  e7e3              B        |L4.44|
                  |L4.100|
000064  f8dd8008          LDR      r8,[sp,#8]            ;470
000068  9e03              LDR      r6,[sp,#0xc]          ;470
                  |L4.106|
00006a  1e70              SUBS     r0,r6,#1              ;471
00006c  4606              MOV      r6,r0                 ;471
00006e  fa48f000          ASR      r0,r8,r0              ;471
000072  f0100f01          TST      r0,#1                 ;471
000076  d006              BEQ      |L4.134|
000078  f8b90000          LDRH     r0,[r9,#0]            ;472
00007c  ea40000b          ORR      r0,r0,r11             ;472
000080  b200              SXTH     r0,r0                 ;472
000082  f8a90000          STRH     r0,[r9,#0]            ;472
                  |L4.134|
000086  1c7f              ADDS     r7,r7,#1              ;466
                  |L4.136|
000088  f8d40164          LDR      r0,[r4,#0x164]        ;466
00008c  42b8              CMP      r0,r7                 ;466
00008e  dcdc              BGT      |L4.74|
000090  9800              LDR      r0,[sp,#0]            ;477
000092  69a1              LDR      r1,[r4,#0x18]         ;477
000094  6008              STR      r0,[r1,#0]            ;477
000096  9801              LDR      r0,[sp,#4]            ;477
000098  69a1              LDR      r1,[r4,#0x18]         ;477
00009a  6048              STR      r0,[r1,#4]            ;477
00009c  f8c5800c          STR      r8,[r5,#0xc]          ;477
0000a0  612e              STR      r6,[r5,#0x10]         ;477
0000a2  6aa8              LDR      r0,[r5,#0x28]         ;480
0000a4  1e40              SUBS     r0,r0,#1              ;480
0000a6  62a8              STR      r0,[r5,#0x28]         ;480
0000a8  2001              MOVS     r0,#1                 ;482
0000aa  e7bf              B        |L4.44|
;;;484    
                          ENDP


                          AREA ||i.jinit_phuff_decoder||, CODE, READONLY, ALIGN=2

                  jinit_phuff_decoder PROC
;;;640    GLOBAL(void)
;;;641    jinit_phuff_decoder (j_decompress_ptr cinfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;642    {
000004  4604              MOV      r4,r0
;;;643      phuff_entropy_ptr entropy;
;;;644      int *coef_bit_ptr;
;;;645      int ci, i;
;;;646    
;;;647      entropy = (phuff_entropy_ptr)
000006  6860              LDR      r0,[r4,#4]
000008  2240              MOVS     r2,#0x40
00000a  2101              MOVS     r1,#1
00000c  6803              LDR      r3,[r0,#0]
00000e  4620              MOV      r0,r4
000010  4798              BLX      r3
000012  4606              MOV      r6,r0
;;;648        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;649    				SIZEOF(phuff_entropy_decoder));
;;;650      cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
000014  f8c461bc          STR      r6,[r4,#0x1bc]
;;;651      entropy->pub.start_pass = start_pass_phuff_decoder;
000018  4814              LDR      r0,|L5.108|
00001a  6030              STR      r0,[r6,#0]
;;;652    
;;;653      /* Mark derived tables unallocated */
;;;654      for (i = 0; i < NUM_HUFF_TBLS; i++) {
00001c  2500              MOVS     r5,#0
00001e  e005              B        |L5.44|
                  |L5.32|
;;;655        entropy->derived_tbls[i] = NULL;
000020  2100              MOVS     r1,#0
000022  f106002c          ADD      r0,r6,#0x2c
000026  f8401025          STR      r1,[r0,r5,LSL #2]
00002a  1c6d              ADDS     r5,r5,#1              ;654
                  |L5.44|
00002c  2d04              CMP      r5,#4                 ;654
00002e  dbf7              BLT      |L5.32|
;;;656      }
;;;657    
;;;658      /* Create progression status table */
;;;659      cinfo->coef_bits = (int (*)[DCTSIZE2])
000030  6a60              LDR      r0,[r4,#0x24]
000032  0202              LSLS     r2,r0,#8
000034  6860              LDR      r0,[r4,#4]
000036  2101              MOVS     r1,#1
000038  6803              LDR      r3,[r0,#0]
00003a  4620              MOV      r0,r4
00003c  4798              BLX      r3
00003e  f8c400a0          STR      r0,[r4,#0xa0]
;;;660        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;661    				cinfo->num_components*DCTSIZE2*SIZEOF(int));
;;;662      coef_bit_ptr = & cinfo->coef_bits[0][0];
000042  f8d470a0          LDR      r7,[r4,#0xa0]
;;;663      for (ci = 0; ci < cinfo->num_components; ci++) 
000046  f04f0800          MOV      r8,#0
00004a  e009              B        |L5.96|
                  |L5.76|
;;;664        for (i = 0; i < DCTSIZE2; i++)
00004c  2500              MOVS     r5,#0
00004e  e003              B        |L5.88|
                  |L5.80|
;;;665          *coef_bit_ptr++ = -1;
000050  f04f30ff          MOV      r0,#0xffffffff
000054  c701              STM      r7!,{r0}
000056  1c6d              ADDS     r5,r5,#1              ;664
                  |L5.88|
000058  2d40              CMP      r5,#0x40              ;664
00005a  dbf9              BLT      |L5.80|
00005c  f1080801          ADD      r8,r8,#1              ;663
                  |L5.96|
000060  6a60              LDR      r0,[r4,#0x24]         ;663
000062  4540              CMP      r0,r8                 ;663
000064  dcf2              BGT      |L5.76|
;;;666    }
000066  e8bd81f0          POP      {r4-r8,pc}
;;;667    
                          ENDP

00006a  0000              DCW      0x0000
                  |L5.108|
                          DCD      start_pass_phuff_decoder

                          AREA ||i.process_restart||, CODE, READONLY, ALIGN=1

                  process_restart PROC
;;;227    LOCAL(boolean)
;;;228    process_restart (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;229    {
000002  4604              MOV      r4,r0
;;;230      phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
000004  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;231      int ci;
;;;232    
;;;233      /* Throw away any unused bits remaining in bit buffer; */
;;;234      /* include any full bytes in next_marker's count of discarded bytes */
;;;235      cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
000008  6928              LDR      r0,[r5,#0x10]
00000a  17c1              ASRS     r1,r0,#31
00000c  eb007151          ADD      r1,r0,r1,LSR #29
000010  f8d421b8          LDR      r2,[r4,#0x1b8]
000014  6992              LDR      r2,[r2,#0x18]
000016  eb0201e1          ADD      r1,r2,r1,ASR #3
00001a  f8d421b8          LDR      r2,[r4,#0x1b8]
00001e  6191              STR      r1,[r2,#0x18]
;;;236      entropy->bitstate.bits_left = 0;
000020  2100              MOVS     r1,#0
000022  6129              STR      r1,[r5,#0x10]
;;;237    
;;;238      /* Advance past the RSTn marker */
;;;239      if (! (*cinfo->marker->read_restart_marker) (cinfo))
000024  f8d401b8          LDR      r0,[r4,#0x1b8]
000028  6881              LDR      r1,[r0,#8]
00002a  4620              MOV      r0,r4
00002c  4788              BLX      r1
00002e  b908              CBNZ     r0,|L6.52|
;;;240        return FALSE;
000030  2000              MOVS     r0,#0
                  |L6.50|
;;;241    
;;;242      /* Re-initialize DC predictions to 0 */
;;;243      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
;;;244        entropy->saved.last_dc_val[ci] = 0;
;;;245      /* Re-init EOB run count, too */
;;;246      entropy->saved.EOBRUN = 0;
;;;247    
;;;248      /* Reset restart counter */
;;;249      entropy->restarts_to_go = cinfo->restart_interval;
;;;250    
;;;251      /* Reset out-of-data flag, unless read_restart_marker left us smack up
;;;252       * against a marker.  In that case we will end up treating the next data
;;;253       * segment as empty, and we can avoid producing bogus output pixels by
;;;254       * leaving the flag set.
;;;255       */
;;;256      if (cinfo->unread_marker == 0)
;;;257        entropy->pub.insufficient_data = FALSE;
;;;258    
;;;259      return TRUE;
;;;260    }
000032  bd70              POP      {r4-r6,pc}
                  |L6.52|
000034  2600              MOVS     r6,#0                 ;243
000036  e005              B        |L6.68|
                  |L6.56|
000038  2100              MOVS     r1,#0                 ;244
00003a  f1050018          ADD      r0,r5,#0x18           ;244
00003e  f8401026          STR      r1,[r0,r6,LSL #2]     ;244
000042  1c76              ADDS     r6,r6,#1              ;243
                  |L6.68|
000044  f8d40148          LDR      r0,[r4,#0x148]        ;243
000048  42b0              CMP      r0,r6                 ;243
00004a  dcf5              BGT      |L6.56|
00004c  2000              MOVS     r0,#0                 ;246
00004e  6168              STR      r0,[r5,#0x14]         ;246
000050  f8d40114          LDR      r0,[r4,#0x114]        ;249
000054  62a8              STR      r0,[r5,#0x28]         ;249
000056  f8d401a0          LDR      r0,[r4,#0x1a0]        ;256
00005a  b908              CBNZ     r0,|L6.96|
00005c  2000              MOVS     r0,#0                 ;257
00005e  60a8              STR      r0,[r5,#8]            ;257
                  |L6.96|
000060  2001              MOVS     r0,#1                 ;259
000062  e7e6              B        |L6.50|
;;;261    
                          ENDP


                          AREA ||i.start_pass_phuff_decoder||, CODE, READONLY, ALIGN=2

                  start_pass_phuff_decoder PROC
;;;91     METHODDEF(void)
;;;92     start_pass_phuff_decoder (j_decompress_ptr cinfo)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;93     {
000004  4604              MOV      r4,r0
;;;94       phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
000006  f8d451bc          LDR      r5,[r4,#0x1bc]
;;;95       boolean is_DC_band, bad;
;;;96       int ci, coefi, tbl;
;;;97       int *coef_bit_ptr;
;;;98       jpeg_component_info * compptr;
;;;99     
;;;100      is_DC_band = (cinfo->Ss == 0);
00000a  f8d40190          LDR      r0,[r4,#0x190]
00000e  b908              CBNZ     r0,|L7.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L7.22|
                  |L7.20|
000014  2000              MOVS     r0,#0
                  |L7.22|
000016  4680              MOV      r8,r0
;;;101    
;;;102      /* Validate scan parameters */
;;;103      bad = FALSE;
000018  2000              MOVS     r0,#0
00001a  9002              STR      r0,[sp,#8]
;;;104      if (is_DC_band) {
00001c  f1b80f00          CMP      r8,#0
000020  d005              BEQ      |L7.46|
;;;105        if (cinfo->Se != 0)
000022  f8d40194          LDR      r0,[r4,#0x194]
000026  b198              CBZ      r0,|L7.80|
;;;106          bad = TRUE;
000028  2001              MOVS     r0,#1
00002a  9002              STR      r0,[sp,#8]
00002c  e010              B        |L7.80|
                  |L7.46|
;;;107      } else {
;;;108        /* need not check Ss/Se < 0 since they came from unsigned bytes */
;;;109        if (cinfo->Ss > cinfo->Se || cinfo->Se >= DCTSIZE2)
00002e  f50470c8          ADD      r0,r4,#0x190
000032  c803              LDM      r0,{r0,r1}
000034  4288              CMP      r0,r1
000036  dc03              BGT      |L7.64|
000038  f8d40194          LDR      r0,[r4,#0x194]
00003c  2840              CMP      r0,#0x40
00003e  db01              BLT      |L7.68|
                  |L7.64|
;;;110          bad = TRUE;
000040  2001              MOVS     r0,#1
000042  9002              STR      r0,[sp,#8]
                  |L7.68|
;;;111        /* AC scans may have only one component */
;;;112        if (cinfo->comps_in_scan != 1)
000044  f8d40148          LDR      r0,[r4,#0x148]
000048  2801              CMP      r0,#1
00004a  d001              BEQ      |L7.80|
;;;113          bad = TRUE;
00004c  2001              MOVS     r0,#1
00004e  9002              STR      r0,[sp,#8]
                  |L7.80|
;;;114      }
;;;115      if (cinfo->Ah != 0) {
000050  f8d40198          LDR      r0,[r4,#0x198]
000054  b138              CBZ      r0,|L7.102|
;;;116        /* Successive approximation refinement scan: must have Al = Ah-1. */
;;;117        if (cinfo->Al != cinfo->Ah-1)
000056  f50470cc          ADD      r0,r4,#0x198
00005a  c803              LDM      r0,{r0,r1}
00005c  1e40              SUBS     r0,r0,#1
00005e  4281              CMP      r1,r0
000060  d001              BEQ      |L7.102|
;;;118          bad = TRUE;
000062  2001              MOVS     r0,#1
000064  9002              STR      r0,[sp,#8]
                  |L7.102|
;;;119      }
;;;120      if (cinfo->Al > 13)		/* need not check for < 0 */
000066  f8d4019c          LDR      r0,[r4,#0x19c]
00006a  280d              CMP      r0,#0xd
00006c  dd01              BLE      |L7.114|
;;;121        bad = TRUE;
00006e  2001              MOVS     r0,#1
000070  9002              STR      r0,[sp,#8]
                  |L7.114|
;;;122      /* Arguably the maximum Al value should be less than 13 for 8-bit precision,
;;;123       * but the spec doesn't say so, and we try to be liberal about what we
;;;124       * accept.  Note: large Al values could result in out-of-range DC
;;;125       * coefficients during early scans, leading to bizarre displays due to
;;;126       * overflows in the IDCT math.  But we won't crash.
;;;127       */
;;;128      if (bad)
000072  9802              LDR      r0,[sp,#8]
000074  b1b0              CBZ      r0,|L7.164|
;;;129        ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
000076  2010              MOVS     r0,#0x10
000078  6821              LDR      r1,[r4,#0]
00007a  6148              STR      r0,[r1,#0x14]
00007c  6821              LDR      r1,[r4,#0]
00007e  f8d40190          LDR      r0,[r4,#0x190]
000082  6188              STR      r0,[r1,#0x18]
000084  f8d41194          LDR      r1,[r4,#0x194]
000088  6820              LDR      r0,[r4,#0]
00008a  61c1              STR      r1,[r0,#0x1c]
00008c  f8d41198          LDR      r1,[r4,#0x198]
000090  6820              LDR      r0,[r4,#0]
000092  6201              STR      r1,[r0,#0x20]
000094  f8d4119c          LDR      r1,[r4,#0x19c]
000098  6820              LDR      r0,[r4,#0]
00009a  6241              STR      r1,[r0,#0x24]
00009c  6820              LDR      r0,[r4,#0]
00009e  6801              LDR      r1,[r0,#0]
0000a0  4620              MOV      r0,r4
0000a2  4788              BLX      r1
                  |L7.164|
;;;130    	     cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
;;;131      /* Update progression status, and verify that scan order is legal.
;;;132       * Note that inter-scan inconsistencies are treated as warnings
;;;133       * not fatal errors ... not clear if this is right way to behave.
;;;134       */
;;;135      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
0000a4  2600              MOVS     r6,#0
0000a6  e048              B        |L7.314|
                  |L7.168|
;;;136        int cindex = cinfo->cur_comp_info[ci]->component_index;
0000a8  f50470a6          ADD      r0,r4,#0x14c
0000ac  f8500026          LDR      r0,[r0,r6,LSL #2]
0000b0  6840              LDR      r0,[r0,#4]
0000b2  9001              STR      r0,[sp,#4]
;;;137        coef_bit_ptr = & cinfo->coef_bits[cindex][0];
0000b4  f8d410a0          LDR      r1,[r4,#0xa0]
0000b8  9801              LDR      r0,[sp,#4]
0000ba  eb012900          ADD      r9,r1,r0,LSL #8
;;;138        if (!is_DC_band && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
0000be  f1b80f00          CMP      r8,#0
0000c2  d111              BNE      |L7.232|
0000c4  f8d90000          LDR      r0,[r9,#0]
0000c8  2800              CMP      r0,#0
0000ca  da0d              BGE      |L7.232|
;;;139          WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
0000cc  2073              MOVS     r0,#0x73
0000ce  6821              LDR      r1,[r4,#0]
0000d0  6148              STR      r0,[r1,#0x14]
0000d2  9801              LDR      r0,[sp,#4]
0000d4  6821              LDR      r1,[r4,#0]
0000d6  6188              STR      r0,[r1,#0x18]
0000d8  2100              MOVS     r1,#0
0000da  6820              LDR      r0,[r4,#0]
0000dc  61c1              STR      r1,[r0,#0x1c]
0000de  6820              LDR      r0,[r4,#0]
0000e0  1e49              SUBS     r1,r1,#1
0000e2  6842              LDR      r2,[r0,#4]
0000e4  4620              MOV      r0,r4
0000e6  4790              BLX      r2
                  |L7.232|
;;;140        for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
0000e8  f8d47190          LDR      r7,[r4,#0x190]
0000ec  e020              B        |L7.304|
                  |L7.238|
;;;141          int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
0000ee  f8590027          LDR      r0,[r9,r7,LSL #2]
0000f2  2800              CMP      r0,#0
0000f4  da01              BGE      |L7.250|
0000f6  2000              MOVS     r0,#0
0000f8  e001              B        |L7.254|
                  |L7.250|
0000fa  f8590027          LDR      r0,[r9,r7,LSL #2]
                  |L7.254|
0000fe  9000              STR      r0,[sp,#0]
;;;142          if (cinfo->Ah != expected)
000100  f8d41198          LDR      r1,[r4,#0x198]
000104  9800              LDR      r0,[sp,#0]
000106  4281              CMP      r1,r0
000108  d00d              BEQ      |L7.294|
;;;143    	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
00010a  2073              MOVS     r0,#0x73
00010c  6821              LDR      r1,[r4,#0]
00010e  6148              STR      r0,[r1,#0x14]
000110  9801              LDR      r0,[sp,#4]
000112  6821              LDR      r1,[r4,#0]
000114  6188              STR      r0,[r1,#0x18]
000116  6820              LDR      r0,[r4,#0]
000118  61c7              STR      r7,[r0,#0x1c]
00011a  6820              LDR      r0,[r4,#0]
00011c  f04f31ff          MOV      r1,#0xffffffff
000120  6842              LDR      r2,[r0,#4]
000122  4620              MOV      r0,r4
000124  4790              BLX      r2
                  |L7.294|
;;;144          coef_bit_ptr[coefi] = cinfo->Al;
000126  f8d4019c          LDR      r0,[r4,#0x19c]
00012a  f8490027          STR      r0,[r9,r7,LSL #2]
00012e  1c7f              ADDS     r7,r7,#1              ;140
                  |L7.304|
000130  f8d40194          LDR      r0,[r4,#0x194]        ;140
000134  42b8              CMP      r0,r7                 ;140
000136  dada              BGE      |L7.238|
000138  1c76              ADDS     r6,r6,#1              ;135
                  |L7.314|
00013a  f8d40148          LDR      r0,[r4,#0x148]        ;135
00013e  42b0              CMP      r0,r6                 ;135
000140  dcb2              BGT      |L7.168|
;;;145        }
;;;146      }
;;;147    
;;;148      /* Select MCU decoding routine */
;;;149      if (cinfo->Ah == 0) {
000142  f8d40198          LDR      r0,[r4,#0x198]
000146  b940              CBNZ     r0,|L7.346|
;;;150        if (is_DC_band)
000148  f1b80f00          CMP      r8,#0
00014c  d002              BEQ      |L7.340|
;;;151          entropy->pub.decode_mcu = decode_mcu_DC_first;
00014e  4825              LDR      r0,|L7.484|
000150  6068              STR      r0,[r5,#4]
000152  e00a              B        |L7.362|
                  |L7.340|
;;;152        else
;;;153          entropy->pub.decode_mcu = decode_mcu_AC_first;
000154  4824              LDR      r0,|L7.488|
000156  6068              STR      r0,[r5,#4]
000158  e007              B        |L7.362|
                  |L7.346|
;;;154      } else {
;;;155        if (is_DC_band)
00015a  f1b80f00          CMP      r8,#0
00015e  d002              BEQ      |L7.358|
;;;156          entropy->pub.decode_mcu = decode_mcu_DC_refine;
000160  4822              LDR      r0,|L7.492|
000162  6068              STR      r0,[r5,#4]
000164  e001              B        |L7.362|
                  |L7.358|
;;;157        else
;;;158          entropy->pub.decode_mcu = decode_mcu_AC_refine;
000166  4822              LDR      r0,|L7.496|
000168  6068              STR      r0,[r5,#4]
                  |L7.362|
;;;159      }
;;;160    
;;;161      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
00016a  2600              MOVS     r6,#0
00016c  e02b              B        |L7.454|
                  |L7.366|
;;;162        compptr = cinfo->cur_comp_info[ci];
00016e  f50470a6          ADD      r0,r4,#0x14c
000172  f850b026          LDR      r11,[r0,r6,LSL #2]
;;;163        /* Make sure requested tables are present, and compute derived tables.
;;;164         * We may build same derived table more than once, but it's not expensive.
;;;165         */
;;;166        if (is_DC_band) {
000176  f1b80f00          CMP      r8,#0
00017a  d00e              BEQ      |L7.410|
;;;167          if (cinfo->Ah == 0) {	/* DC refinement needs no table */
00017c  f8d40198          LDR      r0,[r4,#0x198]
000180  b9d8              CBNZ     r0,|L7.442|
;;;168    	tbl = compptr->dc_tbl_no;
000182  f8dba014          LDR      r10,[r11,#0x14]
;;;169    	jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
000186  f105002c          ADD      r0,r5,#0x2c
00018a  eb00038a          ADD      r3,r0,r10,LSL #2
00018e  4652              MOV      r2,r10
000190  2101              MOVS     r1,#1
000192  4620              MOV      r0,r4
000194  f7fffffe          BL       jpeg_make_d_derived_tbl
000198  e00f              B        |L7.442|
                  |L7.410|
;;;170    				& entropy->derived_tbls[tbl]);
;;;171          }
;;;172        } else {
;;;173          tbl = compptr->ac_tbl_no;
00019a  f8dba018          LDR      r10,[r11,#0x18]
;;;174          jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
00019e  f105002c          ADD      r0,r5,#0x2c
0001a2  eb00038a          ADD      r3,r0,r10,LSL #2
0001a6  4652              MOV      r2,r10
0001a8  2100              MOVS     r1,#0
0001aa  4620              MOV      r0,r4
0001ac  f7fffffe          BL       jpeg_make_d_derived_tbl
;;;175    			      & entropy->derived_tbls[tbl]);
;;;176          /* remember the single active table */
;;;177          entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
0001b0  f105002c          ADD      r0,r5,#0x2c
0001b4  f850002a          LDR      r0,[r0,r10,LSL #2]
0001b8  63e8              STR      r0,[r5,#0x3c]
                  |L7.442|
;;;178        }
;;;179        /* Initialize DC predictions to 0 */
;;;180        entropy->saved.last_dc_val[ci] = 0;
0001ba  2100              MOVS     r1,#0
0001bc  f1050018          ADD      r0,r5,#0x18
0001c0  f8401026          STR      r1,[r0,r6,LSL #2]
0001c4  1c76              ADDS     r6,r6,#1              ;161
                  |L7.454|
0001c6  f8d40148          LDR      r0,[r4,#0x148]        ;161
0001ca  42b0              CMP      r0,r6                 ;161
0001cc  dccf              BGT      |L7.366|
;;;181      }
;;;182    
;;;183      /* Initialize bitread state variables */
;;;184      entropy->bitstate.bits_left = 0;
0001ce  2100              MOVS     r1,#0
0001d0  6129              STR      r1,[r5,#0x10]
;;;185      entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
0001d2  2000              MOVS     r0,#0
0001d4  60e8              STR      r0,[r5,#0xc]
;;;186      entropy->pub.insufficient_data = FALSE;
0001d6  60a8              STR      r0,[r5,#8]
;;;187    
;;;188      /* Initialize private state variables */
;;;189      entropy->saved.EOBRUN = 0;
0001d8  6168              STR      r0,[r5,#0x14]
;;;190    
;;;191      /* Initialize restart counter */
;;;192      entropy->restarts_to_go = cinfo->restart_interval;
0001da  f8d40114          LDR      r0,[r4,#0x114]
0001de  62a8              STR      r0,[r5,#0x28]
;;;193    }
0001e0  e8bd8ffe          POP      {r1-r11,pc}
;;;194    
                          ENDP

                  |L7.484|
                          DCD      decode_mcu_DC_first
                  |L7.488|
                          DCD      decode_mcu_AC_first
                  |L7.492|
                          DCD      decode_mcu_DC_refine
                  |L7.496|
                          DCD      decode_mcu_AC_refine

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  extend_test
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000010
                          DCD      0x00000020
                          DCD      0x00000040
                          DCD      0x00000080
                          DCD      0x00000100
                          DCD      0x00000200
                          DCD      0x00000400
                          DCD      0x00000800
                          DCD      0x00001000
                          DCD      0x00002000
                          DCD      0x00004000
                  extend_offset
                          DCD      0x00000000
                          DCD      0xffffffff
                          DCD      0xfffffffd
                          DCD      0xfffffff9
                          DCD      0xfffffff1
                          DCD      0xffffffe1
                          DCD      0xffffffc1
                          DCD      0xffffff81
                          DCD      0xffffff01
                          DCD      0xfffffe01
                          DCD      0xfffffc01
                          DCD      0xfffff801
                          DCD      0xfffff001
                          DCD      0xffffe001
                          DCD      0xffffc001
                          DCD      0xffff8001
