; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lcd_rotatecw.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\lcd_rotatecw.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\LCD_RotateCW.c]
                          THUMB

                          AREA ||i._DrawBitLine1BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4681              MOV      r9,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
00000c  e9dd780a          LDRD     r7,r8,[sp,#0x28]
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
000010  f8b80000          LDRH     r0,[r8,#0]
000014  9000              STR      r0,[sp,#0]
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
000016  f8b8a002          LDRH     r10,[r8,#2]
;;;41       y -= Diff;
00001a  1b36              SUBS     r6,r6,r4
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00001c  4830              LDR      r0,|L1.224|
00001e  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000020  f0100003          ANDS     r0,r0,#3
000024  d004              BEQ      |L1.48|
000026  2801              CMP      r0,#1
000028  d035              BEQ      |L1.150|
00002a  2802              CMP      r0,#2
00002c  d154              BNE      |L1.216|
00002e  e01a              B        |L1.102|
                  |L1.48|
;;;43       case 0:
;;;44         do {
000030  bf00              NOP      
                  |L1.50|
;;;45           LCDDEV_L0_SetPixelIndex(x, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
000032  7828              LDRB     r0,[r5,#0]
000034  2180              MOVS     r1,#0x80
000036  4121              ASRS     r1,r1,r4
000038  4208              TST      r0,r1
00003a  d001              BEQ      |L1.64|
00003c  4650              MOV      r0,r10
00003e  e000              B        |L1.66|
                  |L1.64|
000040  9800              LDR      r0,[sp,#0]
                  |L1.66|
000042  4602              MOV      r2,r0
000044  4826              LDR      r0,|L1.224|
000046  6cc0              LDR      r0,[r0,#0x4c]  ; GUI_Context
000048  4631              MOV      r1,r6
00004a  6a43              LDR      r3,[r0,#0x24]
00004c  4648              MOV      r0,r9
00004e  4798              BLX      r3
;;;46           y++;
000050  1c76              ADDS     r6,r6,#1
;;;47     			if (++Diff == 8) {
000052  1c60              ADDS     r0,r4,#1
000054  4604              MOV      r4,r0
000056  2808              CMP      r0,#8
000058  d101              BNE      |L1.94|
;;;48             Diff = 0;
00005a  2400              MOVS     r4,#0
;;;49     				p++;
00005c  1c6d              ADDS     r5,r5,#1
                  |L1.94|
;;;50     			}
;;;51     		} while (--xsize);
00005e  1e78              SUBS     r0,r7,#1
000060  0007              MOVS     r7,r0
000062  d1e6              BNE      |L1.50|
;;;52         break;
000064  e038              B        |L1.216|
                  |L1.102|
;;;53       case LCD_DRAWMODE_TRANS:
;;;54         do {
000066  bf00              NOP      
                  |L1.104|
;;;55       		if (*p & (0x80 >> Diff))
000068  7829              LDRB     r1,[r5,#0]
00006a  2080              MOVS     r0,#0x80
00006c  4120              ASRS     r0,r0,r4
00006e  4201              TST      r1,r0
000070  d006              BEQ      |L1.128|
;;;56             LCDDEV_L0_SetPixelIndex(x, y, Index1);
000072  481b              LDR      r0,|L1.224|
000074  6cc0              LDR      r0,[r0,#0x4c]  ; GUI_Context
000076  4652              MOV      r2,r10
000078  4631              MOV      r1,r6
00007a  6a43              LDR      r3,[r0,#0x24]
00007c  4648              MOV      r0,r9
00007e  4798              BLX      r3
                  |L1.128|
;;;57           y++;
000080  1c76              ADDS     r6,r6,#1
;;;58     			if (++Diff == 8) {
000082  1c60              ADDS     r0,r4,#1
000084  4604              MOV      r4,r0
000086  2808              CMP      r0,#8
000088  d101              BNE      |L1.142|
;;;59             Diff = 0;
00008a  2400              MOVS     r4,#0
;;;60     				p++;
00008c  1c6d              ADDS     r5,r5,#1
                  |L1.142|
;;;61     			}
;;;62     		} while (--xsize);
00008e  1e78              SUBS     r0,r7,#1
000090  0007              MOVS     r7,r0
000092  d1e9              BNE      |L1.104|
;;;63         break;
000094  e020              B        |L1.216|
                  |L1.150|
;;;64       case LCD_DRAWMODE_XOR:;
;;;65         do {
000096  bf00              NOP      
                  |L1.152|
;;;66       		if (*p & (0x80 >> Diff)) {
000098  7828              LDRB     r0,[r5,#0]
00009a  2180              MOVS     r1,#0x80
00009c  4121              ASRS     r1,r1,r4
00009e  4208              TST      r0,r1
0000a0  d00f              BEQ      |L1.194|
;;;67             int Pixel = LCD_L0_GetPixelIndex(x, y);
0000a2  4631              MOV      r1,r6
0000a4  4648              MOV      r0,r9
0000a6  f7fffffe          BL       LCD_L0_GetPixelIndex
0000aa  4683              MOV      r11,r0
;;;68             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
0000ac  f64f70ff          MOV      r0,#0xffff
0000b0  eba0020b          SUB      r2,r0,r11
0000b4  480a              LDR      r0,|L1.224|
0000b6  6cc0              LDR      r0,[r0,#0x4c]  ; GUI_Context
0000b8  4631              MOV      r1,r6
0000ba  6a43              LDR      r3,[r0,#0x24]
0000bc  4648              MOV      r0,r9
0000be  4798              BLX      r3
;;;69           }
0000c0  bf00              NOP      
                  |L1.194|
;;;70           y++;
0000c2  1c76              ADDS     r6,r6,#1
;;;71     			if (++Diff == 8) {
0000c4  1c60              ADDS     r0,r4,#1
0000c6  4604              MOV      r4,r0
0000c8  2808              CMP      r0,#8
0000ca  d101              BNE      |L1.208|
;;;72             Diff = 0;
0000cc  2400              MOVS     r4,#0
;;;73     				p++;
0000ce  1c6d              ADDS     r5,r5,#1
                  |L1.208|
;;;74     			}
;;;75     		} while (--xsize);
0000d0  1e78              SUBS     r0,r7,#1
0000d2  0007              MOVS     r7,r0
0000d4  d1e0              BNE      |L1.152|
;;;76         break;
0000d6  bf00              NOP      
                  |L1.216|
0000d8  bf00              NOP                            ;52
;;;77     	}
;;;78     }
0000da  e8bd8ff8          POP      {r3-r11,pc}
;;;79     
                          ENDP

0000de  0000              DCW      0x0000
                  |L1.224|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmap||, CODE, READONLY, ALIGN=1

                  _DrawBitmap PROC
;;;86     */
;;;87     static void _DrawBitmap(int x0, int y0,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;88                            int xsize, int ysize,
;;;89                            int BitsPerPixel, 
;;;90                            int BytesPerLine,
;;;91                            const U8 GUI_UNI_PTR * pData, int Diff,
;;;92                            const LCD_PIXELINDEX* pTrans)
;;;93     {
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8ddb040          LDR      r11,[sp,#0x40]
000010  f8dda030          LDR      r10,[sp,#0x30]
000014  f8dd8038          LDR      r8,[sp,#0x38]
;;;94       int i;
;;;95       /* Use _DrawBitLineXBPP */
;;;96       for (i = 0; i < ysize; i++) {
000018  2400              MOVS     r4,#0
00001a  e00f              B        |L2.60|
                  |L2.28|
;;;97         switch (BitsPerPixel) {
00001c  f1ba0f01          CMP      r10,#1
000020  d108              BNE      |L2.52|
;;;98         case 1:
;;;99           _DrawBitLine1BPP(x0 - i, y0, pData, Diff, xsize, pTrans);
000022  1b28              SUBS     r0,r5,r4
000024  e9cd6b00          STRD     r6,r11,[sp,#0]
000028  4642              MOV      r2,r8
00002a  4649              MOV      r1,r9
00002c  9b0f              LDR      r3,[sp,#0x3c]
00002e  f7fffffe          BL       _DrawBitLine1BPP
;;;100          break;
000032  bf00              NOP      
                  |L2.52|
000034  bf00              NOP      
;;;101        }
;;;102        pData += BytesPerLine;
000036  980d              LDR      r0,[sp,#0x34]
000038  4480              ADD      r8,r8,r0
00003a  1c64              ADDS     r4,r4,#1              ;96
                  |L2.60|
00003c  42bc              CMP      r4,r7                 ;96
00003e  dbed              BLT      |L2.28|
;;;103      }
;;;104    }
000040  e8bd9ffc          POP      {r2-r12,pc}
;;;105    
                          ENDP


                          AREA ||i._DrawBitmapCW||, CODE, READONLY, ALIGN=2

                  _DrawBitmapCW PROC
;;;162    */
;;;163    static void _DrawBitmapCW(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;164                               int BitsPerPixel, int BytesPerLine,
;;;165                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;166    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  f8dda060          LDR      r10,[sp,#0x60]
00000e  9f1c              LDR      r7,[sp,#0x70]
000010  9e1a              LDR      r6,[sp,#0x68]
;;;167      U8  Data = 0;
000012  2000              MOVS     r0,#0
000014  900a              STR      r0,[sp,#0x28]
;;;168      int x1, y1;
;;;169      /* Handle the optional Y-magnification */
;;;170      y1 = y0 + ysize - 1;
000016  980c              LDR      r0,[sp,#0x30]
000018  4428              ADD      r0,r0,r5
00001a  1e40              SUBS     r0,r0,#1
00001c  9008              STR      r0,[sp,#0x20]
;;;171      x1 = x0 + xsize - 1;
00001e  980b              LDR      r0,[sp,#0x2c]
000020  4420              ADD      r0,r0,r4
000022  1e40              SUBS     r0,r0,#1
000024  9009              STR      r0,[sp,#0x24]
;;;172      /* Rotate positions */
;;;173      _TransformPointCW(&x0, &y0);
000026  a90c              ADD      r1,sp,#0x30
000028  a80b              ADD      r0,sp,#0x2c
00002a  f7fffffe          BL       _TransformPointCW
;;;174      _TransformPointCW(&x1, &y1);
00002e  a908              ADD      r1,sp,#0x20
000030  a809              ADD      r0,sp,#0x24
000032  f7fffffe          BL       _TransformPointCW
;;;175      /*  Handle BITMAP without magnification */
;;;176      if ((xMul == 1) && (yMul == 1)) {
000036  f1ba0f01          CMP      r10,#1
00003a  d166              BNE      |L3.266|
00003c  9819              LDR      r0,[sp,#0x64]
00003e  2801              CMP      r0,#1
000040  d163              BNE      |L3.266|
;;;177        int Diff = 0;
000042  f04f0800          MOV      r8,#0
;;;178        /* Clip top */
;;;179        if (y1 > GUI_Context.ClipRect.y1) {
000046  4867              LDR      r0,|L3.484|
000048  f9b0000e          LDRSH    r0,[r0,#0xe]
00004c  9908              LDR      r1,[sp,#0x20]
00004e  4288              CMP      r0,r1
000050  da06              BGE      |L3.96|
;;;180          int Diff = y1 - GUI_Context.ClipRect.y1; 
000052  4964              LDR      r1,|L3.484|
000054  f9b1100e          LDRSH    r1,[r1,#0xe]
000058  9a08              LDR      r2,[sp,#0x20]
00005a  1a50              SUBS     r0,r2,r1
;;;181          xsize -= Diff;
00005c  1a24              SUBS     r4,r4,r0
;;;182        }
00005e  bf00              NOP      
                  |L3.96|
;;;183        /* Clip bottom */
;;;184        if (y0 < GUI_Context.ClipRect.y0) {
000060  4860              LDR      r0,|L3.484|
000062  f9b0000a          LDRSH    r0,[r0,#0xa]
000066  990c              LDR      r1,[sp,#0x30]
000068  4288              CMP      r0,r1
00006a  dd15              BLE      |L3.152|
;;;185          Diff = GUI_Context.ClipRect.y1 - y0;
00006c  485d              LDR      r0,|L3.484|
00006e  f9b0000e          LDRSH    r0,[r0,#0xe]
000072  990c              LDR      r1,[sp,#0x30]
000074  eba00801          SUB      r8,r0,r1
;;;186    			xsize -= Diff;
000078  eba40408          SUB      r4,r4,r8
;;;187    			switch (BitsPerPixel) {
00007c  2e01              CMP      r6,#1
00007e  d10a              BNE      |L3.150|
;;;188    			case 1:
;;;189      			pPixel += (Diff >> 3); y0 -= (Diff >> 3) << 3; Diff &= 7;
000080  eb0707e8          ADD      r7,r7,r8,ASR #3
000084  ea4f00e8          ASR      r0,r8,#3
000088  990c              LDR      r1,[sp,#0x30]
00008a  eba100c0          SUB      r0,r1,r0,LSL #3
00008e  900c              STR      r0,[sp,#0x30]
000090  f0080807          AND      r8,r8,#7
;;;190    				break;
000094  bf00              NOP      
                  |L3.150|
000096  bf00              NOP      
                  |L3.152|
;;;191    			}
;;;192        }
;;;193        if (ysize <=0) {
000098  2d00              CMP      r5,#0
00009a  dc02              BGT      |L3.162|
                  |L3.156|
;;;194    		  return;
;;;195        }
;;;196        /* Clip right side */
;;;197        if (x0 > GUI_Context.ClipRect.x1) {
;;;198          int Diff = x0 - GUI_Context.ClipRect.x1;
;;;199          ysize -= Diff;
;;;200          x0 -= Diff;
;;;201          pPixel += Diff * BytesPerLine;
;;;202        }
;;;203        /* Clip left side */
;;;204        if (x1 < GUI_Context.ClipRect.x0) {
;;;205          int Diff = GUI_Context.ClipRect.x0 - x1;
;;;206          x1 += Diff;
;;;207          ysize -= Diff;
;;;208        }
;;;209        if (xsize <= 0) {
;;;210    		  return;
;;;211        }
;;;212        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;213      } else {
;;;214        /* Handle BITMAP with magnification */
;;;215        int x, y, xi, yi;
;;;216        int Shift = 8 - BitsPerPixel;
;;;217        for (x = x0, xi = 0; xi < ysize; xi++, x -= yMul, pPixel += BytesPerLine) {
;;;218          int xMax = x - yMul + 1;
;;;219          if ((xMax >= GUI_Context.ClipRect.x0) && (x <= GUI_Context.ClipRect.x1)) {
;;;220            int BitsLeft = 0;
;;;221            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;222            for (y = y0, yi = 0; yi < xsize; yi++, y += xMul) {
;;;223              U8  Index;
;;;224              if (!BitsLeft) {
;;;225                Data = *pDataLine++;
;;;226                BitsLeft =8;
;;;227              }
;;;228              Index = Data >> Shift;
;;;229              Data    <<= BitsPerPixel;
;;;230              BitsLeft -= BitsPerPixel;
;;;231              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;232                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;233                if (pTrans) {
;;;234                  LCD_COLORINDEX = *(pTrans + Index);
;;;235                } else {
;;;236                  LCD_COLORINDEX = Index;
;;;237                }
;;;238                LCD_FillRect(xMax, y, x, y + xMul - 1);
;;;239                LCD_COLORINDEX = OldColor;
;;;240              }
;;;241            }
;;;242          }
;;;243        }
;;;244      }
;;;245    }
00009c  b00f              ADD      sp,sp,#0x3c
00009e  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.162|
0000a2  4850              LDR      r0,|L3.484|
0000a4  f9b0000c          LDRSH    r0,[r0,#0xc]          ;197
0000a8  990b              LDR      r1,[sp,#0x2c]         ;197
0000aa  4288              CMP      r0,r1                 ;197
0000ac  da0c              BGE      |L3.200|
0000ae  494d              LDR      r1,|L3.484|
0000b0  f9b1100c          LDRSH    r1,[r1,#0xc]          ;198
0000b4  9a0b              LDR      r2,[sp,#0x2c]         ;198
0000b6  1a50              SUBS     r0,r2,r1              ;198
0000b8  1a2d              SUBS     r5,r5,r0              ;199
0000ba  990b              LDR      r1,[sp,#0x2c]         ;200
0000bc  1a09              SUBS     r1,r1,r0              ;200
0000be  910b              STR      r1,[sp,#0x2c]         ;200
0000c0  991b              LDR      r1,[sp,#0x6c]         ;201
0000c2  fb007701          MLA      r7,r0,r1,r7           ;201
0000c6  bf00              NOP                            ;202
                  |L3.200|
0000c8  4846              LDR      r0,|L3.484|
0000ca  f9b00008          LDRSH    r0,[r0,#8]            ;204  ; GUI_Context
0000ce  9909              LDR      r1,[sp,#0x24]         ;204
0000d0  4288              CMP      r0,r1                 ;204
0000d2  dd09              BLE      |L3.232|
0000d4  4943              LDR      r1,|L3.484|
0000d6  f9b11008          LDRSH    r1,[r1,#8]            ;205  ; GUI_Context
0000da  9a09              LDR      r2,[sp,#0x24]         ;205
0000dc  1a88              SUBS     r0,r1,r2              ;205
0000de  9909              LDR      r1,[sp,#0x24]         ;206
0000e0  4401              ADD      r1,r1,r0              ;206
0000e2  9109              STR      r1,[sp,#0x24]         ;206
0000e4  1a2d              SUBS     r5,r5,r0              ;207
0000e6  bf00              NOP                            ;208
                  |L3.232|
0000e8  2c00              CMP      r4,#0                 ;209
0000ea  dc00              BGT      |L3.238|
0000ec  e7d6              B        |L3.156|
                  |L3.238|
0000ee  991b              LDR      r1,[sp,#0x6c]         ;212
0000f0  981d              LDR      r0,[sp,#0x74]         ;212
0000f2  462b              MOV      r3,r5                 ;212
0000f4  4622              MOV      r2,r4                 ;212
0000f6  e9cd7802          STRD     r7,r8,[sp,#8]         ;212
0000fa  e9cd6100          STRD     r6,r1,[sp,#0]         ;212
0000fe  9004              STR      r0,[sp,#0x10]         ;212
000100  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;212
000104  f7fffffe          BL       _DrawBitmap
000108  e069              B        |L3.478|
                  |L3.266|
00010a  f1c60008          RSB      r0,r6,#8              ;216
00010e  9005              STR      r0,[sp,#0x14]         ;216
000110  f8dd802c          LDR      r8,[sp,#0x2c]         ;217
000114  2000              MOVS     r0,#0                 ;217
000116  9007              STR      r0,[sp,#0x1c]         ;217
000118  e05d              B        |L3.470|
                  |L3.282|
00011a  9819              LDR      r0,[sp,#0x64]         ;218
00011c  eba80000          SUB      r0,r8,r0              ;218
000120  1c40              ADDS     r0,r0,#1              ;218
000122  9004              STR      r0,[sp,#0x10]         ;218
000124  482f              LDR      r0,|L3.484|
000126  f9b01008          LDRSH    r1,[r0,#8]            ;219  ; GUI_Context
00012a  9804              LDR      r0,[sp,#0x10]         ;219
00012c  4281              CMP      r1,r0                 ;219
00012e  dc4a              BGT      |L3.454|
000130  482c              LDR      r0,|L3.484|
000132  f9b0000c          LDRSH    r0,[r0,#0xc]          ;219
000136  4540              CMP      r0,r8                 ;219
000138  db45              BLT      |L3.454|
00013a  2000              MOVS     r0,#0                 ;220
00013c  9003              STR      r0,[sp,#0xc]          ;220
00013e  9702              STR      r7,[sp,#8]            ;221
000140  f8ddb030          LDR      r11,[sp,#0x30]        ;222
000144  9006              STR      r0,[sp,#0x18]         ;222
000146  e03a              B        |L3.446|
                  |L3.328|
000148  9803              LDR      r0,[sp,#0xc]          ;224
00014a  b938              CBNZ     r0,|L3.348|
00014c  9802              LDR      r0,[sp,#8]            ;225
00014e  7800              LDRB     r0,[r0,#0]            ;225
000150  900a              STR      r0,[sp,#0x28]         ;225
000152  9802              LDR      r0,[sp,#8]            ;225
000154  1c40              ADDS     r0,r0,#1              ;225
000156  9002              STR      r0,[sp,#8]            ;225
000158  2008              MOVS     r0,#8                 ;226
00015a  9003              STR      r0,[sp,#0xc]          ;226
                  |L3.348|
00015c  9905              LDR      r1,[sp,#0x14]         ;228
00015e  980a              LDR      r0,[sp,#0x28]         ;228
000160  fa40f901          ASR      r9,r0,r1              ;228
000164  980a              LDR      r0,[sp,#0x28]         ;229
000166  40b0              LSLS     r0,r0,r6              ;229
000168  b2c0              UXTB     r0,r0                 ;229
00016a  900a              STR      r0,[sp,#0x28]         ;229
00016c  9803              LDR      r0,[sp,#0xc]          ;230
00016e  1b80              SUBS     r0,r0,r6              ;230
000170  9003              STR      r0,[sp,#0xc]          ;230
000172  f1b90f00          CMP      r9,#0                 ;231
000176  d104              BNE      |L3.386|
000178  481a              LDR      r0,|L3.484|
00017a  7c00              LDRB     r0,[r0,#0x10]         ;231  ; GUI_Context
00017c  f0100f02          TST      r0,#2                 ;231
000180  d119              BNE      |L3.438|
                  |L3.386|
000182  4818              LDR      r0,|L3.484|
000184  8840              LDRH     r0,[r0,#2]            ;232  ; GUI_Context
000186  9001              STR      r0,[sp,#4]            ;232
000188  981d              LDR      r0,[sp,#0x74]         ;233
00018a  b128              CBZ      r0,|L3.408|
00018c  981d              LDR      r0,[sp,#0x74]         ;234
00018e  f8300019          LDRH     r0,[r0,r9,LSL #1]     ;234
000192  4914              LDR      r1,|L3.484|
000194  8048              STRH     r0,[r1,#2]            ;234
000196  e002              B        |L3.414|
                  |L3.408|
000198  4812              LDR      r0,|L3.484|
00019a  f8a09002          STRH     r9,[r0,#2]            ;236
                  |L3.414|
00019e  eb0b000a          ADD      r0,r11,r10            ;238
0001a2  1e43              SUBS     r3,r0,#1              ;238
0001a4  4642              MOV      r2,r8                 ;238
0001a6  4659              MOV      r1,r11                ;238
0001a8  9804              LDR      r0,[sp,#0x10]         ;238
0001aa  f7fffffe          BL       LCD_FillRect
0001ae  490d              LDR      r1,|L3.484|
0001b0  9801              LDR      r0,[sp,#4]            ;239
0001b2  8048              STRH     r0,[r1,#2]            ;239
0001b4  bf00              NOP                            ;240
                  |L3.438|
0001b6  9806              LDR      r0,[sp,#0x18]         ;222
0001b8  1c40              ADDS     r0,r0,#1              ;222
0001ba  9006              STR      r0,[sp,#0x18]         ;222
0001bc  44d3              ADD      r11,r11,r10           ;222
                  |L3.446|
0001be  9806              LDR      r0,[sp,#0x18]         ;222
0001c0  42a0              CMP      r0,r4                 ;222
0001c2  dbc1              BLT      |L3.328|
0001c4  bf00              NOP                            ;242
                  |L3.454|
0001c6  9807              LDR      r0,[sp,#0x1c]         ;217
0001c8  1c40              ADDS     r0,r0,#1              ;217
0001ca  9007              STR      r0,[sp,#0x1c]         ;217
0001cc  9819              LDR      r0,[sp,#0x64]         ;217
0001ce  eba80800          SUB      r8,r8,r0              ;217
0001d2  981b              LDR      r0,[sp,#0x6c]         ;217
0001d4  4407              ADD      r7,r7,r0              ;217
                  |L3.470|
0001d6  9807              LDR      r0,[sp,#0x1c]         ;217
0001d8  42a8              CMP      r0,r5                 ;217
0001da  db9e              BLT      |L3.282|
0001dc  bf00              NOP                            ;244
                  |L3.478|
0001de  bf00              NOP      
0001e0  e75c              B        |L3.156|
;;;246    
                          ENDP

0001e2  0000              DCW      0x0000
                  |L3.484|
                          DCD      GUI_Context

                          AREA ||i._Rect2TextRect||, CODE, READONLY, ALIGN=1

                  _Rect2TextRect PROC
;;;113    */
;;;114    static void _Rect2TextRect(GUI_RECT * pRect) {
000000  b510              PUSH     {r4,lr}
;;;115      int x1, y1;
;;;116      x1 = pRect->x1;
000002  f9b01004          LDRSH    r1,[r0,#4]
;;;117      y1 = pRect->y1;
000006  f9b02006          LDRSH    r2,[r0,#6]
;;;118      pRect->x1 = pRect->x0 + (y1 - pRect->y0);
00000a  8803              LDRH     r3,[r0,#0]
00000c  8844              LDRH     r4,[r0,#2]
00000e  1b14              SUBS     r4,r2,r4
000010  4423              ADD      r3,r3,r4
000012  b21b              SXTH     r3,r3
000014  8083              STRH     r3,[r0,#4]
;;;119      pRect->y1 = pRect->y0 + (x1 - pRect->x0);
000016  8843              LDRH     r3,[r0,#2]
000018  8804              LDRH     r4,[r0,#0]
00001a  1b0c              SUBS     r4,r1,r4
00001c  4423              ADD      r3,r3,r4
00001e  b21b              SXTH     r3,r3
000020  80c3              STRH     r3,[r0,#6]
;;;120    }
000022  bd10              POP      {r4,pc}
;;;121    
                          ENDP


                          AREA ||i._TransformPointCW||, CODE, READONLY, ALIGN=2

                  _TransformPointCW PROC
;;;130    */
;;;131    static void _TransformPointCW(int * pXPos, int * pYPos) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;132      GUI_RECT ClientRect = {0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  9001              STR      r0,[sp,#4]
;;;133      int xPos, yPos, xNumPixel, yNumPixel;
;;;134      /* Get the client rectangle */
;;;135      #if GUI_WINSUPPORT
;;;136        WM_GetWindowRect(&ClientRect);
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       WM_GetWindowRect
;;;137      #else
;;;138        GUI_GetClientRect(&ClientRect);
;;;139      #endif
;;;140      xNumPixel = LCD_GetXSize() - 1;
000014  f7fffffe          BL       LCD_GetXSize
000018  f1a00801          SUB      r8,r0,#1
;;;141      yNumPixel = LCD_GetYSize() - 1;
00001c  f7fffffe          BL       LCD_GetYSize
000020  f1a00901          SUB      r9,r0,#1
;;;142      if (ClientRect.x1 > xNumPixel) {
000024  f9bd0004          LDRSH    r0,[sp,#4]
000028  4540              CMP      r0,r8
00002a  dd03              BLE      |L5.52|
;;;143        ClientRect.x1 = xNumPixel;
00002c  fa0ff088          SXTH     r0,r8
000030  f8ad0004          STRH     r0,[sp,#4]
                  |L5.52|
;;;144      }
;;;145      if (ClientRect.y1 > yNumPixel) {
000034  f9bd0006          LDRSH    r0,[sp,#6]
000038  4548              CMP      r0,r9
00003a  dd03              BLE      |L5.68|
;;;146        ClientRect.y1 = yNumPixel;
00003c  fa0ff089          SXTH     r0,r9
000040  f8ad0006          STRH     r0,[sp,#6]
                  |L5.68|
;;;147      }
;;;148      /* Save old positions */
;;;149      xPos = *pXPos;
000044  6826              LDR      r6,[r4,#0]
;;;150      yPos = *pYPos;
000046  682f              LDR      r7,[r5,#0]
;;;151      /* Rotate and add window origin */
;;;152      *pXPos = ClientRect.x0 - yPos;
000048  f9bd0000          LDRSH    r0,[sp,#0]
00004c  1bc0              SUBS     r0,r0,r7
00004e  6020              STR      r0,[r4,#0]
;;;153      *pYPos = ClientRect.y0 + xPos;
000050  f9bd0002          LDRSH    r0,[sp,#2]
000054  4430              ADD      r0,r0,r6
000056  6028              STR      r0,[r5,#0]
;;;154      /* Handle rotation of text rectangle */
;;;155      *pXPos = *pXPos + GUI_RectDispString.x1 + GUI_RectDispString.y0;
000058  490a              LDR      r1,|L5.132|
00005a  f9b11004          LDRSH    r1,[r1,#4]  ; GUI_RectDispString
00005e  6820              LDR      r0,[r4,#0]
000060  4408              ADD      r0,r0,r1
000062  4908              LDR      r1,|L5.132|
000064  f9b11002          LDRSH    r1,[r1,#2]  ; GUI_RectDispString
000068  4408              ADD      r0,r0,r1
00006a  6020              STR      r0,[r4,#0]
;;;156      *pYPos = *pYPos + GUI_RectDispString.y0 - GUI_RectDispString.x0;
00006c  4905              LDR      r1,|L5.132|
00006e  f9b11002          LDRSH    r1,[r1,#2]  ; GUI_RectDispString
000072  6828              LDR      r0,[r5,#0]
000074  4408              ADD      r0,r0,r1
000076  4903              LDR      r1,|L5.132|
000078  f9b11000          LDRSH    r1,[r1,#0]  ; GUI_RectDispString
00007c  1a40              SUBS     r0,r0,r1
00007e  6028              STR      r0,[r5,#0]
;;;157    }
000080  e8bd87fc          POP      {r2-r10,pc}
;;;158    
                          ENDP

                  |L5.132|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIListCW
                          DCD      _DrawBitmapCW
                          DCD      _Rect2TextRect
