; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guidemo_touch.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guidemo_touch.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\uCGUIDemo\GUIDEMO_Touch.c]
                          THUMB

                          AREA ||i.GUIDEMO_Touch||, CODE, READONLY, ALIGN=2

                  GUIDEMO_Touch PROC
;;;330    
;;;331    void GUIDEMO_Touch(void) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  b086              SUB      sp,sp,#0x18
;;;332      #define ID_KEYBOARD  1
;;;333      #define ID_TESTCAL   2
;;;334      #define ID_CALIBRATE 3
;;;335      int i, r;
;;;336      int XSize = LCD_GetXSize();
000006  f7fffffe          BL       LCD_GetXSize
00000a  4605              MOV      r5,r0
;;;337      int YSize = LCD_GetYSize();
00000c  f7fffffe          BL       LCD_GetYSize
000010  4681              MOV      r9,r0
;;;338      int XMid = XSize / 2;
000012  4628              MOV      r0,r5
000014  eb0571d0          ADD      r1,r5,r0,LSR #31
000018  104f              ASRS     r7,r1,#1
;;;339      int YMid = YSize / 2;
00001a  4648              MOV      r0,r9
00001c  eb0971d0          ADD      r1,r9,r0,LSR #31
000020  ea4f0861          ASR      r8,r1,#1
;;;340      GUIDEMO_NotifyStartNext();
000024  f7fffffe          BL       GUIDEMO_NotifyStartNext
;;;341      GUIDEMO_HideInfoWin();
000028  f7fffffe          BL       GUIDEMO_HideInfoWin
;;;342      do {
00002c  bf00              NOP      
                  |L1.46|
;;;343        GUI_RECT rText;/*= {0, 80, XSize, 120};*/
;;;344        BUTTON_Handle ahButton[3];
;;;345        rText.x0=0;
00002e  2000              MOVS     r0,#0
000030  f8ad0010          STRH     r0,[sp,#0x10]
;;;346        rText.y0=80;
000034  2050              MOVS     r0,#0x50
000036  f8ad0012          STRH     r0,[sp,#0x12]
;;;347        rText.x1=XSize;
00003a  b228              SXTH     r0,r5
00003c  f8ad0014          STRH     r0,[sp,#0x14]
;;;348        rText.y1=120;
000040  2078              MOVS     r0,#0x78
000042  f8ad0016          STRH     r0,[sp,#0x16]
;;;349        GUI_SetBkColor(GUI_BLUE);
000046  f44f007f          MOV      r0,#0xff0000
00004a  f7fffffe          BL       GUI_SetBkColor
;;;350        GUI_Clear();
00004e  f7fffffe          BL       GUI_Clear
;;;351        GUI_DrawBitmap(&bmSeggerLogoBlue, (XSize - 1 - bmSeggerLogoBlue.XSize) / 2, 15);
000052  1e68              SUBS     r0,r5,#1
000054  4944              LDR      r1,|L1.360|
000056  8809              LDRH     r1,[r1,#0]  ; bmSeggerLogoBlue
000058  eba00a01          SUB      r10,r0,r1
00005c  eb0a70da          ADD      r0,r10,r10,LSR #31
000060  1041              ASRS     r1,r0,#1
000062  220f              MOVS     r2,#0xf
000064  4840              LDR      r0,|L1.360|
000066  f7fffffe          BL       GUI_DrawBitmap
;;;352        GUI_SetFont(&GUI_FontComic18B_ASCII);
00006a  4840              LDR      r0,|L1.364|
00006c  f7fffffe          BL       GUI_SetFont
;;;353        GUI_DispStringInRect("emWin Touch screen demo", &rText, GUI_TA_HCENTER | GUI_TA_VCENTER);
000070  220e              MOVS     r2,#0xe
000072  a904              ADD      r1,sp,#0x10
000074  a03e              ADR      r0,|L1.368|
000076  f7fffffe          BL       GUI_DispStringInRect
;;;354        ahButton[0] =  BUTTON_Create( XMid - 50, YMid - 20, 100, 50, ID_CALIBRATE,BUTTON_CF_SHOW );
00007a  2002              MOVS     r0,#2
00007c  2103              MOVS     r1,#3
00007e  e9cd1000          STRD     r1,r0,[sp,#0]
000082  f1a80114          SUB      r1,r8,#0x14
000086  f1a70032          SUB      r0,r7,#0x32
00008a  2332              MOVS     r3,#0x32
00008c  2264              MOVS     r2,#0x64
00008e  f7fffffe          BL       BUTTON_Create
000092  f8ad0008          STRH     r0,[sp,#8]
;;;355        ahButton[1] =  BUTTON_Create( XMid - 90, YMid + 40, 80, 30, ID_KEYBOARD, BUTTON_CF_SHOW );
000096  2002              MOVS     r0,#2
000098  2101              MOVS     r1,#1
00009a  e9cd1000          STRD     r1,r0,[sp,#0]
00009e  f1a7005a          SUB      r0,r7,#0x5a
0000a2  231e              MOVS     r3,#0x1e
0000a4  2250              MOVS     r2,#0x50
0000a6  f1080128          ADD      r1,r8,#0x28
0000aa  f7fffffe          BL       BUTTON_Create
0000ae  f8ad000a          STRH     r0,[sp,#0xa]
;;;356        ahButton[2] =  BUTTON_Create( XMid + 10, YMid + 40, 80, 30, ID_TESTCAL,BUTTON_CF_SHOW );
0000b2  2002              MOVS     r0,#2
0000b4  9000              STR      r0,[sp,#0]
0000b6  231e              MOVS     r3,#0x1e
0000b8  2250              MOVS     r2,#0x50
0000ba  f1080128          ADD      r1,r8,#0x28
0000be  9001              STR      r0,[sp,#4]
0000c0  f107000a          ADD      r0,r7,#0xa
0000c4  f7fffffe          BL       BUTTON_Create
0000c8  f8ad000c          STRH     r0,[sp,#0xc]
;;;357        BUTTON_SetText (ahButton[0], "Calibrate");
0000cc  f9bd0008          LDRSH    r0,[sp,#8]
0000d0  a12d              ADR      r1,|L1.392|
0000d2  f7fffffe          BL       BUTTON_SetText
;;;358        BUTTON_SetBkColor(ahButton[0], 0, GUI_RED);
0000d6  f9bd0008          LDRSH    r0,[sp,#8]
0000da  22ff              MOVS     r2,#0xff
0000dc  2100              MOVS     r1,#0
0000de  f7fffffe          BL       BUTTON_SetBkColor
;;;359        BUTTON_SetText (ahButton[1], "Keyboard");
0000e2  f9bd000a          LDRSH    r0,[sp,#0xa]
0000e6  a12b              ADR      r1,|L1.404|
0000e8  f7fffffe          BL       BUTTON_SetText
;;;360        BUTTON_SetText (ahButton[2], "Test calibration");
0000ec  f9bd000c          LDRSH    r0,[sp,#0xc]
0000f0  a12b              ADR      r1,|L1.416|
0000f2  f7fffffe          BL       BUTTON_SetText
;;;361        BUTTON_SetFont(ahButton[0], &GUI_FontComic18B_ASCII);
0000f6  f9bd0008          LDRSH    r0,[sp,#8]
0000fa  491c              LDR      r1,|L1.364|
0000fc  f7fffffe          BL       BUTTON_SetFont
;;;362        r = GUIDEMO_WaitKey();
000100  f7fffffe          BL       GUIDEMO_WaitKey
000104  4604              MOV      r4,r0
;;;363        if (r==0) {
000106  b94c              CBNZ     r4,|L1.284|
;;;364          r = ID_KEYBOARD;
000108  2401              MOVS     r4,#1
;;;365          BUTTON_SetState(ahButton[1], BUTTON_STATE_PRESSED);
00010a  f9bd000a          LDRSH    r0,[sp,#0xa]
00010e  0221              LSLS     r1,r4,#8
000110  f7fffffe          BL       BUTTON_SetState
;;;366          GUIDEMO_Delay(500);
000114  f44f70fa          MOV      r0,#0x1f4
000118  f7fffffe          BL       GUIDEMO_Delay
                  |L1.284|
;;;367        }
;;;368        for (i=0; i< countof(ahButton); i++) {
00011c  2600              MOVS     r6,#0
00011e  e005              B        |L1.300|
                  |L1.288|
;;;369          BUTTON_Delete(ahButton[i]);
000120  a902              ADD      r1,sp,#8
000122  f9310016          LDRSH    r0,[r1,r6,LSL #1]
000126  f7fffffe          BL       WM_DeleteWindow
00012a  1c76              ADDS     r6,r6,#1              ;368
                  |L1.300|
00012c  2e03              CMP      r6,#3                 ;368
00012e  d3f7              BCC      |L1.288|
;;;370        }
;;;371        switch (r) {
000130  2c01              CMP      r4,#1
000132  d004              BEQ      |L1.318|
000134  2c02              CMP      r4,#2
000136  d009              BEQ      |L1.332|
000138  2c03              CMP      r4,#3
00013a  d10a              BNE      |L1.338|
00013c  e003              B        |L1.326|
                  |L1.318|
;;;372        case ID_KEYBOARD:  r= _ExecKeyboard(); break;
00013e  f7fffffe          BL       _ExecKeyboard
000142  4604              MOV      r4,r0
000144  e005              B        |L1.338|
                  |L1.326|
;;;373        case ID_CALIBRATE: _ExecCalibration(); break;
000146  f7fffffe          BL       _ExecCalibration
00014a  e002              B        |L1.338|
                  |L1.332|
;;;374        case ID_TESTCAL:   _TestCalibration(); break;
00014c  f7fffffe          BL       _TestCalibration
000150  bf00              NOP      
                  |L1.338|
000152  bf00              NOP                            ;372
;;;375        }
;;;376      } while (r && (r!='n') && (r!='N'));
000154  b124              CBZ      r4,|L1.352|
000156  2c6e              CMP      r4,#0x6e
000158  d002              BEQ      |L1.352|
00015a  2c4e              CMP      r4,#0x4e
00015c  f47faf67          BNE      |L1.46|
                  |L1.352|
;;;377    }
000160  b006              ADD      sp,sp,#0x18
000162  e8bd87f0          POP      {r4-r10,pc}
;;;378    
                          ENDP

000166  0000              DCW      0x0000
                  |L1.360|
                          DCD      bmSeggerLogoBlue
                  |L1.364|
                          DCD      GUI_FontComic18B_ASCII
                  |L1.368|
000170  656d5769          DCB      "emWin Touch screen demo",0
000174  6e20546f
000178  75636820
00017c  73637265
000180  656e2064
000184  656d6f00
                  |L1.392|
000188  43616c69          DCB      "Calibrate",0
00018c  62726174
000190  6500    
000192  00                DCB      0
000193  00                DCB      0
                  |L1.404|
000194  4b657962          DCB      "Keyboard",0
000198  6f617264
00019c  00      
00019d  00                DCB      0
00019e  00                DCB      0
00019f  00                DCB      0
                  |L1.416|
0001a0  54657374          DCB      "Test calibration",0
0001a4  2063616c
0001a8  69627261
0001ac  74696f6e
0001b0  00      
0001b1  00                DCB      0
0001b2  00                DCB      0
0001b3  00                DCB      0

                          AREA ||i._Calibrate||, CODE, READONLY, ALIGN=1

                  _Calibrate PROC
;;;41     
;;;42     static void _Calibrate(int Coord, int Log0, int Log1, int Phys0, int Phys1, int *p0, int *p1) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dd9a0d          LDRD     r9,r10,[sp,#0x34]
000010  9d0c              LDR      r5,[sp,#0x30]
;;;43       int l0 = 0;
000012  f04f0b00          MOV      r11,#0
;;;44       int l1 = (Coord == GUI_COORD_X) ? LCD_XSIZE - 1 : LCD_YSIZE - 1;
000016  b90c              CBNZ     r4,|L2.28|
000018  20ef              MOVS     r0,#0xef
00001a  e001              B        |L2.32|
                  |L2.28|
00001c  f240103f          MOV      r0,#0x13f
                  |L2.32|
000020  9001              STR      r0,[sp,#4]
;;;45       *p0 = _Log2Phys(l0, Log0, Log1, Phys0, Phys1);
000022  4643              MOV      r3,r8
000024  463a              MOV      r2,r7
000026  4631              MOV      r1,r6
000028  4658              MOV      r0,r11
00002a  9500              STR      r5,[sp,#0]
00002c  f7fffffe          BL       _Log2Phys
000030  f8c90000          STR      r0,[r9,#0]
;;;46       *p1 = _Log2Phys(l1, Log0, Log1, Phys0, Phys1);
000034  4643              MOV      r3,r8
000036  463a              MOV      r2,r7
000038  4631              MOV      r1,r6
00003a  9500              STR      r5,[sp,#0]
00003c  9801              LDR      r0,[sp,#4]
00003e  f7fffffe          BL       _Log2Phys
000042  f8ca0000          STR      r0,[r10,#0]
;;;47     }
000046  e8bd9ffc          POP      {r2-r12,pc}
;;;48     
                          ENDP


                          AREA ||i._ExecCalibration||, CODE, READONLY, ALIGN=2

                  _ExecCalibration PROC
;;;56     //static void _ExecCalibration(void) {
;;;57      void _ExecCalibration(void) {
000000  b500              PUSH     {lr}
000002  b08f              SUB      sp,sp,#0x3c
;;;58       int ax_Phys[2],ay_Phys[2];
;;;59     /* calculate log. Positions */
;;;60       int ax[2] = { 15, LCD_XSIZE -1-15};
000004  4978              LDR      r1,|L3.488|
000006  c903              LDM      r1,{r0,r1}
000008  e9cd0109          STRD     r0,r1,[sp,#0x24]
;;;61     //  const int ay[2] = { 15, LCD_YSIZE-1-15};
;;;62       int ay[2] = { LCD_YSIZE-1-15, 15};
00000c  4976              LDR      r1,|L3.488|
00000e  3108              ADDS     r1,r1,#8
000010  c903              LDM      r1,{r0,r1}
000012  e9cd0107          STRD     r0,r1,[sp,#0x1c]
;;;63       GUI_TOUCH_SetDefaultCalibration();
000016  f7fffffe          BL       GUI_TOUCH_SetDefaultCalibration
;;;64     /* _Calibrate upper left */
;;;65       GUI_SetBkColor(GUI_RED);  
00001a  20ff              MOVS     r0,#0xff
00001c  f7fffffe          BL       GUI_SetBkColor
;;;66       GUI_Clear();
000020  f7fffffe          BL       GUI_Clear
;;;67       GUI_SetColor(GUI_WHITE);  GUI_FillCircle(ax[0], ay[0], 10);
000024  f06f407f          MVN      r0,#0xff000000
000028  f7fffffe          BL       GUI_SetColor
00002c  220a              MOVS     r2,#0xa
00002e  9907              LDR      r1,[sp,#0x1c]
000030  9809              LDR      r0,[sp,#0x24]
000032  f7fffffe          BL       GUI_FillCircle
;;;68       GUI_SetColor(GUI_RED);    GUI_FillCircle(ax[0], ay[0], 5);
000036  20ff              MOVS     r0,#0xff
000038  f7fffffe          BL       GUI_SetColor
00003c  2205              MOVS     r2,#5
00003e  9907              LDR      r1,[sp,#0x1c]
000040  9809              LDR      r0,[sp,#0x24]
000042  f7fffffe          BL       GUI_FillCircle
;;;69       GUI_SetColor(GUI_WHITE);
000046  f06f407f          MVN      r0,#0xff000000
00004a  f7fffffe          BL       GUI_SetColor
;;;70       GUI_DispStringAt("Press here", ax[0]+20, ay[0]);
00004e  9809              LDR      r0,[sp,#0x24]
000050  f1000114          ADD      r1,r0,#0x14
000054  a065              ADR      r0,|L3.492|
000056  9a07              LDR      r2,[sp,#0x1c]
000058  f7fffffe          BL       GUI_DispStringAt
;;;71       do {
00005c  bf00              NOP      
                  |L3.94|
;;;72         GUI_PID_STATE State;
;;;73         GUI_TOUCH_GetState(&State);
00005e  a804              ADD      r0,sp,#0x10
000060  f7fffffe          BL       GUI_TOUCH_GetState
;;;74         if (State.Pressed) {
000064  f89d0018          LDRB     r0,[sp,#0x18]
000068  b130              CBZ      r0,|L3.120|
;;;75           ax_Phys[0] = GUI_TOUCH_GetxPhys();
00006a  f7fffffe          BL       GUI_TOUCH_GetxPhys
00006e  900d              STR      r0,[sp,#0x34]
;;;76           ay_Phys[0] = GUI_TOUCH_GetyPhys();
000070  f7fffffe          BL       GUI_TOUCH_GetyPhys
000074  900b              STR      r0,[sp,#0x2c]
;;;77           break;
000076  e003              B        |L3.128|
                  |L3.120|
;;;78         }
;;;79         GUI_Delay (100);
000078  2064              MOVS     r0,#0x64
00007a  f7fffffe          BL       GUI_Delay
;;;80       } while (1);
00007e  e7ee              B        |L3.94|
                  |L3.128|
000080  bf00              NOP                            ;77
;;;81     /* Tell user to release */
;;;82       GUI_Clear();
000082  f7fffffe          BL       GUI_Clear
;;;83       GUI_DispStringAt("OK", ax[0]+20, ay[0]);
000086  9809              LDR      r0,[sp,#0x24]
000088  f1000114          ADD      r1,r0,#0x14
00008c  a05a              ADR      r0,|L3.504|
00008e  9a07              LDR      r2,[sp,#0x1c]
000090  f7fffffe          BL       GUI_DispStringAt
;;;84       do {
000094  bf00              NOP      
                  |L3.150|
;;;85         GUI_PID_STATE State;
;;;86         GUI_TOUCH_GetState(&State);
000096  a804              ADD      r0,sp,#0x10
000098  f7fffffe          BL       GUI_TOUCH_GetState
;;;87         if (State.Pressed == 0) {
00009c  f89d0018          LDRB     r0,[sp,#0x18]
0000a0  b900              CBNZ     r0,|L3.164|
;;;88           break;
0000a2  e003              B        |L3.172|
                  |L3.164|
;;;89         }
;;;90         GUI_Delay (100);
0000a4  2064              MOVS     r0,#0x64
0000a6  f7fffffe          BL       GUI_Delay
;;;91       } while (1);
0000aa  e7f4              B        |L3.150|
                  |L3.172|
0000ac  bf00              NOP                            ;88
;;;92     /* _Calibrate lower right */
;;;93       GUI_SetBkColor(GUI_RED);  
0000ae  20ff              MOVS     r0,#0xff
0000b0  f7fffffe          BL       GUI_SetBkColor
;;;94       GUI_Clear();
0000b4  f7fffffe          BL       GUI_Clear
;;;95       GUI_SetColor(GUI_WHITE);  GUI_FillCircle(ax[1], ay[1], 10);
0000b8  f06f407f          MVN      r0,#0xff000000
0000bc  f7fffffe          BL       GUI_SetColor
0000c0  220a              MOVS     r2,#0xa
0000c2  9908              LDR      r1,[sp,#0x20]
0000c4  980a              LDR      r0,[sp,#0x28]
0000c6  f7fffffe          BL       GUI_FillCircle
;;;96       GUI_SetColor(GUI_RED);    GUI_FillCircle(ax[1], ay[1], 5);
0000ca  20ff              MOVS     r0,#0xff
0000cc  f7fffffe          BL       GUI_SetColor
0000d0  2205              MOVS     r2,#5
0000d2  9908              LDR      r1,[sp,#0x20]
0000d4  980a              LDR      r0,[sp,#0x28]
0000d6  f7fffffe          BL       GUI_FillCircle
;;;97       GUI_SetColor(GUI_WHITE);
0000da  f06f407f          MVN      r0,#0xff000000
0000de  f7fffffe          BL       GUI_SetColor
;;;98       GUI_SetTextAlign(GUI_TA_RIGHT);
0000e2  2001              MOVS     r0,#1
0000e4  f7fffffe          BL       GUI_SetTextAlign
;;;99       GUI_DispStringAt("Press here", ax[1]-20, ay[1]);
0000e8  980a              LDR      r0,[sp,#0x28]
0000ea  f1a00114          SUB      r1,r0,#0x14
0000ee  a03f              ADR      r0,|L3.492|
0000f0  9a08              LDR      r2,[sp,#0x20]
0000f2  f7fffffe          BL       GUI_DispStringAt
;;;100      do {
0000f6  bf00              NOP      
                  |L3.248|
;;;101        GUI_PID_STATE State;
;;;102        GUI_TOUCH_GetState(&State);
0000f8  a804              ADD      r0,sp,#0x10
0000fa  f7fffffe          BL       GUI_TOUCH_GetState
;;;103        if (State.Pressed) {
0000fe  f89d0018          LDRB     r0,[sp,#0x18]
000102  b130              CBZ      r0,|L3.274|
;;;104          ax_Phys[1] = GUI_TOUCH_GetxPhys();
000104  f7fffffe          BL       GUI_TOUCH_GetxPhys
000108  900e              STR      r0,[sp,#0x38]
;;;105          ay_Phys[1] = GUI_TOUCH_GetyPhys();
00010a  f7fffffe          BL       GUI_TOUCH_GetyPhys
00010e  900c              STR      r0,[sp,#0x30]
;;;106          break;
000110  e003              B        |L3.282|
                  |L3.274|
;;;107        }
;;;108        GUI_Delay (100);
000112  2064              MOVS     r0,#0x64
000114  f7fffffe          BL       GUI_Delay
;;;109      } while (1);
000118  e7ee              B        |L3.248|
                  |L3.282|
00011a  bf00              NOP                            ;106
;;;110      GUI_TOUCH_Calibrate(GUI_COORD_X, ax[0], ax[1], ax_Phys[0], ax_Phys[1]);
00011c  980e              LDR      r0,[sp,#0x38]
00011e  9000              STR      r0,[sp,#0]
000120  2000              MOVS     r0,#0
000122  9b0d              LDR      r3,[sp,#0x34]
000124  e9dd1209          LDRD     r1,r2,[sp,#0x24]
000128  f7fffffe          BL       GUI_TOUCH_Calibrate
;;;111      GUI_TOUCH_Calibrate(GUI_COORD_Y, ay[0], ay[1], ay_Phys[0], ay_Phys[1]);
00012c  980c              LDR      r0,[sp,#0x30]
00012e  9000              STR      r0,[sp,#0]
000130  2001              MOVS     r0,#1
000132  9b0b              LDR      r3,[sp,#0x2c]
000134  e9dd1207          LDRD     r1,r2,[sp,#0x1c]
000138  f7fffffe          BL       GUI_TOUCH_Calibrate
;;;112      { /* calculate and display values for configuration file */
;;;113        int x0, x1;
;;;114        int y0, y1;
;;;115        GUI_Clear();
00013c  f7fffffe          BL       GUI_Clear
;;;116        _Calibrate(GUI_COORD_X, ax[0], ax[1], ax_Phys[0], ax_Phys[1], &x0, &x1);
000140  a905              ADD      r1,sp,#0x14
000142  aa06              ADD      r2,sp,#0x18
000144  980e              LDR      r0,[sp,#0x38]
000146  e9cd2101          STRD     r2,r1,[sp,#4]
00014a  9000              STR      r0,[sp,#0]
00014c  2000              MOVS     r0,#0
00014e  9b0d              LDR      r3,[sp,#0x34]
000150  e9dd1209          LDRD     r1,r2,[sp,#0x24]
000154  f7fffffe          BL       _Calibrate
;;;117        _Calibrate(GUI_COORD_Y, ay[0], ay[1], ay_Phys[0], ay_Phys[1], &y0, &y1);
000158  a903              ADD      r1,sp,#0xc
00015a  aa04              ADD      r2,sp,#0x10
00015c  980c              LDR      r0,[sp,#0x30]
00015e  e9cd2101          STRD     r2,r1,[sp,#4]
000162  9000              STR      r0,[sp,#0]
000164  2001              MOVS     r0,#1
000166  9b0b              LDR      r3,[sp,#0x2c]
000168  e9dd1207          LDRD     r1,r2,[sp,#0x1c]
00016c  f7fffffe          BL       _Calibrate
;;;118        GUI_DispStringAt("x0: ", 0, 0); GUI_DispDec(x0, 4); GUI_DispNextLine();
000170  2200              MOVS     r2,#0
000172  4611              MOV      r1,r2
000174  a021              ADR      r0,|L3.508|
000176  f7fffffe          BL       GUI_DispStringAt
00017a  2104              MOVS     r1,#4
00017c  9806              LDR      r0,[sp,#0x18]
00017e  f7fffffe          BL       GUI_DispDec
000182  f7fffffe          BL       GUI_DispNextLine
;;;119        GUI_DispString  ("x1: ");       GUI_DispDec(x1, 4); GUI_DispNextLine();
000186  a01f              ADR      r0,|L3.516|
000188  f7fffffe          BL       GUI_DispString
00018c  2104              MOVS     r1,#4
00018e  9805              LDR      r0,[sp,#0x14]
000190  f7fffffe          BL       GUI_DispDec
000194  f7fffffe          BL       GUI_DispNextLine
;;;120        GUI_DispString  ("y0: ");       GUI_DispDec(y0, 4); GUI_DispNextLine();
000198  a01c              ADR      r0,|L3.524|
00019a  f7fffffe          BL       GUI_DispString
00019e  2104              MOVS     r1,#4
0001a0  9804              LDR      r0,[sp,#0x10]
0001a2  f7fffffe          BL       GUI_DispDec
0001a6  f7fffffe          BL       GUI_DispNextLine
;;;121        GUI_DispString  ("y1: ");       GUI_DispDec(y1, 4); GUI_DispNextLine();
0001aa  a01a              ADR      r0,|L3.532|
0001ac  f7fffffe          BL       GUI_DispString
0001b0  2104              MOVS     r1,#4
0001b2  9803              LDR      r0,[sp,#0xc]
0001b4  f7fffffe          BL       GUI_DispDec
0001b8  f7fffffe          BL       GUI_DispNextLine
;;;122        GUI_DispString  ("Please touch display to continue...");
0001bc  a017              ADR      r0,|L3.540|
0001be  f7fffffe          BL       GUI_DispString
;;;123        GUI_Delay(1000);
0001c2  f44f707a          MOV      r0,#0x3e8
0001c6  f7fffffe          BL       GUI_Delay
;;;124        do {
0001ca  bf00              NOP      
                  |L3.460|
;;;125          GUI_PID_STATE State;
;;;126          GUI_TOUCH_GetState(&State);
0001cc  4668              MOV      r0,sp
0001ce  f7fffffe          BL       GUI_TOUCH_GetState
;;;127          if (State.Pressed)
0001d2  f89d0008          LDRB     r0,[sp,#8]
0001d6  b100              CBZ      r0,|L3.474|
;;;128            break;
0001d8  e003              B        |L3.482|
                  |L3.474|
;;;129          GUI_Delay (10);
0001da  200a              MOVS     r0,#0xa
0001dc  f7fffffe          BL       GUI_Delay
;;;130        } while (1);
0001e0  e7f4              B        |L3.460|
                  |L3.482|
0001e2  bf00              NOP                            ;128
;;;131      }
;;;132    }
0001e4  b00f              ADD      sp,sp,#0x3c
0001e6  bd00              POP      {pc}
;;;133    
                          ENDP

                  |L3.488|
                          DCD      ||.constdata||
                  |L3.492|
0001ec  50726573          DCB      "Press here",0
0001f0  73206865
0001f4  726500  
0001f7  00                DCB      0
                  |L3.504|
0001f8  4f4b00            DCB      "OK",0
0001fb  00                DCB      0
                  |L3.508|
0001fc  78303a20          DCB      "x0: ",0
000200  00      
000201  00                DCB      0
000202  00                DCB      0
000203  00                DCB      0
                  |L3.516|
000204  78313a20          DCB      "x1: ",0
000208  00      
000209  00                DCB      0
00020a  00                DCB      0
00020b  00                DCB      0
                  |L3.524|
00020c  79303a20          DCB      "y0: ",0
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
                  |L3.532|
000214  79313a20          DCB      "y1: ",0
000218  00      
000219  00                DCB      0
00021a  00                DCB      0
00021b  00                DCB      0
                  |L3.540|
00021c  506c6561          DCB      "Please touch display to continue...",0
000220  73652074
000224  6f756368
000228  20646973
00022c  706c6179
000230  20746f20
000234  636f6e74
000238  696e7565
00023c  2e2e2e00

                          AREA ||i._ExecKeyboard||, CODE, READONLY, ALIGN=2

                  _ExecKeyboard PROC
;;;259    
;;;260    static int _ExecKeyboard(void) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b093              SUB      sp,sp,#0x4c
;;;261      int y0 = 75;
000006  274b              MOVS     r7,#0x4b
;;;262      int XSize = LCD_GetXSize();
000008  f7fffffe          BL       LCD_GetXSize
00000c  4606              MOV      r6,r0
;;;263      int YSize = LCD_GetYSize();
00000e  f7fffffe          BL       LCD_GetYSize
000012  9012              STR      r0,[sp,#0x48]
;;;264      int XStep = XSize / 4;
000014  4630              MOV      r0,r6
000016  17f1              ASRS     r1,r6,#31
000018  eb067191          ADD      r1,r6,r1,LSR #30
00001c  ea4f08a1          ASR      r8,r1,#2
;;;265      int YStep = (YSize - y0) / 4;
000020  9912              LDR      r1,[sp,#0x48]
000022  1bc8              SUBS     r0,r1,r7
000024  17c1              ASRS     r1,r0,#31
000026  eb007191          ADD      r1,r0,r1,LSR #30
00002a  ea4f09a1          ASR      r9,r1,#2
;;;266      int i;
;;;267      int Key;
;;;268      BUTTON_Handle ahButton[16];
;;;269      BUTTON_Handle hButtonESC;
;;;270      EDIT_Handle   hEdit;
;;;271      GUI_RECT rText = {0};
00002e  2000              MOVS     r0,#0
000030  9008              STR      r0,[sp,#0x20]
000032  9009              STR      r0,[sp,#0x24]
;;;272      rText.x1 = LCD_GetXSize() - 3;
000034  f7fffffe          BL       LCD_GetXSize
000038  1ec0              SUBS     r0,r0,#3
00003a  b200              SXTH     r0,r0
00003c  f8ad0024          STRH     r0,[sp,#0x24]
;;;273      rText.y1 = 20;
000040  2014              MOVS     r0,#0x14
000042  f8ad0026          STRH     r0,[sp,#0x26]
;;;274      GUI_SetBkColor(GUI_RED);  
000046  20ff              MOVS     r0,#0xff
000048  f7fffffe          BL       GUI_SetBkColor
;;;275      GUI_Clear();
00004c  f7fffffe          BL       GUI_Clear
;;;276      GUI_SetFont(&GUI_FontComic18B_ASCII);
000050  4856              LDR      r0,|L4.428|
000052  f7fffffe          BL       GUI_SetFont
;;;277      GUI_SetColor(GUI_WHITE);
000056  f06f407f          MVN      r0,#0xff000000
00005a  f7fffffe          BL       GUI_SetColor
;;;278      GUI_DispStringInRect("emWin", &rText, GUI_TA_RIGHT | GUI_TA_VCENTER);
00005e  220d              MOVS     r2,#0xd
000060  a908              ADD      r1,sp,#0x20
000062  a053              ADR      r0,|L4.432|
000064  f7fffffe          BL       GUI_DispStringInRect
;;;279      rText.y0 +=20;
000068  f8bd0022          LDRH     r0,[sp,#0x22]
00006c  3014              ADDS     r0,r0,#0x14
00006e  b200              SXTH     r0,r0
000070  f8ad0022          STRH     r0,[sp,#0x22]
;;;280      rText.y1 +=20;
000074  f8bd0026          LDRH     r0,[sp,#0x26]
000078  3014              ADDS     r0,r0,#0x14
00007a  b200              SXTH     r0,r0
00007c  f8ad0026          STRH     r0,[sp,#0x26]
;;;281      GUI_DispStringInRect("Touch screen demo", &rText, GUI_TA_RIGHT | GUI_TA_VCENTER);
000080  220d              MOVS     r2,#0xd
000082  a908              ADD      r1,sp,#0x20
000084  a04c              ADR      r0,|L4.440|
000086  f7fffffe          BL       GUI_DispStringInRect
;;;282      /* Create Keyboard Buttons */
;;;283      for (i=0; _acText[i]; i++) {
00008a  2400              MOVS     r4,#0
00008c  e03d              B        |L4.266|
                  |L4.142|
;;;284        int XPos = (i%4) * XStep + 3;
00008e  4620              MOV      r0,r4
000090  17e1              ASRS     r1,r4,#31
000092  eb047191          ADD      r1,r4,r1,LSR #30
000096  1089              ASRS     r1,r1,#2
000098  eba40181          SUB      r1,r4,r1,LSL #2
00009c  fb01f108          MUL      r1,r1,r8
0000a0  1cc9              ADDS     r1,r1,#3
0000a2  9107              STR      r1,[sp,#0x1c]
;;;285        int YPos = (i/4) * YStep + 3 + y0;
0000a4  17e1              ASRS     r1,r4,#31
0000a6  eb047191          ADD      r1,r4,r1,LSR #30
0000aa  1089              ASRS     r1,r1,#2
0000ac  fb01f109          MUL      r1,r1,r9
0000b0  1cc9              ADDS     r1,r1,#3
0000b2  4439              ADD      r1,r1,r7
0000b4  9106              STR      r1,[sp,#0x18]
;;;286        char c = _acText[i];
0000b6  4845              LDR      r0,|L4.460|
0000b8  5d00              LDRB     r0,[r0,r4]
0000ba  9005              STR      r0,[sp,#0x14]
;;;287        int Id = c ? c : 1;
0000bc  9805              LDR      r0,[sp,#0x14]
0000be  b108              CBZ      r0,|L4.196|
0000c0  9805              LDR      r0,[sp,#0x14]
0000c2  e000              B        |L4.198|
                  |L4.196|
0000c4  2001              MOVS     r0,#1
                  |L4.198|
0000c6  9004              STR      r0,[sp,#0x10]
;;;288        char ac[2] = {0};
0000c8  2000              MOVS     r0,#0
0000ca  9003              STR      r0,[sp,#0xc]
;;;289        char *s= ac;
0000cc  a803              ADD      r0,sp,#0xc
0000ce  9002              STR      r0,[sp,#8]
;;;290        ac[0] = c;
0000d0  9805              LDR      r0,[sp,#0x14]
0000d2  f88d000c          STRB     r0,[sp,#0xc]
;;;291        ahButton[i] = BUTTON_Create( XPos, YPos, XStep - 5, YStep - 5, Id, BUTTON_CF_SHOW );
0000d6  2102              MOVS     r1,#2
0000d8  9804              LDR      r0,[sp,#0x10]
0000da  f1a90305          SUB      r3,r9,#5
0000de  f1a80205          SUB      r2,r8,#5
0000e2  e9cd0100          STRD     r0,r1,[sp,#0]
0000e6  e9dd1006          LDRD     r1,r0,[sp,#0x18]
0000ea  f7fffffe          BL       BUTTON_Create
0000ee  a90a              ADD      r1,sp,#0x28
0000f0  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;292        BUTTON_SetText(ahButton[i], s);
0000f4  f9310014          LDRSH    r0,[r1,r4,LSL #1]
0000f8  9902              LDR      r1,[sp,#8]
0000fa  f7fffffe          BL       BUTTON_SetText
;;;293        BUTTON_EnableMemdev(ahButton[i]);
0000fe  a90a              ADD      r1,sp,#0x28
000100  f9310014          LDRSH    r0,[r1,r4,LSL #1]
000104  f7fffffe          BL       WM_EnableMemdev
000108  1c64              ADDS     r4,r4,#1              ;283
                  |L4.266|
00010a  4830              LDR      r0,|L4.460|
00010c  5d00              LDRB     r0,[r0,r4]            ;283
00010e  2800              CMP      r0,#0                 ;283
000110  d1bd              BNE      |L4.142|
;;;294      }
;;;295      hButtonESC = BUTTON_Create( 3, 3, 80, 25, GUI_ID_CANCEL, BUTTON_CF_SHOW );
000112  2002              MOVS     r0,#2
000114  9000              STR      r0,[sp,#0]
000116  2319              MOVS     r3,#0x19
000118  2250              MOVS     r2,#0x50
00011a  2103              MOVS     r1,#3
00011c  9001              STR      r0,[sp,#4]
00011e  4608              MOV      r0,r1
000120  f7fffffe          BL       BUTTON_Create
000124  4682              MOV      r10,r0
;;;296      BUTTON_SetText(hButtonESC, "ESC");
000126  a12a              ADR      r1,|L4.464|
000128  4650              MOV      r0,r10
00012a  f7fffffe          BL       BUTTON_SetText
;;;297      hEdit = EDIT_Create( 5, y0 - 30, XSize - 10, 25, ' ', 80, 0 );
00012e  2000              MOVS     r0,#0
000130  2150              MOVS     r1,#0x50
000132  2220              MOVS     r2,#0x20
000134  e9cd2100          STRD     r2,r1,[sp,#0]
000138  9002              STR      r0,[sp,#8]
00013a  f1a6020a          SUB      r2,r6,#0xa
00013e  f1a7011e          SUB      r1,r7,#0x1e
000142  2319              MOVS     r3,#0x19
000144  2005              MOVS     r0,#5
000146  f7fffffe          BL       EDIT_Create
00014a  4683              MOV      r11,r0
;;;298      EDIT_SetFont(hEdit, &GUI_Font8x16);
00014c  4921              LDR      r1,|L4.468|
00014e  4658              MOV      r0,r11
000150  f7fffffe          BL       EDIT_SetFont
;;;299      /* Handle Keyboard until ESC or ENTER is pressed */
;;;300      do {
000154  bf00              NOP      
                  |L4.342|
;;;301        Key = GUIDEMO_WaitKey();
000156  f7fffffe          BL       GUIDEMO_WaitKey
00015a  4605              MOV      r5,r0
;;;302        switch (Key) {
00015c  0028              MOVS     r0,r5
00015e  d002              BEQ      |L4.358|
000160  2802              CMP      r0,#2
000162  d102              BNE      |L4.362|
000164  e000              B        |L4.360|
                  |L4.358|
;;;303        case 0:
;;;304        case GUI_ID_CANCEL:
000166  bf00              NOP      
                  |L4.360|
;;;305         break;
000168  e004              B        |L4.372|
                  |L4.362|
;;;306        default:
;;;307          EDIT_AddKey(hEdit, Key);
00016a  4629              MOV      r1,r5
00016c  4658              MOV      r0,r11
00016e  f7fffffe          BL       EDIT_AddKey
000172  bf00              NOP                            ;302
                  |L4.372|
000174  bf00              NOP                            ;305
;;;308        }
;;;309      } while ((Key != 'N') && (Key!=GUI_ID_CANCEL) && (Key!=0));
000176  2d4e              CMP      r5,#0x4e
000178  d003              BEQ      |L4.386|
00017a  2d02              CMP      r5,#2
00017c  d001              BEQ      |L4.386|
00017e  2d00              CMP      r5,#0
000180  d1e9              BNE      |L4.342|
                  |L4.386|
;;;310      /* Cleanup */
;;;311      for (i=0; i< countof(ahButton); i++) {
000182  2400              MOVS     r4,#0
000184  e005              B        |L4.402|
                  |L4.390|
;;;312        BUTTON_Delete(ahButton[i]);
000186  a90a              ADD      r1,sp,#0x28
000188  f9310014          LDRSH    r0,[r1,r4,LSL #1]
00018c  f7fffffe          BL       WM_DeleteWindow
000190  1c64              ADDS     r4,r4,#1              ;311
                  |L4.402|
000192  2c10              CMP      r4,#0x10              ;311
000194  d3f7              BCC      |L4.390|
;;;313      }
;;;314      BUTTON_Delete(hButtonESC);
000196  4650              MOV      r0,r10
000198  f7fffffe          BL       WM_DeleteWindow
;;;315      EDIT_Delete(hEdit);
00019c  4658              MOV      r0,r11
00019e  f7fffffe          BL       WM_DeleteWindow
;;;316      return Key;
0001a2  4628              MOV      r0,r5
;;;317    }
0001a4  b013              ADD      sp,sp,#0x4c
0001a6  e8bd8ff0          POP      {r4-r11,pc}
;;;318    
                          ENDP

0001aa  0000              DCW      0x0000
                  |L4.428|
                          DCD      GUI_FontComic18B_ASCII
                  |L4.432|
0001b0  656d5769          DCB      "emWin",0
0001b4  6e00    
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L4.440|
0001b8  546f7563          DCB      "Touch screen demo",0
0001bc  68207363
0001c0  7265656e
0001c4  2064656d
0001c8  6f00    
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L4.460|
                          DCD      _acText
                  |L4.464|
0001d0  45534300          DCB      "ESC",0
                  |L4.468|
                          DCD      GUI_Font8x16

                          AREA ||i._Log2Phys||, CODE, READONLY, ALIGN=1

                  _Log2Phys PROC
;;;37     
;;;38     static int _Log2Phys(int l, I32 l0, I32 l1, I32 p0, I32 p1) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  9d04              LDR      r5,[sp,#0x10]
;;;39       return p0 + ((p1 - p0) * (l - l0)) / (l1 - l0);
000006  1ae8              SUBS     r0,r5,r3
000008  1a66              SUBS     r6,r4,r1
00000a  4370              MULS     r0,r6,r0
00000c  1a56              SUBS     r6,r2,r1
00000e  fb90f0f6          SDIV     r0,r0,r6
000012  4418              ADD      r0,r0,r3
;;;40     }
000014  bd70              POP      {r4-r6,pc}
;;;41     
                          ENDP


                          AREA ||i._TestCalibration||, CODE, READONLY, ALIGN=2

                  _TestCalibration PROC
;;;140    
;;;141    static void _TestCalibration(void) {
000000  b53e              PUSH     {r1-r5,lr}
;;;142      int IdleCnt=0;
000002  2400              MOVS     r4,#0
;;;143      BUTTON_Handle hButton;
;;;144      GUI_SetBkColor(GUI_RED);  
000004  20ff              MOVS     r0,#0xff
000006  f7fffffe          BL       GUI_SetBkColor
;;;145      GUI_SetColor(GUI_WHITE);  
00000a  f06f407f          MVN      r0,#0xff000000
00000e  f7fffffe          BL       GUI_SetColor
;;;146      GUI_Clear();
000012  f7fffffe          BL       GUI_Clear
;;;147      hButton =  BUTTON_Create( 225, 15, 80, 40, 1, BUTTON_CF_SHOW );
000016  2002              MOVS     r0,#2
000018  2101              MOVS     r1,#1
00001a  2328              MOVS     r3,#0x28
00001c  2250              MOVS     r2,#0x50
00001e  e9cd1000          STRD     r1,r0,[sp,#0]
000022  210f              MOVS     r1,#0xf
000024  20e1              MOVS     r0,#0xe1
000026  f7fffffe          BL       BUTTON_Create
00002a  4605              MOV      r5,r0
;;;148      BUTTON_SetText (hButton, "ABORT");
00002c  a120              ADR      r1,|L6.176|
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       BUTTON_SetText
;;;149      BUTTON_SetFont (hButton, &GUI_FontComic18B_ASCII);
000034  4920              LDR      r1,|L6.184|
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       BUTTON_SetFont
;;;150      while ((IdleCnt<50) && (GUI_GetKey()==0)) {
00003c  e02d              B        |L6.154|
                  |L6.62|
;;;151        static GUI_PID_STATE StateLast;
;;;152        GUI_PID_STATE State;
;;;153        GUI_TOUCH_GetState(&State);
00003e  4668              MOV      r0,sp
000040  f7fffffe          BL       GUI_TOUCH_GetState
;;;154        if ((StateLast.Pressed != State.Pressed) && (State.Pressed == 0)) {
000044  481d              LDR      r0,|L6.188|
000046  7a00              LDRB     r0,[r0,#8]  ; StateLast
000048  f89d1008          LDRB     r1,[sp,#8]
00004c  4288              CMP      r0,r1
00004e  d004              BEQ      |L6.90|
000050  f89d0008          LDRB     r0,[sp,#8]
000054  b908              CBNZ     r0,|L6.90|
;;;155          GUI_Clear();
000056  f7fffffe          BL       GUI_Clear
                  |L6.90|
;;;156        }
;;;157        if ((StateLast.x != State.x) || ((StateLast.y != State.y))) {
00005a  4818              LDR      r0,|L6.188|
00005c  6800              LDR      r0,[r0,#0]  ; StateLast
00005e  9900              LDR      r1,[sp,#0]
000060  4288              CMP      r0,r1
000062  d104              BNE      |L6.110|
000064  4815              LDR      r0,|L6.188|
000066  6840              LDR      r0,[r0,#4]  ; StateLast
000068  9901              LDR      r1,[sp,#4]
00006a  4288              CMP      r0,r1
00006c  d00b              BEQ      |L6.134|
                  |L6.110|
;;;158          if (State.Pressed) {
00006e  f89d0008          LDRB     r0,[sp,#8]
000072  b120              CBZ      r0,|L6.126|
;;;159            GUI_FillCircle(State.x, State.y, 5);
000074  2205              MOVS     r2,#5
000076  e9dd0100          LDRD     r0,r1,[sp,#0]
00007a  f7fffffe          BL       GUI_FillCircle
                  |L6.126|
;;;160          }
;;;161          StateLast = State;
00007e  480f              LDR      r0,|L6.188|
000080  e89d000e          LDM      sp,{r1-r3}
000084  c00e              STM      r0!,{r1-r3}
                  |L6.134|
;;;162        }
;;;163        if (State.Pressed) {
000086  f89d0008          LDRB     r0,[sp,#8]
00008a  b108              CBZ      r0,|L6.144|
;;;164          IdleCnt =0;
00008c  2400              MOVS     r4,#0
00008e  e000              B        |L6.146|
                  |L6.144|
;;;165        } else {
;;;166          IdleCnt++;
000090  1c64              ADDS     r4,r4,#1
                  |L6.146|
;;;167        }
;;;168        GUI_Delay (100);
000092  2064              MOVS     r0,#0x64
000094  f7fffffe          BL       GUI_Delay
;;;169      }
000098  bf00              NOP      
                  |L6.154|
00009a  2c32              CMP      r4,#0x32              ;150
00009c  da03              BGE      |L6.166|
00009e  f7fffffe          BL       GUI_GetKey
0000a2  2800              CMP      r0,#0                 ;150
0000a4  d0cb              BEQ      |L6.62|
                  |L6.166|
;;;170      EDIT_Delete(hButton);
0000a6  4628              MOV      r0,r5
0000a8  f7fffffe          BL       WM_DeleteWindow
;;;171    }
0000ac  bd3e              POP      {r1-r5,pc}
;;;172    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L6.176|
0000b0  41424f52          DCB      "ABORT",0
0000b4  5400    
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L6.184|
                          DCD      GUI_FontComic18B_ASCII
                  |L6.188|
                          DCD      StateLast

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  StateLast
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x0000000f
                          DCD      0x000000e0
                          DCD      0x00000130
                          DCD      0x0000000f

                          AREA ||.data||, DATA, ALIGN=0

                  _acText
000000  3738392f          DCB      0x37,0x38,0x39,0x2f
000004  3435362a          DCB      0x34,0x35,0x36,0x2a
000008  3132332d          DCB      0x31,0x32,0x33,0x2d
00000c  302c2b3d          DCB      0x30,0x2c,0x2b,0x3d
000010  00                DCB      0x00
