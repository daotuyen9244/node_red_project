; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gui_getbitmappixelindex.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\gui_getbitmappixelindex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\GUI_GetBitmapPixelIndex.c]
                          THUMB

                          AREA ||i.GUI_GetBitmapPixelIndex||, CODE, READONLY, ALIGN=1

                  GUI_GetBitmapPixelIndex PROC
;;;31     */
;;;32     int GUI_GetBitmapPixelIndex(const GUI_BITMAP GUI_UNI_PTR * pBMP, unsigned x, unsigned y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;33       unsigned Off, Value;
;;;34       switch (pBMP->BitsPerPixel) {
000006  88dd              LDRH     r5,[r3,#6]
000008  2d04              CMP      r5,#4
00000a  d029              BEQ      |L1.96|
00000c  dc04              BGT      |L1.24|
00000e  2d01              CMP      r5,#1
000010  d007              BEQ      |L1.34|
000012  2d02              CMP      r5,#2
000014  d145              BNE      |L1.162|
000016  e013              B        |L1.64|
                  |L1.24|
000018  2d08              CMP      r5,#8
00001a  d030              BEQ      |L1.126|
00001c  2d10              CMP      r5,#0x10
00001e  d140              BNE      |L1.162|
000020  e033              B        |L1.138|
                  |L1.34|
;;;35       case 1:
;;;36         Off = (x >> 3) + (y * pBMP->BytesPerLine);
000022  889d              LDRH     r5,[r3,#4]
000024  4355              MULS     r5,r2,r5
000026  eb0501d4          ADD      r1,r5,r4,LSR #3
;;;37         Value = *(pBMP->pData + Off);
00002a  689d              LDR      r5,[r3,#8]
00002c  5c68              LDRB     r0,[r5,r1]
;;;38         Value = Value >> (7 - (x & 0x7)) & 0x1;
00002e  f0040507          AND      r5,r4,#7
000032  f1c50507          RSB      r5,r5,#7
000036  fa20f505          LSR      r5,r0,r5
00003a  f0050001          AND      r0,r5,#1
;;;39         break;
00003e  e032              B        |L1.166|
                  |L1.64|
;;;40       case 2:
;;;41         Off = (x >> 2) + (y * pBMP->BytesPerLine);
000040  889d              LDRH     r5,[r3,#4]
000042  4355              MULS     r5,r2,r5
000044  eb050194          ADD      r1,r5,r4,LSR #2
;;;42         Value = *(pBMP->pData + Off);
000048  689d              LDR      r5,[r3,#8]
00004a  5c68              LDRB     r0,[r5,r1]
;;;43         Value = Value >> (6 - ((x << 1) & 0x6)) & 0x3;
00004c  2506              MOVS     r5,#6
00004e  ea050544          AND      r5,r5,r4,LSL #1
000052  f1c50506          RSB      r5,r5,#6
000056  fa20f505          LSR      r5,r0,r5
00005a  f0050003          AND      r0,r5,#3
;;;44         break;
00005e  e022              B        |L1.166|
                  |L1.96|
;;;45       case 4:
;;;46         Off = (x >> 1) + (y * pBMP->BytesPerLine);
000060  889d              LDRH     r5,[r3,#4]
000062  4355              MULS     r5,r2,r5
000064  eb050154          ADD      r1,r5,r4,LSR #1
;;;47         Value = *(pBMP->pData + Off);
000068  689d              LDR      r5,[r3,#8]
00006a  5c68              LDRB     r0,[r5,r1]
;;;48         Value = (x & 1) ? (Value & 0xF) : (Value >> 4);
00006c  f0140f01          TST      r4,#1
000070  d002              BEQ      |L1.120|
000072  f000050f          AND      r5,r0,#0xf
000076  e000              B        |L1.122|
                  |L1.120|
000078  0905              LSRS     r5,r0,#4
                  |L1.122|
00007a  4628              MOV      r0,r5
;;;49         break;
00007c  e013              B        |L1.166|
                  |L1.126|
;;;50       case 8:
;;;51         Off = x + y * pBMP->BytesPerLine;
00007e  889d              LDRH     r5,[r3,#4]
000080  fb024105          MLA      r1,r2,r5,r4
;;;52         Value = *(pBMP->pData + Off);
000084  689d              LDR      r5,[r3,#8]
000086  5c68              LDRB     r0,[r5,r1]
;;;53         break;
000088  e00d              B        |L1.166|
                  |L1.138|
;;;54       case 16:
;;;55         Off = (x << 1) + y * pBMP->BytesPerLine;
00008a  889d              LDRH     r5,[r3,#4]
00008c  4355              MULS     r5,r2,r5
00008e  eb050144          ADD      r1,r5,r4,LSL #1
;;;56         Value = *(pBMP->pData + Off) | (*(pBMP->pData + Off + 1) << 8);
000092  689d              LDR      r5,[r3,#8]
000094  5c6d              LDRB     r5,[r5,r1]
000096  689e              LDR      r6,[r3,#8]
000098  440e              ADD      r6,r6,r1
00009a  7876              LDRB     r6,[r6,#1]
00009c  ea452006          ORR      r0,r5,r6,LSL #8
;;;57         break;
0000a0  e001              B        |L1.166|
                  |L1.162|
;;;58       default:
;;;59         Value = 0;
0000a2  2000              MOVS     r0,#0
0000a4  bf00              NOP                            ;34
                  |L1.166|
0000a6  bf00              NOP                            ;39
;;;60       }
;;;61       return Value;
;;;62     }
0000a8  bd70              POP      {r4-r6,pc}
;;;63     
                          ENDP

