; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guidev_writeex.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guidev_writeex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\MemDev\GUIDEV_WriteEx.c]
                          THUMB

                          AREA ||i.GUI_MEMDEV_WriteEx||, CODE, READONLY, ALIGN=2

                  GUI_MEMDEV_WriteEx PROC
;;;261    */
;;;262    void GUI_MEMDEV_WriteEx(GUI_MEMDEV_Handle hMem, int xMag, int yMag, int Alpha) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;263      GUI_MEMDEV_WriteExAt(hMem, GUI_POS_AUTO, GUI_POS_AUTO, xMag, yMag, Alpha);
00000c  4623              MOV      r3,r4
00000e  4a04              LDR      r2,|L1.32|
000010  4611              MOV      r1,r2
000012  4638              MOV      r0,r7
000014  e9cd5600          STRD     r5,r6,[sp,#0]
000018  f7fffffe          BL       GUI_MEMDEV_WriteExAt
;;;264    }
00001c  e8bd81fc          POP      {r2-r8,pc}
;;;265    
                          ENDP

                  |L1.32|
                          DCD      0xfffff001

                          AREA ||i.GUI_MEMDEV_WriteExAt||, CODE, READONLY, ALIGN=2

                  GUI_MEMDEV_WriteExAt PROC
;;;239    */
;;;240    void GUI_MEMDEV_WriteExAt(GUI_MEMDEV_Handle hMem, int x, int y, int xMag, int yMag, int Alpha) {
000000  e92d47ff          PUSH     {r0-r10,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dd9a0c          LDRD     r9,r10,[sp,#0x30]
;;;241      if (hMem) {
000010  b324              CBZ      r4,|L2.92|
;;;242        GUI_MEMDEV* pDevData;
;;;243        GUI_RECT ClipRectPrev;
;;;244        GUI_LOCK();
000012  f7fffffe          BL       GUI_Lock
;;;245        pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       GUI_ALLOC_h2p
00001c  4606              MOV      r6,r0
;;;246        if (x == GUI_POS_AUTO) {
00001e  f64070ff          MOV      r0,#0xfff
000022  1940              ADDS     r0,r0,r5
000024  d103              BNE      |L2.46|
;;;247          x = pDevData->x0;
000026  f9b65000          LDRSH    r5,[r6,#0]
;;;248          y = pDevData->y0;
00002a  f9b67002          LDRSH    r7,[r6,#2]
                  |L2.46|
;;;249        }
;;;250        ClipRectPrev = GUI_Context.ClipRect;
00002e  490c              LDR      r1,|L2.96|
000030  e9d10102          LDRD     r0,r1,[r1,#8]
000034  e9cd0102          STRD     r0,r1,[sp,#8]
;;;251        LCD_SetClipRectMax();
000038  f7fffffe          BL       LCD_SetClipRectMax
;;;252        _WriteExToActiveAt(hMem, x, y, xMag, yMag, Alpha);
00003c  4643              MOV      r3,r8
00003e  463a              MOV      r2,r7
000040  4629              MOV      r1,r5
000042  4620              MOV      r0,r4
000044  e9cd9a00          STRD     r9,r10,[sp,#0]
000048  f7fffffe          BL       _WriteExToActiveAt
;;;253        GUI_Context.ClipRect = ClipRectPrev;
00004c  4804              LDR      r0,|L2.96|
00004e  e9dd1202          LDRD     r1,r2,[sp,#8]
000052  e9c01202          STRD     r1,r2,[r0,#8]
;;;254        GUI_UNLOCK();
000056  f7fffffe          BL       GUI_Unlock
;;;255      }
00005a  bf00              NOP      
                  |L2.92|
;;;256    }
00005c  e8bd87ff          POP      {r0-r10,pc}
;;;257    
                          ENDP

                  |L2.96|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmapEx||, CODE, READONLY, ALIGN=2

                  _DrawBitmapEx PROC
;;;149    */
;;;150    static void _DrawBitmapEx(int x0, int y0, int xOff, int yOff, int xSize, int ySize, int xMag, int yMag,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;151                              int Alpha, int BmpSizeX, int BmpSizeY, int bpp, int BytesPerLine, const U8* pData) {
000004  b089              SUB      sp,sp,#0x24
000006  4683              MOV      r11,r0
000008  4688              MOV      r8,r1
00000a  4699              MOV      r9,r3
00000c  e9dda618          LDRD     r10,r6,[sp,#0x60]
;;;152      int y, yi, yMin, yMax, yEnd, yPrev;
;;;153      yMin = GUI_Context.ClipRect.y0;
000010  4838              LDR      r0,|L3.244|
000012  f9b0000a          LDRSH    r0,[r0,#0xa]
000016  9008              STR      r0,[sp,#0x20]
;;;154      yMax = GUI_Context.ClipRect.y1;
000018  4836              LDR      r0,|L3.244|
00001a  f9b0000e          LDRSH    r0,[r0,#0xe]
00001e  9007              STR      r0,[sp,#0x1c]
;;;155      if (xMag < 0) {
000020  f1ba0f00          CMP      r10,#0
000024  da0d              BGE      |L3.66|
;;;156        x0 -= (BmpSizeX - (xOff << 1) - xSize) * xMag / 1000;
000026  990b              LDR      r1,[sp,#0x2c]
000028  981b              LDR      r0,[sp,#0x6c]
00002a  eba00141          SUB      r1,r0,r1,LSL #1
00002e  9816              LDR      r0,[sp,#0x58]
000030  1a08              SUBS     r0,r1,r0
000032  fb00f00a          MUL      r0,r0,r10
000036  f44f717a          MOV      r1,#0x3e8
00003a  fb90f0f1          SDIV     r0,r0,r1
00003e  ebab0b00          SUB      r11,r11,r0
                  |L3.66|
;;;157      }
;;;158      if (yMag < 0) {
000042  2e00              CMP      r6,#0
000044  da08              BGE      |L3.88|
;;;159        y0 -= (BmpSizeY - 1) * yMag / 1000;
000046  981c              LDR      r0,[sp,#0x70]
000048  1e40              SUBS     r0,r0,#1
00004a  4370              MULS     r0,r6,r0
00004c  f44f717a          MOV      r1,#0x3e8
000050  fb90f0f1          SDIV     r0,r0,r1
000054  eba80800          SUB      r8,r8,r0
                  |L3.88|
;;;160      }
;;;161      yEnd  = y0 + GUI__DivideRound32(((I32)(yOff) * yMag), 1000);
000058  fb09f006          MUL      r0,r9,r6
00005c  f44f717a          MOV      r1,#0x3e8
000060  f7fffffe          BL       GUI__DivideRound32
000064  eb000708          ADD      r7,r0,r8
;;;162      yPrev = yEnd + 1;
000068  1c78              ADDS     r0,r7,#1
00006a  9006              STR      r0,[sp,#0x18]
;;;163      for (yi = yOff; yi < (yOff + ySize); yi++) {
00006c  464d              MOV      r5,r9
00006e  e039              B        |L3.228|
                  |L3.112|
;;;164        y = yEnd;
000070  463c              MOV      r4,r7
;;;165        yEnd = y0 + GUI__DivideRound32(((I32)(yi + 1) * yMag), 1000);
000072  1c69              ADDS     r1,r5,#1
000074  fb01f006          MUL      r0,r1,r6
000078  f44f717a          MOV      r1,#0x3e8
00007c  f7fffffe          BL       GUI__DivideRound32
000080  eb000708          ADD      r7,r0,r8
;;;166        if (y != yPrev) {
000084  9806              LDR      r0,[sp,#0x18]
000086  4284              CMP      r4,r0
000088  d02b              BEQ      |L3.226|
;;;167          yPrev = y;
00008a  9406              STR      r4,[sp,#0x18]
;;;168          do {
00008c  bf00              NOP      
                  |L3.142|
;;;169            if ((y >= yMin) && (y <= yMax)) {
00008e  9808              LDR      r0,[sp,#0x20]
000090  4284              CMP      r4,r0
000092  db13              BLT      |L3.188|
000094  9807              LDR      r0,[sp,#0x1c]
000096  4284              CMP      r4,r0
000098  dc10              BGT      |L3.188|
;;;170              _DrawBitmapLineEx(x0, y, xOff, yi, xSize, xMag, Alpha, bpp, BytesPerLine, pData);
00009a  e9dd311d          LDRD     r3,r1,[sp,#0x74]
00009e  9a1a              LDR      r2,[sp,#0x68]
0000a0  981f              LDR      r0,[sp,#0x7c]
0000a2  e9cd2302          STRD     r2,r3,[sp,#8]
0000a6  e9cd1004          STRD     r1,r0,[sp,#0x10]
0000aa  9816              LDR      r0,[sp,#0x58]
0000ac  462b              MOV      r3,r5
0000ae  e9cd0a00          STRD     r0,r10,[sp,#0]
0000b2  4621              MOV      r1,r4
0000b4  4658              MOV      r0,r11
0000b6  9a0b              LDR      r2,[sp,#0x2c]
0000b8  f7fffffe          BL       _DrawBitmapLineEx
                  |L3.188|
;;;171            }
;;;172          } while ((yMag < 0) ? (--y > yEnd) : (++y < yEnd));
0000bc  2e00              CMP      r6,#0
0000be  da07              BGE      |L3.208|
0000c0  1e60              SUBS     r0,r4,#1
0000c2  4604              MOV      r4,r0
0000c4  42b8              CMP      r0,r7
0000c6  dd01              BLE      |L3.204|
0000c8  2001              MOVS     r0,#1
0000ca  e008              B        |L3.222|
                  |L3.204|
0000cc  2000              MOVS     r0,#0
0000ce  e006              B        |L3.222|
                  |L3.208|
0000d0  1c60              ADDS     r0,r4,#1
0000d2  4604              MOV      r4,r0
0000d4  42b8              CMP      r0,r7
0000d6  da01              BGE      |L3.220|
0000d8  2001              MOVS     r0,#1
0000da  e000              B        |L3.222|
                  |L3.220|
0000dc  2000              MOVS     r0,#0
                  |L3.222|
0000de  2800              CMP      r0,#0
0000e0  d1d5              BNE      |L3.142|
                  |L3.226|
0000e2  1c6d              ADDS     r5,r5,#1              ;163
                  |L3.228|
0000e4  9817              LDR      r0,[sp,#0x5c]         ;163
0000e6  4448              ADD      r0,r0,r9              ;163
0000e8  42a8              CMP      r0,r5                 ;163
0000ea  dcc1              BGT      |L3.112|
;;;173        }
;;;174      }
;;;175    }
0000ec  b00d              ADD      sp,sp,#0x34
0000ee  e8bd8ff0          POP      {r4-r11,pc}
;;;176    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L3.244|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmapLineEx||, CODE, READONLY, ALIGN=2

                  _DrawBitmapLineEx PROC
;;;85     */
;;;86     static void _DrawBitmapLineEx(int x0, int y0, int xOff, int yOff, int xSize, int xMag, int Alpha,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;87                                   int bpp, int BytesPerLine, const U8* pData) {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  4691              MOV      r9,r2
00000a  f8ddb054          LDR      r11,[sp,#0x54]
;;;88       int x, xi, xAct, xStart, xMagAbs, xiMag, xMin, xMax, Cached;
;;;89       LCD_PIXELINDEX Index = 0, IndexPrev = 0;
00000e  2000              MOVS     r0,#0
000010  9002              STR      r0,[sp,#8]
000012  9001              STR      r0,[sp,#4]
;;;90       /* Use clipping rect */
;;;91       xMin = GUI_Context.ClipRect.x0 - x0;
000014  4852              LDR      r0,|L4.352|
000016  f9b00008          LDRSH    r0,[r0,#8]  ; GUI_Context
00001a  1b07              SUBS     r7,r0,r4
;;;92       xMax = GUI_Context.ClipRect.x1 - x0;
00001c  4850              LDR      r0,|L4.352|
00001e  f9b0000c          LDRSH    r0,[r0,#0xc]
000022  1b00              SUBS     r0,r0,r4
000024  9004              STR      r0,[sp,#0x10]
;;;93       /* Init some values */
;;;94       xMagAbs =  (xMag > 0) ? xMag : -xMag;
000026  f1bb0f00          CMP      r11,#0
00002a  dd01              BLE      |L4.48|
00002c  4658              MOV      r0,r11
00002e  e001              B        |L4.52|
                  |L4.48|
000030  f1cb0000          RSB      r0,r11,#0
                  |L4.52|
000034  9005              STR      r0,[sp,#0x14]
;;;95       x       =  (xOff * xMagAbs) / 1000;
000036  9805              LDR      r0,[sp,#0x14]
000038  fb09f000          MUL      r0,r9,r0
00003c  f44f717a          MOV      r1,#0x3e8
000040  fb90f5f1          SDIV     r5,r0,r1
;;;96       xiMag   =  (xOff * xMagAbs) % 1000;
000044  9805              LDR      r0,[sp,#0x14]
000046  fb09f000          MUL      r0,r9,r0
00004a  fb90f2f1          SDIV     r2,r0,r1
00004e  fb010812          MLS      r8,r1,r2,r0
;;;97       xStart  = -1;
000052  f04f36ff          MOV      r6,#0xffffffff
;;;98       Cached  =  0;
000056  2000              MOVS     r0,#0
000058  9003              STR      r0,[sp,#0xc]
;;;99       for (xi = 0; xi < xSize; xi++) {
00005a  4682              MOV      r10,r0
00005c  e057              B        |L4.270|
                  |L4.94|
;;;100        xiMag += xMagAbs;
00005e  9805              LDR      r0,[sp,#0x14]
000060  4480              ADD      r8,r8,r0
;;;101        if (xiMag >= 1000) {  
000062  f5b87f7a          CMP      r8,#0x3e8
000066  db50              BLT      |L4.266|
;;;102          if (x <= xMax) {
000068  9804              LDR      r0,[sp,#0x10]
00006a  4285              CMP      r5,r0
00006c  dc4a              BGT      |L4.260|
;;;103            xAct  = (xMag > 0) ? xi : xSize - xi - 1;
00006e  f1bb0f00          CMP      r11,#0
000072  dd01              BLE      |L4.120|
000074  4650              MOV      r0,r10
000076  e003              B        |L4.128|
                  |L4.120|
000078  9814              LDR      r0,[sp,#0x50]
00007a  eba0000a          SUB      r0,r0,r10
00007e  1e40              SUBS     r0,r0,#1
                  |L4.128|
000080  9006              STR      r0,[sp,#0x18]
;;;104            Index = _GetPixelIndex(pData, xOff + xAct, yOff, bpp, BytesPerLine);
000082  9818              LDR      r0,[sp,#0x60]
000084  9000              STR      r0,[sp,#0]
000086  9806              LDR      r0,[sp,#0x18]
000088  eb090100          ADD      r1,r9,r0
00008c  9b17              LDR      r3,[sp,#0x5c]
00008e  9a0a              LDR      r2,[sp,#0x28]
000090  9819              LDR      r0,[sp,#0x64]
000092  f7fffffe          BL       _GetPixelIndex
000096  b280              UXTH     r0,r0
000098  9002              STR      r0,[sp,#8]
;;;105            if ((Index != IndexPrev) || (xStart == -1)) {
00009a  e9dd1001          LDRD     r1,r0,[sp,#4]
00009e  4288              CMP      r0,r1
0000a0  d101              BNE      |L4.166|
0000a2  1c70              ADDS     r0,r6,#1
0000a4  d126              BNE      |L4.244|
                  |L4.166|
;;;106              if ((xStart != -1) && (x > xMin)) {
0000a6  1c70              ADDS     r0,r6,#1
0000a8  d01f              BEQ      |L4.234|
0000aa  42bd              CMP      r5,r7
0000ac  dd1d              BLE      |L4.234|
;;;107                /* Clear cache */
;;;108                if (xStart < xMin) {
0000ae  42be              CMP      r6,r7
0000b0  da00              BGE      |L4.180|
;;;109                  xStart = xMin;
0000b2  463e              MOV      r6,r7
                  |L4.180|
;;;110                }
;;;111                LCD_SetColorIndex(IndexPrev);
0000b4  9801              LDR      r0,[sp,#4]
0000b6  f7fffffe          BL       LCD_SetColorIndex
;;;112                if (Alpha == 256 || !GUI_Context.hDevData) {
0000ba  9816              LDR      r0,[sp,#0x58]
0000bc  f5b07f80          CMP      r0,#0x100
0000c0  d003              BEQ      |L4.202|
0000c2  4827              LDR      r0,|L4.352|
0000c4  f8b00050          LDRH     r0,[r0,#0x50]  ; GUI_Context
0000c8  b940              CBNZ     r0,|L4.220|
                  |L4.202|
;;;113                  LCDDEV_L0_DrawHLine(x0 + xStart, y0, x0 + x - 1);
0000ca  1961              ADDS     r1,r4,r5
0000cc  1e4a              SUBS     r2,r1,#1
0000ce  19a0              ADDS     r0,r4,r6
0000d0  4923              LDR      r1,|L4.352|
0000d2  6cc9              LDR      r1,[r1,#0x4c]  ; GUI_Context
0000d4  690b              LDR      r3,[r1,#0x10]
0000d6  9908              LDR      r1,[sp,#0x20]
0000d8  4798              BLX      r3
0000da  e006              B        |L4.234|
                  |L4.220|
;;;114                } else {
;;;115                  _DrawHLineAlpha(x0 + xStart, y0, x0 + x - 1, Alpha);
0000dc  1961              ADDS     r1,r4,r5
0000de  1e4a              SUBS     r2,r1,#1
0000e0  19a0              ADDS     r0,r4,r6
0000e2  9b16              LDR      r3,[sp,#0x58]
0000e4  9908              LDR      r1,[sp,#0x20]
0000e6  f7fffffe          BL       _DrawHLineAlpha
                  |L4.234|
;;;116                }
;;;117              }
;;;118              IndexPrev = Index;
0000ea  9802              LDR      r0,[sp,#8]
0000ec  9001              STR      r0,[sp,#4]
;;;119              xStart    = x;
0000ee  462e              MOV      r6,r5
;;;120              Cached    = 1;
0000f0  2001              MOVS     r0,#1
0000f2  9003              STR      r0,[sp,#0xc]
                  |L4.244|
;;;121            }
;;;122            do {
0000f4  bf00              NOP      
                  |L4.246|
;;;123              x++;
0000f6  1c6d              ADDS     r5,r5,#1
;;;124              xiMag -= 1000;
0000f8  f5a8787a          SUB      r8,r8,#0x3e8
;;;125            } while (xiMag >= 1000);
0000fc  f5b87f7a          CMP      r8,#0x3e8
000100  daf9              BGE      |L4.246|
000102  e002              B        |L4.266|
                  |L4.260|
;;;126          } else {
;;;127            x = xMax + 1;
000104  9804              LDR      r0,[sp,#0x10]
000106  1c45              ADDS     r5,r0,#1
;;;128            break;
000108  e004              B        |L4.276|
                  |L4.266|
00010a  f10a0a01          ADD      r10,r10,#1            ;99
                  |L4.270|
00010e  9814              LDR      r0,[sp,#0x50]         ;99
000110  4582              CMP      r10,r0                ;99
000112  dba4              BLT      |L4.94|
                  |L4.276|
000114  bf00              NOP      
;;;129          }
;;;130        }
;;;131      }
;;;132      if (Cached && (x > xMin)) {
000116  9803              LDR      r0,[sp,#0xc]
000118  b1f8              CBZ      r0,|L4.346|
00011a  42bd              CMP      r5,r7
00011c  dd1d              BLE      |L4.346|
;;;133        /* Clear cache */
;;;134        if (xStart < xMin) {
00011e  42be              CMP      r6,r7
000120  da00              BGE      |L4.292|
;;;135          xStart = xMin;
000122  463e              MOV      r6,r7
                  |L4.292|
;;;136        }
;;;137        LCD_SetColorIndex(Index);
000124  9802              LDR      r0,[sp,#8]
000126  f7fffffe          BL       LCD_SetColorIndex
;;;138        if (Alpha == 256 || !GUI_Context.hDevData) {
00012a  9816              LDR      r0,[sp,#0x58]
00012c  f5b07f80          CMP      r0,#0x100
000130  d003              BEQ      |L4.314|
000132  480b              LDR      r0,|L4.352|
000134  f8b00050          LDRH     r0,[r0,#0x50]  ; GUI_Context
000138  b940              CBNZ     r0,|L4.332|
                  |L4.314|
;;;139          LCDDEV_L0_DrawHLine(x0 + xStart, y0, x0 + x - 1);
00013a  1961              ADDS     r1,r4,r5
00013c  1e4a              SUBS     r2,r1,#1
00013e  19a0              ADDS     r0,r4,r6
000140  4907              LDR      r1,|L4.352|
000142  6cc9              LDR      r1,[r1,#0x4c]  ; GUI_Context
000144  690b              LDR      r3,[r1,#0x10]
000146  9908              LDR      r1,[sp,#0x20]
000148  4798              BLX      r3
00014a  e006              B        |L4.346|
                  |L4.332|
;;;140        } else {
;;;141          _DrawHLineAlpha(x0 + xStart, y0, x0 + x - 1, Alpha);
00014c  1961              ADDS     r1,r4,r5
00014e  1e4a              SUBS     r2,r1,#1
000150  19a0              ADDS     r0,r4,r6
000152  9b16              LDR      r3,[sp,#0x58]
000154  9908              LDR      r1,[sp,#0x20]
000156  f7fffffe          BL       _DrawHLineAlpha
                  |L4.346|
;;;142        }
;;;143      }
;;;144    }
00015a  b00b              ADD      sp,sp,#0x2c
00015c  e8bd8ff0          POP      {r4-r11,pc}
;;;145    
                          ENDP

                  |L4.352|
                          DCD      GUI_Context

                          AREA ||i._DrawHLineAlpha||, CODE, READONLY, ALIGN=2

                  _DrawHLineAlpha PROC
;;;53     */
;;;54     static void _DrawHLineAlpha(int x0, int y, int x1, int Intens) {
000000  e92d4ffe          PUSH     {r1-r11,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;55       GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00000c  492d              LDR      r1,|L5.196|
00000e  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000012  f7fffffe          BL       GUI_ALLOC_h2p
000016  4682              MOV      r10,r0
;;;56       GUI_USAGE_h hUsage = pDev->hUsage; 
000018  f9bab018          LDRSH    r11,[r10,#0x18]
;;;57       LCD_COLOR Color1, Color2;
;;;58       int Len = x1 - x0 + 1;
00001c  eba80004          SUB      r0,r8,r4
000020  1c45              ADDS     r5,r0,#1
;;;59       if (hUsage) {
000022  f1bb0f00          CMP      r11,#0
000026  d00d              BEQ      |L5.68|
;;;60         GUI_USAGE_AddHLine(GUI_USAGE_H2P(hUsage), x0, y, Len);
000028  4658              MOV      r0,r11
00002a  f7fffffe          BL       GUI_ALLOC_h2p
00002e  9000              STR      r0,[sp,#0]
000030  4658              MOV      r0,r11
000032  f7fffffe          BL       GUI_ALLOC_h2p
000036  6880              LDR      r0,[r0,#8]
000038  462b              MOV      r3,r5
00003a  463a              MOV      r2,r7
00003c  4621              MOV      r1,r4
00003e  6846              LDR      r6,[r0,#4]
000040  9800              LDR      r0,[sp,#0]
000042  47b0              BLX      r6
                  |L5.68|
;;;61       }
;;;62       Color1 = LCD_Index2Color(LCD_COLORINDEX);
000044  491f              LDR      r1,|L5.196|
000046  8848              LDRH     r0,[r1,#2]  ; GUI_Context
000048  f7fffffe          BL       LCD_Index2Color
00004c  9002              STR      r0,[sp,#8]
;;;63       if (pDev->BitsPerPixel == 8) {
00004e  f8da0010          LDR      r0,[r10,#0x10]
000052  2808              CMP      r0,#8
000054  d119              BNE      |L5.138|
;;;64         U8* pData;
;;;65         pData  = (U8*) GUI_MEMDEV__XY2PTR(x0, y);
000056  4639              MOV      r1,r7
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       GUI_MEMDEV__XY2PTR
00005e  4606              MOV      r6,r0
;;;66         while (Len--) {
000060  e00e              B        |L5.128|
                  |L5.98|
;;;67           Color2 = LCD_Index2Color(*(pData));
000062  7830              LDRB     r0,[r6,#0]
000064  f7fffffe          BL       LCD_Index2Color
000068  9001              STR      r0,[sp,#4]
;;;68           Color2 = LCD_MixColors256(Color1, Color2, Intens);
00006a  464a              MOV      r2,r9
00006c  e9dd1001          LDRD     r1,r0,[sp,#4]
000070  f7fffffe          BL       LCD_MixColors256
000074  9001              STR      r0,[sp,#4]
;;;69           *(pData++) = LCD_Color2Index(Color2);
000076  9801              LDR      r0,[sp,#4]
000078  f7fffffe          BL       LCD_Color2Index
00007c  f8060b01          STRB     r0,[r6],#1
                  |L5.128|
000080  0028              MOVS     r0,r5                 ;66
000082  f1a50501          SUB      r5,r5,#1              ;66
000086  d1ec              BNE      |L5.98|
;;;70         }
;;;71       } else {
000088  e019              B        |L5.190|
                  |L5.138|
;;;72         U16* pData;
;;;73         pData  = (U16*) GUI_MEMDEV__XY2PTR(x0, y);
00008a  4639              MOV      r1,r7
00008c  4620              MOV      r0,r4
00008e  f7fffffe          BL       GUI_MEMDEV__XY2PTR
000092  4606              MOV      r6,r0
;;;74         while (Len--) {
000094  e00e              B        |L5.180|
                  |L5.150|
;;;75           Color2 = LCD_Index2Color(*(pData));
000096  8830              LDRH     r0,[r6,#0]
000098  f7fffffe          BL       LCD_Index2Color
00009c  9001              STR      r0,[sp,#4]
;;;76           Color2 = LCD_MixColors256(Color1, Color2, Intens);
00009e  464a              MOV      r2,r9
0000a0  e9dd1001          LDRD     r1,r0,[sp,#4]
0000a4  f7fffffe          BL       LCD_MixColors256
0000a8  9001              STR      r0,[sp,#4]
;;;77           *(pData++) = LCD_Color2Index(Color2);
0000aa  9801              LDR      r0,[sp,#4]
0000ac  f7fffffe          BL       LCD_Color2Index
0000b0  f8260b02          STRH     r0,[r6],#2
                  |L5.180|
0000b4  0028              MOVS     r0,r5                 ;74
0000b6  f1a50501          SUB      r5,r5,#1              ;74
0000ba  d1ec              BNE      |L5.150|
;;;78         }
;;;79       }
0000bc  bf00              NOP      
                  |L5.190|
;;;80     }
0000be  e8bd8ffe          POP      {r1-r11,pc}
;;;81     
                          ENDP

0000c2  0000              DCW      0x0000
                  |L5.196|
                          DCD      GUI_Context

                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=1

                  _GetPixelIndex PROC
;;;41     */
;;;42     static int _GetPixelIndex(const U8* pData, int x, int y, int bpp, int BytesPerLine) {
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
000004  9d03              LDR      r5,[sp,#0xc]
;;;43       if (bpp == 8) {
000006  2b08              CMP      r3,#8
000008  d103              BNE      |L6.18|
;;;44         return (int)(*(pData + (y * BytesPerLine) + x));
00000a  fb024005          MLA      r0,r2,r5,r4
00000e  5c40              LDRB     r0,[r0,r1]
                  |L6.16|
;;;45       } else {
;;;46         return (int)(*(const U16*)(pData + (y * BytesPerLine) + (x << 1)));
;;;47       }
;;;48     }
000010  bd30              POP      {r4,r5,pc}
                  |L6.18|
000012  fb024005          MLA      r0,r2,r5,r4           ;46
000016  f8300011          LDRH     r0,[r0,r1,LSL #1]     ;46
00001a  e7f9              B        |L6.16|
;;;49     
                          ENDP


                          AREA ||i._WriteExToActiveAt||, CODE, READONLY, ALIGN=1

                  _WriteExToActiveAt PROC
;;;180    */
;;;181    static void _WriteExToActiveAt(GUI_MEMDEV_Handle hMem, int x, int y, int xMag, int yMag, int Alpha) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b093              SUB      sp,sp,#0x4c
000006  4616              MOV      r6,r2
000008  469a              MOV      r10,r3
00000a  9f20              LDR      r7,[sp,#0x80]
;;;182      GUI_MEMDEV* pDev;
;;;183      GUI_USAGE_h hUsage; 
;;;184      GUI_USAGE*  pUsage;
;;;185      U8* pData;
;;;186      int yAct, yPrev, ySize, yi;
;;;187      int BytesPerLine, bpp;
;;;188      pDev         = GUI_MEMDEV_H2P(hMem);
00000c  9813              LDR      r0,[sp,#0x4c]
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4604              MOV      r4,r0
;;;189      hUsage       = pDev->hUsage;
000014  f9b40018          LDRSH    r0,[r4,#0x18]
000018  9012              STR      r0,[sp,#0x48]
;;;190      ySize        = pDev->YSize;
00001a  f9b40006          LDRSH    r0,[r4,#6]
00001e  900e              STR      r0,[sp,#0x38]
;;;191      BytesPerLine = pDev->BytesPerLine;
000020  68e0              LDR      r0,[r4,#0xc]
000022  900d              STR      r0,[sp,#0x34]
;;;192      pData        = (U8*)(pDev + 1);
000024  f104002c          ADD      r0,r4,#0x2c
000028  9011              STR      r0,[sp,#0x44]
;;;193      bpp          = pDev->BitsPerPixel;
00002a  6920              LDR      r0,[r4,#0x10]
00002c  900c              STR      r0,[sp,#0x30]
;;;194      yPrev = y + 1;
00002e  1c70              ADDS     r0,r6,#1
000030  900f              STR      r0,[sp,#0x3c]
;;;195      if (hUsage) {
000032  9812              LDR      r0,[sp,#0x48]
000034  2800              CMP      r0,#0
000036  d07d              BEQ      |L7.308|
;;;196        int xOff, xSize, y0;
;;;197        pUsage = GUI_USAGE_H2P(hUsage);
000038  9812              LDR      r0,[sp,#0x48]
00003a  f7fffffe          BL       GUI_ALLOC_h2p
00003e  4680              MOV      r8,r0
;;;198        for (yi = 0; yi < ySize; yi++) {
000040  2500              MOVS     r5,#0
000042  e076              B        |L7.306|
                  |L7.68|
;;;199          yAct = y + GUI__DivideRound32(((I32)(yi) * yMag), 1000);
000044  fb05f007          MUL      r0,r5,r7
000048  f44f717a          MOV      r1,#0x3e8
00004c  f7fffffe          BL       GUI__DivideRound32
000050  4430              ADD      r0,r0,r6
000052  9010              STR      r0,[sp,#0x40]
;;;200          if (yAct != yPrev) {
000054  e9dd100f          LDRD     r1,r0,[sp,#0x3c]
000058  4288              CMP      r0,r1
00005a  d069              BEQ      |L7.304|
;;;201            xOff  = 0;
00005c  2000              MOVS     r0,#0
00005e  900b              STR      r0,[sp,#0x2c]
;;;202            xSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
000060  f8d80008          LDR      r0,[r8,#8]
000064  462a              MOV      r2,r5
000066  a90b              ADD      r1,sp,#0x2c
000068  6943              LDR      r3,[r0,#0x14]
00006a  4640              MOV      r0,r8
00006c  4798              BLX      r3
00006e  4681              MOV      r9,r0
;;;203            if (xSize == pDev->XSize) {
000070  f9b40004          LDRSH    r0,[r4,#4]
000074  4548              CMP      r0,r9
000076  d131              BNE      |L7.220|
;;;204              /* If the entire line is affected, calculate the number of entire lines */
;;;205              y0 = yi;
000078  46ab              MOV      r11,r5
;;;206              while (GUI_USAGE_GetNextDirty(pUsage, &xOff, yi + 1) == xSize) {
00007a  e000              B        |L7.126|
                  |L7.124|
;;;207                yi++;
00007c  1c6d              ADDS     r5,r5,#1
                  |L7.126|
00007e  f8d80008          LDR      r0,[r8,#8]            ;206
000082  1c6a              ADDS     r2,r5,#1              ;206
000084  a90b              ADD      r1,sp,#0x2c           ;206
000086  6943              LDR      r3,[r0,#0x14]         ;206
000088  4640              MOV      r0,r8                 ;206
00008a  4798              BLX      r3                    ;206
00008c  4548              CMP      r0,r9                 ;206
00008e  d0f5              BEQ      |L7.124|
;;;208              }
;;;209              _DrawBitmapEx(x, y, 0, y0, pDev->XSize, yi - y0 + 1, xMag, yMag, Alpha,
000090  f9b43006          LDRSH    r3,[r4,#6]
000094  e9dd210c          LDRD     r2,r1,[sp,#0x30]
000098  9811              LDR      r0,[sp,#0x44]
00009a  e9cd3206          STRD     r3,r2,[sp,#0x18]
00009e  e9cd1008          STRD     r1,r0,[sp,#0x20]
0000a2  f9b40004          LDRSH    r0,[r4,#4]
0000a6  9921              LDR      r1,[sp,#0x84]
0000a8  e9cda702          STRD     r10,r7,[sp,#8]
0000ac  e9cd1004          STRD     r1,r0,[sp,#0x10]
0000b0  eba5000b          SUB      r0,r5,r11
0000b4  1c40              ADDS     r0,r0,#1
0000b6  f9b41004          LDRSH    r1,[r4,#4]
0000ba  465b              MOV      r3,r11
0000bc  2200              MOVS     r2,#0
0000be  e9cd1000          STRD     r1,r0,[sp,#0]
0000c2  4631              MOV      r1,r6
0000c4  9814              LDR      r0,[sp,#0x50]
0000c6  f7fffffe          BL       _DrawBitmapEx
;;;210                            pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;211              yPrev = y + GUI__DivideRound32(((I32)(yi) * yMag), 1000);
0000ca  fb05f007          MUL      r0,r5,r7
0000ce  f44f717a          MOV      r1,#0x3e8
0000d2  f7fffffe          BL       GUI__DivideRound32
0000d6  4430              ADD      r0,r0,r6
0000d8  900f              STR      r0,[sp,#0x3c]
0000da  e029              B        |L7.304|
                  |L7.220|
;;;212            } else {
;;;213              /* Draw the partial line which needs to be drawn */
;;;214              while (xSize) {
0000dc  e023              B        |L7.294|
                  |L7.222|
;;;215                _DrawBitmapEx(x, y, xOff, yi, xSize, 1, xMag, yMag, Alpha,
0000de  f9b43006          LDRSH    r3,[r4,#6]
0000e2  e9dd120c          LDRD     r1,r2,[sp,#0x30]
0000e6  9811              LDR      r0,[sp,#0x44]
0000e8  e9cd3106          STRD     r3,r1,[sp,#0x18]
0000ec  e9cd2008          STRD     r2,r0,[sp,#0x20]
0000f0  f9b41004          LDRSH    r1,[r4,#4]
0000f4  9821              LDR      r0,[sp,#0x84]
0000f6  e9cda702          STRD     r10,r7,[sp,#8]
0000fa  e9cd0104          STRD     r0,r1,[sp,#0x10]
0000fe  2001              MOVS     r0,#1
000100  462b              MOV      r3,r5
000102  e9cd9000          STRD     r9,r0,[sp,#0]
000106  4631              MOV      r1,r6
000108  9a0b              LDR      r2,[sp,#0x2c]
00010a  9814              LDR      r0,[sp,#0x50]
00010c  f7fffffe          BL       _DrawBitmapEx
;;;216                              pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;217                xOff += xSize;
000110  980b              LDR      r0,[sp,#0x2c]
000112  4448              ADD      r0,r0,r9
000114  900b              STR      r0,[sp,#0x2c]
;;;218                xSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
000116  f8d80008          LDR      r0,[r8,#8]
00011a  462a              MOV      r2,r5
00011c  a90b              ADD      r1,sp,#0x2c
00011e  6943              LDR      r3,[r0,#0x14]
000120  4640              MOV      r0,r8
000122  4798              BLX      r3
000124  4681              MOV      r9,r0
                  |L7.294|
000126  f1b90f00          CMP      r9,#0                 ;214
00012a  d1d8              BNE      |L7.222|
;;;219              }
;;;220              yPrev = yAct;
00012c  9810              LDR      r0,[sp,#0x40]
00012e  900f              STR      r0,[sp,#0x3c]
                  |L7.304|
000130  1c6d              ADDS     r5,r5,#1              ;198
                  |L7.306|
000132  e000              B        |L7.310|
                  |L7.308|
000134  e003              B        |L7.318|
                  |L7.310|
000136  980e              LDR      r0,[sp,#0x38]         ;198
000138  4285              CMP      r5,r0                 ;198
00013a  db83              BLT      |L7.68|
;;;221            }
;;;222          }
;;;223        }
;;;224      } else {
00013c  e01a              B        |L7.372|
                  |L7.318|
;;;225        _DrawBitmapEx(x, y, 0, 0, pDev->XSize, ySize, xMag, yMag, Alpha,
00013e  f9b43006          LDRSH    r3,[r4,#6]
000142  9a11              LDR      r2,[sp,#0x44]
000144  e9dd010c          LDRD     r0,r1,[sp,#0x30]
000148  e9cd3006          STRD     r3,r0,[sp,#0x18]
00014c  e9cd1208          STRD     r1,r2,[sp,#0x20]
000150  f9b40004          LDRSH    r0,[r4,#4]
000154  9921              LDR      r1,[sp,#0x84]
000156  e9cda702          STRD     r10,r7,[sp,#8]
00015a  e9cd1004          STRD     r1,r0,[sp,#0x10]
00015e  f9b41004          LDRSH    r1,[r4,#4]
000162  980e              LDR      r0,[sp,#0x38]
000164  2300              MOVS     r3,#0
000166  461a              MOV      r2,r3
000168  e9cd1000          STRD     r1,r0,[sp,#0]
00016c  4631              MOV      r1,r6
00016e  9814              LDR      r0,[sp,#0x50]
000170  f7fffffe          BL       _DrawBitmapEx
                  |L7.372|
;;;226                      pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;227      }
;;;228    }
000174  b017              ADD      sp,sp,#0x5c
000176  e8bd8ff0          POP      {r4-r11,pc}
;;;229    
                          ENDP

