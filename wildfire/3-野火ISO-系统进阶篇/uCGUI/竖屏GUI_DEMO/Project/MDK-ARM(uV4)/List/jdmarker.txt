; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\jdmarker.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\jdmarker.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\JPEG\jdmarker.c]
                          THUMB

                          AREA ||i.examine_app0||, CODE, READONLY, ALIGN=1

                  examine_app0 PROC
;;;583    LOCAL(void)
;;;584    examine_app0 (j_decompress_ptr cinfo, JOCTET FAR * data,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;585    	      unsigned int datalen, INT32 remaining)
;;;586    /* Examine first few bytes from an APP0.
;;;587     * Take appropriate action if it is a JFIF marker.
;;;588     * datalen is # of bytes at data[], remaining is length of rest of marker data.
;;;589     */
;;;590    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;591      INT32 totallen = (INT32) datalen + remaining;
00000c  eb080609          ADD      r6,r8,r9
;;;592    
;;;593      if (datalen >= APP0_DATA_LEN &&
000010  f1b80f0e          CMP      r8,#0xe
000014  d37a              BCC      |L1.268|
;;;594          GETJOCTET(data[0]) == 0x4A &&
000016  7828              LDRB     r0,[r5,#0]
000018  284a              CMP      r0,#0x4a
00001a  d177              BNE      |L1.268|
;;;595          GETJOCTET(data[1]) == 0x46 &&
00001c  7868              LDRB     r0,[r5,#1]
00001e  2846              CMP      r0,#0x46
000020  d174              BNE      |L1.268|
;;;596          GETJOCTET(data[2]) == 0x49 &&
000022  78a8              LDRB     r0,[r5,#2]
000024  2849              CMP      r0,#0x49
000026  d171              BNE      |L1.268|
;;;597          GETJOCTET(data[3]) == 0x46 &&
000028  78e8              LDRB     r0,[r5,#3]
00002a  2846              CMP      r0,#0x46
00002c  d16e              BNE      |L1.268|
;;;598          GETJOCTET(data[4]) == 0) {
00002e  7928              LDRB     r0,[r5,#4]
000030  2800              CMP      r0,#0
000032  d16b              BNE      |L1.268|
;;;599        /* Found JFIF APP0 marker: save info */
;;;600        cinfo->saw_JFIF_marker = TRUE;
000034  2001              MOVS     r0,#1
000036  f504748c          ADD      r4,r4,#0x118
00003a  6020              STR      r0,[r4,#0]
;;;601        cinfo->JFIF_major_version = GETJOCTET(data[5]);
00003c  7968              LDRB     r0,[r5,#5]
00003e  7120              STRB     r0,[r4,#4]
;;;602        cinfo->JFIF_minor_version = GETJOCTET(data[6]);
000040  79a8              LDRB     r0,[r5,#6]
000042  7160              STRB     r0,[r4,#5]
;;;603        cinfo->density_unit = GETJOCTET(data[7]);
000044  79e8              LDRB     r0,[r5,#7]
000046  71a0              STRB     r0,[r4,#6]
;;;604        cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
000048  7a68              LDRB     r0,[r5,#9]
00004a  7a29              LDRB     r1,[r5,#8]
00004c  eb002001          ADD      r0,r0,r1,LSL #8
000050  8120              STRH     r0,[r4,#8]
;;;605        cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
000052  7ae8              LDRB     r0,[r5,#0xb]
000054  7aa9              LDRB     r1,[r5,#0xa]
000056  eb002001          ADD      r0,r0,r1,LSL #8
00005a  8160              STRH     r0,[r4,#0xa]
;;;606        /* Check version.
;;;607         * Major version must be 1, anything else signals an incompatible change.
;;;608         * (We used to treat this as an error, but now it's a nonfatal warning,
;;;609         * because some bozo at Hijaak couldn't read the spec.)
;;;610         * Minor version should be 0..2, but process anyway if newer.
;;;611         */
;;;612        if (cinfo->JFIF_major_version != 1)
00005c  7920              LDRB     r0,[r4,#4]
00005e  f5a4748c          SUB      r4,r4,#0x118
000062  2801              CMP      r0,#1
000064  d010              BEQ      |L1.136|
;;;613          WARNMS2(cinfo, JWRN_JFIF_MAJOR,
000066  2077              MOVS     r0,#0x77
000068  6821              LDR      r1,[r4,#0]
00006a  6148              STR      r0,[r1,#0x14]
00006c  f894011c          LDRB     r0,[r4,#0x11c]
000070  6821              LDR      r1,[r4,#0]
000072  6188              STR      r0,[r1,#0x18]
000074  f894111d          LDRB     r1,[r4,#0x11d]
000078  6820              LDR      r0,[r4,#0]
00007a  61c1              STR      r1,[r0,#0x1c]
00007c  6820              LDR      r0,[r4,#0]
00007e  f04f31ff          MOV      r1,#0xffffffff
000082  6842              LDR      r2,[r0,#4]
000084  4620              MOV      r0,r4
000086  4790              BLX      r2
                  |L1.136|
;;;614    	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
;;;615        /* Generate trace messages */
;;;616        TRACEMS5(cinfo, 1, JTRC_JFIF,
000088  bf00              NOP      
00008a  6820              LDR      r0,[r4,#0]
00008c  f1000718          ADD      r7,r0,#0x18
000090  f894011c          LDRB     r0,[r4,#0x11c]
000094  6038              STR      r0,[r7,#0]
000096  f894011d          LDRB     r0,[r4,#0x11d]
00009a  6078              STR      r0,[r7,#4]
00009c  f8b40120          LDRH     r0,[r4,#0x120]
0000a0  60b8              STR      r0,[r7,#8]
0000a2  f8b40122          LDRH     r0,[r4,#0x122]
0000a6  60f8              STR      r0,[r7,#0xc]
0000a8  f894011e          LDRB     r0,[r4,#0x11e]
0000ac  6138              STR      r0,[r7,#0x10]
0000ae  2057              MOVS     r0,#0x57
0000b0  6821              LDR      r1,[r4,#0]
0000b2  6148              STR      r0,[r1,#0x14]
0000b4  6820              LDR      r0,[r4,#0]
0000b6  2101              MOVS     r1,#1
0000b8  6842              LDR      r2,[r0,#4]
0000ba  4620              MOV      r0,r4
0000bc  4790              BLX      r2
0000be  bf00              NOP      
;;;617    	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
;;;618    	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
;;;619        /* Validate thumbnail dimensions and issue appropriate messages */
;;;620        if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
0000c0  7b28              LDRB     r0,[r5,#0xc]
0000c2  7b69              LDRB     r1,[r5,#0xd]
0000c4  4308              ORRS     r0,r0,r1
0000c6  d00d              BEQ      |L1.228|
;;;621          TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
0000c8  205a              MOVS     r0,#0x5a
0000ca  6821              LDR      r1,[r4,#0]
0000cc  6148              STR      r0,[r1,#0x14]
0000ce  7b28              LDRB     r0,[r5,#0xc]
0000d0  6821              LDR      r1,[r4,#0]
0000d2  6188              STR      r0,[r1,#0x18]
0000d4  7b69              LDRB     r1,[r5,#0xd]
0000d6  6820              LDR      r0,[r4,#0]
0000d8  61c1              STR      r1,[r0,#0x1c]
0000da  6820              LDR      r0,[r4,#0]
0000dc  2101              MOVS     r1,#1
0000de  6842              LDR      r2,[r0,#4]
0000e0  4620              MOV      r0,r4
0000e2  4790              BLX      r2
                  |L1.228|
;;;622    	       GETJOCTET(data[12]), GETJOCTET(data[13]));
;;;623        totallen -= APP0_DATA_LEN;
0000e4  3e0e              SUBS     r6,r6,#0xe
;;;624        if (totallen !=
0000e6  7b28              LDRB     r0,[r5,#0xc]
0000e8  7b69              LDRB     r1,[r5,#0xd]
0000ea  4348              MULS     r0,r1,r0
0000ec  eb000040          ADD      r0,r0,r0,LSL #1
0000f0  42b0              CMP      r0,r6
0000f2  d05f              BEQ      |L1.436|
;;;625    	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
;;;626          TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
0000f4  2058              MOVS     r0,#0x58
0000f6  6821              LDR      r1,[r4,#0]
0000f8  6148              STR      r0,[r1,#0x14]
0000fa  6820              LDR      r0,[r4,#0]
0000fc  6186              STR      r6,[r0,#0x18]
0000fe  6820              LDR      r0,[r4,#0]
000100  2101              MOVS     r1,#1
000102  6842              LDR      r2,[r0,#4]
000104  4620              MOV      r0,r4
000106  4790              BLX      r2
000108  e054              B        |L1.436|
00010a  e7ff              B        |L1.268|
                  |L1.268|
;;;627      } else if (datalen >= 6 &&
00010c  f1b80f06          CMP      r8,#6
000110  d346              BCC      |L1.416|
;;;628          GETJOCTET(data[0]) == 0x4A &&
000112  7828              LDRB     r0,[r5,#0]
000114  284a              CMP      r0,#0x4a
000116  d143              BNE      |L1.416|
;;;629          GETJOCTET(data[1]) == 0x46 &&
000118  7868              LDRB     r0,[r5,#1]
00011a  2846              CMP      r0,#0x46
00011c  d140              BNE      |L1.416|
;;;630          GETJOCTET(data[2]) == 0x58 &&
00011e  78a8              LDRB     r0,[r5,#2]
000120  2858              CMP      r0,#0x58
000122  d13d              BNE      |L1.416|
;;;631          GETJOCTET(data[3]) == 0x58 &&
000124  78e8              LDRB     r0,[r5,#3]
000126  2858              CMP      r0,#0x58
000128  d13a              BNE      |L1.416|
;;;632          GETJOCTET(data[4]) == 0) {
00012a  7928              LDRB     r0,[r5,#4]
00012c  bbb8              CBNZ     r0,|L1.414|
;;;633        /* Found JFIF "JFXX" extension APP0 marker */
;;;634        /* The library doesn't actually do anything with these,
;;;635         * but we try to produce a helpful trace message.
;;;636         */
;;;637        switch (GETJOCTET(data[5])) {
00012e  7968              LDRB     r0,[r5,#5]
000130  2810              CMP      r0,#0x10
000132  d004              BEQ      |L1.318|
000134  2811              CMP      r0,#0x11
000136  d00d              BEQ      |L1.340|
000138  2813              CMP      r0,#0x13
00013a  d121              BNE      |L1.384|
00013c  e015              B        |L1.362|
                  |L1.318|
;;;638        case 0x10:
;;;639          TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
00013e  206c              MOVS     r0,#0x6c
000140  6821              LDR      r1,[r4,#0]
000142  6148              STR      r0,[r1,#0x14]
000144  6820              LDR      r0,[r4,#0]
000146  6186              STR      r6,[r0,#0x18]
000148  6820              LDR      r0,[r4,#0]
00014a  2101              MOVS     r1,#1
00014c  6842              LDR      r2,[r0,#4]
00014e  4620              MOV      r0,r4
000150  4790              BLX      r2
;;;640          break;
000152  e023              B        |L1.412|
                  |L1.340|
;;;641        case 0x11:
;;;642          TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
000154  206d              MOVS     r0,#0x6d
000156  6821              LDR      r1,[r4,#0]
000158  6148              STR      r0,[r1,#0x14]
00015a  6820              LDR      r0,[r4,#0]
00015c  6186              STR      r6,[r0,#0x18]
00015e  6820              LDR      r0,[r4,#0]
000160  2101              MOVS     r1,#1
000162  6842              LDR      r2,[r0,#4]
000164  4620              MOV      r0,r4
000166  4790              BLX      r2
;;;643          break;
000168  e018              B        |L1.412|
                  |L1.362|
;;;644        case 0x13:
;;;645          TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
00016a  206e              MOVS     r0,#0x6e
00016c  6821              LDR      r1,[r4,#0]
00016e  6148              STR      r0,[r1,#0x14]
000170  6820              LDR      r0,[r4,#0]
000172  6186              STR      r6,[r0,#0x18]
000174  6820              LDR      r0,[r4,#0]
000176  2101              MOVS     r1,#1
000178  6842              LDR      r2,[r0,#4]
00017a  4620              MOV      r0,r4
00017c  4790              BLX      r2
;;;646          break;
00017e  e00d              B        |L1.412|
                  |L1.384|
;;;647        default:
;;;648          TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
000180  2059              MOVS     r0,#0x59
000182  6821              LDR      r1,[r4,#0]
000184  6148              STR      r0,[r1,#0x14]
000186  7968              LDRB     r0,[r5,#5]
000188  6821              LDR      r1,[r4,#0]
00018a  6188              STR      r0,[r1,#0x18]
00018c  6820              LDR      r0,[r4,#0]
00018e  61c6              STR      r6,[r0,#0x1c]
000190  6820              LDR      r0,[r4,#0]
000192  2101              MOVS     r1,#1
000194  6842              LDR      r2,[r0,#4]
000196  4620              MOV      r0,r4
000198  4790              BLX      r2
;;;649    	       GETJOCTET(data[5]), (int) totallen);
;;;650          break;
00019a  bf00              NOP      
                  |L1.412|
00019c  e00a              B        |L1.436|
                  |L1.414|
00019e  e7ff              B        |L1.416|
                  |L1.416|
;;;651        }
;;;652      } else {
;;;653        /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
;;;654        TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
0001a0  204d              MOVS     r0,#0x4d
0001a2  6821              LDR      r1,[r4,#0]
0001a4  6148              STR      r0,[r1,#0x14]
0001a6  6820              LDR      r0,[r4,#0]
0001a8  6186              STR      r6,[r0,#0x18]
0001aa  6820              LDR      r0,[r4,#0]
0001ac  2101              MOVS     r1,#1
0001ae  6842              LDR      r2,[r0,#4]
0001b0  4620              MOV      r0,r4
0001b2  4790              BLX      r2
                  |L1.436|
;;;655      }
;;;656    }
0001b4  e8bd87f0          POP      {r4-r10,pc}
;;;657    
                          ENDP


                          AREA ||i.examine_app14||, CODE, READONLY, ALIGN=1

                  examine_app14 PROC
;;;659    LOCAL(void)
;;;660    examine_app14 (j_decompress_ptr cinfo, JOCTET FAR * data,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;661    	       unsigned int datalen, INT32 remaining)
;;;662    /* Examine first few bytes from an APP14.
;;;663     * Take appropriate action if it is an Adobe marker.
;;;664     * datalen is # of bytes at data[], remaining is length of rest of marker data.
;;;665     */
;;;666    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;667      unsigned int version, flags0, flags1, transform;
;;;668    
;;;669      if (datalen >= APP14_DATA_LEN &&
00000a  2f0c              CMP      r7,#0xc
00000c  d337              BCC      |L2.126|
;;;670          GETJOCTET(data[0]) == 0x41 &&
00000e  7820              LDRB     r0,[r4,#0]
000010  2841              CMP      r0,#0x41
000012  d134              BNE      |L2.126|
;;;671          GETJOCTET(data[1]) == 0x64 &&
000014  7860              LDRB     r0,[r4,#1]
000016  2864              CMP      r0,#0x64
000018  d131              BNE      |L2.126|
;;;672          GETJOCTET(data[2]) == 0x6F &&
00001a  78a0              LDRB     r0,[r4,#2]
00001c  286f              CMP      r0,#0x6f
00001e  d12e              BNE      |L2.126|
;;;673          GETJOCTET(data[3]) == 0x62 &&
000020  78e0              LDRB     r0,[r4,#3]
000022  2862              CMP      r0,#0x62
000024  d12b              BNE      |L2.126|
;;;674          GETJOCTET(data[4]) == 0x65) {
000026  7920              LDRB     r0,[r4,#4]
000028  2865              CMP      r0,#0x65
00002a  d128              BNE      |L2.126|
;;;675        /* Found Adobe APP14 marker */
;;;676        version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
00002c  79a0              LDRB     r0,[r4,#6]
00002e  7961              LDRB     r1,[r4,#5]
000030  eb002901          ADD      r9,r0,r1,LSL #8
;;;677        flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
000034  7a20              LDRB     r0,[r4,#8]
000036  79e1              LDRB     r1,[r4,#7]
000038  eb002a01          ADD      r10,r0,r1,LSL #8
;;;678        flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
00003c  7aa0              LDRB     r0,[r4,#0xa]
00003e  7a61              LDRB     r1,[r4,#9]
000040  eb002b01          ADD      r11,r0,r1,LSL #8
;;;679        transform = GETJOCTET(data[11]);
000044  f894800b          LDRB     r8,[r4,#0xb]
;;;680        TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
000048  bf00              NOP      
00004a  6828              LDR      r0,[r5,#0]
00004c  f1000618          ADD      r6,r0,#0x18
000050  f8c69000          STR      r9,[r6,#0]
000054  f8c6a004          STR      r10,[r6,#4]
000058  f8c6b008          STR      r11,[r6,#8]
00005c  f8c6800c          STR      r8,[r6,#0xc]
000060  204c              MOVS     r0,#0x4c
000062  6829              LDR      r1,[r5,#0]
000064  6148              STR      r0,[r1,#0x14]
000066  6828              LDR      r0,[r5,#0]
000068  2101              MOVS     r1,#1
00006a  6842              LDR      r2,[r0,#4]
00006c  4628              MOV      r0,r5
00006e  4790              BLX      r2
000070  bf00              NOP      
;;;681        cinfo->saw_Adobe_marker = TRUE;
000072  2001              MOVS     r0,#1
000074  f8c50124          STR      r0,[r5,#0x124]
;;;682        cinfo->Adobe_transform = (UINT8) transform;
000078  f8858128          STRB     r8,[r5,#0x128]
00007c  e00b              B        |L2.150|
                  |L2.126|
;;;683      } else {
;;;684        /* Start of APP14 does not match "Adobe", or too short */
;;;685        TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
00007e  204e              MOVS     r0,#0x4e
000080  6829              LDR      r1,[r5,#0]
000082  6148              STR      r0,[r1,#0x14]
000084  9803              LDR      r0,[sp,#0xc]
000086  4438              ADD      r0,r0,r7
000088  6829              LDR      r1,[r5,#0]
00008a  6188              STR      r0,[r1,#0x18]
00008c  6828              LDR      r0,[r5,#0]
00008e  2101              MOVS     r1,#1
000090  6842              LDR      r2,[r0,#4]
000092  4628              MOV      r0,r5
000094  4790              BLX      r2
                  |L2.150|
;;;686      }
;;;687    }
000096  e8bd9fff          POP      {r0-r12,pc}
;;;688    
                          ENDP


                          AREA ||i.first_marker||, CODE, READONLY, ALIGN=1

                  first_marker PROC
;;;920    LOCAL(boolean)
;;;921    first_marker (j_decompress_ptr cinfo)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;922    /* Like next_marker, but used to obtain the initial SOI marker. */
;;;923    /* For this marker, we do not allow preceding garbage or fill; otherwise,
;;;924     * we might well scan an entire input file before realizing it ain't JPEG.
;;;925     * If an application wants to process non-JFIF files, it must seek to the
;;;926     * SOI before calling the JPEG library.
;;;927     */
;;;928    {
000004  4605              MOV      r5,r0
;;;929      int c, c2;
;;;930      INPUT_VARS(cinfo);
000006  69ac              LDR      r4,[r5,#0x18]
000008  6826              LDR      r6,[r4,#0]
00000a  6867              LDR      r7,[r4,#4]
;;;931    
;;;932      INPUT_BYTE(cinfo, c, return FALSE);
00000c  bf00              NOP      
00000e  b947              CBNZ     r7,|L3.34|
000010  4628              MOV      r0,r5
000012  68e1              LDR      r1,[r4,#0xc]
000014  4788              BLX      r1
000016  b910              CBNZ     r0,|L3.30|
000018  2000              MOVS     r0,#0
                  |L3.26|
;;;933      INPUT_BYTE(cinfo, c2, return FALSE);
;;;934      if (c != 0xFF || c2 != (int) M_SOI)
;;;935        ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
;;;936    
;;;937      cinfo->unread_marker = c2;
;;;938    
;;;939      INPUT_SYNC(cinfo);
;;;940      return TRUE;
;;;941    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L3.30|
00001e  6826              LDR      r6,[r4,#0]            ;932
000020  6867              LDR      r7,[r4,#4]            ;932
                  |L3.34|
000022  1e7f              SUBS     r7,r7,#1              ;932
000024  f8169b01          LDRB     r9,[r6],#1            ;932
000028  bf00              NOP                            ;932
00002a  bf00              NOP                            ;933
00002c  b93f              CBNZ     r7,|L3.62|
00002e  4628              MOV      r0,r5                 ;933
000030  68e1              LDR      r1,[r4,#0xc]          ;933
000032  4788              BLX      r1                    ;933
000034  b908              CBNZ     r0,|L3.58|
000036  2000              MOVS     r0,#0                 ;933
000038  e7ef              B        |L3.26|
                  |L3.58|
00003a  6826              LDR      r6,[r4,#0]            ;933
00003c  6867              LDR      r7,[r4,#4]            ;933
                  |L3.62|
00003e  1e7f              SUBS     r7,r7,#1              ;933
000040  f8168b01          LDRB     r8,[r6],#1            ;933
000044  bf00              NOP                            ;933
000046  f1b90fff          CMP      r9,#0xff              ;934
00004a  d102              BNE      |L3.82|
00004c  f1b80fd8          CMP      r8,#0xd8              ;934
000050  d00c              BEQ      |L3.108|
                  |L3.82|
000052  2035              MOVS     r0,#0x35              ;935
000054  6829              LDR      r1,[r5,#0]            ;935
000056  6148              STR      r0,[r1,#0x14]         ;935
000058  6828              LDR      r0,[r5,#0]            ;935
00005a  f8c09018          STR      r9,[r0,#0x18]         ;935
00005e  6828              LDR      r0,[r5,#0]            ;935
000060  f8c0801c          STR      r8,[r0,#0x1c]         ;935
000064  6828              LDR      r0,[r5,#0]            ;935
000066  6801              LDR      r1,[r0,#0]            ;935
000068  4628              MOV      r0,r5                 ;935
00006a  4788              BLX      r1                    ;935
                  |L3.108|
00006c  f8c581a0          STR      r8,[r5,#0x1a0]        ;937
000070  6026              STR      r6,[r4,#0]            ;939
000072  6067              STR      r7,[r4,#4]            ;939
000074  2001              MOVS     r0,#1                 ;940
000076  e7d0              B        |L3.26|
;;;942    
                          ENDP


                          AREA ||i.get_dht||, CODE, READONLY, ALIGN=1

                  get_dht PROC
;;;418    LOCAL(boolean)
;;;419    get_dht (j_decompress_ptr cinfo)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;420    /* Process a DHT marker */
;;;421    {
000004  b0c7              SUB      sp,sp,#0x11c
000006  4604              MOV      r4,r0
;;;422      INT32 length;
;;;423      UINT8 bits[17];
;;;424      UINT8 huffval[256];
;;;425      int i, index, count;
;;;426      JHUFF_TBL **htblptr;
;;;427      INPUT_VARS(cinfo);
000008  69a5              LDR      r5,[r4,#0x18]
00000a  682e              LDR      r6,[r5,#0]
00000c  686f              LDR      r7,[r5,#4]
;;;428    
;;;429      INPUT_2BYTES(cinfo, length, return FALSE);
00000e  bf00              NOP      
000010  b94f              CBNZ     r7,|L4.38|
000012  4620              MOV      r0,r4
000014  68e9              LDR      r1,[r5,#0xc]
000016  4788              BLX      r1
000018  b918              CBNZ     r0,|L4.34|
00001a  2000              MOVS     r0,#0
                  |L4.28|
;;;430      length -= 2;
;;;431      
;;;432      while (length > 16) {
;;;433        INPUT_BYTE(cinfo, index, return FALSE);
;;;434    
;;;435        TRACEMS1(cinfo, 1, JTRC_DHT, index);
;;;436          
;;;437        bits[0] = 0;
;;;438        count = 0;
;;;439        for (i = 1; i <= 16; i++) {
;;;440          INPUT_BYTE(cinfo, bits[i], return FALSE);
;;;441          count += bits[i];
;;;442        }
;;;443    
;;;444        length -= 1 + 16;
;;;445    
;;;446        TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
;;;447    	     bits[1], bits[2], bits[3], bits[4],
;;;448    	     bits[5], bits[6], bits[7], bits[8]);
;;;449        TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
;;;450    	     bits[9], bits[10], bits[11], bits[12],
;;;451    	     bits[13], bits[14], bits[15], bits[16]);
;;;452    
;;;453        /* Here we just do minimal validation of the counts to avoid walking
;;;454         * off the end of our table space.  jdhuff.c will check more carefully.
;;;455         */
;;;456        if (count > 256 || ((INT32) count) > length)
;;;457          ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
;;;458    
;;;459        for (i = 0; i < count; i++)
;;;460          INPUT_BYTE(cinfo, huffval[i], return FALSE);
;;;461    
;;;462        length -= count;
;;;463    
;;;464        if (index & 0x10) {		/* AC table definition */
;;;465          index -= 0x10;
;;;466          htblptr = &cinfo->ac_huff_tbl_ptrs[index];
;;;467        } else {			/* DC table definition */
;;;468          htblptr = &cinfo->dc_huff_tbl_ptrs[index];
;;;469        }
;;;470    
;;;471        if (index < 0 || index >= NUM_HUFF_TBLS)
;;;472          ERREXIT1(cinfo, JERR_DHT_INDEX, index);
;;;473    
;;;474        if (*htblptr == NULL)
;;;475          *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
;;;476      
;;;477        MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
;;;478        MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
;;;479      }
;;;480    
;;;481      if (length != 0)
;;;482        ERREXIT(cinfo, JERR_BAD_LENGTH);
;;;483    
;;;484      INPUT_SYNC(cinfo);
;;;485      return TRUE;
;;;486    }
00001c  b047              ADD      sp,sp,#0x11c
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.34|
000022  682e              LDR      r6,[r5,#0]            ;429
000024  686f              LDR      r7,[r5,#4]            ;429
                  |L4.38|
000026  1e7f              SUBS     r7,r7,#1              ;429
000028  f8161b01          LDRB     r1,[r6],#1            ;429
00002c  ea4f2801          LSL      r8,r1,#8              ;429
000030  b93f              CBNZ     r7,|L4.66|
000032  4620              MOV      r0,r4                 ;429
000034  68e9              LDR      r1,[r5,#0xc]          ;429
000036  4788              BLX      r1                    ;429
000038  b908              CBNZ     r0,|L4.62|
00003a  2000              MOVS     r0,#0                 ;429
00003c  e7ee              B        |L4.28|
                  |L4.62|
00003e  682e              LDR      r6,[r5,#0]            ;429
000040  686f              LDR      r7,[r5,#4]            ;429
                  |L4.66|
000042  1e7f              SUBS     r7,r7,#1              ;429
000044  f8161b01          LDRB     r1,[r6],#1            ;429
000048  4488              ADD      r8,r8,r1              ;429
00004a  bf00              NOP                            ;429
00004c  f1a80802          SUB      r8,r8,#2              ;430
000050  e0f8              B        |L4.580|
                  |L4.82|
000052  bf00              NOP                            ;433
000054  b93f              CBNZ     r7,|L4.102|
000056  4620              MOV      r0,r4                 ;433
000058  68e9              LDR      r1,[r5,#0xc]          ;433
00005a  4788              BLX      r1                    ;433
00005c  b908              CBNZ     r0,|L4.98|
00005e  2000              MOVS     r0,#0                 ;433
000060  e7dc              B        |L4.28|
                  |L4.98|
000062  682e              LDR      r6,[r5,#0]            ;433
000064  686f              LDR      r7,[r5,#4]            ;433
                  |L4.102|
000066  1e7f              SUBS     r7,r7,#1              ;433
000068  f8169b01          LDRB     r9,[r6],#1            ;433
00006c  bf00              NOP                            ;433
00006e  2050              MOVS     r0,#0x50              ;435
000070  6821              LDR      r1,[r4,#0]            ;435
000072  6148              STR      r0,[r1,#0x14]         ;435
000074  6820              LDR      r0,[r4,#0]            ;435
000076  f8c09018          STR      r9,[r0,#0x18]         ;435
00007a  6820              LDR      r0,[r4,#0]            ;435
00007c  2101              MOVS     r1,#1                 ;435
00007e  6842              LDR      r2,[r0,#4]            ;435
000080  4620              MOV      r0,r4                 ;435
000082  4790              BLX      r2                    ;435
000084  2000              MOVS     r0,#0                 ;437
000086  f88d0108          STRB     r0,[sp,#0x108]        ;437
00008a  9001              STR      r0,[sp,#4]            ;438
00008c  f04f0b01          MOV      r11,#1                ;439
000090  e018              B        |L4.196|
                  |L4.146|
000092  bf00              NOP                            ;440
000094  b93f              CBNZ     r7,|L4.166|
000096  4620              MOV      r0,r4                 ;440
000098  68e9              LDR      r1,[r5,#0xc]          ;440
00009a  4788              BLX      r1                    ;440
00009c  b908              CBNZ     r0,|L4.162|
00009e  2000              MOVS     r0,#0                 ;440
0000a0  e7bc              B        |L4.28|
                  |L4.162|
0000a2  682e              LDR      r6,[r5,#0]            ;440
0000a4  686f              LDR      r7,[r5,#4]            ;440
                  |L4.166|
0000a6  1e7f              SUBS     r7,r7,#1              ;440
0000a8  f8160b01          LDRB     r0,[r6],#1            ;440
0000ac  a942              ADD      r1,sp,#0x108          ;440
0000ae  f801000b          STRB     r0,[r1,r11]           ;440
0000b2  bf00              NOP                            ;440
0000b4  a842              ADD      r0,sp,#0x108          ;441
0000b6  f810100b          LDRB     r1,[r0,r11]           ;441
0000ba  9801              LDR      r0,[sp,#4]            ;441
0000bc  4408              ADD      r0,r0,r1              ;441
0000be  9001              STR      r0,[sp,#4]            ;441
0000c0  f10b0b01          ADD      r11,r11,#1            ;439
                  |L4.196|
0000c4  f1bb0f10          CMP      r11,#0x10             ;439
0000c8  dde3              BLE      |L4.146|
0000ca  f1a80811          SUB      r8,r8,#0x11           ;444
0000ce  bf00              NOP                            ;446
0000d0  6820              LDR      r0,[r4,#0]            ;446
0000d2  f1000a18          ADD      r10,r0,#0x18          ;446
0000d6  f89d0109          LDRB     r0,[sp,#0x109]        ;446
0000da  f8ca0000          STR      r0,[r10,#0]           ;446
0000de  f89d010a          LDRB     r0,[sp,#0x10a]        ;446
0000e2  f8ca0004          STR      r0,[r10,#4]           ;446
0000e6  f89d010b          LDRB     r0,[sp,#0x10b]        ;446
0000ea  f8ca0008          STR      r0,[r10,#8]           ;446
0000ee  f89d010c          LDRB     r0,[sp,#0x10c]        ;446
0000f2  f8ca000c          STR      r0,[r10,#0xc]         ;446
0000f6  f89d010d          LDRB     r0,[sp,#0x10d]        ;446
0000fa  f8ca0010          STR      r0,[r10,#0x10]        ;446
0000fe  f89d010e          LDRB     r0,[sp,#0x10e]        ;446
000102  f8ca0014          STR      r0,[r10,#0x14]        ;446
000106  f89d010f          LDRB     r0,[sp,#0x10f]        ;446
00010a  f8ca0018          STR      r0,[r10,#0x18]        ;446
00010e  f89d0110          LDRB     r0,[sp,#0x110]        ;446
000112  f8ca001c          STR      r0,[r10,#0x1c]        ;446
000116  2056              MOVS     r0,#0x56              ;446
000118  6821              LDR      r1,[r4,#0]            ;446
00011a  6148              STR      r0,[r1,#0x14]         ;446
00011c  6820              LDR      r0,[r4,#0]            ;446
00011e  2102              MOVS     r1,#2                 ;446
000120  6842              LDR      r2,[r0,#4]            ;446
000122  4620              MOV      r0,r4                 ;446
000124  4790              BLX      r2                    ;446
000126  bf00              NOP                            ;446
000128  bf00              NOP                            ;449
00012a  6820              LDR      r0,[r4,#0]            ;449
00012c  f1000a18          ADD      r10,r0,#0x18          ;449
000130  f89d0111          LDRB     r0,[sp,#0x111]        ;449
000134  f8ca0000          STR      r0,[r10,#0]           ;449
000138  f89d0112          LDRB     r0,[sp,#0x112]        ;449
00013c  f8ca0004          STR      r0,[r10,#4]           ;449
000140  f89d0113          LDRB     r0,[sp,#0x113]        ;449
000144  f8ca0008          STR      r0,[r10,#8]           ;449
000148  f89d0114          LDRB     r0,[sp,#0x114]        ;449
00014c  f8ca000c          STR      r0,[r10,#0xc]         ;449
000150  f89d0115          LDRB     r0,[sp,#0x115]        ;449
000154  f8ca0010          STR      r0,[r10,#0x10]        ;449
000158  f89d0116          LDRB     r0,[sp,#0x116]        ;449
00015c  f8ca0014          STR      r0,[r10,#0x14]        ;449
000160  f89d0117          LDRB     r0,[sp,#0x117]        ;449
000164  f8ca0018          STR      r0,[r10,#0x18]        ;449
000168  f89d0118          LDRB     r0,[sp,#0x118]        ;449
00016c  f8ca001c          STR      r0,[r10,#0x1c]        ;449
000170  2056              MOVS     r0,#0x56              ;449
000172  6821              LDR      r1,[r4,#0]            ;449
000174  6148              STR      r0,[r1,#0x14]         ;449
000176  6820              LDR      r0,[r4,#0]            ;449
000178  2102              MOVS     r1,#2                 ;449
00017a  6842              LDR      r2,[r0,#4]            ;449
00017c  4620              MOV      r0,r4                 ;449
00017e  4790              BLX      r2                    ;449
000180  bf00              NOP                            ;449
000182  9801              LDR      r0,[sp,#4]            ;456
000184  f5b07f80          CMP      r0,#0x100             ;456
000188  dc02              BGT      |L4.400|
00018a  9801              LDR      r0,[sp,#4]            ;456
00018c  4540              CMP      r0,r8                 ;456
00018e  dd06              BLE      |L4.414|
                  |L4.400|
000190  2008              MOVS     r0,#8                 ;457
000192  6821              LDR      r1,[r4,#0]            ;457
000194  6148              STR      r0,[r1,#0x14]         ;457
000196  6820              LDR      r0,[r4,#0]            ;457
000198  6801              LDR      r1,[r0,#0]            ;457
00019a  4620              MOV      r0,r4                 ;457
00019c  4788              BLX      r1                    ;457
                  |L4.414|
00019e  f04f0b00          MOV      r11,#0                ;459
0001a2  e012              B        |L4.458|
                  |L4.420|
0001a4  bf00              NOP                            ;460
0001a6  b93f              CBNZ     r7,|L4.440|
0001a8  4620              MOV      r0,r4                 ;460
0001aa  68e9              LDR      r1,[r5,#0xc]          ;460
0001ac  4788              BLX      r1                    ;460
0001ae  b908              CBNZ     r0,|L4.436|
0001b0  2000              MOVS     r0,#0                 ;460
0001b2  e733              B        |L4.28|
                  |L4.436|
0001b4  682e              LDR      r6,[r5,#0]            ;460
0001b6  686f              LDR      r7,[r5,#4]            ;460
                  |L4.440|
0001b8  1e7f              SUBS     r7,r7,#1              ;460
0001ba  f8160b01          LDRB     r0,[r6],#1            ;460
0001be  a902              ADD      r1,sp,#8              ;460
0001c0  f801000b          STRB     r0,[r1,r11]           ;460
0001c4  bf00              NOP                            ;460
0001c6  f10b0b01          ADD      r11,r11,#1            ;459
                  |L4.458|
0001ca  9801              LDR      r0,[sp,#4]            ;459
0001cc  4583              CMP      r11,r0                ;459
0001ce  dbe9              BLT      |L4.420|
0001d0  9801              LDR      r0,[sp,#4]            ;462
0001d2  eba80800          SUB      r8,r8,r0              ;462
0001d6  f0190f10          TST      r9,#0x10              ;464
0001da  d007              BEQ      |L4.492|
0001dc  f1a90910          SUB      r9,r9,#0x10           ;465
0001e0  f10400c4          ADD      r0,r4,#0xc4           ;466
0001e4  eb000089          ADD      r0,r0,r9,LSL #2       ;466
0001e8  9000              STR      r0,[sp,#0]            ;466
0001ea  e004              B        |L4.502|
                  |L4.492|
0001ec  f10400b4          ADD      r0,r4,#0xb4           ;468
0001f0  eb000089          ADD      r0,r0,r9,LSL #2       ;468
0001f4  9000              STR      r0,[sp,#0]            ;468
                  |L4.502|
0001f6  f1b90f00          CMP      r9,#0                 ;471
0001fa  db02              BLT      |L4.514|
0001fc  f1b90f04          CMP      r9,#4                 ;471
000200  db09              BLT      |L4.534|
                  |L4.514|
000202  201e              MOVS     r0,#0x1e              ;472
000204  6821              LDR      r1,[r4,#0]            ;472
000206  6148              STR      r0,[r1,#0x14]         ;472
000208  6820              LDR      r0,[r4,#0]            ;472
00020a  f8c09018          STR      r9,[r0,#0x18]         ;472
00020e  6820              LDR      r0,[r4,#0]            ;472
000210  6801              LDR      r1,[r0,#0]            ;472
000212  4620              MOV      r0,r4                 ;472
000214  4788              BLX      r1                    ;472
                  |L4.534|
000216  9800              LDR      r0,[sp,#0]            ;474
000218  6800              LDR      r0,[r0,#0]            ;474
00021a  b920              CBNZ     r0,|L4.550|
00021c  4620              MOV      r0,r4                 ;475
00021e  f7fffffe          BL       jpeg_alloc_huff_table
000222  9900              LDR      r1,[sp,#0]            ;475
000224  6008              STR      r0,[r1,#0]            ;475
                  |L4.550|
000226  9900              LDR      r1,[sp,#0]            ;477
000228  2211              MOVS     r2,#0x11              ;477
00022a  6808              LDR      r0,[r1,#0]            ;477
00022c  a942              ADD      r1,sp,#0x108          ;477
00022e  f7fffffe          BL       __aeabi_memcpy4
000232  9900              LDR      r1,[sp,#0]            ;478
000234  6809              LDR      r1,[r1,#0]            ;478
000236  f1010011          ADD      r0,r1,#0x11           ;478
00023a  f44f7280          MOV      r2,#0x100             ;478
00023e  a902              ADD      r1,sp,#8              ;478
000240  f7fffffe          BL       __aeabi_memcpy
                  |L4.580|
000244  f1b80f10          CMP      r8,#0x10              ;432
000248  f73faf03          BGT      |L4.82|
00024c  f1b80f00          CMP      r8,#0                 ;481
000250  d006              BEQ      |L4.608|
000252  200b              MOVS     r0,#0xb               ;482
000254  6821              LDR      r1,[r4,#0]            ;482
000256  6148              STR      r0,[r1,#0x14]         ;482
000258  6820              LDR      r0,[r4,#0]            ;482
00025a  6801              LDR      r1,[r0,#0]            ;482
00025c  4620              MOV      r0,r4                 ;482
00025e  4788              BLX      r1                    ;482
                  |L4.608|
000260  602e              STR      r6,[r5,#0]            ;484
000262  606f              STR      r7,[r5,#4]            ;484
000264  2001              MOVS     r0,#1                 ;485
000266  e6d9              B        |L4.28|
;;;487    
                          ENDP


                          AREA ||i.get_dqt||, CODE, READONLY, ALIGN=2

                  get_dqt PROC
;;;489    LOCAL(boolean)
;;;490    get_dqt (j_decompress_ptr cinfo)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;491    /* Process a DQT marker */
;;;492    {
000004  4605              MOV      r5,r0
;;;493      INT32 length;
;;;494      int n, i, prec;
;;;495      unsigned int tmp;
;;;496      JQUANT_TBL *quant_ptr;
;;;497      INPUT_VARS(cinfo);
000006  69ac              LDR      r4,[r5,#0x18]
000008  6827              LDR      r7,[r4,#0]
00000a  f8d48004          LDR      r8,[r4,#4]
;;;498    
;;;499      INPUT_2BYTES(cinfo, length, return FALSE);
00000e  bf00              NOP      
000010  f1b80f00          CMP      r8,#0
000014  d109              BNE      |L5.42|
000016  4628              MOV      r0,r5
000018  68e1              LDR      r1,[r4,#0xc]
00001a  4788              BLX      r1
00001c  b910              CBNZ     r0,|L5.36|
00001e  2000              MOVS     r0,#0
                  |L5.32|
;;;500      length -= 2;
;;;501    
;;;502      while (length > 0) {
;;;503        INPUT_BYTE(cinfo, n, return FALSE);
;;;504        prec = n >> 4;
;;;505        n &= 0x0F;
;;;506    
;;;507        TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
;;;508    
;;;509        if (n >= NUM_QUANT_TBLS)
;;;510          ERREXIT1(cinfo, JERR_DQT_INDEX, n);
;;;511          
;;;512        if (cinfo->quant_tbl_ptrs[n] == NULL)
;;;513          cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
;;;514        quant_ptr = cinfo->quant_tbl_ptrs[n];
;;;515    
;;;516        for (i = 0; i < DCTSIZE2; i++) {
;;;517          if (prec)
;;;518    	INPUT_2BYTES(cinfo, tmp, return FALSE);
;;;519          else
;;;520    	INPUT_BYTE(cinfo, tmp, return FALSE);
;;;521          /* We convert the zigzag-order table to natural array order. */
;;;522          quant_ptr->quantval[jpeg_natural_order[i]] = (UINT16) tmp;
;;;523        }
;;;524    
;;;525        if (cinfo->err->trace_level >= 2) {
;;;526          for (i = 0; i < DCTSIZE2; i += 8) {
;;;527    	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
;;;528    		 quant_ptr->quantval[i],   quant_ptr->quantval[i+1],
;;;529    		 quant_ptr->quantval[i+2], quant_ptr->quantval[i+3],
;;;530    		 quant_ptr->quantval[i+4], quant_ptr->quantval[i+5],
;;;531    		 quant_ptr->quantval[i+6], quant_ptr->quantval[i+7]);
;;;532          }
;;;533        }
;;;534    
;;;535        length -= DCTSIZE2+1;
;;;536        if (prec) length -= DCTSIZE2;
;;;537      }
;;;538    
;;;539      if (length != 0)
;;;540        ERREXIT(cinfo, JERR_BAD_LENGTH);
;;;541    
;;;542      INPUT_SYNC(cinfo);
;;;543      return TRUE;
;;;544    }
000020  e8bd8ffe          POP      {r1-r11,pc}
                  |L5.36|
000024  6827              LDR      r7,[r4,#0]            ;499
000026  f8d48004          LDR      r8,[r4,#4]            ;499
                  |L5.42|
00002a  f1a80801          SUB      r8,r8,#1              ;499
00002e  f8171b01          LDRB     r1,[r7],#1            ;499
000032  0208              LSLS     r0,r1,#8              ;499
000034  9002              STR      r0,[sp,#8]            ;499
000036  f1b80f00          CMP      r8,#0                 ;499
00003a  d108              BNE      |L5.78|
00003c  4628              MOV      r0,r5                 ;499
00003e  68e1              LDR      r1,[r4,#0xc]          ;499
000040  4788              BLX      r1                    ;499
000042  b908              CBNZ     r0,|L5.72|
000044  2000              MOVS     r0,#0                 ;499
000046  e7eb              B        |L5.32|
                  |L5.72|
000048  6827              LDR      r7,[r4,#0]            ;499
00004a  f8d48004          LDR      r8,[r4,#4]            ;499
                  |L5.78|
00004e  f1a80801          SUB      r8,r8,#1              ;499
000052  f8171b01          LDRB     r1,[r7],#1            ;499
000056  9802              LDR      r0,[sp,#8]            ;499
000058  4408              ADD      r0,r0,r1              ;499
00005a  9002              STR      r0,[sp,#8]            ;499
00005c  bf00              NOP                            ;499
00005e  9802              LDR      r0,[sp,#8]            ;500
000060  1e80              SUBS     r0,r0,#2              ;500
000062  9002              STR      r0,[sp,#8]            ;500
000064  e0cd              B        |L5.514|
                  |L5.102|
000066  bf00              NOP                            ;503
000068  f1b80f00          CMP      r8,#0                 ;503
00006c  d108              BNE      |L5.128|
00006e  4628              MOV      r0,r5                 ;503
000070  68e1              LDR      r1,[r4,#0xc]          ;503
000072  4788              BLX      r1                    ;503
000074  b908              CBNZ     r0,|L5.122|
000076  2000              MOVS     r0,#0                 ;503
000078  e7d2              B        |L5.32|
                  |L5.122|
00007a  6827              LDR      r7,[r4,#0]            ;503
00007c  f8d48004          LDR      r8,[r4,#4]            ;503
                  |L5.128|
000080  f1a80801          SUB      r8,r8,#1              ;503
000084  f817ab01          LDRB     r10,[r7],#1           ;503
000088  bf00              NOP                            ;503
00008a  ea4f102a          ASR      r0,r10,#4             ;504
00008e  9001              STR      r0,[sp,#4]            ;504
000090  f00a0a0f          AND      r10,r10,#0xf          ;505
000094  2051              MOVS     r0,#0x51              ;507
000096  6829              LDR      r1,[r5,#0]            ;507
000098  6148              STR      r0,[r1,#0x14]         ;507
00009a  6828              LDR      r0,[r5,#0]            ;507
00009c  f8c0a018          STR      r10,[r0,#0x18]        ;507
0000a0  9801              LDR      r0,[sp,#4]            ;507
0000a2  6829              LDR      r1,[r5,#0]            ;507
0000a4  61c8              STR      r0,[r1,#0x1c]         ;507
0000a6  6828              LDR      r0,[r5,#0]            ;507
0000a8  2101              MOVS     r1,#1                 ;507
0000aa  6842              LDR      r2,[r0,#4]            ;507
0000ac  4628              MOV      r0,r5                 ;507
0000ae  4790              BLX      r2                    ;507
0000b0  f1ba0f04          CMP      r10,#4                ;509
0000b4  db09              BLT      |L5.202|
0000b6  201f              MOVS     r0,#0x1f              ;510
0000b8  6829              LDR      r1,[r5,#0]            ;510
0000ba  6148              STR      r0,[r1,#0x14]         ;510
0000bc  6828              LDR      r0,[r5,#0]            ;510
0000be  f8c0a018          STR      r10,[r0,#0x18]        ;510
0000c2  6828              LDR      r0,[r5,#0]            ;510
0000c4  6801              LDR      r1,[r0,#0]            ;510
0000c6  4628              MOV      r0,r5                 ;510
0000c8  4788              BLX      r1                    ;510
                  |L5.202|
0000ca  f10500a4          ADD      r0,r5,#0xa4           ;512
0000ce  f850002a          LDR      r0,[r0,r10,LSL #2]    ;512
0000d2  b930              CBNZ     r0,|L5.226|
0000d4  4628              MOV      r0,r5                 ;513
0000d6  f7fffffe          BL       jpeg_alloc_quant_table
0000da  f10501a4          ADD      r1,r5,#0xa4           ;513
0000de  f841002a          STR      r0,[r1,r10,LSL #2]    ;513
                  |L5.226|
0000e2  f10500a4          ADD      r0,r5,#0xa4           ;514
0000e6  f850902a          LDR      r9,[r0,r10,LSL #2]    ;514
0000ea  2600              MOVS     r6,#0                 ;516
0000ec  e042              B        |L5.372|
                  |L5.238|
0000ee  9801              LDR      r0,[sp,#4]            ;517
0000f0  b330              CBZ      r0,|L5.320|
0000f2  bf00              NOP                            ;518
0000f4  f1b80f00          CMP      r8,#0                 ;518
0000f8  d108              BNE      |L5.268|
0000fa  4628              MOV      r0,r5                 ;518
0000fc  68e1              LDR      r1,[r4,#0xc]          ;518
0000fe  4788              BLX      r1                    ;518
000100  b908              CBNZ     r0,|L5.262|
000102  2000              MOVS     r0,#0                 ;518
000104  e78c              B        |L5.32|
                  |L5.262|
000106  6827              LDR      r7,[r4,#0]            ;518
000108  f8d48004          LDR      r8,[r4,#4]            ;518
                  |L5.268|
00010c  f1a80801          SUB      r8,r8,#1              ;518
000110  f8171b01          LDRB     r1,[r7],#1            ;518
000114  0208              LSLS     r0,r1,#8              ;518
000116  9000              STR      r0,[sp,#0]            ;518
000118  f1b80f00          CMP      r8,#0                 ;518
00011c  d108              BNE      |L5.304|
00011e  4628              MOV      r0,r5                 ;518
000120  68e1              LDR      r1,[r4,#0xc]          ;518
000122  4788              BLX      r1                    ;518
000124  b908              CBNZ     r0,|L5.298|
000126  2000              MOVS     r0,#0                 ;518
000128  e77a              B        |L5.32|
                  |L5.298|
00012a  6827              LDR      r7,[r4,#0]            ;518
00012c  f8d48004          LDR      r8,[r4,#4]            ;518
                  |L5.304|
000130  f1a80801          SUB      r8,r8,#1              ;518
000134  f8171b01          LDRB     r1,[r7],#1            ;518
000138  9800              LDR      r0,[sp,#0]            ;518
00013a  4408              ADD      r0,r0,r1              ;518
00013c  9000              STR      r0,[sp,#0]            ;518
00013e  e012              B        |L5.358|
                  |L5.320|
000140  bf00              NOP                            ;520
000142  f1b80f00          CMP      r8,#0                 ;520
000146  d108              BNE      |L5.346|
000148  4628              MOV      r0,r5                 ;520
00014a  68e1              LDR      r1,[r4,#0xc]          ;520
00014c  4788              BLX      r1                    ;520
00014e  b908              CBNZ     r0,|L5.340|
000150  2000              MOVS     r0,#0                 ;520
000152  e765              B        |L5.32|
                  |L5.340|
000154  6827              LDR      r7,[r4,#0]            ;520
000156  f8d48004          LDR      r8,[r4,#4]            ;520
                  |L5.346|
00015a  f1a80801          SUB      r8,r8,#1              ;520
00015e  f8170b01          LDRB     r0,[r7],#1            ;520
000162  9000              STR      r0,[sp,#0]            ;520
000164  bf00              NOP                            ;520
                  |L5.358|
000166  4930              LDR      r1,|L5.552|
000168  f8511026          LDR      r1,[r1,r6,LSL #2]     ;522
00016c  9800              LDR      r0,[sp,#0]            ;522
00016e  f8290011          STRH     r0,[r9,r1,LSL #1]     ;522
000172  1c76              ADDS     r6,r6,#1              ;516
                  |L5.372|
000174  2e40              CMP      r6,#0x40              ;516
000176  dbba              BLT      |L5.238|
000178  6828              LDR      r0,[r5,#0]            ;525
00017a  6e80              LDR      r0,[r0,#0x68]         ;525
00017c  2802              CMP      r0,#2                 ;525
00017e  db38              BLT      |L5.498|
000180  2600              MOVS     r6,#0                 ;526
000182  e034              B        |L5.494|
                  |L5.388|
000184  bf00              NOP                            ;527
000186  6828              LDR      r0,[r5,#0]            ;527
000188  f1000b18          ADD      r11,r0,#0x18          ;527
00018c  f8390016          LDRH     r0,[r9,r6,LSL #1]     ;527
000190  f8cb0000          STR      r0,[r11,#0]           ;527
000194  1c70              ADDS     r0,r6,#1              ;527
000196  f8390010          LDRH     r0,[r9,r0,LSL #1]     ;527
00019a  f8cb0004          STR      r0,[r11,#4]           ;527
00019e  1cb0              ADDS     r0,r6,#2              ;527
0001a0  f8390010          LDRH     r0,[r9,r0,LSL #1]     ;527
0001a4  f8cb0008          STR      r0,[r11,#8]           ;527
0001a8  1cf0              ADDS     r0,r6,#3              ;527
0001aa  f8390010          LDRH     r0,[r9,r0,LSL #1]     ;527
0001ae  f8cb000c          STR      r0,[r11,#0xc]         ;527
0001b2  1d30              ADDS     r0,r6,#4              ;527
0001b4  f8390010          LDRH     r0,[r9,r0,LSL #1]     ;527
0001b8  f8cb0010          STR      r0,[r11,#0x10]        ;527
0001bc  1d70              ADDS     r0,r6,#5              ;527
0001be  f8390010          LDRH     r0,[r9,r0,LSL #1]     ;527
0001c2  f8cb0014          STR      r0,[r11,#0x14]        ;527
0001c6  1db0              ADDS     r0,r6,#6              ;527
0001c8  f8390010          LDRH     r0,[r9,r0,LSL #1]     ;527
0001cc  f8cb0018          STR      r0,[r11,#0x18]        ;527
0001d0  1df0              ADDS     r0,r6,#7              ;527
0001d2  f8390010          LDRH     r0,[r9,r0,LSL #1]     ;527
0001d6  f8cb001c          STR      r0,[r11,#0x1c]        ;527
0001da  205d              MOVS     r0,#0x5d              ;527
0001dc  6829              LDR      r1,[r5,#0]            ;527
0001de  6148              STR      r0,[r1,#0x14]         ;527
0001e0  6828              LDR      r0,[r5,#0]            ;527
0001e2  2102              MOVS     r1,#2                 ;527
0001e4  6842              LDR      r2,[r0,#4]            ;527
0001e6  4628              MOV      r0,r5                 ;527
0001e8  4790              BLX      r2                    ;527
0001ea  bf00              NOP                            ;527
0001ec  3608              ADDS     r6,r6,#8              ;526
                  |L5.494|
0001ee  2e40              CMP      r6,#0x40              ;526
0001f0  dbc8              BLT      |L5.388|
                  |L5.498|
0001f2  9802              LDR      r0,[sp,#8]            ;535
0001f4  3841              SUBS     r0,r0,#0x41           ;535
0001f6  9002              STR      r0,[sp,#8]            ;535
0001f8  9801              LDR      r0,[sp,#4]            ;536
0001fa  b110              CBZ      r0,|L5.514|
0001fc  9802              LDR      r0,[sp,#8]            ;536
0001fe  3840              SUBS     r0,r0,#0x40           ;536
000200  9002              STR      r0,[sp,#8]            ;536
                  |L5.514|
000202  9802              LDR      r0,[sp,#8]            ;502
000204  2800              CMP      r0,#0                 ;502
000206  f73faf2e          BGT      |L5.102|
00020a  9802              LDR      r0,[sp,#8]            ;539
00020c  b130              CBZ      r0,|L5.540|
00020e  200b              MOVS     r0,#0xb               ;540
000210  6829              LDR      r1,[r5,#0]            ;540
000212  6148              STR      r0,[r1,#0x14]         ;540
000214  6828              LDR      r0,[r5,#0]            ;540
000216  6801              LDR      r1,[r0,#0]            ;540
000218  4628              MOV      r0,r5                 ;540
00021a  4788              BLX      r1                    ;540
                  |L5.540|
00021c  6027              STR      r7,[r4,#0]            ;542
00021e  f8c48004          STR      r8,[r4,#4]            ;542
000222  2001              MOVS     r0,#1                 ;543
000224  e6fc              B        |L5.32|
;;;545    
                          ENDP

000226  0000              DCW      0x0000
                  |L5.552|
                          DCD      jpeg_natural_order

                          AREA ||i.get_dri||, CODE, READONLY, ALIGN=1

                  get_dri PROC
;;;547    LOCAL(boolean)
;;;548    get_dri (j_decompress_ptr cinfo)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;549    /* Process a DRI marker */
;;;550    {
000004  4607              MOV      r7,r0
;;;551      INT32 length;
;;;552      unsigned int tmp;
;;;553      INPUT_VARS(cinfo);
000006  69bc              LDR      r4,[r7,#0x18]
000008  6825              LDR      r5,[r4,#0]
00000a  6866              LDR      r6,[r4,#4]
;;;554    
;;;555      INPUT_2BYTES(cinfo, length, return FALSE);
00000c  bf00              NOP      
00000e  b946              CBNZ     r6,|L6.34|
000010  4638              MOV      r0,r7
000012  68e1              LDR      r1,[r4,#0xc]
000014  4788              BLX      r1
000016  b910              CBNZ     r0,|L6.30|
000018  2000              MOVS     r0,#0
                  |L6.26|
;;;556      
;;;557      if (length != 4)
;;;558        ERREXIT(cinfo, JERR_BAD_LENGTH);
;;;559    
;;;560      INPUT_2BYTES(cinfo, tmp, return FALSE);
;;;561    
;;;562      TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
;;;563    
;;;564      cinfo->restart_interval = tmp;
;;;565    
;;;566      INPUT_SYNC(cinfo);
;;;567      return TRUE;
;;;568    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L6.30|
00001e  6825              LDR      r5,[r4,#0]            ;555
000020  6866              LDR      r6,[r4,#4]            ;555
                  |L6.34|
000022  1e76              SUBS     r6,r6,#1              ;555
000024  f8151b01          LDRB     r1,[r5],#1            ;555
000028  ea4f2901          LSL      r9,r1,#8              ;555
00002c  b93e              CBNZ     r6,|L6.62|
00002e  4638              MOV      r0,r7                 ;555
000030  68e1              LDR      r1,[r4,#0xc]          ;555
000032  4788              BLX      r1                    ;555
000034  b908              CBNZ     r0,|L6.58|
000036  2000              MOVS     r0,#0                 ;555
000038  e7ef              B        |L6.26|
                  |L6.58|
00003a  6825              LDR      r5,[r4,#0]            ;555
00003c  6866              LDR      r6,[r4,#4]            ;555
                  |L6.62|
00003e  1e76              SUBS     r6,r6,#1              ;555
000040  f8151b01          LDRB     r1,[r5],#1            ;555
000044  4489              ADD      r9,r9,r1              ;555
000046  bf00              NOP                            ;555
000048  f1b90f04          CMP      r9,#4                 ;557
00004c  d006              BEQ      |L6.92|
00004e  200b              MOVS     r0,#0xb               ;558
000050  6839              LDR      r1,[r7,#0]            ;558
000052  6148              STR      r0,[r1,#0x14]         ;558
000054  6838              LDR      r0,[r7,#0]            ;558
000056  6801              LDR      r1,[r0,#0]            ;558
000058  4638              MOV      r0,r7                 ;558
00005a  4788              BLX      r1                    ;558
                  |L6.92|
00005c  bf00              NOP                            ;560
00005e  b93e              CBNZ     r6,|L6.112|
000060  4638              MOV      r0,r7                 ;560
000062  68e1              LDR      r1,[r4,#0xc]          ;560
000064  4788              BLX      r1                    ;560
000066  b908              CBNZ     r0,|L6.108|
000068  2000              MOVS     r0,#0                 ;560
00006a  e7d6              B        |L6.26|
                  |L6.108|
00006c  6825              LDR      r5,[r4,#0]            ;560
00006e  6866              LDR      r6,[r4,#4]            ;560
                  |L6.112|
000070  1e76              SUBS     r6,r6,#1              ;560
000072  f8151b01          LDRB     r1,[r5],#1            ;560
000076  ea4f2801          LSL      r8,r1,#8              ;560
00007a  b93e              CBNZ     r6,|L6.140|
00007c  4638              MOV      r0,r7                 ;560
00007e  68e1              LDR      r1,[r4,#0xc]          ;560
000080  4788              BLX      r1                    ;560
000082  b908              CBNZ     r0,|L6.136|
000084  2000              MOVS     r0,#0                 ;560
000086  e7c8              B        |L6.26|
                  |L6.136|
000088  6825              LDR      r5,[r4,#0]            ;560
00008a  6866              LDR      r6,[r4,#4]            ;560
                  |L6.140|
00008c  1e76              SUBS     r6,r6,#1              ;560
00008e  f8151b01          LDRB     r1,[r5],#1            ;560
000092  4488              ADD      r8,r8,r1              ;560
000094  bf00              NOP                            ;560
000096  2052              MOVS     r0,#0x52              ;562
000098  6839              LDR      r1,[r7,#0]            ;562
00009a  6148              STR      r0,[r1,#0x14]         ;562
00009c  6838              LDR      r0,[r7,#0]            ;562
00009e  f8c08018          STR      r8,[r0,#0x18]         ;562
0000a2  6838              LDR      r0,[r7,#0]            ;562
0000a4  2101              MOVS     r1,#1                 ;562
0000a6  6842              LDR      r2,[r0,#4]            ;562
0000a8  4638              MOV      r0,r7                 ;562
0000aa  4790              BLX      r2                    ;562
0000ac  f8c78114          STR      r8,[r7,#0x114]        ;564
0000b0  6025              STR      r5,[r4,#0]            ;566
0000b2  6066              STR      r6,[r4,#4]            ;566
0000b4  2001              MOVS     r0,#1                 ;567
0000b6  e7b0              B        |L6.26|
;;;569    
                          ENDP


                          AREA ||i.get_interesting_appn||, CODE, READONLY, ALIGN=1

                  get_interesting_appn PROC
;;;690    METHODDEF(boolean)
;;;691    get_interesting_appn (j_decompress_ptr cinfo)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;692    /* Process an APP0 or APP14 marker without saving it */
;;;693    {
000004  4606              MOV      r6,r0
;;;694      INT32 length;
;;;695      JOCTET b[APPN_DATA_LEN];
;;;696      unsigned int i, numtoread;
;;;697      INPUT_VARS(cinfo);
000006  69b4              LDR      r4,[r6,#0x18]
000008  6827              LDR      r7,[r4,#0]
00000a  f8d48004          LDR      r8,[r4,#4]
;;;698    
;;;699      INPUT_2BYTES(cinfo, length, return FALSE);
00000e  bf00              NOP      
000010  f1b80f00          CMP      r8,#0
000014  d10a              BNE      |L7.44|
000016  4630              MOV      r0,r6
000018  68e1              LDR      r1,[r4,#0xc]
00001a  4788              BLX      r1
00001c  b918              CBNZ     r0,|L7.38|
00001e  2000              MOVS     r0,#0
                  |L7.32|
;;;700      length -= 2;
;;;701    
;;;702      /* get the interesting part of the marker data */
;;;703      if (length >= APPN_DATA_LEN)
;;;704        numtoread = APPN_DATA_LEN;
;;;705      else if (length > 0)
;;;706        numtoread = (unsigned int) length;
;;;707      else
;;;708        numtoread = 0;
;;;709      for (i = 0; i < numtoread; i++)
;;;710        INPUT_BYTE(cinfo, b[i], return FALSE);
;;;711      length -= numtoread;
;;;712    
;;;713      /* process it */
;;;714      switch (cinfo->unread_marker) {
;;;715      case M_APP0:
;;;716        examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
;;;717        break;
;;;718      case M_APP14:
;;;719        examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
;;;720        break;
;;;721      default:
;;;722        /* can't get here unless jpeg_save_markers chooses wrong processor */
;;;723        ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
;;;724        break;
;;;725      }
;;;726    
;;;727      /* skip any remaining data -- could be lots */
;;;728      INPUT_SYNC(cinfo);
;;;729      if (length > 0)
;;;730        (*cinfo->src->skip_input_data) (cinfo, (long) length);
;;;731    
;;;732      return TRUE;
;;;733    }
000020  b004              ADD      sp,sp,#0x10
000022  e8bd87f0          POP      {r4-r10,pc}
                  |L7.38|
000026  6827              LDR      r7,[r4,#0]            ;699
000028  f8d48004          LDR      r8,[r4,#4]            ;699
                  |L7.44|
00002c  f1a80801          SUB      r8,r8,#1              ;699
000030  f8171b01          LDRB     r1,[r7],#1            ;699
000034  020d              LSLS     r5,r1,#8              ;699
000036  f1b80f00          CMP      r8,#0                 ;699
00003a  d108              BNE      |L7.78|
00003c  4630              MOV      r0,r6                 ;699
00003e  68e1              LDR      r1,[r4,#0xc]          ;699
000040  4788              BLX      r1                    ;699
000042  b908              CBNZ     r0,|L7.72|
000044  2000              MOVS     r0,#0                 ;699
000046  e7eb              B        |L7.32|
                  |L7.72|
000048  6827              LDR      r7,[r4,#0]            ;699
00004a  f8d48004          LDR      r8,[r4,#4]            ;699
                  |L7.78|
00004e  f1a80801          SUB      r8,r8,#1              ;699
000052  f8171b01          LDRB     r1,[r7],#1            ;699
000056  440d              ADD      r5,r5,r1              ;699
000058  bf00              NOP                            ;699
00005a  1ead              SUBS     r5,r5,#2              ;700
00005c  2d0e              CMP      r5,#0xe               ;703
00005e  db02              BLT      |L7.102|
000060  f04f090e          MOV      r9,#0xe               ;704
000064  e005              B        |L7.114|
                  |L7.102|
000066  2d00              CMP      r5,#0                 ;705
000068  dd01              BLE      |L7.110|
00006a  46a9              MOV      r9,r5                 ;706
00006c  e001              B        |L7.114|
                  |L7.110|
00006e  f04f0900          MOV      r9,#0                 ;708
                  |L7.114|
000072  f04f0a00          MOV      r10,#0                ;709
000076  e015              B        |L7.164|
                  |L7.120|
000078  bf00              NOP                            ;710
00007a  f1b80f00          CMP      r8,#0                 ;710
00007e  d108              BNE      |L7.146|
000080  4630              MOV      r0,r6                 ;710
000082  68e1              LDR      r1,[r4,#0xc]          ;710
000084  4788              BLX      r1                    ;710
000086  b908              CBNZ     r0,|L7.140|
000088  2000              MOVS     r0,#0                 ;710
00008a  e7c9              B        |L7.32|
                  |L7.140|
00008c  6827              LDR      r7,[r4,#0]            ;710
00008e  f8d48004          LDR      r8,[r4,#4]            ;710
                  |L7.146|
000092  f1a80801          SUB      r8,r8,#1              ;710
000096  f8170b01          LDRB     r0,[r7],#1            ;710
00009a  f80d000a          STRB     r0,[sp,r10]           ;710
00009e  bf00              NOP                            ;710
0000a0  f10a0a01          ADD      r10,r10,#1            ;709
                  |L7.164|
0000a4  45ca              CMP      r10,r9                ;709
0000a6  d3e7              BCC      |L7.120|
0000a8  eba50509          SUB      r5,r5,r9              ;711
0000ac  f8d601a0          LDR      r0,[r6,#0x1a0]        ;714
0000b0  28e0              CMP      r0,#0xe0              ;714
0000b2  d002              BEQ      |L7.186|
0000b4  28ee              CMP      r0,#0xee              ;714
0000b6  d10e              BNE      |L7.214|
0000b8  e006              B        |L7.200|
                  |L7.186|
0000ba  462b              MOV      r3,r5                 ;716
0000bc  464a              MOV      r2,r9                 ;716
0000be  4669              MOV      r1,sp                 ;716
0000c0  4630              MOV      r0,r6                 ;716
0000c2  f7fffffe          BL       examine_app0
0000c6  e012              B        |L7.238|
                  |L7.200|
0000c8  462b              MOV      r3,r5                 ;719
0000ca  464a              MOV      r2,r9                 ;719
0000cc  4669              MOV      r1,sp                 ;719
0000ce  4630              MOV      r0,r6                 ;719
0000d0  f7fffffe          BL       examine_app14
0000d4  e00b              B        |L7.238|
                  |L7.214|
0000d6  2044              MOVS     r0,#0x44              ;723
0000d8  6831              LDR      r1,[r6,#0]            ;723
0000da  6148              STR      r0,[r1,#0x14]         ;723
0000dc  6831              LDR      r1,[r6,#0]            ;723
0000de  f8d601a0          LDR      r0,[r6,#0x1a0]        ;723
0000e2  6188              STR      r0,[r1,#0x18]         ;723
0000e4  6830              LDR      r0,[r6,#0]            ;723
0000e6  6801              LDR      r1,[r0,#0]            ;723
0000e8  4630              MOV      r0,r6                 ;723
0000ea  4788              BLX      r1                    ;723
0000ec  bf00              NOP                            ;724
                  |L7.238|
0000ee  bf00              NOP                            ;717
0000f0  6027              STR      r7,[r4,#0]            ;728
0000f2  f8c48004          STR      r8,[r4,#4]            ;728
0000f6  2d00              CMP      r5,#0                 ;729
0000f8  dd04              BLE      |L7.260|
0000fa  69b0              LDR      r0,[r6,#0x18]         ;730
0000fc  4629              MOV      r1,r5                 ;730
0000fe  6902              LDR      r2,[r0,#0x10]         ;730
000100  4630              MOV      r0,r6                 ;730
000102  4790              BLX      r2                    ;730
                  |L7.260|
000104  2001              MOVS     r0,#1                 ;732
000106  e78b              B        |L7.32|
;;;734    
                          ENDP


                          AREA ||i.get_sof||, CODE, READONLY, ALIGN=1

                  get_sof PROC
;;;236    LOCAL(boolean)
;;;237    get_sof (j_decompress_ptr cinfo, boolean is_prog, boolean is_arith)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;238    /* Process a SOFn marker */
;;;239    {
000004  b082              SUB      sp,sp,#8
000006  4604              MOV      r4,r0
;;;240      INT32 length;
;;;241      int c, ci;
;;;242      jpeg_component_info * compptr;
;;;243      INPUT_VARS(cinfo);
000008  69a5              LDR      r5,[r4,#0x18]
00000a  682e              LDR      r6,[r5,#0]
00000c  686f              LDR      r7,[r5,#4]
;;;244    
;;;245      cinfo->progressive_mode = is_prog;
00000e  9803              LDR      r0,[sp,#0xc]
000010  f8c400dc          STR      r0,[r4,#0xdc]
;;;246      cinfo->arith_code = is_arith;
000014  9804              LDR      r0,[sp,#0x10]
000016  f8c400e0          STR      r0,[r4,#0xe0]
;;;247    
;;;248      INPUT_2BYTES(cinfo, length, return FALSE);
00001a  bf00              NOP      
00001c  b94f              CBNZ     r7,|L8.50|
00001e  4620              MOV      r0,r4
000020  68e9              LDR      r1,[r5,#0xc]
000022  4788              BLX      r1
000024  b918              CBNZ     r0,|L8.46|
000026  2000              MOVS     r0,#0
                  |L8.40|
;;;249    
;;;250      INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
;;;251      INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
;;;252      INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
;;;253      INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
;;;254    
;;;255      length -= 8;
;;;256    
;;;257      TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
;;;258    	   (int) cinfo->image_width, (int) cinfo->image_height,
;;;259    	   cinfo->num_components);
;;;260    
;;;261      if (cinfo->marker->saw_SOF)
;;;262        ERREXIT(cinfo, JERR_SOF_DUPLICATE);
;;;263    
;;;264      /* We don't support files in which the image height is initially specified */
;;;265      /* as 0 and is later redefined by DNL.  As long as we have to check that,  */
;;;266      /* might as well have a general sanity check. */
;;;267      if (cinfo->image_height <= 0 || cinfo->image_width <= 0
;;;268          || cinfo->num_components <= 0)
;;;269        ERREXIT(cinfo, JERR_EMPTY_IMAGE);
;;;270    
;;;271      if (length != (cinfo->num_components * 3))
;;;272        ERREXIT(cinfo, JERR_BAD_LENGTH);
;;;273    
;;;274      if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
;;;275        cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
;;;276    			((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;277    			 cinfo->num_components * SIZEOF(jpeg_component_info));
;;;278      
;;;279      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
;;;280           ci++, compptr++) {
;;;281        compptr->component_index = ci;
;;;282        INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
;;;283        INPUT_BYTE(cinfo, c, return FALSE);
;;;284        compptr->h_samp_factor = (c >> 4) & 15;
;;;285        compptr->v_samp_factor = (c     ) & 15;
;;;286        INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
;;;287    
;;;288        TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
;;;289    	     compptr->component_id, compptr->h_samp_factor,
;;;290    	     compptr->v_samp_factor, compptr->quant_tbl_no);
;;;291      }
;;;292    
;;;293      cinfo->marker->saw_SOF = TRUE;
;;;294    
;;;295      INPUT_SYNC(cinfo);
;;;296      return TRUE;
;;;297    }
000028  b005              ADD      sp,sp,#0x14
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.46|
00002e  682e              LDR      r6,[r5,#0]            ;248
000030  686f              LDR      r7,[r5,#4]            ;248
                  |L8.50|
000032  1e7f              SUBS     r7,r7,#1              ;248
000034  f8161b01          LDRB     r1,[r6],#1            ;248
000038  ea4f2901          LSL      r9,r1,#8              ;248
00003c  b93f              CBNZ     r7,|L8.78|
00003e  4620              MOV      r0,r4                 ;248
000040  68e9              LDR      r1,[r5,#0xc]          ;248
000042  4788              BLX      r1                    ;248
000044  b908              CBNZ     r0,|L8.74|
000046  2000              MOVS     r0,#0                 ;248
000048  e7ee              B        |L8.40|
                  |L8.74|
00004a  682e              LDR      r6,[r5,#0]            ;248
00004c  686f              LDR      r7,[r5,#4]            ;248
                  |L8.78|
00004e  1e7f              SUBS     r7,r7,#1              ;248
000050  f8161b01          LDRB     r1,[r6],#1            ;248
000054  4489              ADD      r9,r9,r1              ;248
000056  bf00              NOP                            ;248
000058  bf00              NOP                            ;250
00005a  b93f              CBNZ     r7,|L8.108|
00005c  4620              MOV      r0,r4                 ;250
00005e  68e9              LDR      r1,[r5,#0xc]          ;250
000060  4788              BLX      r1                    ;250
000062  b908              CBNZ     r0,|L8.104|
000064  2000              MOVS     r0,#0                 ;250
000066  e7df              B        |L8.40|
                  |L8.104|
000068  682e              LDR      r6,[r5,#0]            ;250
00006a  686f              LDR      r7,[r5,#4]            ;250
                  |L8.108|
00006c  1e7f              SUBS     r7,r7,#1              ;250
00006e  f8160b01          LDRB     r0,[r6],#1            ;250
000072  f8c400d4          STR      r0,[r4,#0xd4]         ;250
000076  bf00              NOP                            ;250
000078  bf00              NOP                            ;251
00007a  b93f              CBNZ     r7,|L8.140|
00007c  4620              MOV      r0,r4                 ;251
00007e  68e9              LDR      r1,[r5,#0xc]          ;251
000080  4788              BLX      r1                    ;251
000082  b908              CBNZ     r0,|L8.136|
000084  2000              MOVS     r0,#0                 ;251
000086  e7cf              B        |L8.40|
                  |L8.136|
000088  682e              LDR      r6,[r5,#0]            ;251
00008a  686f              LDR      r7,[r5,#4]            ;251
                  |L8.140|
00008c  1e7f              SUBS     r7,r7,#1              ;251
00008e  f8161b01          LDRB     r1,[r6],#1            ;251
000092  0208              LSLS     r0,r1,#8              ;251
000094  6220              STR      r0,[r4,#0x20]         ;251
000096  b93f              CBNZ     r7,|L8.168|
000098  4620              MOV      r0,r4                 ;251
00009a  68e9              LDR      r1,[r5,#0xc]          ;251
00009c  4788              BLX      r1                    ;251
00009e  b908              CBNZ     r0,|L8.164|
0000a0  2000              MOVS     r0,#0                 ;251
0000a2  e7c1              B        |L8.40|
                  |L8.164|
0000a4  682e              LDR      r6,[r5,#0]            ;251
0000a6  686f              LDR      r7,[r5,#4]            ;251
                  |L8.168|
0000a8  1e7f              SUBS     r7,r7,#1              ;251
0000aa  f8161b01          LDRB     r1,[r6],#1            ;251
0000ae  6a20              LDR      r0,[r4,#0x20]         ;251
0000b0  4408              ADD      r0,r0,r1              ;251
0000b2  6220              STR      r0,[r4,#0x20]         ;251
0000b4  bf00              NOP                            ;251
0000b6  bf00              NOP                            ;252
0000b8  b93f              CBNZ     r7,|L8.202|
0000ba  4620              MOV      r0,r4                 ;252
0000bc  68e9              LDR      r1,[r5,#0xc]          ;252
0000be  4788              BLX      r1                    ;252
0000c0  b908              CBNZ     r0,|L8.198|
0000c2  2000              MOVS     r0,#0                 ;252
0000c4  e7b0              B        |L8.40|
                  |L8.198|
0000c6  682e              LDR      r6,[r5,#0]            ;252
0000c8  686f              LDR      r7,[r5,#4]            ;252
                  |L8.202|
0000ca  1e7f              SUBS     r7,r7,#1              ;252
0000cc  f8161b01          LDRB     r1,[r6],#1            ;252
0000d0  0208              LSLS     r0,r1,#8              ;252
0000d2  61e0              STR      r0,[r4,#0x1c]         ;252
0000d4  b93f              CBNZ     r7,|L8.230|
0000d6  4620              MOV      r0,r4                 ;252
0000d8  68e9              LDR      r1,[r5,#0xc]          ;252
0000da  4788              BLX      r1                    ;252
0000dc  b908              CBNZ     r0,|L8.226|
0000de  2000              MOVS     r0,#0                 ;252
0000e0  e7a2              B        |L8.40|
                  |L8.226|
0000e2  682e              LDR      r6,[r5,#0]            ;252
0000e4  686f              LDR      r7,[r5,#4]            ;252
                  |L8.230|
0000e6  1e7f              SUBS     r7,r7,#1              ;252
0000e8  f8161b01          LDRB     r1,[r6],#1            ;252
0000ec  69e0              LDR      r0,[r4,#0x1c]         ;252
0000ee  4408              ADD      r0,r0,r1              ;252
0000f0  61e0              STR      r0,[r4,#0x1c]         ;252
0000f2  bf00              NOP                            ;252
0000f4  bf00              NOP                            ;253
0000f6  b93f              CBNZ     r7,|L8.264|
0000f8  4620              MOV      r0,r4                 ;253
0000fa  68e9              LDR      r1,[r5,#0xc]          ;253
0000fc  4788              BLX      r1                    ;253
0000fe  b908              CBNZ     r0,|L8.260|
000100  2000              MOVS     r0,#0                 ;253
000102  e791              B        |L8.40|
                  |L8.260|
000104  682e              LDR      r6,[r5,#0]            ;253
000106  686f              LDR      r7,[r5,#4]            ;253
                  |L8.264|
000108  1e7f              SUBS     r7,r7,#1              ;253
00010a  f8160b01          LDRB     r0,[r6],#1            ;253
00010e  6260              STR      r0,[r4,#0x24]         ;253
000110  bf00              NOP                            ;253
000112  f1a90908          SUB      r9,r9,#8              ;255
000116  bf00              NOP                            ;257
000118  6820              LDR      r0,[r4,#0]            ;257
00011a  f1000b18          ADD      r11,r0,#0x18          ;257
00011e  f8d401a0          LDR      r0,[r4,#0x1a0]        ;257
000122  f8cb0000          STR      r0,[r11,#0]           ;257
000126  69e0              LDR      r0,[r4,#0x1c]         ;257
000128  f8cb0004          STR      r0,[r11,#4]           ;257
00012c  6a20              LDR      r0,[r4,#0x20]         ;257
00012e  f8cb0008          STR      r0,[r11,#8]           ;257
000132  6a60              LDR      r0,[r4,#0x24]         ;257
000134  f8cb000c          STR      r0,[r11,#0xc]         ;257
000138  2064              MOVS     r0,#0x64              ;257
00013a  6821              LDR      r1,[r4,#0]            ;257
00013c  6148              STR      r0,[r1,#0x14]         ;257
00013e  6820              LDR      r0,[r4,#0]            ;257
000140  2101              MOVS     r1,#1                 ;257
000142  6842              LDR      r2,[r0,#4]            ;257
000144  4620              MOV      r0,r4                 ;257
000146  4790              BLX      r2                    ;257
000148  bf00              NOP                            ;257
00014a  f8d401b8          LDR      r0,[r4,#0x1b8]        ;261
00014e  6900              LDR      r0,[r0,#0x10]         ;261
000150  b130              CBZ      r0,|L8.352|
000152  203a              MOVS     r0,#0x3a              ;262
000154  6821              LDR      r1,[r4,#0]            ;262
000156  6148              STR      r0,[r1,#0x14]         ;262
000158  6820              LDR      r0,[r4,#0]            ;262
00015a  6801              LDR      r1,[r0,#0]            ;262
00015c  4620              MOV      r0,r4                 ;262
00015e  4788              BLX      r1                    ;262
                  |L8.352|
000160  6a20              LDR      r0,[r4,#0x20]         ;267
000162  b120              CBZ      r0,|L8.366|
000164  69e0              LDR      r0,[r4,#0x1c]         ;267
000166  b110              CBZ      r0,|L8.366|
000168  6a60              LDR      r0,[r4,#0x24]         ;268
00016a  2800              CMP      r0,#0                 ;268
00016c  dc06              BGT      |L8.380|
                  |L8.366|
00016e  2020              MOVS     r0,#0x20              ;269
000170  6821              LDR      r1,[r4,#0]            ;269
000172  6148              STR      r0,[r1,#0x14]         ;269
000174  6820              LDR      r0,[r4,#0]            ;269
000176  6801              LDR      r1,[r0,#0]            ;269
000178  4620              MOV      r0,r4                 ;269
00017a  4788              BLX      r1                    ;269
                  |L8.380|
00017c  6a60              LDR      r0,[r4,#0x24]         ;271
00017e  eb000040          ADD      r0,r0,r0,LSL #1       ;271
000182  4548              CMP      r0,r9                 ;271
000184  d006              BEQ      |L8.404|
000186  200b              MOVS     r0,#0xb               ;272
000188  6821              LDR      r1,[r4,#0]            ;272
00018a  6148              STR      r0,[r1,#0x14]         ;272
00018c  6820              LDR      r0,[r4,#0]            ;272
00018e  6801              LDR      r1,[r0,#0]            ;272
000190  4620              MOV      r0,r4                 ;272
000192  4788              BLX      r1                    ;272
                  |L8.404|
000194  f8d400d8          LDR      r0,[r4,#0xd8]         ;274
000198  b950              CBNZ     r0,|L8.432|
00019a  2154              MOVS     r1,#0x54              ;275
00019c  6a60              LDR      r0,[r4,#0x24]         ;275
00019e  fb00f201          MUL      r2,r0,r1              ;275
0001a2  6860              LDR      r0,[r4,#4]            ;275
0001a4  2101              MOVS     r1,#1                 ;275
0001a6  6803              LDR      r3,[r0,#0]            ;275
0001a8  4620              MOV      r0,r4                 ;275
0001aa  4798              BLX      r3                    ;275
0001ac  f8c400d8          STR      r0,[r4,#0xd8]         ;275
                  |L8.432|
0001b0  f04f0a00          MOV      r10,#0                ;279
0001b4  f8d480d8          LDR      r8,[r4,#0xd8]         ;279
0001b8  e05b              B        |L8.626|
                  |L8.442|
0001ba  f8c8a004          STR      r10,[r8,#4]           ;281
0001be  bf00              NOP                            ;282
0001c0  b93f              CBNZ     r7,|L8.466|
0001c2  4620              MOV      r0,r4                 ;282
0001c4  68e9              LDR      r1,[r5,#0xc]          ;282
0001c6  4788              BLX      r1                    ;282
0001c8  b908              CBNZ     r0,|L8.462|
0001ca  2000              MOVS     r0,#0                 ;282
0001cc  e72c              B        |L8.40|
                  |L8.462|
0001ce  682e              LDR      r6,[r5,#0]            ;282
0001d0  686f              LDR      r7,[r5,#4]            ;282
                  |L8.466|
0001d2  1e7f              SUBS     r7,r7,#1              ;282
0001d4  f8160b01          LDRB     r0,[r6],#1            ;282
0001d8  f8c80000          STR      r0,[r8,#0]            ;282
0001dc  bf00              NOP                            ;282
0001de  bf00              NOP                            ;283
0001e0  b93f              CBNZ     r7,|L8.498|
0001e2  4620              MOV      r0,r4                 ;283
0001e4  68e9              LDR      r1,[r5,#0xc]          ;283
0001e6  4788              BLX      r1                    ;283
0001e8  b908              CBNZ     r0,|L8.494|
0001ea  2000              MOVS     r0,#0                 ;283
0001ec  e71c              B        |L8.40|
                  |L8.494|
0001ee  682e              LDR      r6,[r5,#0]            ;283
0001f0  686f              LDR      r7,[r5,#4]            ;283
                  |L8.498|
0001f2  1e7f              SUBS     r7,r7,#1              ;283
0001f4  f8160b01          LDRB     r0,[r6],#1            ;283
0001f8  9001              STR      r0,[sp,#4]            ;283
0001fa  bf00              NOP                            ;283
0001fc  9801              LDR      r0,[sp,#4]            ;284
0001fe  f3c01003          UBFX     r0,r0,#4,#4           ;284
000202  f8c80008          STR      r0,[r8,#8]            ;284
000206  9801              LDR      r0,[sp,#4]            ;285
000208  f000000f          AND      r0,r0,#0xf            ;285
00020c  f8c8000c          STR      r0,[r8,#0xc]          ;285
000210  bf00              NOP                            ;286
000212  b93f              CBNZ     r7,|L8.548|
000214  4620              MOV      r0,r4                 ;286
000216  68e9              LDR      r1,[r5,#0xc]          ;286
000218  4788              BLX      r1                    ;286
00021a  b908              CBNZ     r0,|L8.544|
00021c  2000              MOVS     r0,#0                 ;286
00021e  e703              B        |L8.40|
                  |L8.544|
000220  682e              LDR      r6,[r5,#0]            ;286
000222  686f              LDR      r7,[r5,#4]            ;286
                  |L8.548|
000224  1e7f              SUBS     r7,r7,#1              ;286
000226  f8160b01          LDRB     r0,[r6],#1            ;286
00022a  f8c80010          STR      r0,[r8,#0x10]         ;286
00022e  bf00              NOP                            ;286
000230  bf00              NOP                            ;288
000232  6820              LDR      r0,[r4,#0]            ;288
000234  f1000b18          ADD      r11,r0,#0x18          ;288
000238  f8d80000          LDR      r0,[r8,#0]            ;288
00023c  f8cb0000          STR      r0,[r11,#0]           ;288
000240  f8d80008          LDR      r0,[r8,#8]            ;288
000244  f8cb0004          STR      r0,[r11,#4]           ;288
000248  f8d8000c          LDR      r0,[r8,#0xc]          ;288
00024c  f8cb0008          STR      r0,[r11,#8]           ;288
000250  f8d80010          LDR      r0,[r8,#0x10]         ;288
000254  f8cb000c          STR      r0,[r11,#0xc]         ;288
000258  2065              MOVS     r0,#0x65              ;288
00025a  6821              LDR      r1,[r4,#0]            ;288
00025c  6148              STR      r0,[r1,#0x14]         ;288
00025e  6820              LDR      r0,[r4,#0]            ;288
000260  2101              MOVS     r1,#1                 ;288
000262  6842              LDR      r2,[r0,#4]            ;288
000264  4620              MOV      r0,r4                 ;288
000266  4790              BLX      r2                    ;288
000268  bf00              NOP                            ;288
00026a  f10a0a01          ADD      r10,r10,#1            ;280
00026e  f1080854          ADD      r8,r8,#0x54           ;280
                  |L8.626|
000272  6a60              LDR      r0,[r4,#0x24]         ;279
000274  4550              CMP      r0,r10                ;279
000276  dca0              BGT      |L8.442|
000278  2001              MOVS     r0,#1                 ;293
00027a  f8d411b8          LDR      r1,[r4,#0x1b8]        ;293
00027e  6108              STR      r0,[r1,#0x10]         ;293
000280  602e              STR      r6,[r5,#0]            ;295
000282  606f              STR      r7,[r5,#4]            ;295
000284  bf00              NOP                            ;296
000286  e6cf              B        |L8.40|
;;;298    
                          ENDP


                          AREA ||i.get_soi||, CODE, READONLY, ALIGN=1

                  get_soi PROC
;;;196    LOCAL(boolean)
;;;197    get_soi (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;198    /* Process an SOI marker */
;;;199    {
000002  4604              MOV      r4,r0
;;;200      int i;
;;;201      
;;;202      TRACEMS(cinfo, 1, JTRC_SOI);
000004  2066              MOVS     r0,#0x66
000006  6821              LDR      r1,[r4,#0]
000008  6148              STR      r0,[r1,#0x14]
00000a  6820              LDR      r0,[r4,#0]
00000c  2101              MOVS     r1,#1
00000e  6842              LDR      r2,[r0,#4]
000010  4620              MOV      r0,r4
000012  4790              BLX      r2
;;;203    
;;;204      if (cinfo->marker->saw_SOI)
000014  f8d401b8          LDR      r0,[r4,#0x1b8]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  b130              CBZ      r0,|L9.42|
;;;205        ERREXIT(cinfo, JERR_SOI_DUPLICATE);
00001c  203d              MOVS     r0,#0x3d
00001e  6821              LDR      r1,[r4,#0]
000020  6148              STR      r0,[r1,#0x14]
000022  6820              LDR      r0,[r4,#0]
000024  6801              LDR      r1,[r0,#0]
000026  4620              MOV      r0,r4
000028  4788              BLX      r1
                  |L9.42|
;;;206    
;;;207      /* Reset all parameters that are defined to be reset by SOI */
;;;208    
;;;209      for (i = 0; i < NUM_ARITH_TBLS; i++) {
00002a  2500              MOVS     r5,#0
00002c  e00a              B        |L9.68|
                  |L9.46|
;;;210        cinfo->arith_dc_L[i] = 0;
00002e  2100              MOVS     r1,#0
000030  f10400e4          ADD      r0,r4,#0xe4
000034  5541              STRB     r1,[r0,r5]
;;;211        cinfo->arith_dc_U[i] = 1;
000036  2101              MOVS     r1,#1
000038  3010              ADDS     r0,r0,#0x10
00003a  5541              STRB     r1,[r0,r5]
;;;212        cinfo->arith_ac_K[i] = 5;
00003c  2105              MOVS     r1,#5
00003e  3010              ADDS     r0,r0,#0x10
000040  5541              STRB     r1,[r0,r5]
000042  1c6d              ADDS     r5,r5,#1              ;209
                  |L9.68|
000044  2d10              CMP      r5,#0x10              ;209
000046  dbf2              BLT      |L9.46|
;;;213      }
;;;214      cinfo->restart_interval = 0;
000048  2000              MOVS     r0,#0
00004a  f504748a          ADD      r4,r4,#0x114
00004e  6020              STR      r0,[r4,#0]
;;;215    
;;;216      /* Set initial assumptions for colorspace etc */
;;;217    
;;;218      cinfo->jpeg_color_space = JCS_UNKNOWN;
000050  f8040cec          STRB     r0,[r4,#-0xec]
;;;219      cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
000054  61a0              STR      r0,[r4,#0x18]
;;;220    
;;;221      cinfo->saw_JFIF_marker = FALSE;
000056  6060              STR      r0,[r4,#4]
;;;222      cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
000058  f04f0001          MOV      r0,#1
00005c  7220              STRB     r0,[r4,#8]
;;;223      cinfo->JFIF_minor_version = 1;
00005e  7260              STRB     r0,[r4,#9]
;;;224      cinfo->density_unit = 0;
000060  f04f0000          MOV      r0,#0
000064  72a0              STRB     r0,[r4,#0xa]
;;;225      cinfo->X_density = 1;
000066  f04f0001          MOV      r0,#1
00006a  81a0              STRH     r0,[r4,#0xc]
;;;226      cinfo->Y_density = 1;
00006c  81e0              STRH     r0,[r4,#0xe]
;;;227      cinfo->saw_Adobe_marker = FALSE;
00006e  f04f0000          MOV      r0,#0
000072  6120              STR      r0,[r4,#0x10]
;;;228      cinfo->Adobe_transform = 0;
000074  7520              STRB     r0,[r4,#0x14]
;;;229    
;;;230      cinfo->marker->saw_SOI = TRUE;
000076  f04f0001          MOV      r0,#1
00007a  f8d410a4          LDR      r1,[r4,#0xa4]
00007e  f5a4748a          SUB      r4,r4,#0x114
000082  60c8              STR      r0,[r1,#0xc]
;;;231    
;;;232      return TRUE;
;;;233    }
000084  bd70              POP      {r4-r6,pc}
;;;234    
                          ENDP


                          AREA ||i.get_sos||, CODE, READONLY, ALIGN=1

                  get_sos PROC
;;;300    LOCAL(boolean)
;;;301    get_sos (j_decompress_ptr cinfo)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;302    /* Process a SOS marker */
;;;303    {
000004  4604              MOV      r4,r0
;;;304      INT32 length;
;;;305      int i, ci, n, c, cc;
;;;306      jpeg_component_info * compptr;
;;;307      INPUT_VARS(cinfo);
000006  69a5              LDR      r5,[r4,#0x18]
000008  682e              LDR      r6,[r5,#0]
00000a  686f              LDR      r7,[r5,#4]
;;;308    
;;;309      if (! cinfo->marker->saw_SOF)
00000c  f8d401b8          LDR      r0,[r4,#0x1b8]
000010  6900              LDR      r0,[r0,#0x10]
000012  b930              CBNZ     r0,|L10.34|
;;;310        ERREXIT(cinfo, JERR_SOS_NO_SOF);
000014  203e              MOVS     r0,#0x3e
000016  6821              LDR      r1,[r4,#0]
000018  6148              STR      r0,[r1,#0x14]
00001a  6820              LDR      r0,[r4,#0]
00001c  6801              LDR      r1,[r0,#0]
00001e  4620              MOV      r0,r4
000020  4788              BLX      r1
                  |L10.34|
;;;311    
;;;312      INPUT_2BYTES(cinfo, length, return FALSE);
000022  bf00              NOP      
000024  b94f              CBNZ     r7,|L10.58|
000026  4620              MOV      r0,r4
000028  68e9              LDR      r1,[r5,#0xc]
00002a  4788              BLX      r1
00002c  b918              CBNZ     r0,|L10.54|
00002e  2000              MOVS     r0,#0
                  |L10.48|
;;;313    
;;;314      INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
;;;315    
;;;316      TRACEMS1(cinfo, 1, JTRC_SOS, n);
;;;317    
;;;318      if (length != (n * 2 + 6) || n < 1 || n > MAX_COMPS_IN_SCAN)
;;;319        ERREXIT(cinfo, JERR_BAD_LENGTH);
;;;320    
;;;321      cinfo->comps_in_scan = n;
;;;322    
;;;323      /* Collect the component-spec parameters */
;;;324    
;;;325      for (i = 0; i < n; i++) {
;;;326        INPUT_BYTE(cinfo, cc, return FALSE);
;;;327        INPUT_BYTE(cinfo, c, return FALSE);
;;;328        
;;;329        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
;;;330    	 ci++, compptr++) {
;;;331          if (cc == compptr->component_id)
;;;332    	goto id_found;
;;;333        }
;;;334    
;;;335        ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
;;;336    
;;;337      id_found:
;;;338    
;;;339        cinfo->cur_comp_info[i] = compptr;
;;;340        compptr->dc_tbl_no = (c >> 4) & 15;
;;;341        compptr->ac_tbl_no = (c     ) & 15;
;;;342        
;;;343        TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
;;;344    	     compptr->dc_tbl_no, compptr->ac_tbl_no);
;;;345      }
;;;346    
;;;347      /* Collect the additional scan parameters Ss, Se, Ah/Al. */
;;;348      INPUT_BYTE(cinfo, c, return FALSE);
;;;349      cinfo->Ss = c;
;;;350      INPUT_BYTE(cinfo, c, return FALSE);
;;;351      cinfo->Se = c;
;;;352      INPUT_BYTE(cinfo, c, return FALSE);
;;;353      cinfo->Ah = (c >> 4) & 15;
;;;354      cinfo->Al = (c     ) & 15;
;;;355    
;;;356      TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
;;;357    	   cinfo->Ah, cinfo->Al);
;;;358    
;;;359      /* Prepare to scan data & restart markers */
;;;360      cinfo->marker->next_restart_num = 0;
;;;361    
;;;362      /* Count another SOS marker */
;;;363      cinfo->input_scan_number++;
;;;364    
;;;365      INPUT_SYNC(cinfo);
;;;366      return TRUE;
;;;367    }
000030  b004              ADD      sp,sp,#0x10
000032  e8bd9ff0          POP      {r4-r12,pc}
                  |L10.54|
000036  682e              LDR      r6,[r5,#0]            ;312
000038  686f              LDR      r7,[r5,#4]            ;312
                  |L10.58|
00003a  1e7f              SUBS     r7,r7,#1              ;312
00003c  f8161b01          LDRB     r1,[r6],#1            ;312
000040  0208              LSLS     r0,r1,#8              ;312
000042  9003              STR      r0,[sp,#0xc]          ;312
000044  b93f              CBNZ     r7,|L10.86|
000046  4620              MOV      r0,r4                 ;312
000048  68e9              LDR      r1,[r5,#0xc]          ;312
00004a  4788              BLX      r1                    ;312
00004c  b908              CBNZ     r0,|L10.82|
00004e  2000              MOVS     r0,#0                 ;312
000050  e7ee              B        |L10.48|
                  |L10.82|
000052  682e              LDR      r6,[r5,#0]            ;312
000054  686f              LDR      r7,[r5,#4]            ;312
                  |L10.86|
000056  1e7f              SUBS     r7,r7,#1              ;312
000058  f8161b01          LDRB     r1,[r6],#1            ;312
00005c  9803              LDR      r0,[sp,#0xc]          ;312
00005e  4408              ADD      r0,r0,r1              ;312
000060  9003              STR      r0,[sp,#0xc]          ;312
000062  bf00              NOP                            ;312
000064  bf00              NOP                            ;314
000066  b93f              CBNZ     r7,|L10.120|
000068  4620              MOV      r0,r4                 ;314
00006a  68e9              LDR      r1,[r5,#0xc]          ;314
00006c  4788              BLX      r1                    ;314
00006e  b908              CBNZ     r0,|L10.116|
000070  2000              MOVS     r0,#0                 ;314
000072  e7dd              B        |L10.48|
                  |L10.116|
000074  682e              LDR      r6,[r5,#0]            ;314
000076  686f              LDR      r7,[r5,#4]            ;314
                  |L10.120|
000078  1e7f              SUBS     r7,r7,#1              ;314
00007a  f8168b01          LDRB     r8,[r6],#1            ;314
00007e  bf00              NOP                            ;314
000080  2067              MOVS     r0,#0x67              ;316
000082  6821              LDR      r1,[r4,#0]            ;316
000084  6148              STR      r0,[r1,#0x14]         ;316
000086  6820              LDR      r0,[r4,#0]            ;316
000088  f8c08018          STR      r8,[r0,#0x18]         ;316
00008c  6820              LDR      r0,[r4,#0]            ;316
00008e  2101              MOVS     r1,#1                 ;316
000090  6842              LDR      r2,[r0,#4]            ;316
000092  4620              MOV      r0,r4                 ;316
000094  4790              BLX      r2                    ;316
000096  2006              MOVS     r0,#6                 ;318
000098  eb000148          ADD      r1,r0,r8,LSL #1       ;318
00009c  9803              LDR      r0,[sp,#0xc]          ;318
00009e  4281              CMP      r1,r0                 ;318
0000a0  d105              BNE      |L10.174|
0000a2  f1b80f01          CMP      r8,#1                 ;318
0000a6  db02              BLT      |L10.174|
0000a8  f1b80f04          CMP      r8,#4                 ;318
0000ac  dd06              BLE      |L10.188|
                  |L10.174|
0000ae  200b              MOVS     r0,#0xb               ;319
0000b0  6821              LDR      r1,[r4,#0]            ;319
0000b2  6148              STR      r0,[r1,#0x14]         ;319
0000b4  6820              LDR      r0,[r4,#0]            ;319
0000b6  6801              LDR      r1,[r0,#0]            ;319
0000b8  4620              MOV      r0,r4                 ;319
0000ba  4788              BLX      r1                    ;319
                  |L10.188|
0000bc  f8c48148          STR      r8,[r4,#0x148]        ;321
0000c0  f04f0b00          MOV      r11,#0                ;325
0000c4  e061              B        |L10.394|
                  |L10.198|
0000c6  bf00              NOP                            ;326
0000c8  b93f              CBNZ     r7,|L10.218|
0000ca  4620              MOV      r0,r4                 ;326
0000cc  68e9              LDR      r1,[r5,#0xc]          ;326
0000ce  4788              BLX      r1                    ;326
0000d0  b908              CBNZ     r0,|L10.214|
0000d2  2000              MOVS     r0,#0                 ;326
0000d4  e7ac              B        |L10.48|
                  |L10.214|
0000d6  682e              LDR      r6,[r5,#0]            ;326
0000d8  686f              LDR      r7,[r5,#4]            ;326
                  |L10.218|
0000da  1e7f              SUBS     r7,r7,#1              ;326
0000dc  f8160b01          LDRB     r0,[r6],#1            ;326
0000e0  9001              STR      r0,[sp,#4]            ;326
0000e2  bf00              NOP                            ;326
0000e4  bf00              NOP                            ;327
0000e6  b93f              CBNZ     r7,|L10.248|
0000e8  4620              MOV      r0,r4                 ;327
0000ea  68e9              LDR      r1,[r5,#0xc]          ;327
0000ec  4788              BLX      r1                    ;327
0000ee  b908              CBNZ     r0,|L10.244|
0000f0  2000              MOVS     r0,#0                 ;327
0000f2  e79d              B        |L10.48|
                  |L10.244|
0000f4  682e              LDR      r6,[r5,#0]            ;327
0000f6  686f              LDR      r7,[r5,#4]            ;327
                  |L10.248|
0000f8  1e7f              SUBS     r7,r7,#1              ;327
0000fa  f8169b01          LDRB     r9,[r6],#1            ;327
0000fe  bf00              NOP                            ;327
000100  2000              MOVS     r0,#0                 ;329
000102  9002              STR      r0,[sp,#8]            ;329
000104  f8d4a0d8          LDR      r10,[r4,#0xd8]        ;329
000108  e00a              B        |L10.288|
                  |L10.266|
00010a  f8da1000          LDR      r1,[r10,#0]           ;331
00010e  9801              LDR      r0,[sp,#4]            ;331
000110  4281              CMP      r1,r0                 ;331
000112  d100              BNE      |L10.278|
000114  e013              B        |L10.318|
                  |L10.278|
000116  9802              LDR      r0,[sp,#8]            ;330
000118  1c40              ADDS     r0,r0,#1              ;330
00011a  9002              STR      r0,[sp,#8]            ;330
00011c  f10a0a54          ADD      r10,r10,#0x54         ;330
                  |L10.288|
000120  6a61              LDR      r1,[r4,#0x24]         ;329
000122  9802              LDR      r0,[sp,#8]            ;329
000124  4281              CMP      r1,r0                 ;329
000126  dcf0              BGT      |L10.266|
000128  2005              MOVS     r0,#5                 ;335
00012a  6821              LDR      r1,[r4,#0]            ;335
00012c  6148              STR      r0,[r1,#0x14]         ;335
00012e  9801              LDR      r0,[sp,#4]            ;335
000130  6821              LDR      r1,[r4,#0]            ;335
000132  6188              STR      r0,[r1,#0x18]         ;335
000134  6820              LDR      r0,[r4,#0]            ;335
000136  6801              LDR      r1,[r0,#0]            ;335
000138  4620              MOV      r0,r4                 ;335
00013a  4788              BLX      r1                    ;335
00013c  bf00              NOP                            ;337
                  |L10.318|
00013e  f50470a6          ADD      r0,r4,#0x14c          ;339
000142  f840a02b          STR      r10,[r0,r11,LSL #2]   ;339
000146  f3c91003          UBFX     r0,r9,#4,#4           ;340
00014a  f8ca0014          STR      r0,[r10,#0x14]        ;340
00014e  f009000f          AND      r0,r9,#0xf            ;341
000152  f8ca0018          STR      r0,[r10,#0x18]        ;341
000156  bf00              NOP                            ;343
000158  6820              LDR      r0,[r4,#0]            ;343
00015a  3018              ADDS     r0,r0,#0x18           ;343
00015c  9000              STR      r0,[sp,#0]            ;343
00015e  e9dd1000          LDRD     r1,r0,[sp,#0]         ;343
000162  6008              STR      r0,[r1,#0]            ;343
000164  f8da1014          LDR      r1,[r10,#0x14]        ;343
000168  9800              LDR      r0,[sp,#0]            ;343
00016a  6041              STR      r1,[r0,#4]            ;343
00016c  f8da1018          LDR      r1,[r10,#0x18]        ;343
000170  9800              LDR      r0,[sp,#0]            ;343
000172  6081              STR      r1,[r0,#8]            ;343
000174  2068              MOVS     r0,#0x68              ;343
000176  6821              LDR      r1,[r4,#0]            ;343
000178  6148              STR      r0,[r1,#0x14]         ;343
00017a  6820              LDR      r0,[r4,#0]            ;343
00017c  2101              MOVS     r1,#1                 ;343
00017e  6842              LDR      r2,[r0,#4]            ;343
000180  4620              MOV      r0,r4                 ;343
000182  4790              BLX      r2                    ;343
000184  bf00              NOP                            ;343
000186  f10b0b01          ADD      r11,r11,#1            ;325
                  |L10.394|
00018a  45c3              CMP      r11,r8                ;325
00018c  db9b              BLT      |L10.198|
00018e  bf00              NOP                            ;348
000190  b93f              CBNZ     r7,|L10.418|
000192  4620              MOV      r0,r4                 ;348
000194  68e9              LDR      r1,[r5,#0xc]          ;348
000196  4788              BLX      r1                    ;348
000198  b908              CBNZ     r0,|L10.414|
00019a  2000              MOVS     r0,#0                 ;348
00019c  e748              B        |L10.48|
                  |L10.414|
00019e  682e              LDR      r6,[r5,#0]            ;348
0001a0  686f              LDR      r7,[r5,#4]            ;348
                  |L10.418|
0001a2  1e7f              SUBS     r7,r7,#1              ;348
0001a4  f8169b01          LDRB     r9,[r6],#1            ;348
0001a8  bf00              NOP                            ;348
0001aa  f8c49190          STR      r9,[r4,#0x190]        ;349
0001ae  bf00              NOP                            ;350
0001b0  b93f              CBNZ     r7,|L10.450|
0001b2  4620              MOV      r0,r4                 ;350
0001b4  68e9              LDR      r1,[r5,#0xc]          ;350
0001b6  4788              BLX      r1                    ;350
0001b8  b908              CBNZ     r0,|L10.446|
0001ba  2000              MOVS     r0,#0                 ;350
0001bc  e738              B        |L10.48|
                  |L10.446|
0001be  682e              LDR      r6,[r5,#0]            ;350
0001c0  686f              LDR      r7,[r5,#4]            ;350
                  |L10.450|
0001c2  1e7f              SUBS     r7,r7,#1              ;350
0001c4  f8169b01          LDRB     r9,[r6],#1            ;350
0001c8  bf00              NOP                            ;350
0001ca  f8c49194          STR      r9,[r4,#0x194]        ;351
0001ce  bf00              NOP                            ;352
0001d0  b93f              CBNZ     r7,|L10.482|
0001d2  4620              MOV      r0,r4                 ;352
0001d4  68e9              LDR      r1,[r5,#0xc]          ;352
0001d6  4788              BLX      r1                    ;352
0001d8  b908              CBNZ     r0,|L10.478|
0001da  2000              MOVS     r0,#0                 ;352
0001dc  e728              B        |L10.48|
                  |L10.478|
0001de  682e              LDR      r6,[r5,#0]            ;352
0001e0  686f              LDR      r7,[r5,#4]            ;352
                  |L10.482|
0001e2  1e7f              SUBS     r7,r7,#1              ;352
0001e4  f8169b01          LDRB     r9,[r6],#1            ;352
0001e8  bf00              NOP                            ;352
0001ea  f3c91003          UBFX     r0,r9,#4,#4           ;353
0001ee  f8c40198          STR      r0,[r4,#0x198]        ;353
0001f2  f009000f          AND      r0,r9,#0xf            ;354
0001f6  f8c4019c          STR      r0,[r4,#0x19c]        ;354
0001fa  bf00              NOP                            ;356
0001fc  6820              LDR      r0,[r4,#0]            ;356
0001fe  3018              ADDS     r0,r0,#0x18           ;356
000200  9000              STR      r0,[sp,#0]            ;356
000202  f8d41190          LDR      r1,[r4,#0x190]        ;356
000206  9800              LDR      r0,[sp,#0]            ;356
000208  6001              STR      r1,[r0,#0]            ;356
00020a  f8d41194          LDR      r1,[r4,#0x194]        ;356
00020e  9800              LDR      r0,[sp,#0]            ;356
000210  6041              STR      r1,[r0,#4]            ;356
000212  f8d41198          LDR      r1,[r4,#0x198]        ;356
000216  9800              LDR      r0,[sp,#0]            ;356
000218  6081              STR      r1,[r0,#8]            ;356
00021a  f8d4119c          LDR      r1,[r4,#0x19c]        ;356
00021e  9800              LDR      r0,[sp,#0]            ;356
000220  60c1              STR      r1,[r0,#0xc]          ;356
000222  2069              MOVS     r0,#0x69              ;356
000224  6821              LDR      r1,[r4,#0]            ;356
000226  6148              STR      r0,[r1,#0x14]         ;356
000228  6820              LDR      r0,[r4,#0]            ;356
00022a  2101              MOVS     r1,#1                 ;356
00022c  6842              LDR      r2,[r0,#4]            ;356
00022e  4620              MOV      r0,r4                 ;356
000230  4790              BLX      r2                    ;356
000232  bf00              NOP                            ;356
000234  2000              MOVS     r0,#0                 ;360
000236  f8d411b8          LDR      r1,[r4,#0x1b8]        ;360
00023a  6148              STR      r0,[r1,#0x14]         ;360
00023c  f8d40090          LDR      r0,[r4,#0x90]         ;363
000240  1c40              ADDS     r0,r0,#1              ;363
000242  f8c40090          STR      r0,[r4,#0x90]         ;363
000246  602e              STR      r6,[r5,#0]            ;365
000248  606f              STR      r7,[r5,#4]            ;365
00024a  2001              MOVS     r0,#1                 ;366
00024c  e6f0              B        |L10.48|
;;;368    
                          ENDP


                          AREA ||i.jinit_marker_reader||, CODE, READONLY, ALIGN=2

                  jinit_marker_reader PROC
;;;1261   GLOBAL(void)
;;;1262   jinit_marker_reader (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;1263   {
000002  4606              MOV      r6,r0
;;;1264     my_marker_ptr marker;
;;;1265     int i;
;;;1266   
;;;1267     /* Create subobject in permanent pool */
;;;1268     marker = (my_marker_ptr)
000004  6870              LDR      r0,[r6,#4]
000006  22ac              MOVS     r2,#0xac
000008  2100              MOVS     r1,#0
00000a  6803              LDR      r3,[r0,#0]
00000c  4630              MOV      r0,r6
00000e  4798              BLX      r3
000010  4604              MOV      r4,r0
;;;1269       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
;;;1270   				SIZEOF(my_marker_reader));
;;;1271     cinfo->marker = (struct jpeg_marker_reader *) marker;
000012  f8c641b8          STR      r4,[r6,#0x1b8]
;;;1272     /* Initialize public method pointers */
;;;1273     marker->pub.reset_marker_reader = reset_marker_reader;
000016  4810              LDR      r0,|L11.88|
000018  6020              STR      r0,[r4,#0]
;;;1274     marker->pub.read_markers = read_markers;
00001a  4810              LDR      r0,|L11.92|
00001c  6060              STR      r0,[r4,#4]
;;;1275     marker->pub.read_restart_marker = read_restart_marker;
00001e  4810              LDR      r0,|L11.96|
000020  60a0              STR      r0,[r4,#8]
;;;1276     /* Initialize COM/APPn processing.
;;;1277      * By default, we examine and then discard APP0 and APP14,
;;;1278      * but simply discard COM and all other APPn.
;;;1279      */
;;;1280     marker->process_COM = skip_variable;
000022  4810              LDR      r0,|L11.100|
000024  61e0              STR      r0,[r4,#0x1c]
;;;1281     marker->length_limit_COM = 0;
000026  2000              MOVS     r0,#0
000028  6620              STR      r0,[r4,#0x60]
;;;1282     for (i = 0; i < 16; i++) {
00002a  2500              MOVS     r5,#0
00002c  e009              B        |L11.66|
                  |L11.46|
;;;1283       marker->process_APPn[i] = skip_variable;
00002e  490d              LDR      r1,|L11.100|
000030  f1040020          ADD      r0,r4,#0x20
000034  f8401025          STR      r1,[r0,r5,LSL #2]
;;;1284       marker->length_limit_APPn[i] = 0;
000038  2100              MOVS     r1,#0
00003a  3044              ADDS     r0,r0,#0x44
00003c  f8401025          STR      r1,[r0,r5,LSL #2]
000040  1c6d              ADDS     r5,r5,#1              ;1282
                  |L11.66|
000042  2d10              CMP      r5,#0x10              ;1282
000044  dbf3              BLT      |L11.46|
;;;1285     }
;;;1286     marker->process_APPn[0] = get_interesting_appn;
000046  4808              LDR      r0,|L11.104|
000048  6220              STR      r0,[r4,#0x20]
;;;1287     marker->process_APPn[14] = get_interesting_appn;
00004a  4601              MOV      r1,r0
00004c  65a1              STR      r1,[r4,#0x58]
;;;1288     /* Reset marker processing state */
;;;1289     reset_marker_reader(cinfo);
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       reset_marker_reader
;;;1290   }
000054  bd70              POP      {r4-r6,pc}
;;;1291   
                          ENDP

000056  0000              DCW      0x0000
                  |L11.88|
                          DCD      reset_marker_reader
                  |L11.92|
                          DCD      read_markers
                  |L11.96|
                          DCD      read_restart_marker
                  |L11.100|
                          DCD      skip_variable
                  |L11.104|
                          DCD      get_interesting_appn

                          AREA ||i.jpeg_resync_to_restart||, CODE, READONLY, ALIGN=1

                  jpeg_resync_to_restart PROC
;;;1191   GLOBAL(boolean)
;;;1192   jpeg_resync_to_restart (j_decompress_ptr cinfo, int desired)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1193   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1194     int marker = cinfo->unread_marker;
000008  f8d451a0          LDR      r5,[r4,#0x1a0]
;;;1195     int action;
;;;1196     
;;;1197     /* Always put up a warning. */
;;;1198     WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
00000c  2079              MOVS     r0,#0x79
00000e  6821              LDR      r1,[r4,#0]
000010  6148              STR      r0,[r1,#0x14]
000012  6820              LDR      r0,[r4,#0]
000014  6185              STR      r5,[r0,#0x18]
000016  6820              LDR      r0,[r4,#0]
000018  61c6              STR      r6,[r0,#0x1c]
00001a  6820              LDR      r0,[r4,#0]
00001c  f04f31ff          MOV      r1,#0xffffffff
000020  6842              LDR      r2,[r0,#4]
000022  4620              MOV      r0,r4
000024  4790              BLX      r2
;;;1199     
;;;1200     /* Outer loop handles repeated decision after scanning forward. */
;;;1201     while(1) {
000026  e04b              B        |L12.192|
                  |L12.40|
;;;1202       if (marker < (int) M_SOF0)
000028  2dc0              CMP      r5,#0xc0
00002a  da01              BGE      |L12.48|
;;;1203         action = 2;		/* invalid marker */
00002c  2702              MOVS     r7,#2
00002e  e022              B        |L12.118|
                  |L12.48|
;;;1204       else if (marker < (int) M_RST0 || marker > (int) M_RST7)
000030  2dd0              CMP      r5,#0xd0
000032  db01              BLT      |L12.56|
000034  2dd7              CMP      r5,#0xd7
000036  dd01              BLE      |L12.60|
                  |L12.56|
;;;1205         action = 3;		/* valid non-restart marker */
000038  2703              MOVS     r7,#3
00003a  e01c              B        |L12.118|
                  |L12.60|
;;;1206       else {
;;;1207         if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
00003c  1c70              ADDS     r0,r6,#1
00003e  f0000007          AND      r0,r0,#7
000042  30d0              ADDS     r0,r0,#0xd0
000044  42a8              CMP      r0,r5
000046  d005              BEQ      |L12.84|
;;;1208   	  marker == ((int) M_RST0 + ((desired+2) & 7)))
000048  1cb0              ADDS     r0,r6,#2
00004a  f0000007          AND      r0,r0,#7
00004e  30d0              ADDS     r0,r0,#0xd0
000050  42a8              CMP      r0,r5
000052  d101              BNE      |L12.88|
                  |L12.84|
;;;1209   	action = 3;		/* one of the next two expected restarts */
000054  2703              MOVS     r7,#3
000056  e00e              B        |L12.118|
                  |L12.88|
;;;1210         else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
000058  1e70              SUBS     r0,r6,#1
00005a  f0000007          AND      r0,r0,#7
00005e  30d0              ADDS     r0,r0,#0xd0
000060  42a8              CMP      r0,r5
000062  d005              BEQ      |L12.112|
;;;1211   	       marker == ((int) M_RST0 + ((desired-2) & 7)))
000064  1eb0              SUBS     r0,r6,#2
000066  f0000007          AND      r0,r0,#7
00006a  30d0              ADDS     r0,r0,#0xd0
00006c  42a8              CMP      r0,r5
00006e  d101              BNE      |L12.116|
                  |L12.112|
;;;1212   	action = 2;		/* a prior restart, so advance */
000070  2702              MOVS     r7,#2
000072  e000              B        |L12.118|
                  |L12.116|
;;;1213         else
;;;1214   	action = 1;		/* desired restart or too far away */
000074  2701              MOVS     r7,#1
                  |L12.118|
;;;1215       }
;;;1216       TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
000076  2061              MOVS     r0,#0x61
000078  6821              LDR      r1,[r4,#0]
00007a  6148              STR      r0,[r1,#0x14]
00007c  6820              LDR      r0,[r4,#0]
00007e  6185              STR      r5,[r0,#0x18]
000080  6820              LDR      r0,[r4,#0]
000082  61c7              STR      r7,[r0,#0x1c]
000084  6820              LDR      r0,[r4,#0]
000086  2104              MOVS     r1,#4
000088  6842              LDR      r2,[r0,#4]
00008a  4620              MOV      r0,r4
00008c  4790              BLX      r2
;;;1217       switch (action) {
00008e  2f01              CMP      r7,#1
000090  d004              BEQ      |L12.156|
000092  2f02              CMP      r7,#2
000094  d008              BEQ      |L12.168|
000096  2f03              CMP      r7,#3
000098  d111              BNE      |L12.190|
00009a  e00e              B        |L12.186|
                  |L12.156|
;;;1218       case 1:
;;;1219         /* Discard marker and let entropy decoder resume processing. */
;;;1220         cinfo->unread_marker = 0;
00009c  2000              MOVS     r0,#0
00009e  f8c401a0          STR      r0,[r4,#0x1a0]
;;;1221         return TRUE;
0000a2  2001              MOVS     r0,#1
                  |L12.164|
;;;1222       case 2:
;;;1223         /* Scan to the next marker, and repeat the decision loop. */
;;;1224         if (! next_marker(cinfo))
;;;1225   	return FALSE;
;;;1226         marker = cinfo->unread_marker;
;;;1227         break;
;;;1228       case 3:
;;;1229         /* Return without advancing past this marker. */
;;;1230         /* Entropy decoder will be forced to process an empty segment. */
;;;1231         return TRUE;
;;;1232       }
;;;1233     } /* end loop */
;;;1234   }
0000a4  e8bd81f0          POP      {r4-r8,pc}
                  |L12.168|
0000a8  4620              MOV      r0,r4                 ;1224
0000aa  f7fffffe          BL       next_marker
0000ae  b908              CBNZ     r0,|L12.180|
0000b0  2000              MOVS     r0,#0                 ;1225
0000b2  e7f7              B        |L12.164|
                  |L12.180|
0000b4  f8d451a0          LDR      r5,[r4,#0x1a0]        ;1226
0000b8  e001              B        |L12.190|
                  |L12.186|
0000ba  2001              MOVS     r0,#1                 ;1231
0000bc  e7f2              B        |L12.164|
                  |L12.190|
0000be  bf00              NOP                            ;1227
                  |L12.192|
0000c0  e7b2              B        |L12.40|
;;;1235   
                          ENDP


                          AREA ||i.jpeg_set_marker_processor||, CODE, READONLY, ALIGN=1

                  jpeg_set_marker_processor PROC
;;;1348   GLOBAL(void)
;;;1349   jpeg_set_marker_processor (j_decompress_ptr cinfo, int marker_code,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1350   			   jpeg_marker_parser_method routine)
;;;1351   {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;1352     my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
00000a  f8d571b8          LDR      r7,[r5,#0x1b8]
;;;1353   
;;;1354     if (marker_code == (int) M_COM)
00000e  2cfe              CMP      r4,#0xfe
000010  d101              BNE      |L13.22|
;;;1355       marker->process_COM = routine;
000012  61fe              STR      r6,[r7,#0x1c]
000014  e013              B        |L13.62|
                  |L13.22|
;;;1356     else if (marker_code >= (int) M_APP0 && marker_code <= (int) M_APP15)
000016  2ce0              CMP      r4,#0xe0
000018  db08              BLT      |L13.44|
00001a  2cef              CMP      r4,#0xef
00001c  dc06              BGT      |L13.44|
;;;1357       marker->process_APPn[marker_code - (int) M_APP0] = routine;
00001e  f1a400e0          SUB      r0,r4,#0xe0
000022  f1070120          ADD      r1,r7,#0x20
000026  f8416020          STR      r6,[r1,r0,LSL #2]
00002a  e008              B        |L13.62|
                  |L13.44|
;;;1358     else
;;;1359       ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, marker_code);
00002c  2044              MOVS     r0,#0x44
00002e  6829              LDR      r1,[r5,#0]
000030  6148              STR      r0,[r1,#0x14]
000032  6828              LDR      r0,[r5,#0]
000034  6184              STR      r4,[r0,#0x18]
000036  6828              LDR      r0,[r5,#0]
000038  6801              LDR      r1,[r0,#0]
00003a  4628              MOV      r0,r5
00003c  4788              BLX      r1
                  |L13.62|
;;;1360   }
00003e  e8bd81f0          POP      {r4-r8,pc}
                          ENDP


                          AREA ||i.next_marker||, CODE, READONLY, ALIGN=1

                  next_marker PROC
;;;873    LOCAL(boolean)
;;;874    next_marker (j_decompress_ptr cinfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;875    {
000004  4605              MOV      r5,r0
;;;876      int c;
;;;877      INPUT_VARS(cinfo);
000006  69ac              LDR      r4,[r5,#0x18]
000008  6826              LDR      r6,[r4,#0]
00000a  6867              LDR      r7,[r4,#4]
;;;878    
;;;879      while(1) {
00000c  e048              B        |L14.160|
                  |L14.14|
;;;880        INPUT_BYTE(cinfo, c, return FALSE);
00000e  bf00              NOP      
000010  b947              CBNZ     r7,|L14.36|
000012  4628              MOV      r0,r5
000014  68e1              LDR      r1,[r4,#0xc]
000016  4788              BLX      r1
000018  b910              CBNZ     r0,|L14.32|
00001a  2000              MOVS     r0,#0
                  |L14.28|
;;;881        /* Skip any non-FF bytes.
;;;882         * This may look a bit inefficient, but it will not occur in a valid file.
;;;883         * We sync after each discarded byte so that a suspending data source
;;;884         * can discard the byte from its buffer.
;;;885         */
;;;886        while (c != 0xFF) {
;;;887          cinfo->marker->discarded_bytes++;
;;;888          INPUT_SYNC(cinfo);
;;;889          INPUT_BYTE(cinfo, c, return FALSE);
;;;890        }
;;;891        /* This loop swallows any duplicate FF bytes.  Extra FFs are legal as
;;;892         * pad bytes, so don't count them in discarded_bytes.  We assume there
;;;893         * will not be so many consecutive FF bytes as to overflow a suspending
;;;894         * data source's input buffer.
;;;895         */
;;;896        do {
;;;897          INPUT_BYTE(cinfo, c, return FALSE);
;;;898        } while (c == 0xFF);
;;;899        if (c != 0)
;;;900          break;			/* found a valid marker, exit loop */
;;;901        /* Reach here if we found a stuffed-zero data sequence (FF/00).
;;;902         * Discard it and loop back to try again.
;;;903         */
;;;904        cinfo->marker->discarded_bytes += 2;
;;;905        INPUT_SYNC(cinfo);
;;;906      }
;;;907    
;;;908      if (cinfo->marker->discarded_bytes != 0) {
;;;909        WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
;;;910        cinfo->marker->discarded_bytes = 0;
;;;911      }
;;;912    
;;;913      cinfo->unread_marker = c;
;;;914    
;;;915      INPUT_SYNC(cinfo);
;;;916      return TRUE;
;;;917    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L14.32|
000020  6826              LDR      r6,[r4,#0]            ;880
000022  6867              LDR      r7,[r4,#4]            ;880
                  |L14.36|
000024  1e7f              SUBS     r7,r7,#1              ;880
000026  f8168b01          LDRB     r8,[r6],#1            ;880
00002a  bf00              NOP                            ;880
00002c  e016              B        |L14.92|
                  |L14.46|
00002e  f8d501b8          LDR      r0,[r5,#0x1b8]        ;887
000032  6980              LDR      r0,[r0,#0x18]         ;887
000034  1c40              ADDS     r0,r0,#1              ;887
000036  f8d511b8          LDR      r1,[r5,#0x1b8]        ;887
00003a  6188              STR      r0,[r1,#0x18]         ;887
00003c  6026              STR      r6,[r4,#0]            ;888
00003e  6067              STR      r7,[r4,#4]            ;888
000040  bf00              NOP                            ;889
000042  b93f              CBNZ     r7,|L14.84|
000044  4628              MOV      r0,r5                 ;889
000046  68e1              LDR      r1,[r4,#0xc]          ;889
000048  4788              BLX      r1                    ;889
00004a  b908              CBNZ     r0,|L14.80|
00004c  2000              MOVS     r0,#0                 ;889
00004e  e7e5              B        |L14.28|
                  |L14.80|
000050  6826              LDR      r6,[r4,#0]            ;889
000052  6867              LDR      r7,[r4,#4]            ;889
                  |L14.84|
000054  1e7f              SUBS     r7,r7,#1              ;889
000056  f8168b01          LDRB     r8,[r6],#1            ;889
00005a  bf00              NOP                            ;889
                  |L14.92|
00005c  f1b80fff          CMP      r8,#0xff              ;886
000060  d1e5              BNE      |L14.46|
000062  bf00              NOP                            ;896
                  |L14.100|
000064  bf00              NOP                            ;897
000066  b93f              CBNZ     r7,|L14.120|
000068  4628              MOV      r0,r5                 ;897
00006a  68e1              LDR      r1,[r4,#0xc]          ;897
00006c  4788              BLX      r1                    ;897
00006e  b908              CBNZ     r0,|L14.116|
000070  2000              MOVS     r0,#0                 ;897
000072  e7d3              B        |L14.28|
                  |L14.116|
000074  6826              LDR      r6,[r4,#0]            ;897
000076  6867              LDR      r7,[r4,#4]            ;897
                  |L14.120|
000078  1e7f              SUBS     r7,r7,#1              ;897
00007a  f8168b01          LDRB     r8,[r6],#1            ;897
00007e  bf00              NOP                            ;897
000080  f1b80fff          CMP      r8,#0xff              ;898
000084  d0ee              BEQ      |L14.100|
000086  f1b80f00          CMP      r8,#0                 ;899
00008a  d000              BEQ      |L14.142|
00008c  e009              B        |L14.162|
                  |L14.142|
00008e  f8d501b8          LDR      r0,[r5,#0x1b8]        ;904
000092  6980              LDR      r0,[r0,#0x18]         ;904
000094  1c80              ADDS     r0,r0,#2              ;904
000096  f8d511b8          LDR      r1,[r5,#0x1b8]        ;904
00009a  6188              STR      r0,[r1,#0x18]         ;904
00009c  6026              STR      r6,[r4,#0]            ;905
00009e  6067              STR      r7,[r4,#4]            ;905
                  |L14.160|
0000a0  e7b5              B        |L14.14|
                  |L14.162|
0000a2  bf00              NOP                            ;900
0000a4  f8d501b8          LDR      r0,[r5,#0x1b8]        ;908
0000a8  6980              LDR      r0,[r0,#0x18]         ;908
0000aa  b1a0              CBZ      r0,|L14.214|
0000ac  2074              MOVS     r0,#0x74              ;909
0000ae  6829              LDR      r1,[r5,#0]            ;909
0000b0  6148              STR      r0,[r1,#0x14]         ;909
0000b2  f8d501b8          LDR      r0,[r5,#0x1b8]        ;909
0000b6  6980              LDR      r0,[r0,#0x18]         ;909
0000b8  6829              LDR      r1,[r5,#0]            ;909
0000ba  6188              STR      r0,[r1,#0x18]         ;909
0000bc  6828              LDR      r0,[r5,#0]            ;909
0000be  f8c0801c          STR      r8,[r0,#0x1c]         ;909
0000c2  6828              LDR      r0,[r5,#0]            ;909
0000c4  f04f31ff          MOV      r1,#0xffffffff        ;909
0000c8  6842              LDR      r2,[r0,#4]            ;909
0000ca  4628              MOV      r0,r5                 ;909
0000cc  4790              BLX      r2                    ;909
0000ce  2000              MOVS     r0,#0                 ;910
0000d0  f8d511b8          LDR      r1,[r5,#0x1b8]        ;910
0000d4  6188              STR      r0,[r1,#0x18]         ;910
                  |L14.214|
0000d6  f8c581a0          STR      r8,[r5,#0x1a0]        ;913
0000da  6026              STR      r6,[r4,#0]            ;915
0000dc  6067              STR      r7,[r4,#4]            ;915
0000de  2001              MOVS     r0,#1                 ;916
0000e0  e79c              B        |L14.28|
;;;918    
                          ENDP


                          AREA ||i.read_markers||, CODE, READONLY, ALIGN=1

                  read_markers PROC
;;;951    METHODDEF(int)
;;;952    read_markers (j_decompress_ptr cinfo)
000000  b510              PUSH     {r4,lr}
;;;953    {
000002  4604              MOV      r4,r0
;;;954      /* Outer loop repeats once for each marker. */
;;;955      while(1) {
000004  e122              B        |L15.588|
                  |L15.6|
;;;956        /* Collect the marker proper, unless we already did. */
;;;957        /* NB: first_marker() enforces the requirement that SOI appear first. */
;;;958        if (cinfo->unread_marker == 0) {
000006  f8d401a0          LDR      r0,[r4,#0x1a0]
00000a  b978              CBNZ     r0,|L15.44|
;;;959          if (! cinfo->marker->saw_SOI) {
00000c  f8d401b8          LDR      r0,[r4,#0x1b8]
000010  68c0              LDR      r0,[r0,#0xc]
000012  b928              CBNZ     r0,|L15.32|
;;;960    	if (! first_marker(cinfo))
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       first_marker
00001a  b938              CBNZ     r0,|L15.44|
;;;961    	  return JPEG_SUSPENDED;
00001c  2000              MOVS     r0,#0
                  |L15.30|
;;;962          } else {
;;;963    	if (! next_marker(cinfo))
;;;964    	  return JPEG_SUSPENDED;
;;;965          }
;;;966        }
;;;967        /* At this point cinfo->unread_marker contains the marker code and the
;;;968         * input point is just past the marker proper, but before any parameters.
;;;969         * A suspension will cause us to return with this state still true.
;;;970         */
;;;971        switch (cinfo->unread_marker) {
;;;972        case M_SOI:
;;;973          if (! get_soi(cinfo))
;;;974    	return JPEG_SUSPENDED;
;;;975          break;
;;;976    
;;;977        case M_SOF0:		/* Baseline */
;;;978        case M_SOF1:		/* Extended sequential, Huffman */
;;;979          if (! get_sof(cinfo, FALSE, FALSE))
;;;980    	return JPEG_SUSPENDED;
;;;981          break;
;;;982    
;;;983        case M_SOF2:		/* Progressive, Huffman */
;;;984          if (! get_sof(cinfo, TRUE, FALSE))
;;;985    	return JPEG_SUSPENDED;
;;;986          break;
;;;987    
;;;988        case M_SOF9:		/* Extended sequential, arithmetic */
;;;989          if (! get_sof(cinfo, FALSE, TRUE))
;;;990    	return JPEG_SUSPENDED;
;;;991          break;
;;;992    
;;;993        case M_SOF10:		/* Progressive, arithmetic */
;;;994          if (! get_sof(cinfo, TRUE, TRUE))
;;;995    	return JPEG_SUSPENDED;
;;;996          break;
;;;997    
;;;998        /* Currently unsupported SOFn types */
;;;999        case M_SOF3:		/* Lossless, Huffman */
;;;1000       case M_SOF5:		/* Differential sequential, Huffman */
;;;1001       case M_SOF6:		/* Differential progressive, Huffman */
;;;1002       case M_SOF7:		/* Differential lossless, Huffman */
;;;1003       case M_JPG:			/* Reserved for JPEG extensions */
;;;1004       case M_SOF11:		/* Lossless, arithmetic */
;;;1005       case M_SOF13:		/* Differential sequential, arithmetic */
;;;1006       case M_SOF14:		/* Differential progressive, arithmetic */
;;;1007       case M_SOF15:		/* Differential lossless, arithmetic */
;;;1008         ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
;;;1009         break;
;;;1010   
;;;1011       case M_SOS:
;;;1012         if (! get_sos(cinfo))
;;;1013   	return JPEG_SUSPENDED;
;;;1014         cinfo->unread_marker = 0;	/* processed the marker */
;;;1015         return JPEG_REACHED_SOS;
;;;1016       
;;;1017       case M_EOI:
;;;1018         TRACEMS(cinfo, 1, JTRC_EOI);
;;;1019         cinfo->unread_marker = 0;	/* processed the marker */
;;;1020         return JPEG_REACHED_EOI;
;;;1021         
;;;1022       case M_DAC:
;;;1023         if (! get_dac(cinfo))
;;;1024   	return JPEG_SUSPENDED;
;;;1025         break;
;;;1026         
;;;1027       case M_DHT:
;;;1028         if (! get_dht(cinfo))
;;;1029   	return JPEG_SUSPENDED;
;;;1030         break;
;;;1031         
;;;1032       case M_DQT:
;;;1033         if (! get_dqt(cinfo))
;;;1034   	return JPEG_SUSPENDED;
;;;1035         break;
;;;1036         
;;;1037       case M_DRI:
;;;1038         if (! get_dri(cinfo))
;;;1039   	return JPEG_SUSPENDED;
;;;1040         break;
;;;1041         
;;;1042       case M_APP0:
;;;1043       case M_APP1:
;;;1044       case M_APP2:
;;;1045       case M_APP3:
;;;1046       case M_APP4:
;;;1047       case M_APP5:
;;;1048       case M_APP6:
;;;1049       case M_APP7:
;;;1050       case M_APP8:
;;;1051       case M_APP9:
;;;1052       case M_APP10:
;;;1053       case M_APP11:
;;;1054       case M_APP12:
;;;1055       case M_APP13:
;;;1056       case M_APP14:
;;;1057       case M_APP15:
;;;1058         if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
;;;1059   		cinfo->unread_marker - (int) M_APP0]) (cinfo))
;;;1060   	return JPEG_SUSPENDED;
;;;1061         break;
;;;1062         
;;;1063       case M_COM:
;;;1064         if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
;;;1065   	return JPEG_SUSPENDED;
;;;1066         break;
;;;1067   
;;;1068       case M_RST0:		/* these are all parameterless */
;;;1069       case M_RST1:
;;;1070       case M_RST2:
;;;1071       case M_RST3:
;;;1072       case M_RST4:
;;;1073       case M_RST5:
;;;1074       case M_RST6:
;;;1075       case M_RST7:
;;;1076       case M_TEM:
;;;1077         TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
;;;1078         break;
;;;1079   
;;;1080       case M_DNL:			/* Ignore DNL ... perhaps the wrong thing */
;;;1081         if (! skip_variable(cinfo))
;;;1082   	return JPEG_SUSPENDED;
;;;1083         break;
;;;1084   
;;;1085       default:			/* must be DHP, EXP, JPGn, or RESn */
;;;1086         /* For now, we treat the reserved markers as fatal errors since they are
;;;1087          * likely to be used to signal incompatible JPEG Part 3 extensions.
;;;1088          * Once the JPEG 3 version-number marker is well defined, this code
;;;1089          * ought to change!
;;;1090          */
;;;1091         ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
;;;1092         break;
;;;1093       }
;;;1094       /* Successfully processed marker, so reset state variable */
;;;1095       cinfo->unread_marker = 0;
;;;1096     } /* end loop */
;;;1097   }
00001e  bd10              POP      {r4,pc}
                  |L15.32|
000020  4620              MOV      r0,r4                 ;963
000022  f7fffffe          BL       next_marker
000026  b908              CBNZ     r0,|L15.44|
000028  2000              MOVS     r0,#0                 ;964
00002a  e7f8              B        |L15.30|
                  |L15.44|
00002c  f8d401a0          LDR      r0,[r4,#0x1a0]        ;971
000030  28d7              CMP      r0,#0xd7              ;971
000032  d07d              BEQ      |L15.304|
000034  dc27              BGT      |L15.134|
000036  28cb              CMP      r0,#0xcb              ;971
000038  d06f              BEQ      |L15.282|
00003a  dc19              BGT      |L15.112|
00003c  28c5              CMP      r0,#0xc5              ;971
00003e  d068              BEQ      |L15.274|
000040  dc0e              BGT      |L15.96|
000042  28c2              CMP      r0,#0xc2              ;971
000044  d049              BEQ      |L15.218|
000046  dc06              BGT      |L15.86|
000048  2801              CMP      r0,#1                 ;971
00004a  d072              BEQ      |L15.306|
00004c  28c0              CMP      r0,#0xc0              ;971
00004e  d03a              BEQ      |L15.198|
000050  28c1              CMP      r0,#0xc1              ;971
                  |L15.82|
000052  d16f              BNE      |L15.308|
000054  e038              B        |L15.200|
                  |L15.86|
000056  28c3              CMP      r0,#0xc3              ;971
000058  d05a              BEQ      |L15.272|
00005a  28c4              CMP      r0,#0xc4              ;971
00005c  d1f9              BNE      |L15.82|
00005e  e08e              B        |L15.382|
                  |L15.96|
000060  38c6              SUBS     r0,r0,#0xc6           ;971
000062  2805              CMP      r0,#5                 ;971
                  |L15.100|
000064  d266              BCS      |L15.308|
000066  e8dff000          TBB      [pc,r0]               ;971
00006a  5556              DCB      0x55,0x56
00006c  57414a00          DCB      0x57,0x41,0x4a,0x00
                  |L15.112|
000070  38cc              SUBS     r0,r0,#0xcc           ;971
000072  280b              CMP      r0,#0xb               ;971
000074  d2f6              BCS      |L15.100|
000076  e8dff000          TBB      [pc,r0]               ;971
00007a  7b51              DCB      0x7b,0x51
00007c  5253bdbe          DCB      0x52,0x53,0xbd,0xbe
000080  bfc0c1c2          DCB      0xbf,0xc0,0xc1,0xc2
000084  c300              DCB      0xc3,0x00
                  |L15.134|
000086  38d8              SUBS     r0,r0,#0xd8           ;971
000088  2827              CMP      r0,#0x27              ;971
00008a  d2eb              BCS      |L15.100|
00008c  e8dff000          TBB      [pc,r0]               ;971
000090  1463587e          DCB      0x14,0x63,0x58,0x7e
000094  c785cece          DCB      0xc7,0x85,0xce,0xce
000098  8c8d8e8f          DCB      0x8c,0x8d,0x8e,0x8f
00009c  90919293          DCB      0x90,0x91,0x92,0x93
0000a0  94959697          DCB      0x94,0x95,0x96,0x97
0000a4  98999a9b          DCB      0x98,0x99,0x9a,0x9b
0000a8  cececece          DCB      0xce,0xce,0xce,0xce
0000ac  cececece          DCB      0xce,0xce,0xce,0xce
0000b0  cececece          DCB      0xce,0xce,0xce,0xce
0000b4  cecea900          DCB      0xce,0xce,0xa9,0x00
0000b8  4620              MOV      r0,r4                 ;973
0000ba  f7fffffe          BL       get_soi
0000be  b908              CBNZ     r0,|L15.196|
0000c0  2000              MOVS     r0,#0                 ;974
0000c2  e7ac              B        |L15.30|
                  |L15.196|
0000c4  e0be              B        |L15.580|
                  |L15.198|
0000c6  bf00              NOP                            ;978
                  |L15.200|
0000c8  2200              MOVS     r2,#0                 ;979
0000ca  4611              MOV      r1,r2                 ;979
0000cc  4620              MOV      r0,r4                 ;979
0000ce  f7fffffe          BL       get_sof
0000d2  b908              CBNZ     r0,|L15.216|
0000d4  2000              MOVS     r0,#0                 ;980
0000d6  e7a2              B        |L15.30|
                  |L15.216|
0000d8  e0b4              B        |L15.580|
                  |L15.218|
0000da  2200              MOVS     r2,#0                 ;984
0000dc  2101              MOVS     r1,#1                 ;984
0000de  4620              MOV      r0,r4                 ;984
0000e0  f7fffffe          BL       get_sof
0000e4  b908              CBNZ     r0,|L15.234|
0000e6  2000              MOVS     r0,#0                 ;985
0000e8  e799              B        |L15.30|
                  |L15.234|
0000ea  e0ab              B        |L15.580|
0000ec  2201              MOVS     r2,#1                 ;989
0000ee  2100              MOVS     r1,#0                 ;989
0000f0  4620              MOV      r0,r4                 ;989
0000f2  f7fffffe          BL       get_sof
0000f6  b908              CBNZ     r0,|L15.252|
0000f8  2000              MOVS     r0,#0                 ;990
0000fa  e790              B        |L15.30|
                  |L15.252|
0000fc  e0a2              B        |L15.580|
0000fe  2201              MOVS     r2,#1                 ;994
000100  4611              MOV      r1,r2                 ;994
000102  4620              MOV      r0,r4                 ;994
000104  f7fffffe          BL       get_sof
000108  b908              CBNZ     r0,|L15.270|
00010a  2000              MOVS     r0,#0                 ;995
00010c  e787              B        |L15.30|
                  |L15.270|
00010e  e099              B        |L15.580|
                  |L15.272|
000110  bf00              NOP                            ;1000
                  |L15.274|
000112  bf00              NOP                            ;1001
000114  bf00              NOP                            ;1002
000116  bf00              NOP                            ;1003
000118  bf00              NOP                            ;1004
                  |L15.282|
00011a  bf00              NOP                            ;1005
00011c  bf00              NOP                            ;1006
00011e  bf00              NOP                            ;1007
000120  203c              MOVS     r0,#0x3c              ;1008
000122  6821              LDR      r1,[r4,#0]            ;1008
000124  6148              STR      r0,[r1,#0x14]         ;1008
000126  6821              LDR      r1,[r4,#0]            ;1008
000128  f8d401a0          LDR      r0,[r4,#0x1a0]        ;1008
00012c  6188              STR      r0,[r1,#0x18]         ;1008
00012e  e002              B        |L15.310|
                  |L15.304|
000130  e067              B        |L15.514|
                  |L15.306|
000132  e067              B        |L15.516|
                  |L15.308|
000134  e07a              B        |L15.556|
                  |L15.310|
000136  6820              LDR      r0,[r4,#0]            ;1008
000138  6801              LDR      r1,[r0,#0]            ;1008
00013a  4620              MOV      r0,r4                 ;1008
00013c  4788              BLX      r1                    ;1008
00013e  e081              B        |L15.580|
000140  4620              MOV      r0,r4                 ;1012
000142  f7fffffe          BL       get_sos
000146  b908              CBNZ     r0,|L15.332|
000148  2000              MOVS     r0,#0                 ;1013
00014a  e768              B        |L15.30|
                  |L15.332|
00014c  2000              MOVS     r0,#0                 ;1014
00014e  f8c401a0          STR      r0,[r4,#0x1a0]        ;1014
000152  2001              MOVS     r0,#1                 ;1015
000154  e763              B        |L15.30|
000156  2055              MOVS     r0,#0x55              ;1018
000158  6821              LDR      r1,[r4,#0]            ;1018
00015a  6148              STR      r0,[r1,#0x14]         ;1018
00015c  6820              LDR      r0,[r4,#0]            ;1018
00015e  2101              MOVS     r1,#1                 ;1018
000160  6842              LDR      r2,[r0,#4]            ;1018
000162  4620              MOV      r0,r4                 ;1018
000164  4790              BLX      r2                    ;1018
000166  2000              MOVS     r0,#0                 ;1019
000168  f8c401a0          STR      r0,[r4,#0x1a0]        ;1019
00016c  2002              MOVS     r0,#2                 ;1020
00016e  e756              B        |L15.30|
000170  4620              MOV      r0,r4                 ;1023
000172  f7fffffe          BL       skip_variable
000176  b908              CBNZ     r0,|L15.380|
000178  2000              MOVS     r0,#0                 ;1024
00017a  e750              B        |L15.30|
                  |L15.380|
00017c  e062              B        |L15.580|
                  |L15.382|
00017e  4620              MOV      r0,r4                 ;1028
000180  f7fffffe          BL       get_dht
000184  b908              CBNZ     r0,|L15.394|
000186  2000              MOVS     r0,#0                 ;1029
000188  e749              B        |L15.30|
                  |L15.394|
00018a  e05b              B        |L15.580|
00018c  4620              MOV      r0,r4                 ;1033
00018e  f7fffffe          BL       get_dqt
000192  b908              CBNZ     r0,|L15.408|
000194  2000              MOVS     r0,#0                 ;1034
000196  e742              B        |L15.30|
                  |L15.408|
000198  e054              B        |L15.580|
00019a  4620              MOV      r0,r4                 ;1038
00019c  f7fffffe          BL       get_dri
0001a0  b908              CBNZ     r0,|L15.422|
0001a2  2000              MOVS     r0,#0                 ;1039
0001a4  e73b              B        |L15.30|
                  |L15.422|
0001a6  e04d              B        |L15.580|
0001a8  bf00              NOP                            ;1043
0001aa  bf00              NOP                            ;1044
0001ac  bf00              NOP                            ;1045
0001ae  bf00              NOP                            ;1046
0001b0  bf00              NOP                            ;1047
0001b2  bf00              NOP                            ;1048
0001b4  bf00              NOP                            ;1049
0001b6  bf00              NOP                            ;1050
0001b8  bf00              NOP                            ;1051
0001ba  bf00              NOP                            ;1052
0001bc  bf00              NOP                            ;1053
0001be  bf00              NOP                            ;1054
0001c0  bf00              NOP                            ;1055
0001c2  bf00              NOP                            ;1056
0001c4  bf00              NOP                            ;1057
0001c6  f8d401b8          LDR      r0,[r4,#0x1b8]        ;1058
0001ca  3020              ADDS     r0,r0,#0x20           ;1058
0001cc  f8d421a0          LDR      r2,[r4,#0x1a0]        ;1058
0001d0  3ae0              SUBS     r2,r2,#0xe0           ;1058
0001d2  f8501022          LDR      r1,[r0,r2,LSL #2]     ;1058
0001d6  4620              MOV      r0,r4                 ;1058
0001d8  4788              BLX      r1                    ;1058
0001da  b908              CBNZ     r0,|L15.480|
0001dc  2000              MOVS     r0,#0                 ;1060
0001de  e71e              B        |L15.30|
                  |L15.480|
0001e0  e030              B        |L15.580|
0001e2  f8d401b8          LDR      r0,[r4,#0x1b8]        ;1064
0001e6  69c1              LDR      r1,[r0,#0x1c]         ;1064
0001e8  4620              MOV      r0,r4                 ;1064
0001ea  4788              BLX      r1                    ;1064
0001ec  b908              CBNZ     r0,|L15.498|
0001ee  2000              MOVS     r0,#0                 ;1065
0001f0  e715              B        |L15.30|
                  |L15.498|
0001f2  e027              B        |L15.580|
0001f4  bf00              NOP                            ;1069
0001f6  bf00              NOP                            ;1070
0001f8  bf00              NOP                            ;1071
0001fa  bf00              NOP                            ;1072
0001fc  bf00              NOP                            ;1073
0001fe  bf00              NOP                            ;1074
000200  bf00              NOP                            ;1075
                  |L15.514|
000202  bf00              NOP                            ;1076
                  |L15.516|
000204  205c              MOVS     r0,#0x5c              ;1077
000206  6821              LDR      r1,[r4,#0]            ;1077
000208  6148              STR      r0,[r1,#0x14]         ;1077
00020a  6821              LDR      r1,[r4,#0]            ;1077
00020c  f8d401a0          LDR      r0,[r4,#0x1a0]        ;1077
000210  6188              STR      r0,[r1,#0x18]         ;1077
000212  6820              LDR      r0,[r4,#0]            ;1077
000214  2101              MOVS     r1,#1                 ;1077
000216  6842              LDR      r2,[r0,#4]            ;1077
000218  4620              MOV      r0,r4                 ;1077
00021a  4790              BLX      r2                    ;1077
00021c  e012              B        |L15.580|
00021e  4620              MOV      r0,r4                 ;1081
000220  f7fffffe          BL       skip_variable
000224  b908              CBNZ     r0,|L15.554|
000226  2000              MOVS     r0,#0                 ;1082
000228  e6f9              B        |L15.30|
                  |L15.554|
00022a  e00b              B        |L15.580|
                  |L15.556|
00022c  2044              MOVS     r0,#0x44              ;1091
00022e  6821              LDR      r1,[r4,#0]            ;1091
000230  6148              STR      r0,[r1,#0x14]         ;1091
000232  6821              LDR      r1,[r4,#0]            ;1091
000234  f8d401a0          LDR      r0,[r4,#0x1a0]        ;1091
000238  6188              STR      r0,[r1,#0x18]         ;1091
00023a  6820              LDR      r0,[r4,#0]            ;1091
00023c  6801              LDR      r1,[r0,#0]            ;1091
00023e  4620              MOV      r0,r4                 ;1091
000240  4788              BLX      r1                    ;1091
000242  bf00              NOP                            ;1092
                  |L15.580|
000244  bf00              NOP                            ;975
000246  2000              MOVS     r0,#0                 ;1095
000248  f8c401a0          STR      r0,[r4,#0x1a0]        ;1095
                  |L15.588|
00024c  e6db              B        |L15.6|
;;;1098   
                          ENDP


                          AREA ||i.read_restart_marker||, CODE, READONLY, ALIGN=1

                  read_restart_marker PROC
;;;1112   METHODDEF(boolean)
;;;1113   read_restart_marker (j_decompress_ptr cinfo)
000000  b510              PUSH     {r4,lr}
;;;1114   {
000002  4604              MOV      r4,r0
;;;1115     /* Obtain a marker unless we already did. */
;;;1116     /* Note that next_marker will complain if it skips any data. */
;;;1117     if (cinfo->unread_marker == 0) {
000004  f8d401a0          LDR      r0,[r4,#0x1a0]
000008  b928              CBNZ     r0,|L16.22|
;;;1118       if (! next_marker(cinfo))
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       next_marker
000010  b908              CBNZ     r0,|L16.22|
;;;1119         return FALSE;
000012  2000              MOVS     r0,#0
                  |L16.20|
;;;1120     }
;;;1121   
;;;1122     if (cinfo->unread_marker ==
;;;1123         ((int) M_RST0 + cinfo->marker->next_restart_num)) {
;;;1124       /* Normal case --- swallow the marker and let entropy decoder continue */
;;;1125       TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
;;;1126       cinfo->unread_marker = 0;
;;;1127     } else {
;;;1128       /* Uh-oh, the restart markers have been messed up. */
;;;1129       /* Let the data source manager determine how to resync. */
;;;1130       if (! (*cinfo->src->resync_to_restart) (cinfo,
;;;1131   					    cinfo->marker->next_restart_num))
;;;1132         return FALSE;
;;;1133     }
;;;1134   
;;;1135     /* Update next-restart state */
;;;1136     cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
;;;1137   
;;;1138     return TRUE;
;;;1139   }
000014  bd10              POP      {r4,pc}
                  |L16.22|
000016  f8d411a0          LDR      r1,[r4,#0x1a0]        ;1122
00001a  f8d401b8          LDR      r0,[r4,#0x1b8]        ;1122
00001e  6940              LDR      r0,[r0,#0x14]         ;1122
000020  30d0              ADDS     r0,r0,#0xd0           ;1122
000022  4281              CMP      r1,r0                 ;1122
000024  d110              BNE      |L16.72|
000026  2062              MOVS     r0,#0x62              ;1125
000028  6821              LDR      r1,[r4,#0]            ;1125
00002a  6148              STR      r0,[r1,#0x14]         ;1125
00002c  f8d401b8          LDR      r0,[r4,#0x1b8]        ;1125
000030  6940              LDR      r0,[r0,#0x14]         ;1125
000032  6821              LDR      r1,[r4,#0]            ;1125
000034  6188              STR      r0,[r1,#0x18]         ;1125
000036  6820              LDR      r0,[r4,#0]            ;1125
000038  2103              MOVS     r1,#3                 ;1125
00003a  6842              LDR      r2,[r0,#4]            ;1125
00003c  4620              MOV      r0,r4                 ;1125
00003e  4790              BLX      r2                    ;1125
000040  2000              MOVS     r0,#0                 ;1126
000042  f8c401a0          STR      r0,[r4,#0x1a0]        ;1126
000046  e009              B        |L16.92|
                  |L16.72|
000048  f8d401b8          LDR      r0,[r4,#0x1b8]        ;1130
00004c  6941              LDR      r1,[r0,#0x14]         ;1130
00004e  69a0              LDR      r0,[r4,#0x18]         ;1130
000050  6942              LDR      r2,[r0,#0x14]         ;1130
000052  4620              MOV      r0,r4                 ;1130
000054  4790              BLX      r2                    ;1130
000056  b908              CBNZ     r0,|L16.92|
000058  2000              MOVS     r0,#0                 ;1132
00005a  e7db              B        |L16.20|
                  |L16.92|
00005c  f8d401b8          LDR      r0,[r4,#0x1b8]        ;1136
000060  7d00              LDRB     r0,[r0,#0x14]         ;1136
000062  1c40              ADDS     r0,r0,#1              ;1136
000064  f0000007          AND      r0,r0,#7              ;1136
000068  f8d411b8          LDR      r1,[r4,#0x1b8]        ;1136
00006c  6148              STR      r0,[r1,#0x14]         ;1136
00006e  2001              MOVS     r0,#1                 ;1138
000070  e7d0              B        |L16.20|
;;;1140   
                          ENDP


                          AREA ||i.reset_marker_reader||, CODE, READONLY, ALIGN=1

                  reset_marker_reader PROC
;;;1241   METHODDEF(void)
;;;1242   reset_marker_reader (j_decompress_ptr cinfo)
000000  f8d011b8          LDR      r1,[r0,#0x1b8]
;;;1243   {
;;;1244     my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
;;;1245   
;;;1246     cinfo->comp_info = NULL;		/* until allocated by get_sof */
000004  2200              MOVS     r2,#0
000006  f8c020d8          STR      r2,[r0,#0xd8]
;;;1247     cinfo->input_scan_number = 0;		/* no SOS seen yet */
00000a  f8c02090          STR      r2,[r0,#0x90]
;;;1248     cinfo->unread_marker = 0;		/* no pending marker */
00000e  f8c021a0          STR      r2,[r0,#0x1a0]
;;;1249     marker->pub.saw_SOI = FALSE;		/* set internal state too */
000012  60ca              STR      r2,[r1,#0xc]
;;;1250     marker->pub.saw_SOF = FALSE;
000014  610a              STR      r2,[r1,#0x10]
;;;1251     marker->pub.discarded_bytes = 0;
000016  618a              STR      r2,[r1,#0x18]
;;;1252     marker->cur_marker = NULL;
000018  f8c120a4          STR      r2,[r1,#0xa4]
;;;1253   }
00001c  4770              BX       lr
;;;1254   
                          ENDP


                          AREA ||i.skip_variable||, CODE, READONLY, ALIGN=1

                  skip_variable PROC
;;;844    METHODDEF(boolean)
;;;845    skip_variable (j_decompress_ptr cinfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;846    /* Skip over an unknown or uninteresting variable-length marker */
;;;847    {
000004  4605              MOV      r5,r0
;;;848      INT32 length;
;;;849      INPUT_VARS(cinfo);
000006  69ac              LDR      r4,[r5,#0x18]
000008  6827              LDR      r7,[r4,#0]
00000a  f8d48004          LDR      r8,[r4,#4]
;;;850    
;;;851      INPUT_2BYTES(cinfo, length, return FALSE);
00000e  bf00              NOP      
000010  f1b80f00          CMP      r8,#0
000014  d109              BNE      |L18.42|
000016  4628              MOV      r0,r5
000018  68e1              LDR      r1,[r4,#0xc]
00001a  4788              BLX      r1
00001c  b910              CBNZ     r0,|L18.36|
00001e  2000              MOVS     r0,#0
                  |L18.32|
;;;852      length -= 2;
;;;853      
;;;854      TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
;;;855    
;;;856      INPUT_SYNC(cinfo);		/* do before skip_input_data */
;;;857      if (length > 0)
;;;858        (*cinfo->src->skip_input_data) (cinfo, (long) length);
;;;859    
;;;860      return TRUE;
;;;861    }
000020  e8bd81f0          POP      {r4-r8,pc}
                  |L18.36|
000024  6827              LDR      r7,[r4,#0]            ;851
000026  f8d48004          LDR      r8,[r4,#4]            ;851
                  |L18.42|
00002a  f1a80801          SUB      r8,r8,#1              ;851
00002e  f8171b01          LDRB     r1,[r7],#1            ;851
000032  020e              LSLS     r6,r1,#8              ;851
000034  f1b80f00          CMP      r8,#0                 ;851
000038  d108              BNE      |L18.76|
00003a  4628              MOV      r0,r5                 ;851
00003c  68e1              LDR      r1,[r4,#0xc]          ;851
00003e  4788              BLX      r1                    ;851
000040  b908              CBNZ     r0,|L18.70|
000042  2000              MOVS     r0,#0                 ;851
000044  e7ec              B        |L18.32|
                  |L18.70|
000046  6827              LDR      r7,[r4,#0]            ;851
000048  f8d48004          LDR      r8,[r4,#4]            ;851
                  |L18.76|
00004c  f1a80801          SUB      r8,r8,#1              ;851
000050  f8171b01          LDRB     r1,[r7],#1            ;851
000054  440e              ADD      r6,r6,r1              ;851
000056  bf00              NOP                            ;851
000058  1eb6              SUBS     r6,r6,#2              ;852
00005a  205b              MOVS     r0,#0x5b              ;854
00005c  6829              LDR      r1,[r5,#0]            ;854
00005e  6148              STR      r0,[r1,#0x14]         ;854
000060  6829              LDR      r1,[r5,#0]            ;854
000062  f8d501a0          LDR      r0,[r5,#0x1a0]        ;854
000066  6188              STR      r0,[r1,#0x18]         ;854
000068  6828              LDR      r0,[r5,#0]            ;854
00006a  61c6              STR      r6,[r0,#0x1c]         ;854
00006c  6828              LDR      r0,[r5,#0]            ;854
00006e  2101              MOVS     r1,#1                 ;854
000070  6842              LDR      r2,[r0,#4]            ;854
000072  4628              MOV      r0,r5                 ;854
000074  4790              BLX      r2                    ;854
000076  6027              STR      r7,[r4,#0]            ;856
000078  f8c48004          STR      r8,[r4,#4]            ;856
00007c  2e00              CMP      r6,#0                 ;857
00007e  dd04              BLE      |L18.138|
000080  69a8              LDR      r0,[r5,#0x18]         ;858
000082  4631              MOV      r1,r6                 ;858
000084  6902              LDR      r2,[r0,#0x10]         ;858
000086  4628              MOV      r0,r5                 ;858
000088  4790              BLX      r2                    ;858
                  |L18.138|
00008a  2001              MOVS     r0,#1                 ;860
00008c  e7c8              B        |L18.32|
;;;862    
                          ENDP

