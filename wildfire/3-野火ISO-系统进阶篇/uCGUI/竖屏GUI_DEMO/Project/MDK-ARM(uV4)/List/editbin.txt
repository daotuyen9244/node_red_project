; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\editbin.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\editbin.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Widget\EDITBin.c]
                          THUMB

                          AREA ||i.EDIT_SetBinMode||, CODE, READONLY, ALIGN=2

                  EDIT_SetBinMode PROC
;;;151    */
;;;152    void EDIT_SetBinMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
;;;153      EDIT_Obj* pObj;
;;;154      int MaxLen;
;;;155      WM_LOCK();
00000c  f7fffffe          BL       GUI_Lock
;;;156      if (hEdit) {
000010  b357              CBZ      r7,|L1.104|
;;;157        pObj = EDIT_H2P(hEdit);
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       GUI_ALLOC_h2p
000018  4604              MOV      r4,r0
;;;158        pObj->pfAddKeyEx    = _AddKeyBin;
00001a  4815              LDR      r0,|L1.112|
00001c  64e0              STR      r0,[r4,#0x4c]
;;;159        pObj->pfUpdateBuffer = _UpdateBuffer;
00001e  4815              LDR      r0,|L1.116|
000020  6520              STR      r0,[r4,#0x50]
;;;160        pObj->CurrentValue = Value;
000022  f8c4803c          STR      r8,[r4,#0x3c]
;;;161        pObj->CursorPos = 0;
000026  2000              MOVS     r0,#0
000028  6420              STR      r0,[r4,#0x40]
;;;162        MaxLen = pObj->MaxLen;
00002a  f9b4502a          LDRSH    r5,[r4,#0x2a]
;;;163        if (MaxLen <= 0 ) {
00002e  2d00              CMP      r5,#0
000030  dc03              BGT      |L1.58|
;;;164          MaxLen = _GetNumDigits(Max);
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       _GetNumDigits
000038  4605              MOV      r5,r0
                  |L1.58|
;;;165        }
;;;166        if (MaxLen > 32) {
00003a  2d20              CMP      r5,#0x20
00003c  dd00              BLE      |L1.64|
;;;167          MaxLen = 32;
00003e  2520              MOVS     r5,#0x20
                  |L1.64|
;;;168        }
;;;169        if (MaxLen != pObj->MaxLen) {
000040  f9b4002a          LDRSH    r0,[r4,#0x2a]
000044  42a8              CMP      r0,r5
000046  d003              BEQ      |L1.80|
;;;170          EDIT_SetMaxLen(hEdit, MaxLen);
000048  4629              MOV      r1,r5
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       EDIT_SetMaxLen
                  |L1.80|
;;;171        }
;;;172        pObj->Min = Min;
000050  f8c49030          STR      r9,[r4,#0x30]
;;;173        pObj->Max = Max;
000054  6366              STR      r6,[r4,#0x34]
;;;174        pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
000056  2001              MOVS     r0,#1
000058  f8840048          STRB     r0,[r4,#0x48]
;;;175        _UpdateBuffer(hEdit);
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       _UpdateBuffer
;;;176        WM_Invalidate(hEdit);
000062  4638              MOV      r0,r7
000064  f7fffffe          BL       WM_InvalidateWindow
                  |L1.104|
;;;177      }
;;;178      WM_UNLOCK();
000068  f7fffffe          BL       GUI_Unlock
;;;179    }
00006c  e8bd87f0          POP      {r4-r10,pc}
;;;180    
                          ENDP

                  |L1.112|
                          DCD      _AddKeyBin
                  |L1.116|
                          DCD      _UpdateBuffer

                          AREA ||i._AddKeyBin||, CODE, READONLY, ALIGN=1

                  _AddKeyBin PROC
;;;98     */
;;;99     static void _AddKeyBin(EDIT_Handle hObj, int Key) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;100      EDIT_Obj * pObj;
;;;101      pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       GUI_ALLOC_h2p
00000e  4604              MOV      r4,r0
;;;102      if (pObj) {
000010  2c00              CMP      r4,#0
000012  d043              BEQ      |L2.156|
;;;103        switch (Key) {
000014  2d10              CMP      r5,#0x10
000016  d026              BEQ      |L2.102|
000018  2d11              CMP      r5,#0x11
00001a  d004              BEQ      |L2.38|
00001c  2d12              CMP      r5,#0x12
00001e  d01c              BEQ      |L2.90|
000020  2d13              CMP      r5,#0x13
000022  d126              BNE      |L2.114|
000024  e00c              B        |L2.64|
                  |L2.38|
;;;104        case GUI_KEY_UP:
;;;105          {
;;;106            int Bit = _GetCurrentBit(pObj) + 1;
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       _GetCurrentBit
00002c  1c47              ADDS     r7,r0,#1
;;;107            if (Bit > 1) {
00002e  2f01              CMP      r7,#1
000030  dd00              BLE      |L2.52|
;;;108              Bit = 0;
000032  2700              MOVS     r7,#0
                  |L2.52|
;;;109            }
;;;110            _EditBin(Bit, pObj, hObj);
000034  b2f8              UXTB     r0,r7
000036  4632              MOV      r2,r6
000038  4621              MOV      r1,r4
00003a  f7fffffe          BL       _EditBin
;;;111          }
;;;112          break;
00003e  e029              B        |L2.148|
                  |L2.64|
;;;113        case GUI_KEY_DOWN:
;;;114          {
;;;115            int Bit = _GetCurrentBit(pObj) - 1;
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       _GetCurrentBit
000046  1e47              SUBS     r7,r0,#1
;;;116            if (Bit < 0) {
000048  2f00              CMP      r7,#0
00004a  da00              BGE      |L2.78|
;;;117              Bit = 1;
00004c  2701              MOVS     r7,#1
                  |L2.78|
;;;118            }
;;;119            _EditBin(Bit, pObj, hObj);
00004e  b2f8              UXTB     r0,r7
000050  4632              MOV      r2,r6
000052  4621              MOV      r1,r4
000054  f7fffffe          BL       _EditBin
;;;120          }
;;;121          break;
000058  e01c              B        |L2.148|
                  |L2.90|
;;;122        case GUI_KEY_RIGHT:
;;;123          EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
00005a  6c20              LDR      r0,[r4,#0x40]
00005c  1c41              ADDS     r1,r0,#1
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       EDIT__SetCursorPos
;;;124          break;
000064  e016              B        |L2.148|
                  |L2.102|
;;;125        case GUI_KEY_LEFT:
;;;126          EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
000066  6c20              LDR      r0,[r4,#0x40]
000068  1e41              SUBS     r1,r0,#1
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       EDIT__SetCursorPos
;;;127          break;
000070  e010              B        |L2.148|
                  |L2.114|
;;;128        default:
;;;129          {
;;;130            int Bit = _BinChar2Int(Key);
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       _BinChar2Int
000078  4607              MOV      r7,r0
;;;131            if (Bit >= 0) {
00007a  2f00              CMP      r7,#0
00007c  db09              BLT      |L2.146|
;;;132              _EditBin(Bit, pObj, hObj);
00007e  b2f8              UXTB     r0,r7
000080  4632              MOV      r2,r6
000082  4621              MOV      r1,r4
000084  f7fffffe          BL       _EditBin
;;;133              EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
000088  6c20              LDR      r0,[r4,#0x40]
00008a  1c41              ADDS     r1,r0,#1
00008c  4620              MOV      r0,r4
00008e  f7fffffe          BL       EDIT__SetCursorPos
                  |L2.146|
;;;134            }
;;;135          }
;;;136          break;
000092  bf00              NOP      
                  |L2.148|
000094  bf00              NOP                            ;112
;;;137        }
;;;138        _UpdateBuffer(hObj);
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       _UpdateBuffer
                  |L2.156|
;;;139      }
;;;140    }
00009c  e8bd81f0          POP      {r4-r8,pc}
;;;141    
                          ENDP


                          AREA ||i._BinChar2Int||, CODE, READONLY, ALIGN=1

                  _BinChar2Int PROC
;;;36     */
;;;37     static int _BinChar2Int(int Char) {
000000  4601              MOV      r1,r0
;;;38       if ((Char >= '0') && (Char <= '1'))
000002  2930              CMP      r1,#0x30
000004  db04              BLT      |L3.16|
000006  2931              CMP      r1,#0x31
000008  dc02              BGT      |L3.16|
;;;39         return Char - '0';
00000a  f1a10030          SUB      r0,r1,#0x30
                  |L3.14|
;;;40       return -1;
;;;41     }
00000e  4770              BX       lr
                  |L3.16|
000010  f04f30ff          MOV      r0,#0xffffffff        ;40
000014  e7fb              B        |L3.14|
;;;42     
                          ENDP


                          AREA ||i._EditBin||, CODE, READONLY, ALIGN=1

                  _EditBin PROC
;;;68     */
;;;69     static void _EditBin(U8 Bit, EDIT_Obj* pObj, EDIT_Handle hObj) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;70       int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
00000a  f9b4002a          LDRSH    r0,[r4,#0x2a]
00000e  6c21              LDR      r1,[r4,#0x40]
000010  1a40              SUBS     r0,r0,r1
000012  1e47              SUBS     r7,r0,#1
;;;71       U32 AndMask = ~(1   << Pos);
000014  2001              MOVS     r0,#1
000016  40b8              LSLS     r0,r0,r7
000018  ea6f0900          MVN      r9,r0
;;;72       U32 OrMask  =   Bit << Pos;
00001c  fa05fa07          LSL      r10,r5,r7
;;;73       I32 Result  = pObj->CurrentValue & AndMask;
000020  6be0              LDR      r0,[r4,#0x3c]
000022  ea000809          AND      r8,r0,r9
;;;74       Result     |= OrMask;
000026  ea48080a          ORR      r8,r8,r10
;;;75       EDIT_SetValue(hObj, Result);
00002a  4641              MOV      r1,r8
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       EDIT_SetValue
;;;76     }
000032  e8bd87f0          POP      {r4-r10,pc}
;;;77     
                          ENDP


                          AREA ||i._GetCurrentBit||, CODE, READONLY, ALIGN=1

                  _GetCurrentBit PROC
;;;81     */
;;;82     static U8 _GetCurrentBit(EDIT_Obj* pObj) {
000000  b530              PUSH     {r4,r5,lr}
000002  4601              MOV      r1,r0
;;;83       int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
000004  f9b1402a          LDRSH    r4,[r1,#0x2a]
000008  6c0d              LDR      r5,[r1,#0x40]
00000a  1b64              SUBS     r4,r4,r5
00000c  1e62              SUBS     r2,r4,#1
;;;84       U32 AndMask = 1 << Pos;
00000e  2401              MOVS     r4,#1
000010  fa04f302          LSL      r3,r4,r2
;;;85       U8 Bit = (pObj->CurrentValue & AndMask) >> Pos;
000014  6bcc              LDR      r4,[r1,#0x3c]
000016  401c              ANDS     r4,r4,r3
000018  40d4              LSRS     r4,r4,r2
00001a  b2e0              UXTB     r0,r4
;;;86       return Bit;
;;;87     }
00001c  bd30              POP      {r4,r5,pc}
;;;88     
                          ENDP


                          AREA ||i._GetNumDigits||, CODE, READONLY, ALIGN=1

                  _GetNumDigits PROC
;;;46     */
;;;47     static int _GetNumDigits(U32 Value) {
000000  4601              MOV      r1,r0
;;;48       int Ret;
;;;49       for (Ret = 0; Value; Value >>= 1, Ret++);
000002  2000              MOVS     r0,#0
000004  e001              B        |L6.10|
                  |L6.6|
000006  0849              LSRS     r1,r1,#1
000008  1c40              ADDS     r0,r0,#1
                  |L6.10|
00000a  2900              CMP      r1,#0
00000c  d1fb              BNE      |L6.6|
;;;50       return Ret;
;;;51     }
00000e  4770              BX       lr
;;;52     
                          ENDP


                          AREA ||i._UpdateBuffer||, CODE, READONLY, ALIGN=1

                  _UpdateBuffer PROC
;;;56     */
;;;57     static void _UpdateBuffer(EDIT_Handle hObj) {
000000  b538              PUSH     {r3-r5,lr}
000002  4605              MOV      r5,r0
;;;58       char * s;
;;;59       EDIT_Obj * pObj;
;;;60       pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       GUI_ALLOC_h2p
00000a  4604              MOV      r4,r0
;;;61       s = (char*) GUI_ALLOC_h2p(pObj->hpText);
00000c  f9b40028          LDRSH    r0,[r4,#0x28]
000010  f7fffffe          BL       GUI_ALLOC_h2p
000014  9000              STR      r0,[sp,#0]
;;;62       GUI_AddBin(pObj->CurrentValue, pObj->MaxLen, &s);
000016  f894102a          LDRB     r1,[r4,#0x2a]
00001a  466a              MOV      r2,sp
00001c  6be0              LDR      r0,[r4,#0x3c]
00001e  f7fffffe          BL       GUI_AddBin
;;;63     }
000022  bd38              POP      {r3-r5,pc}
;;;64     
                          ENDP

