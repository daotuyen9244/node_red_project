; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lcdp323.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\lcdp323.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\ConvertColor\LCDP323.c]
                          THUMB

                          AREA ||i.LCD_Color2Index_323||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_323 PROC
;;;33     */
;;;34     unsigned LCD_Color2Index_323(LCD_COLOR Color) {
000000  b530              PUSH     {r4,r5,lr}
000002  4601              MOV      r1,r0
;;;35       int r, g, b;
;;;36       r = Color & 255;
000004  b2ca              UXTB     r2,r1
;;;37       g = (Color >> 8 ) & 255;
000006  f3c12407          UBFX     r4,r1,#8,#8
;;;38       b = Color >> 16;
00000a  0c0b              LSRS     r3,r1,#16
;;;39       r = (r * 7 + 127) / 255;
00000c  ebc200c2          RSB      r0,r2,r2,LSL #3
000010  307f              ADDS     r0,r0,#0x7f
000012  25ff              MOVS     r5,#0xff
000014  fb90f2f5          SDIV     r2,r0,r5
;;;40       g = (g + 42) / 85;
000018  f104002a          ADD      r0,r4,#0x2a
00001c  2555              MOVS     r5,#0x55
00001e  fb90f4f5          SDIV     r4,r0,r5
;;;41       b = (b * 7 + 127) / 255;
000022  ebc300c3          RSB      r0,r3,r3,LSL #3
000026  307f              ADDS     r0,r0,#0x7f
000028  25ff              MOVS     r5,#0xff
00002a  fb90f3f5          SDIV     r3,r0,r5
;;;42       return r + (g << 3) + (b << 5);
00002e  eb0200c4          ADD      r0,r2,r4,LSL #3
000032  eb001043          ADD      r0,r0,r3,LSL #5
;;;43     }
000036  bd30              POP      {r4,r5,pc}
;;;44     
                          ENDP


                          AREA ||i.LCD_GetIndexMask_323||, CODE, READONLY, ALIGN=1

                  LCD_GetIndexMask_323 PROC
;;;60     */
;;;61     unsigned LCD_GetIndexMask_323(void) {
000000  20ff              MOVS     r0,#0xff
;;;62       return 0xff;
;;;63     }
000002  4770              BX       lr
;;;64     
                          ENDP


                          AREA ||i.LCD_Index2Color_323||, CODE, READONLY, ALIGN=1

                  LCD_Index2Color_323 PROC
;;;48     */
;;;49     LCD_COLOR LCD_Index2Color_323(int Index) {
000000  b530              PUSH     {r4,r5,lr}
000002  4601              MOV      r1,r0
;;;50       int r, g, b;
;;;51       r = (Index & 7) * 255 / 7;
000004  f0010007          AND      r0,r1,#7
000008  ebc02000          RSB      r0,r0,r0,LSL #8
00000c  2507              MOVS     r5,#7
00000e  fb90f4f5          SDIV     r4,r0,r5
;;;52       g = ((Index >> 3) & 3) * 85;
000012  f3c100c1          UBFX     r0,r1,#3,#2
000016  eb001000          ADD      r0,r0,r0,LSL #4
00001a  eb000280          ADD      r2,r0,r0,LSL #2
;;;53       b = ((Index >> 5) & 7) * 255 / 7;
00001e  f3c11042          UBFX     r0,r1,#5,#3
000022  ebc02000          RSB      r0,r0,r0,LSL #8
000026  fb90f3f5          SDIV     r3,r0,r5
;;;54       return r + (g << 8) + (((U32)b) << 16);
00002a  eb042002          ADD      r0,r4,r2,LSL #8
00002e  eb004003          ADD      r0,r0,r3,LSL #16
;;;55     }
000032  bd30              POP      {r4,r5,pc}
;;;56     
                          ENDP

