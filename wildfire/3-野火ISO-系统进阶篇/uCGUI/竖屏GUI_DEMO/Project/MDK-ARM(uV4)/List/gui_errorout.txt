; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gui_errorout.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\gui_errorout.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\GUI_ErrorOut.c]
                          THUMB

                          AREA ||i.GUI_ErrorOut||, CODE, READONLY, ALIGN=1

                  GUI_ErrorOut PROC
;;;61     */
;;;62     void GUI_ErrorOut(const char *s) { GUI_X_ErrorOut(s); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       GUI_X_ErrorOut
00000a  bd10              POP      {r4,pc}
;;;63     
                          ENDP


                          AREA ||i.GUI_ErrorOut1||, CODE, READONLY, ALIGN=1

                  GUI_ErrorOut1 PROC
;;;67     */
;;;68     void GUI_ErrorOut1(const char *s, int p0) {
000000  b530              PUSH     {r4,r5,lr}
000002  b091              SUB      sp,sp,#0x44
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;69       char ac[MAXLEN + 10];
;;;70       char* sOut = ac;
000008  a802              ADD      r0,sp,#8
00000a  9001              STR      r0,[sp,#4]
;;;71       GUI_MEMSET((U8*)ac, 0, sizeof(ac));
00000c  223c              MOVS     r2,#0x3c
00000e  2100              MOVS     r1,#0
000010  f7fffffe          BL       GUI__memset
;;;72       _CopyString(ac, s, MAXLEN);
000014  2232              MOVS     r2,#0x32
000016  4621              MOV      r1,r4
000018  a802              ADD      r0,sp,#8
00001a  f7fffffe          BL       _CopyString
;;;73       sOut += strlen(sOut);
00001e  9801              LDR      r0,[sp,#4]
000020  f7fffffe          BL       strlen
000024  9901              LDR      r1,[sp,#4]
000026  4408              ADD      r0,r0,r1
000028  9001              STR      r0,[sp,#4]
;;;74       GUI__AddSpaceHex(p0, 8, &sOut);
00002a  aa01              ADD      r2,sp,#4
00002c  2108              MOVS     r1,#8
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GUI__AddSpaceHex
;;;75       GUI_ErrorOut(ac);
000034  a802              ADD      r0,sp,#8
000036  f7fffffe          BL       GUI_ErrorOut
;;;76     }
00003a  b011              ADD      sp,sp,#0x44
00003c  bd30              POP      {r4,r5,pc}
;;;77     
                          ENDP


                          AREA ||i.GUI_ErrorOut2||, CODE, READONLY, ALIGN=1

                  GUI_ErrorOut2 PROC
;;;81     */
;;;82     void GUI_ErrorOut2(const char *s, int p0, int p1) {
000000  b570              PUSH     {r4-r6,lr}
000002  b094              SUB      sp,sp,#0x50
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;83       char ac[MAXLEN + 20];
;;;84       char* sOut = ac;
00000a  a802              ADD      r0,sp,#8
00000c  9001              STR      r0,[sp,#4]
;;;85       GUI_MEMSET((U8*)ac, 0, sizeof(ac));
00000e  2246              MOVS     r2,#0x46
000010  2100              MOVS     r1,#0
000012  f7fffffe          BL       GUI__memset
;;;86       _CopyString(ac, s, MAXLEN);
000016  2232              MOVS     r2,#0x32
000018  4621              MOV      r1,r4
00001a  a802              ADD      r0,sp,#8
00001c  f7fffffe          BL       _CopyString
;;;87       sOut += strlen(sOut);
000020  9801              LDR      r0,[sp,#4]
000022  f7fffffe          BL       strlen
000026  9901              LDR      r1,[sp,#4]
000028  4408              ADD      r0,r0,r1
00002a  9001              STR      r0,[sp,#4]
;;;88       GUI__AddSpaceHex(p0, 8, &sOut);
00002c  aa01              ADD      r2,sp,#4
00002e  2108              MOVS     r1,#8
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       GUI__AddSpaceHex
;;;89       GUI__AddSpaceHex(p1, 8, &sOut);
000036  aa01              ADD      r2,sp,#4
000038  2108              MOVS     r1,#8
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       GUI__AddSpaceHex
;;;90       GUI_ErrorOut(ac);
000040  a802              ADD      r0,sp,#8
000042  f7fffffe          BL       GUI_ErrorOut
;;;91     }
000046  b014              ADD      sp,sp,#0x50
000048  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP


                          AREA ||i.GUI_ErrorOut3||, CODE, READONLY, ALIGN=1

                  GUI_ErrorOut3 PROC
;;;96     */
;;;97     void GUI_ErrorOut3(const char *s, int p0, int p1, int p2) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b095              SUB      sp,sp,#0x54
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;98       char ac[MAXLEN + 30];
;;;99       char* sOut = ac;
00000c  a801              ADD      r0,sp,#4
00000e  9000              STR      r0,[sp,#0]
;;;100      GUI_MEMSET((U8*)ac, 0, sizeof(ac));
000010  2250              MOVS     r2,#0x50
000012  2100              MOVS     r1,#0
000014  f7fffffe          BL       GUI__memset
;;;101      _CopyString(ac, s, MAXLEN);
000018  2232              MOVS     r2,#0x32
00001a  4621              MOV      r1,r4
00001c  a801              ADD      r0,sp,#4
00001e  f7fffffe          BL       _CopyString
;;;102      sOut += strlen(sOut);
000022  9800              LDR      r0,[sp,#0]
000024  f7fffffe          BL       strlen
000028  9900              LDR      r1,[sp,#0]
00002a  4408              ADD      r0,r0,r1
00002c  9000              STR      r0,[sp,#0]
;;;103      GUI__AddSpaceHex(p0, 8, &sOut);
00002e  466a              MOV      r2,sp
000030  2108              MOVS     r1,#8
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       GUI__AddSpaceHex
;;;104      GUI__AddSpaceHex(p1, 8, &sOut);
000038  466a              MOV      r2,sp
00003a  2108              MOVS     r1,#8
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       GUI__AddSpaceHex
;;;105      GUI__AddSpaceHex(p2, 8, &sOut);
000042  466a              MOV      r2,sp
000044  2108              MOVS     r1,#8
000046  4638              MOV      r0,r7
000048  f7fffffe          BL       GUI__AddSpaceHex
;;;106      GUI_ErrorOut(ac);
00004c  a801              ADD      r0,sp,#4
00004e  f7fffffe          BL       GUI_ErrorOut
;;;107    }
000052  b015              ADD      sp,sp,#0x54
000054  bdf0              POP      {r4-r7,pc}
;;;108    
                          ENDP


                          AREA ||i.GUI_ErrorOut4||, CODE, READONLY, ALIGN=1

                  GUI_ErrorOut4 PROC
;;;112    */
;;;113    void GUI_ErrorOut4(const char *s, int p0, int p1, int p2, int p3) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b098              SUB      sp,sp,#0x60
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  f8dd8078          LDR      r8,[sp,#0x78]
;;;114      char ac[MAXLEN + 40] = {0};
000012  215c              MOVS     r1,#0x5c
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       __aeabi_memclr4
;;;115      char* sOut = ac;
00001a  a801              ADD      r0,sp,#4
00001c  9000              STR      r0,[sp,#0]
;;;116      GUI_MEMSET((U8*)ac, 0, sizeof(ac));
00001e  225a              MOVS     r2,#0x5a
000020  2100              MOVS     r1,#0
000022  f7fffffe          BL       GUI__memset
;;;117      _CopyString(ac, s, MAXLEN);
000026  2232              MOVS     r2,#0x32
000028  4621              MOV      r1,r4
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       _CopyString
;;;118      sOut += strlen(sOut);
000030  9800              LDR      r0,[sp,#0]
000032  f7fffffe          BL       strlen
000036  9900              LDR      r1,[sp,#0]
000038  4408              ADD      r0,r0,r1
00003a  9000              STR      r0,[sp,#0]
;;;119      GUI__AddSpaceHex(p0, 8, &sOut);
00003c  466a              MOV      r2,sp
00003e  2108              MOVS     r1,#8
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       GUI__AddSpaceHex
;;;120      GUI__AddSpaceHex(p1, 8, &sOut);
000046  466a              MOV      r2,sp
000048  2108              MOVS     r1,#8
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       GUI__AddSpaceHex
;;;121      GUI__AddSpaceHex(p2, 8, &sOut);
000050  466a              MOV      r2,sp
000052  2108              MOVS     r1,#8
000054  4638              MOV      r0,r7
000056  f7fffffe          BL       GUI__AddSpaceHex
;;;122      GUI__AddSpaceHex(p3, 8, &sOut);
00005a  466a              MOV      r2,sp
00005c  2108              MOVS     r1,#8
00005e  4640              MOV      r0,r8
000060  f7fffffe          BL       GUI__AddSpaceHex
;;;123      GUI_ErrorOut(ac);
000064  a801              ADD      r0,sp,#4
000066  f7fffffe          BL       GUI_ErrorOut
;;;124    }
00006a  b018              ADD      sp,sp,#0x60
00006c  e8bd81f0          POP      {r4-r8,pc}
;;;125    
                          ENDP


                          AREA ||i._CopyString||, CODE, READONLY, ALIGN=1

                  _CopyString PROC
;;;43     */
;;;44     static void _CopyString(char*d, const char*s, int MaxLen) {
000000  e004              B        |L6.12|
                  |L6.2|
;;;45       while ((MaxLen > 0) && *s) {
;;;46         *d++ = *s++;
000002  f8113b01          LDRB     r3,[r1],#1
000006  f8003b01          STRB     r3,[r0],#1
;;;47         MaxLen--;
00000a  1e52              SUBS     r2,r2,#1
                  |L6.12|
00000c  2a00              CMP      r2,#0                 ;45
00000e  dd02              BLE      |L6.22|
000010  780b              LDRB     r3,[r1,#0]            ;45
000012  2b00              CMP      r3,#0                 ;45
000014  d1f5              BNE      |L6.2|
                  |L6.22|
;;;48       }
;;;49       *d = 0;
000016  2300              MOVS     r3,#0
000018  7003              STRB     r3,[r0,#0]
;;;50     }
00001a  4770              BX       lr
;;;51     
                          ENDP

