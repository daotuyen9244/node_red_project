; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_q.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\os_q.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCOS-II\Source\os_q.c]
                          THUMB

                          AREA ||i.OSQAccept||, CODE, READONLY, ALIGN=1

                  OSQAccept PROC
;;;60     #if OS_Q_ACCEPT_EN > 0u
;;;61     void  *OSQAccept (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;62                       INT8U     *perr)
;;;63     {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;64         void      *pmsg;
;;;65         OS_Q      *pq;
;;;66     #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;67         OS_CPU_SR  cpu_sr = 0u;
000008  f04f0800          MOV      r8,#0
;;;68     #endif
;;;69     
;;;70     
;;;71     
;;;72     #ifdef OS_SAFETY_CRITICAL
;;;73         if (perr == (INT8U *)0) {
;;;74             OS_SAFETY_CRITICAL_EXCEPTION();
;;;75             return ((void *)0);
;;;76         }
;;;77     #endif
;;;78     
;;;79     #if OS_ARG_CHK_EN > 0u
;;;80         if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
;;;81             *perr = OS_ERR_PEVENT_NULL;
;;;82             return ((void *)0);
;;;83         }
;;;84     #endif
;;;85         if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
00000c  7830              LDRB     r0,[r6,#0]
00000e  2802              CMP      r0,#2
000010  d004              BEQ      |L1.28|
;;;86             *perr = OS_ERR_EVENT_TYPE;
000012  2001              MOVS     r0,#1
000014  7028              STRB     r0,[r5,#0]
;;;87             return ((void *)0);
000016  2000              MOVS     r0,#0
                  |L1.24|
;;;88         }
;;;89         OS_ENTER_CRITICAL();
;;;90         pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
;;;91         if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
;;;92             pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
;;;93             pq->OSQEntries--;                        /* Update the number of entries in the queue          */
;;;94             if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
;;;95                 pq->OSQOut = pq->OSQStart;
;;;96             }
;;;97             *perr = OS_ERR_NONE;
;;;98         } else {
;;;99             *perr = OS_ERR_Q_EMPTY;
;;;100            pmsg  = (void *)0;                       /* Queue is empty                                     */
;;;101        }
;;;102        OS_EXIT_CRITICAL();
;;;103        return (pmsg);                               /* Return message received (or NULL)                  */
;;;104    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4680              MOV      r8,r0                 ;89
000022  6874              LDR      r4,[r6,#4]            ;90
000024  8ae0              LDRH     r0,[r4,#0x16]         ;91
000026  b178              CBZ      r0,|L1.72|
000028  6921              LDR      r1,[r4,#0x10]         ;92
00002a  1d08              ADDS     r0,r1,#4              ;92
00002c  6120              STR      r0,[r4,#0x10]         ;92
00002e  680f              LDR      r7,[r1,#0]            ;92
000030  8ae0              LDRH     r0,[r4,#0x16]         ;93
000032  1e40              SUBS     r0,r0,#1              ;93
000034  82e0              STRH     r0,[r4,#0x16]         ;93
000036  68a1              LDR      r1,[r4,#8]            ;94
000038  6920              LDR      r0,[r4,#0x10]         ;94
00003a  4288              CMP      r0,r1                 ;94
00003c  d101              BNE      |L1.66|
00003e  6860              LDR      r0,[r4,#4]            ;95
000040  6120              STR      r0,[r4,#0x10]         ;95
                  |L1.66|
000042  2000              MOVS     r0,#0                 ;97
000044  7028              STRB     r0,[r5,#0]            ;97
000046  e002              B        |L1.78|
                  |L1.72|
000048  201f              MOVS     r0,#0x1f              ;99
00004a  7028              STRB     r0,[r5,#0]            ;99
00004c  2700              MOVS     r7,#0                 ;100
                  |L1.78|
00004e  4640              MOV      r0,r8                 ;102
000050  f7fffffe          BL       OS_CPU_SR_Restore
000054  4638              MOV      r0,r7                 ;103
000056  e7df              B        |L1.24|
;;;105    #endif
                          ENDP


                          AREA ||i.OSQCreate||, CODE, READONLY, ALIGN=2

                  OSQCreate PROC
;;;125    
;;;126    OS_EVENT  *OSQCreate (void    **start,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;127                          INT16U    size)
;;;128    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;129        OS_EVENT  *pevent;
;;;130        OS_Q      *pq;
;;;131    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;132        OS_CPU_SR  cpu_sr = 0u;
000008  f04f0800          MOV      r8,#0
;;;133    #endif
;;;134    
;;;135    
;;;136    
;;;137    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;138        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;139            OS_SAFETY_CRITICAL_EXCEPTION();
;;;140            return ((OS_EVENT *)0);
;;;141        }
;;;142    #endif
;;;143    
;;;144        if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
00000c  4820              LDR      r0,|L2.144|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000010  b110              CBZ      r0,|L2.24|
;;;145            return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
000012  2000              MOVS     r0,#0
                  |L2.20|
;;;146        }
;;;147        OS_ENTER_CRITICAL();
;;;148        pevent = OSEventFreeList;                    /* Get next free event control block                  */
;;;149        if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
;;;150            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;151        }
;;;152        OS_EXIT_CRITICAL();
;;;153        if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
;;;154            OS_ENTER_CRITICAL();
;;;155            pq = OSQFreeList;                        /* Get a free queue control block                     */
;;;156            if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
;;;157                OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
;;;158                OS_EXIT_CRITICAL();
;;;159                pq->OSQStart           = start;               /*      Initialize the queue                 */
;;;160                pq->OSQEnd             = &start[size];
;;;161                pq->OSQIn              = start;
;;;162                pq->OSQOut             = start;
;;;163                pq->OSQSize            = size;
;;;164                pq->OSQEntries         = 0u;
;;;165                pevent->OSEventType    = OS_EVENT_TYPE_Q;
;;;166                pevent->OSEventCnt     = 0u;
;;;167                pevent->OSEventPtr     = pq;
;;;168    #if OS_EVENT_NAME_EN > 0u
;;;169                pevent->OSEventName    = (INT8U *)(void *)"?";
;;;170    #endif
;;;171                OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
;;;172            } else {
;;;173                pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
;;;174                OSEventFreeList    = pevent;
;;;175                OS_EXIT_CRITICAL();
;;;176                pevent = (OS_EVENT *)0;
;;;177            }
;;;178        }
;;;179        return (pevent);
;;;180    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L2.24|
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  4680              MOV      r8,r0                 ;147
00001e  481d              LDR      r0,|L2.148|
000020  6804              LDR      r4,[r0,#0]            ;148  ; OSEventFreeList
000022  6800              LDR      r0,[r0,#0]            ;149  ; OSEventFreeList
000024  b120              CBZ      r0,|L2.48|
000026  481b              LDR      r0,|L2.148|
000028  6800              LDR      r0,[r0,#0]            ;150  ; OSEventFreeList
00002a  6840              LDR      r0,[r0,#4]            ;150
00002c  4919              LDR      r1,|L2.148|
00002e  6008              STR      r0,[r1,#0]            ;150  ; OSEventFreeList
                  |L2.48|
000030  4640              MOV      r0,r8                 ;152
000032  f7fffffe          BL       OS_CPU_SR_Restore
000036  b1fc              CBZ      r4,|L2.120|
000038  f7fffffe          BL       OS_CPU_SR_Save
00003c  4680              MOV      r8,r0                 ;154
00003e  4816              LDR      r0,|L2.152|
000040  6805              LDR      r5,[r0,#0]            ;155  ; OSQFreeList
000042  b1d5              CBZ      r5,|L2.122|
000044  6800              LDR      r0,[r0,#0]            ;157  ; OSQFreeList
000046  6800              LDR      r0,[r0,#0]            ;157
000048  4913              LDR      r1,|L2.152|
00004a  6008              STR      r0,[r1,#0]            ;157  ; OSQFreeList
00004c  4640              MOV      r0,r8                 ;158
00004e  f7fffffe          BL       OS_CPU_SR_Restore
000052  606e              STR      r6,[r5,#4]            ;159
000054  eb060087          ADD      r0,r6,r7,LSL #2       ;160
000058  60a8              STR      r0,[r5,#8]            ;160
00005a  60ee              STR      r6,[r5,#0xc]          ;161
00005c  612e              STR      r6,[r5,#0x10]         ;162
00005e  82af              STRH     r7,[r5,#0x14]         ;163
000060  2000              MOVS     r0,#0                 ;164
000062  82e8              STRH     r0,[r5,#0x16]         ;164
000064  2002              MOVS     r0,#2                 ;165
000066  7020              STRB     r0,[r4,#0]            ;165
000068  2000              MOVS     r0,#0                 ;166
00006a  8120              STRH     r0,[r4,#8]            ;166
00006c  6065              STR      r5,[r4,#4]            ;167
00006e  a00b              ADR      r0,|L2.156|
000070  6120              STR      r0,[r4,#0x10]         ;169
000072  4620              MOV      r0,r4                 ;171
000074  f7fffffe          BL       OS_EventWaitListInit
                  |L2.120|
000078  e008              B        |L2.140|
                  |L2.122|
00007a  4806              LDR      r0,|L2.148|
00007c  6800              LDR      r0,[r0,#0]            ;173  ; OSEventFreeList
00007e  6060              STR      r0,[r4,#4]            ;173
000080  4804              LDR      r0,|L2.148|
000082  6004              STR      r4,[r0,#0]            ;174  ; OSEventFreeList
000084  4640              MOV      r0,r8                 ;175
000086  f7fffffe          BL       OS_CPU_SR_Restore
00008a  2400              MOVS     r4,#0                 ;176
                  |L2.140|
00008c  4620              MOV      r0,r4                 ;179
00008e  e7c1              B        |L2.20|
;;;181    /*$PAGE*/
                          ENDP

                  |L2.144|
                          DCD      OSIntNesting
                  |L2.148|
                          DCD      OSEventFreeList
                  |L2.152|
                          DCD      OSQFreeList
                  |L2.156|
00009c  3f00              DCB      "?",0
00009e  00                DCB      0
00009f  00                DCB      0

                          AREA ||i.OSQDel||, CODE, READONLY, ALIGN=2

                  OSQDel PROC
;;;223    #if OS_Q_DEL_EN > 0u
;;;224    OS_EVENT  *OSQDel (OS_EVENT  *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;225                       INT8U      opt,
;;;226                       INT8U     *perr)
;;;227    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
;;;228        BOOLEAN    tasks_waiting;
;;;229        OS_EVENT  *pevent_return;
;;;230        OS_Q      *pq;
;;;231    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;232        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0a00          MOV      r10,#0
;;;233    #endif
;;;234    
;;;235    
;;;236    
;;;237    #ifdef OS_SAFETY_CRITICAL
;;;238        if (perr == (INT8U *)0) {
;;;239            OS_SAFETY_CRITICAL_EXCEPTION();
;;;240            return ((OS_EVENT *)0);
;;;241        }
;;;242    #endif
;;;243    
;;;244    #if OS_ARG_CHK_EN > 0u
;;;245        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;246            *perr = OS_ERR_PEVENT_NULL;
;;;247            return (pevent);
;;;248        }
;;;249    #endif
;;;250        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2802              CMP      r0,#2
000012  d004              BEQ      |L3.30|
;;;251            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;252            return (pevent);
000018  4620              MOV      r0,r4
                  |L3.26|
;;;253        }
;;;254        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;255            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;256            return (pevent);
;;;257        }
;;;258        OS_ENTER_CRITICAL();
;;;259        if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on queue        */
;;;260            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;261        } else {
;;;262            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;263        }
;;;264        switch (opt) {
;;;265            case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
;;;266                 if (tasks_waiting == OS_FALSE) {
;;;267    #if OS_EVENT_NAME_EN > 0u
;;;268                     pevent->OSEventName    = (INT8U *)(void *)"?";
;;;269    #endif
;;;270                     pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
;;;271                     pq->OSQPtr             = OSQFreeList;
;;;272                     OSQFreeList            = pq;
;;;273                     pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;274                     pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
;;;275                     pevent->OSEventCnt     = 0u;
;;;276                     OSEventFreeList        = pevent;          /* Get next free event control block        */
;;;277                     OS_EXIT_CRITICAL();
;;;278                     *perr                  = OS_ERR_NONE;
;;;279                     pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
;;;280                 } else {
;;;281                     OS_EXIT_CRITICAL();
;;;282                     *perr                  = OS_ERR_TASK_WAITING;
;;;283                     pevent_return          = pevent;
;;;284                 }
;;;285                 break;
;;;286    
;;;287            case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
;;;288                 while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for queue        */
;;;289                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
;;;290                 }
;;;291    #if OS_EVENT_NAME_EN > 0u
;;;292                 pevent->OSEventName    = (INT8U *)(void *)"?";
;;;293    #endif
;;;294                 pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
;;;295                 pq->OSQPtr             = OSQFreeList;
;;;296                 OSQFreeList            = pq;
;;;297                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;298                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;299                 pevent->OSEventCnt     = 0u;
;;;300                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;301                 OS_EXIT_CRITICAL();
;;;302                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;303                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;304                 }
;;;305                 *perr                  = OS_ERR_NONE;
;;;306                 pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
;;;307                 break;
;;;308    
;;;309            default:
;;;310                 OS_EXIT_CRITICAL();
;;;311                 *perr                  = OS_ERR_INVALID_OPT;
;;;312                 pevent_return          = pevent;
;;;313                 break;
;;;314        }
;;;315        return (pevent_return);
;;;316    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L3.30|
00001e  4835              LDR      r0,|L3.244|
000020  7800              LDRB     r0,[r0,#0]            ;254  ; OSIntNesting
000022  b118              CBZ      r0,|L3.44|
000024  200f              MOVS     r0,#0xf               ;255
000026  7028              STRB     r0,[r5,#0]            ;255
000028  4620              MOV      r0,r4                 ;256
00002a  e7f6              B        |L3.26|
                  |L3.44|
00002c  f7fffffe          BL       OS_CPU_SR_Save
000030  4682              MOV      r10,r0                ;258
000032  7aa0              LDRB     r0,[r4,#0xa]          ;259
000034  b110              CBZ      r0,|L3.60|
000036  f04f0801          MOV      r8,#1                 ;260
00003a  e001              B        |L3.64|
                  |L3.60|
00003c  f04f0800          MOV      r8,#0                 ;262
                  |L3.64|
000040  f1b90f00          CMP      r9,#0                 ;264
000044  d003              BEQ      |L3.78|
000046  f1b90f01          CMP      r9,#1                 ;264
00004a  d149              BNE      |L3.224|
00004c  e021              B        |L3.146|
                  |L3.78|
00004e  f1b80f00          CMP      r8,#0                 ;266
000052  d117              BNE      |L3.132|
000054  a028              ADR      r0,|L3.248|
000056  6120              STR      r0,[r4,#0x10]         ;268
000058  6866              LDR      r6,[r4,#4]            ;270
00005a  4828              LDR      r0,|L3.252|
00005c  6800              LDR      r0,[r0,#0]            ;271  ; OSQFreeList
00005e  6030              STR      r0,[r6,#0]            ;271
000060  4826              LDR      r0,|L3.252|
000062  6006              STR      r6,[r0,#0]            ;272  ; OSQFreeList
000064  2000              MOVS     r0,#0                 ;273
000066  7020              STRB     r0,[r4,#0]            ;273
000068  4825              LDR      r0,|L3.256|
00006a  6800              LDR      r0,[r0,#0]            ;274  ; OSEventFreeList
00006c  6060              STR      r0,[r4,#4]            ;274
00006e  2000              MOVS     r0,#0                 ;275
000070  8120              STRH     r0,[r4,#8]            ;275
000072  4823              LDR      r0,|L3.256|
000074  6004              STR      r4,[r0,#0]            ;276  ; OSEventFreeList
000076  4650              MOV      r0,r10                ;277
000078  f7fffffe          BL       OS_CPU_SR_Restore
00007c  2000              MOVS     r0,#0                 ;278
00007e  7028              STRB     r0,[r5,#0]            ;278
000080  2700              MOVS     r7,#0                 ;279
000082  e005              B        |L3.144|
                  |L3.132|
000084  4650              MOV      r0,r10                ;281
000086  f7fffffe          BL       OS_CPU_SR_Restore
00008a  2049              MOVS     r0,#0x49              ;282
00008c  7028              STRB     r0,[r5,#0]            ;282
00008e  4627              MOV      r7,r4                 ;283
                  |L3.144|
000090  e02d              B        |L3.238|
                  |L3.146|
000092  e005              B        |L3.160|
                  |L3.148|
000094  2300              MOVS     r3,#0                 ;289
000096  2204              MOVS     r2,#4                 ;289
000098  4619              MOV      r1,r3                 ;289
00009a  4620              MOV      r0,r4                 ;289
00009c  f7fffffe          BL       OS_EventTaskRdy
                  |L3.160|
0000a0  7aa0              LDRB     r0,[r4,#0xa]          ;288
0000a2  2800              CMP      r0,#0                 ;288
0000a4  d1f6              BNE      |L3.148|
0000a6  a014              ADR      r0,|L3.248|
0000a8  6120              STR      r0,[r4,#0x10]         ;292
0000aa  6866              LDR      r6,[r4,#4]            ;294
0000ac  4813              LDR      r0,|L3.252|
0000ae  6800              LDR      r0,[r0,#0]            ;295  ; OSQFreeList
0000b0  6030              STR      r0,[r6,#0]            ;295
0000b2  4812              LDR      r0,|L3.252|
0000b4  6006              STR      r6,[r0,#0]            ;296  ; OSQFreeList
0000b6  2000              MOVS     r0,#0                 ;297
0000b8  7020              STRB     r0,[r4,#0]            ;297
0000ba  4811              LDR      r0,|L3.256|
0000bc  6800              LDR      r0,[r0,#0]            ;298  ; OSEventFreeList
0000be  6060              STR      r0,[r4,#4]            ;298
0000c0  2000              MOVS     r0,#0                 ;299
0000c2  8120              STRH     r0,[r4,#8]            ;299
0000c4  480e              LDR      r0,|L3.256|
0000c6  6004              STR      r4,[r0,#0]            ;300  ; OSEventFreeList
0000c8  4650              MOV      r0,r10                ;301
0000ca  f7fffffe          BL       OS_CPU_SR_Restore
0000ce  f1b80f01          CMP      r8,#1                 ;302
0000d2  d101              BNE      |L3.216|
0000d4  f7fffffe          BL       OS_Sched
                  |L3.216|
0000d8  2000              MOVS     r0,#0                 ;305
0000da  7028              STRB     r0,[r5,#0]            ;305
0000dc  2700              MOVS     r7,#0                 ;306
0000de  e006              B        |L3.238|
                  |L3.224|
0000e0  4650              MOV      r0,r10                ;310
0000e2  f7fffffe          BL       OS_CPU_SR_Restore
0000e6  2007              MOVS     r0,#7                 ;311
0000e8  7028              STRB     r0,[r5,#0]            ;311
0000ea  4627              MOV      r7,r4                 ;312
0000ec  bf00              NOP                            ;313
                  |L3.238|
0000ee  bf00              NOP                            ;285
0000f0  4638              MOV      r0,r7                 ;315
0000f2  e792              B        |L3.26|
;;;317    #endif
                          ENDP

                  |L3.244|
                          DCD      OSIntNesting
                  |L3.248|
0000f8  3f00              DCB      "?",0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L3.252|
                          DCD      OSQFreeList
                  |L3.256|
                          DCD      OSEventFreeList

                          AREA ||i.OSQFlush||, CODE, READONLY, ALIGN=1

                  OSQFlush PROC
;;;339    #if OS_Q_FLUSH_EN > 0u
;;;340    INT8U  OSQFlush (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;341    {
000002  4605              MOV      r5,r0
;;;342        OS_Q      *pq;
;;;343    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;344        OS_CPU_SR  cpu_sr = 0u;
000004  2600              MOVS     r6,#0
;;;345    #endif
;;;346    
;;;347    
;;;348    
;;;349    #if OS_ARG_CHK_EN > 0u
;;;350        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;351            return (OS_ERR_PEVENT_NULL);
;;;352        }
;;;353        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
;;;354            return (OS_ERR_EVENT_TYPE);
;;;355        }
;;;356    #endif
;;;357        OS_ENTER_CRITICAL();
000006  f7fffffe          BL       OS_CPU_SR_Save
00000a  4606              MOV      r6,r0
;;;358        pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
00000c  686c              LDR      r4,[r5,#4]
;;;359        pq->OSQIn      = pq->OSQStart;
00000e  6860              LDR      r0,[r4,#4]
000010  60e0              STR      r0,[r4,#0xc]
;;;360        pq->OSQOut     = pq->OSQStart;
000012  6860              LDR      r0,[r4,#4]
000014  6120              STR      r0,[r4,#0x10]
;;;361        pq->OSQEntries = 0u;
000016  2000              MOVS     r0,#0
000018  82e0              STRH     r0,[r4,#0x16]
;;;362        OS_EXIT_CRITICAL();
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       OS_CPU_SR_Restore
;;;363        return (OS_ERR_NONE);
000020  2000              MOVS     r0,#0
;;;364    }
000022  bd70              POP      {r4-r6,pc}
;;;365    #endif
                          ENDP


                          AREA ||i.OSQPend||, CODE, READONLY, ALIGN=2

                  OSQPend PROC
;;;403    
;;;404    void  *OSQPend (OS_EVENT  *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;405                    INT32U     timeout,
;;;406                    INT8U     *perr)
;;;407    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;408        void      *pmsg;
;;;409        OS_Q      *pq;
;;;410    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;411        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0900          MOV      r9,#0
;;;412    #endif
;;;413    
;;;414    
;;;415    
;;;416    #ifdef OS_SAFETY_CRITICAL
;;;417        if (perr == (INT8U *)0) {
;;;418            OS_SAFETY_CRITICAL_EXCEPTION();
;;;419            return ((void *)0);
;;;420        }
;;;421    #endif
;;;422    
;;;423    #if OS_ARG_CHK_EN > 0u
;;;424        if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
;;;425            *perr = OS_ERR_PEVENT_NULL;
;;;426            return ((void *)0);
;;;427        }
;;;428    #endif
;;;429        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
00000e  7838              LDRB     r0,[r7,#0]
000010  2802              CMP      r0,#2
000012  d004              BEQ      |L5.30|
;;;430            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;431            return ((void *)0);
000018  2000              MOVS     r0,#0
                  |L5.26|
;;;432        }
;;;433        if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
;;;434            *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
;;;435            return ((void *)0);
;;;436        }
;;;437        if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
;;;438            *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
;;;439            return ((void *)0);
;;;440        }
;;;441        OS_ENTER_CRITICAL();
;;;442        pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
;;;443        if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
;;;444            pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
;;;445            pq->OSQEntries--;                        /* Update the number of entries in the queue          */
;;;446            if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
;;;447                pq->OSQOut = pq->OSQStart;
;;;448            }
;;;449            OS_EXIT_CRITICAL();
;;;450            *perr = OS_ERR_NONE;
;;;451            return (pmsg);                           /* Return message received                            */
;;;452        }
;;;453        OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
;;;454        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;455        OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
;;;456        OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
;;;457        OS_EXIT_CRITICAL();
;;;458        OS_Sched();                                  /* Find next highest priority task ready to run       */
;;;459        OS_ENTER_CRITICAL();
;;;460        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;461            case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
;;;462                 pmsg =  OSTCBCur->OSTCBMsg;
;;;463                *perr =  OS_ERR_NONE;
;;;464                 break;
;;;465    
;;;466            case OS_STAT_PEND_ABORT:
;;;467                 pmsg = (void *)0;
;;;468                *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;469                 break;
;;;470    
;;;471            case OS_STAT_PEND_TO:
;;;472            default:
;;;473                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;474                 pmsg = (void *)0;
;;;475                *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;476                 break;
;;;477        }
;;;478        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;479        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;480        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;481    #if (OS_EVENT_MULTI_EN > 0u)
;;;482        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;483    #endif
;;;484        OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
;;;485        OS_EXIT_CRITICAL();
;;;486        return (pmsg);                                    /* Return received message                       */
;;;487    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L5.30|
00001e  483e              LDR      r0,|L5.280|
000020  7800              LDRB     r0,[r0,#0]            ;433  ; OSIntNesting
000022  b118              CBZ      r0,|L5.44|
000024  2002              MOVS     r0,#2                 ;434
000026  7028              STRB     r0,[r5,#0]            ;434
000028  2000              MOVS     r0,#0                 ;435
00002a  e7f6              B        |L5.26|
                  |L5.44|
00002c  483b              LDR      r0,|L5.284|
00002e  7800              LDRB     r0,[r0,#0]            ;437  ; OSLockNesting
000030  b118              CBZ      r0,|L5.58|
000032  200d              MOVS     r0,#0xd               ;438
000034  7028              STRB     r0,[r5,#0]            ;438
000036  2000              MOVS     r0,#0                 ;439
000038  e7ef              B        |L5.26|
                  |L5.58|
00003a  f7fffffe          BL       OS_CPU_SR_Save
00003e  4681              MOV      r9,r0                 ;441
000040  687c              LDR      r4,[r7,#4]            ;442
000042  8ae0              LDRH     r0,[r4,#0x16]         ;443
000044  b198              CBZ      r0,|L5.110|
000046  6921              LDR      r1,[r4,#0x10]         ;444
000048  1d08              ADDS     r0,r1,#4              ;444
00004a  6120              STR      r0,[r4,#0x10]         ;444
00004c  680e              LDR      r6,[r1,#0]            ;444
00004e  8ae0              LDRH     r0,[r4,#0x16]         ;445
000050  1e40              SUBS     r0,r0,#1              ;445
000052  82e0              STRH     r0,[r4,#0x16]         ;445
000054  68a1              LDR      r1,[r4,#8]            ;446
000056  6920              LDR      r0,[r4,#0x10]         ;446
000058  4288              CMP      r0,r1                 ;446
00005a  d101              BNE      |L5.96|
00005c  6860              LDR      r0,[r4,#4]            ;447
00005e  6120              STR      r0,[r4,#0x10]         ;447
                  |L5.96|
000060  4648              MOV      r0,r9                 ;449
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  2000              MOVS     r0,#0                 ;450
000068  7028              STRB     r0,[r5,#0]            ;450
00006a  4630              MOV      r0,r6                 ;451
00006c  e7d5              B        |L5.26|
                  |L5.110|
00006e  482c              LDR      r0,|L5.288|
000070  6800              LDR      r0,[r0,#0]            ;453  ; OSTCBCur
000072  f8900034          LDRB     r0,[r0,#0x34]         ;453
000076  f0400004          ORR      r0,r0,#4              ;453
00007a  4929              LDR      r1,|L5.288|
00007c  6809              LDR      r1,[r1,#0]            ;453  ; OSTCBCur
00007e  f8810034          STRB     r0,[r1,#0x34]         ;453
000082  2000              MOVS     r0,#0                 ;454
000084  4926              LDR      r1,|L5.288|
000086  6809              LDR      r1,[r1,#0]            ;454  ; OSTCBCur
000088  f8810035          STRB     r0,[r1,#0x35]         ;454
00008c  4824              LDR      r0,|L5.288|
00008e  6800              LDR      r0,[r0,#0]            ;455  ; OSTCBCur
000090  f8c08030          STR      r8,[r0,#0x30]         ;455
000094  4638              MOV      r0,r7                 ;456
000096  f7fffffe          BL       OS_EventTaskWait
00009a  4648              MOV      r0,r9                 ;457
00009c  f7fffffe          BL       OS_CPU_SR_Restore
0000a0  f7fffffe          BL       OS_Sched
0000a4  f7fffffe          BL       OS_CPU_SR_Save
0000a8  4681              MOV      r9,r0                 ;459
0000aa  481d              LDR      r0,|L5.288|
0000ac  6800              LDR      r0,[r0,#0]            ;460  ; OSTCBCur
0000ae  f8900035          LDRB     r0,[r0,#0x35]         ;460
0000b2  b120              CBZ      r0,|L5.190|
0000b4  2801              CMP      r0,#1                 ;460
0000b6  d00d              BEQ      |L5.212|
0000b8  2802              CMP      r0,#2                 ;460
0000ba  d10a              BNE      |L5.210|
0000bc  e005              B        |L5.202|
                  |L5.190|
0000be  4818              LDR      r0,|L5.288|
0000c0  6800              LDR      r0,[r0,#0]            ;462  ; OSTCBCur
0000c2  6a46              LDR      r6,[r0,#0x24]         ;462
0000c4  2000              MOVS     r0,#0                 ;463
0000c6  7028              STRB     r0,[r5,#0]            ;463
0000c8  e00d              B        |L5.230|
                  |L5.202|
0000ca  2600              MOVS     r6,#0                 ;467
0000cc  200e              MOVS     r0,#0xe               ;468
0000ce  7028              STRB     r0,[r5,#0]            ;468
0000d0  e009              B        |L5.230|
                  |L5.210|
0000d2  bf00              NOP                            ;471
                  |L5.212|
0000d4  4639              MOV      r1,r7                 ;473
0000d6  4812              LDR      r0,|L5.288|
0000d8  6800              LDR      r0,[r0,#0]            ;473  ; OSTCBCur
0000da  f7fffffe          BL       OS_EventTaskRemove
0000de  2600              MOVS     r6,#0                 ;474
0000e0  200a              MOVS     r0,#0xa               ;475
0000e2  7028              STRB     r0,[r5,#0]            ;475
0000e4  bf00              NOP                            ;476
                  |L5.230|
0000e6  bf00              NOP                            ;464
0000e8  2000              MOVS     r0,#0                 ;478
0000ea  490d              LDR      r1,|L5.288|
0000ec  6809              LDR      r1,[r1,#0]            ;478  ; OSTCBCur
0000ee  f8810034          STRB     r0,[r1,#0x34]         ;478
0000f2  490b              LDR      r1,|L5.288|
0000f4  6809              LDR      r1,[r1,#0]            ;479  ; OSTCBCur
0000f6  f8810035          STRB     r0,[r1,#0x35]         ;479
0000fa  4909              LDR      r1,|L5.288|
0000fc  6809              LDR      r1,[r1,#0]            ;480  ; OSTCBCur
0000fe  61c8              STR      r0,[r1,#0x1c]         ;480
000100  4907              LDR      r1,|L5.288|
000102  6809              LDR      r1,[r1,#0]            ;482  ; OSTCBCur
000104  6208              STR      r0,[r1,#0x20]         ;482
000106  4906              LDR      r1,|L5.288|
000108  6809              LDR      r1,[r1,#0]            ;484  ; OSTCBCur
00010a  6248              STR      r0,[r1,#0x24]         ;484
00010c  4648              MOV      r0,r9                 ;485
00010e  f7fffffe          BL       OS_CPU_SR_Restore
000112  4630              MOV      r0,r6                 ;486
000114  e781              B        |L5.26|
;;;488    /*$PAGE*/
                          ENDP

000116  0000              DCW      0x0000
                  |L5.280|
                          DCD      OSIntNesting
                  |L5.284|
                          DCD      OSLockNesting
                  |L5.288|
                          DCD      OSTCBCur

                          AREA ||i.OSQPendAbort||, CODE, READONLY, ALIGN=1

                  OSQPendAbort PROC
;;;521    #if OS_Q_PEND_ABORT_EN > 0u
;;;522    INT8U  OSQPendAbort (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;523                         INT8U      opt,
;;;524                         INT8U     *perr)
;;;525    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;526        INT8U      nbr_tasks;
;;;527    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;528        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;529    #endif
;;;530    
;;;531    
;;;532    
;;;533    #ifdef OS_SAFETY_CRITICAL
;;;534        if (perr == (INT8U *)0) {
;;;535            OS_SAFETY_CRITICAL_EXCEPTION();
;;;536            return (0u);
;;;537        }
;;;538    #endif
;;;539    
;;;540    #if OS_ARG_CHK_EN > 0u
;;;541        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;542            *perr = OS_ERR_PEVENT_NULL;
;;;543            return (0u);
;;;544        }
;;;545    #endif
;;;546        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2802              CMP      r0,#2
000012  d004              BEQ      |L6.30|
;;;547            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;548            return (0u);
000018  2000              MOVS     r0,#0
                  |L6.26|
;;;549        }
;;;550        OS_ENTER_CRITICAL();
;;;551        if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on queue?        */
;;;552            nbr_tasks = 0u;
;;;553            switch (opt) {
;;;554                case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
;;;555                     while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on queue    */
;;;556                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;557                         nbr_tasks++;
;;;558                     }
;;;559                     break;
;;;560    
;;;561                case OS_PEND_OPT_NONE:
;;;562                default:                                       /* No,  ready HPT       waiting on queue    */
;;;563                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;564                     nbr_tasks++;
;;;565                     break;
;;;566            }
;;;567            OS_EXIT_CRITICAL();
;;;568            OS_Sched();                                        /* Find HPT ready to run                    */
;;;569            *perr = OS_ERR_PEND_ABORT;
;;;570            return (nbr_tasks);
;;;571        }
;;;572        OS_EXIT_CRITICAL();
;;;573        *perr = OS_ERR_NONE;
;;;574        return (0u);                                           /* No tasks waiting on queue                */
;;;575    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L6.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4680              MOV      r8,r0                 ;550
000024  7aa0              LDRB     r0,[r4,#0xa]          ;551
000026  b320              CBZ      r0,|L6.114|
000028  2600              MOVS     r6,#0                 ;552
00002a  b17f              CBZ      r7,|L6.76|
00002c  2f01              CMP      r7,#1                 ;553
00002e  d10c              BNE      |L6.74|
000030  e007              B        |L6.66|
                  |L6.50|
000032  2302              MOVS     r3,#2                 ;556
000034  2204              MOVS     r2,#4                 ;556
000036  2100              MOVS     r1,#0                 ;556
000038  4620              MOV      r0,r4                 ;556
00003a  f7fffffe          BL       OS_EventTaskRdy
00003e  1c70              ADDS     r0,r6,#1              ;557
000040  b2c6              UXTB     r6,r0                 ;557
                  |L6.66|
000042  7aa0              LDRB     r0,[r4,#0xa]          ;555
000044  2800              CMP      r0,#0                 ;555
000046  d1f4              BNE      |L6.50|
000048  e009              B        |L6.94|
                  |L6.74|
00004a  bf00              NOP                            ;561
                  |L6.76|
00004c  2302              MOVS     r3,#2                 ;563
00004e  2204              MOVS     r2,#4                 ;563
000050  2100              MOVS     r1,#0                 ;563
000052  4620              MOV      r0,r4                 ;563
000054  f7fffffe          BL       OS_EventTaskRdy
000058  1c70              ADDS     r0,r6,#1              ;564
00005a  b2c6              UXTB     r6,r0                 ;564
00005c  bf00              NOP                            ;565
                  |L6.94|
00005e  bf00              NOP                            ;559
000060  4640              MOV      r0,r8                 ;567
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  f7fffffe          BL       OS_Sched
00006a  200e              MOVS     r0,#0xe               ;569
00006c  7028              STRB     r0,[r5,#0]            ;569
00006e  4630              MOV      r0,r6                 ;570
000070  e7d3              B        |L6.26|
                  |L6.114|
000072  4640              MOV      r0,r8                 ;572
000074  f7fffffe          BL       OS_CPU_SR_Restore
000078  2000              MOVS     r0,#0                 ;573
00007a  7028              STRB     r0,[r5,#0]            ;573
00007c  bf00              NOP                            ;574
00007e  e7cc              B        |L6.26|
;;;576    #endif
                          ENDP


                          AREA ||i.OSQPost||, CODE, READONLY, ALIGN=1

                  OSQPost PROC
;;;598    #if OS_Q_POST_EN > 0u
;;;599    INT8U  OSQPost (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;600                    void      *pmsg)
;;;601    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;602        OS_Q      *pq;
;;;603    #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;604        OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;605    #endif
;;;606    
;;;607    
;;;608    
;;;609    #if OS_ARG_CHK_EN > 0u
;;;610        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;611            return (OS_ERR_PEVENT_NULL);
;;;612        }
;;;613    #endif
;;;614        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
00000a  7828              LDRB     r0,[r5,#0]
00000c  2802              CMP      r0,#2
00000e  d002              BEQ      |L7.22|
;;;615            return (OS_ERR_EVENT_TYPE);
000010  2001              MOVS     r0,#1
                  |L7.18|
;;;616        }
;;;617        OS_ENTER_CRITICAL();
;;;618        if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
;;;619                                                           /* Ready highest priority task waiting on event */
;;;620            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;621            OS_EXIT_CRITICAL();
;;;622            OS_Sched();                                    /* Find highest priority task ready to run      */
;;;623            return (OS_ERR_NONE);
;;;624        }
;;;625        pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
;;;626        if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
;;;627            OS_EXIT_CRITICAL();
;;;628            return (OS_ERR_Q_FULL);
;;;629        }
;;;630        *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
;;;631        pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
;;;632        if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
;;;633            pq->OSQIn = pq->OSQStart;
;;;634        }
;;;635        OS_EXIT_CRITICAL();
;;;636        return (OS_ERR_NONE);
;;;637    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L7.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4607              MOV      r7,r0                 ;617
00001c  7aa8              LDRB     r0,[r5,#0xa]          ;618
00001e  b160              CBZ      r0,|L7.58|
000020  2300              MOVS     r3,#0                 ;620
000022  2204              MOVS     r2,#4                 ;620
000024  4631              MOV      r1,r6                 ;620
000026  4628              MOV      r0,r5                 ;620
000028  f7fffffe          BL       OS_EventTaskRdy
00002c  4638              MOV      r0,r7                 ;621
00002e  f7fffffe          BL       OS_CPU_SR_Restore
000032  f7fffffe          BL       OS_Sched
000036  2000              MOVS     r0,#0                 ;623
000038  e7eb              B        |L7.18|
                  |L7.58|
00003a  686c              LDR      r4,[r5,#4]            ;625
00003c  8ae0              LDRH     r0,[r4,#0x16]         ;626
00003e  8aa1              LDRH     r1,[r4,#0x14]         ;626
000040  4288              CMP      r0,r1                 ;626
000042  db04              BLT      |L7.78|
000044  4638              MOV      r0,r7                 ;627
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  201e              MOVS     r0,#0x1e              ;628
00004c  e7e1              B        |L7.18|
                  |L7.78|
00004e  68e1              LDR      r1,[r4,#0xc]          ;630
000050  1d08              ADDS     r0,r1,#4              ;630
000052  60e0              STR      r0,[r4,#0xc]          ;630
000054  600e              STR      r6,[r1,#0]            ;630
000056  8ae0              LDRH     r0,[r4,#0x16]         ;631
000058  1c40              ADDS     r0,r0,#1              ;631
00005a  82e0              STRH     r0,[r4,#0x16]         ;631
00005c  e9d41002          LDRD     r1,r0,[r4,#8]         ;632
000060  4288              CMP      r0,r1                 ;632
000062  d101              BNE      |L7.104|
000064  6860              LDR      r0,[r4,#4]            ;633
000066  60e0              STR      r0,[r4,#0xc]          ;633
                  |L7.104|
000068  4638              MOV      r0,r7                 ;635
00006a  f7fffffe          BL       OS_CPU_SR_Restore
00006e  2000              MOVS     r0,#0                 ;636
000070  e7cf              B        |L7.18|
;;;638    #endif
                          ENDP


                          AREA ||i.OSQPostFront||, CODE, READONLY, ALIGN=1

                  OSQPostFront PROC
;;;661    #if OS_Q_POST_FRONT_EN > 0u
;;;662    INT8U  OSQPostFront (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;663                         void      *pmsg)
;;;664    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;665        OS_Q      *pq;
;;;666    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;667        OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;668    #endif
;;;669    
;;;670    
;;;671    
;;;672    #if OS_ARG_CHK_EN > 0u
;;;673        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;674            return (OS_ERR_PEVENT_NULL);
;;;675        }
;;;676    #endif
;;;677        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
00000a  7828              LDRB     r0,[r5,#0]
00000c  2802              CMP      r0,#2
00000e  d002              BEQ      |L8.22|
;;;678            return (OS_ERR_EVENT_TYPE);
000010  2001              MOVS     r0,#1
                  |L8.18|
;;;679        }
;;;680        OS_ENTER_CRITICAL();
;;;681        if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on queue              */
;;;682                                                          /* Ready highest priority task waiting on event  */
;;;683            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;684            OS_EXIT_CRITICAL();
;;;685            OS_Sched();                                   /* Find highest priority task ready to run       */
;;;686            return (OS_ERR_NONE);
;;;687        }
;;;688        pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
;;;689        if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
;;;690            OS_EXIT_CRITICAL();
;;;691            return (OS_ERR_Q_FULL);
;;;692        }
;;;693        if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
;;;694            pq->OSQOut = pq->OSQEnd;
;;;695        }
;;;696        pq->OSQOut--;
;;;697        *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
;;;698        pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
;;;699        OS_EXIT_CRITICAL();
;;;700        return (OS_ERR_NONE);
;;;701    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L8.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4607              MOV      r7,r0                 ;680
00001c  7aa8              LDRB     r0,[r5,#0xa]          ;681
00001e  b160              CBZ      r0,|L8.58|
000020  2300              MOVS     r3,#0                 ;683
000022  2204              MOVS     r2,#4                 ;683
000024  4631              MOV      r1,r6                 ;683
000026  4628              MOV      r0,r5                 ;683
000028  f7fffffe          BL       OS_EventTaskRdy
00002c  4638              MOV      r0,r7                 ;684
00002e  f7fffffe          BL       OS_CPU_SR_Restore
000032  f7fffffe          BL       OS_Sched
000036  2000              MOVS     r0,#0                 ;686
000038  e7eb              B        |L8.18|
                  |L8.58|
00003a  686c              LDR      r4,[r5,#4]            ;688
00003c  8ae0              LDRH     r0,[r4,#0x16]         ;689
00003e  8aa1              LDRH     r1,[r4,#0x14]         ;689
000040  4288              CMP      r0,r1                 ;689
000042  db04              BLT      |L8.78|
000044  4638              MOV      r0,r7                 ;690
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  201e              MOVS     r0,#0x1e              ;691
00004c  e7e1              B        |L8.18|
                  |L8.78|
00004e  6861              LDR      r1,[r4,#4]            ;693
000050  6920              LDR      r0,[r4,#0x10]         ;693
000052  4288              CMP      r0,r1                 ;693
000054  d101              BNE      |L8.90|
000056  68a0              LDR      r0,[r4,#8]            ;694
000058  6120              STR      r0,[r4,#0x10]         ;694
                  |L8.90|
00005a  6920              LDR      r0,[r4,#0x10]         ;696
00005c  1f00              SUBS     r0,r0,#4              ;696
00005e  6120              STR      r0,[r4,#0x10]         ;696
000060  6920              LDR      r0,[r4,#0x10]         ;697
000062  6006              STR      r6,[r0,#0]            ;697
000064  8ae0              LDRH     r0,[r4,#0x16]         ;698
000066  1c40              ADDS     r0,r0,#1              ;698
000068  82e0              STRH     r0,[r4,#0x16]         ;698
00006a  4638              MOV      r0,r7                 ;699
00006c  f7fffffe          BL       OS_CPU_SR_Restore
000070  2000              MOVS     r0,#0                 ;700
000072  e7ce              B        |L8.18|
;;;702    #endif
                          ENDP


                          AREA ||i.OSQPostOpt||, CODE, READONLY, ALIGN=1

                  OSQPostOpt PROC
;;;733    #if OS_Q_POST_OPT_EN > 0u
;;;734    INT8U  OSQPostOpt (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;735                       void      *pmsg,
;;;736                       INT8U      opt)
;;;737    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;738        OS_Q      *pq;
;;;739    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;740        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;741    #endif
;;;742    
;;;743    
;;;744    
;;;745    #if OS_ARG_CHK_EN > 0u
;;;746        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;747            return (OS_ERR_PEVENT_NULL);
;;;748        }
;;;749    #endif
;;;750        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
00000e  7828              LDRB     r0,[r5,#0]
000010  2802              CMP      r0,#2
000012  d002              BEQ      |L9.26|
;;;751            return (OS_ERR_EVENT_TYPE);
000014  2001              MOVS     r0,#1
                  |L9.22|
;;;752        }
;;;753        OS_ENTER_CRITICAL();
;;;754        if (pevent->OSEventGrp != 0x00u) {                /* See if any task pending on queue              */
;;;755            if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
;;;756                while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on queue       */
;;;757                    (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;758                }
;;;759            } else {                                      /* No,  Post to HPT waiting on queue             */
;;;760                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;761            }
;;;762            OS_EXIT_CRITICAL();
;;;763            if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {	  /* See if scheduler needs to be invoked          */
;;;764                OS_Sched();                               /* Find highest priority task ready to run       */
;;;765            }
;;;766            return (OS_ERR_NONE);
;;;767        }
;;;768        pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
;;;769        if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
;;;770            OS_EXIT_CRITICAL();
;;;771            return (OS_ERR_Q_FULL);
;;;772        }
;;;773        if ((opt & OS_POST_OPT_FRONT) != 0x00u) {         /* Do we post to the FRONT of the queue?         */
;;;774            if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
;;;775                pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
;;;776            }
;;;777            pq->OSQOut--;
;;;778            *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
;;;779        } else {                                          /* No,  Post as FIFO                             */
;;;780            *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
;;;781            if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
;;;782                pq->OSQIn = pq->OSQStart;
;;;783            }
;;;784        }
;;;785        pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
;;;786        OS_EXIT_CRITICAL();
;;;787        return (OS_ERR_NONE);
;;;788    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L9.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4680              MOV      r8,r0                 ;753
000020  7aa8              LDRB     r0,[r5,#0xa]          ;754
000022  b1e8              CBZ      r0,|L9.96|
000024  f0160f01          TST      r6,#1                 ;755
000028  d00a              BEQ      |L9.64|
00002a  e005              B        |L9.56|
                  |L9.44|
00002c  2300              MOVS     r3,#0                 ;757
00002e  2204              MOVS     r2,#4                 ;757
000030  4639              MOV      r1,r7                 ;757
000032  4628              MOV      r0,r5                 ;757
000034  f7fffffe          BL       OS_EventTaskRdy
                  |L9.56|
000038  7aa8              LDRB     r0,[r5,#0xa]          ;756
00003a  2800              CMP      r0,#0                 ;756
00003c  d1f6              BNE      |L9.44|
00003e  e005              B        |L9.76|
                  |L9.64|
000040  2300              MOVS     r3,#0                 ;760
000042  2204              MOVS     r2,#4                 ;760
000044  4639              MOV      r1,r7                 ;760
000046  4628              MOV      r0,r5                 ;760
000048  f7fffffe          BL       OS_EventTaskRdy
                  |L9.76|
00004c  4640              MOV      r0,r8                 ;762
00004e  f7fffffe          BL       OS_CPU_SR_Restore
000052  f0160f04          TST      r6,#4                 ;763
000056  d101              BNE      |L9.92|
000058  f7fffffe          BL       OS_Sched
                  |L9.92|
00005c  2000              MOVS     r0,#0                 ;766
00005e  e7da              B        |L9.22|
                  |L9.96|
000060  686c              LDR      r4,[r5,#4]            ;768
000062  8ae0              LDRH     r0,[r4,#0x16]         ;769
000064  8aa1              LDRH     r1,[r4,#0x14]         ;769
000066  4288              CMP      r0,r1                 ;769
000068  db04              BLT      |L9.116|
00006a  4640              MOV      r0,r8                 ;770
00006c  f7fffffe          BL       OS_CPU_SR_Restore
000070  201e              MOVS     r0,#0x1e              ;771
000072  e7d0              B        |L9.22|
                  |L9.116|
000074  f0160f02          TST      r6,#2                 ;773
000078  d00b              BEQ      |L9.146|
00007a  6861              LDR      r1,[r4,#4]            ;774
00007c  6920              LDR      r0,[r4,#0x10]         ;774
00007e  4288              CMP      r0,r1                 ;774
000080  d101              BNE      |L9.134|
000082  68a0              LDR      r0,[r4,#8]            ;775
000084  6120              STR      r0,[r4,#0x10]         ;775
                  |L9.134|
000086  6920              LDR      r0,[r4,#0x10]         ;777
000088  1f00              SUBS     r0,r0,#4              ;777
00008a  6120              STR      r0,[r4,#0x10]         ;777
00008c  6920              LDR      r0,[r4,#0x10]         ;778
00008e  6007              STR      r7,[r0,#0]            ;778
000090  e009              B        |L9.166|
                  |L9.146|
000092  68e1              LDR      r1,[r4,#0xc]          ;780
000094  1d08              ADDS     r0,r1,#4              ;780
000096  60e0              STR      r0,[r4,#0xc]          ;780
000098  600f              STR      r7,[r1,#0]            ;780
00009a  e9d41002          LDRD     r1,r0,[r4,#8]         ;781
00009e  4288              CMP      r0,r1                 ;781
0000a0  d101              BNE      |L9.166|
0000a2  6860              LDR      r0,[r4,#4]            ;782
0000a4  60e0              STR      r0,[r4,#0xc]          ;782
                  |L9.166|
0000a6  8ae0              LDRH     r0,[r4,#0x16]         ;785
0000a8  1c40              ADDS     r0,r0,#1              ;785
0000aa  82e0              STRH     r0,[r4,#0x16]         ;785
0000ac  4640              MOV      r0,r8                 ;786
0000ae  f7fffffe          BL       OS_CPU_SR_Restore
0000b2  2000              MOVS     r0,#0                 ;787
0000b4  e7af              B        |L9.22|
;;;789    #endif
                          ENDP


                          AREA ||i.OSQQuery||, CODE, READONLY, ALIGN=1

                  OSQQuery PROC
;;;809    #if OS_Q_QUERY_EN > 0u
;;;810    INT8U  OSQQuery (OS_EVENT  *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;811                     OS_Q_DATA *p_q_data)
;;;812    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;813        OS_Q       *pq;
;;;814        INT8U       i;
;;;815        OS_PRIO    *psrc;
;;;816        OS_PRIO    *pdest;
;;;817    #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;818        OS_CPU_SR   cpu_sr = 0u;
000008  f04f0a00          MOV      r10,#0
;;;819    #endif
;;;820    
;;;821    
;;;822    
;;;823    #if OS_ARG_CHK_EN > 0u
;;;824        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;825            return (OS_ERR_PEVENT_NULL);
;;;826        }
;;;827        if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
;;;828            return (OS_ERR_PDATA_NULL);
;;;829        }
;;;830    #endif
;;;831        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
00000c  7828              LDRB     r0,[r5,#0]
00000e  2802              CMP      r0,#2
000010  d002              BEQ      |L10.24|
;;;832            return (OS_ERR_EVENT_TYPE);
000012  2001              MOVS     r0,#1
                  |L10.20|
;;;833        }
;;;834        OS_ENTER_CRITICAL();
;;;835        p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
;;;836        psrc                 = &pevent->OSEventTbl[0];
;;;837        pdest                = &p_q_data->OSEventTbl[0];
;;;838        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
;;;839            *pdest++ = *psrc++;
;;;840        }
;;;841        pq = (OS_Q *)pevent->OSEventPtr;
;;;842        if (pq->OSQEntries > 0u) {
;;;843            p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
;;;844        } else {
;;;845            p_q_data->OSMsg = (void *)0;
;;;846        }
;;;847        p_q_data->OSNMsgs = pq->OSQEntries;
;;;848        p_q_data->OSQSize = pq->OSQSize;
;;;849        OS_EXIT_CRITICAL();
;;;850        return (OS_ERR_NONE);
;;;851    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L10.24|
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  4682              MOV      r10,r0                ;834
00001e  7aa8              LDRB     r0,[r5,#0xa]          ;835
000020  7320              STRB     r0,[r4,#0xc]          ;835
000022  f105080b          ADD      r8,r5,#0xb            ;836
000026  f1040908          ADD      r9,r4,#8              ;837
00002a  2700              MOVS     r7,#0                 ;838
00002c  e005              B        |L10.58|
                  |L10.46|
00002e  f8180b01          LDRB     r0,[r8],#1            ;839
000032  f8090b01          STRB     r0,[r9],#1            ;839
000036  1c78              ADDS     r0,r7,#1              ;838
000038  b2c7              UXTB     r7,r0                 ;838
                  |L10.58|
00003a  2f04              CMP      r7,#4                 ;838
00003c  d3f7              BCC      |L10.46|
00003e  686e              LDR      r6,[r5,#4]            ;841
000040  8af0              LDRH     r0,[r6,#0x16]         ;842
000042  b118              CBZ      r0,|L10.76|
000044  6930              LDR      r0,[r6,#0x10]         ;843
000046  6800              LDR      r0,[r0,#0]            ;843
000048  6020              STR      r0,[r4,#0]            ;843
00004a  e001              B        |L10.80|
                  |L10.76|
00004c  2000              MOVS     r0,#0                 ;845
00004e  6020              STR      r0,[r4,#0]            ;845
                  |L10.80|
000050  8af0              LDRH     r0,[r6,#0x16]         ;847
000052  80a0              STRH     r0,[r4,#4]            ;847
000054  8ab0              LDRH     r0,[r6,#0x14]         ;848
000056  80e0              STRH     r0,[r4,#6]            ;848
000058  4650              MOV      r0,r10                ;849
00005a  f7fffffe          BL       OS_CPU_SR_Restore
00005e  2000              MOVS     r0,#0                 ;850
000060  e7d8              B        |L10.20|
;;;852    #endif                                                 /* OS_Q_QUERY_EN                                */
                          ENDP


                          AREA ||i.OS_QInit||, CODE, READONLY, ALIGN=2

                  OS_QInit PROC
;;;869    
;;;870    void  OS_QInit (void)
000000  4803              LDR      r0,|L11.16|
;;;871    {
;;;872    #if OS_MAX_QS == 1u
;;;873        OSQFreeList         = &OSQTbl[0];                /* Only ONE queue!                                */
000002  4904              LDR      r1,|L11.20|
000004  6008              STR      r0,[r1,#0]  ; OSQFreeList
;;;874        OSQFreeList->OSQPtr = (OS_Q *)0;
000006  2000              MOVS     r0,#0
000008  6809              LDR      r1,[r1,#0]  ; OSQFreeList
00000a  6008              STR      r0,[r1,#0]
;;;875    #endif
;;;876    
;;;877    #if OS_MAX_QS >= 2u
;;;878        INT16U   ix;
;;;879        INT16U   ix_next;
;;;880        OS_Q    *pq1;
;;;881        OS_Q    *pq2;
;;;882    
;;;883    
;;;884    
;;;885        OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
;;;886        for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
;;;887            ix_next = ix + 1u;
;;;888            pq1 = &OSQTbl[ix];
;;;889            pq2 = &OSQTbl[ix_next];
;;;890            pq1->OSQPtr = pq2;
;;;891        }
;;;892        pq1         = &OSQTbl[ix];
;;;893        pq1->OSQPtr = (OS_Q *)0;
;;;894        OSQFreeList = &OSQTbl[0];
;;;895    #endif
;;;896    }
00000c  4770              BX       lr
;;;897    #endif                                               /* OS_Q_EN                                        */
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      OSQTbl
                  |L11.20|
                          DCD      OSQFreeList
