; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guidemo_cursor.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guidemo_cursor.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\uCGUIDemo\GUIDEMO_Cursor.c]
                          THUMB

                          AREA ||i.GUIDEMO_Cursor||, CODE, READONLY, ALIGN=2

                  GUIDEMO_Cursor PROC
;;;280    */
;;;281    void GUIDEMO_Cursor(void) {
000000  b510              PUSH     {r4,lr}
;;;282      int i = 0;
000002  2400              MOVS     r4,#0
;;;283      GUIDEMO_ShowIntro("Cursor",
000004  a114              ADR      r1,|L1.88|
000006  a01c              ADR      r0,|L1.120|
000008  f7fffffe          BL       GUIDEMO_ShowIntro
;;;284                        "\nemWin supports"
;;;285                        "\nsoftware cursor");
;;;286      GUIDEMO_SetBkColor(GUI_BLUE);
00000c  f44f007f          MOV      r0,#0xff0000
000010  f7fffffe          BL       GUIDEMO_SetBkColor
;;;287      GUI_Clear();
000014  f7fffffe          BL       GUI_Clear
;;;288      _DispCursor();
000018  f7fffffe          BL       _DispCursor
;;;289      GUIDEMO_Delay(1500);
00001c  f24050dc          MOV      r0,#0x5dc
000020  f7fffffe          BL       GUIDEMO_Delay
;;;290      GUIDEMO_NotifyStartNext();
000024  f7fffffe          BL       GUIDEMO_NotifyStartNext
;;;291      GUI_CURSOR_Show();
000028  f7fffffe          BL       GUI_CURSOR_Show
;;;292      for ( i = 0;(i < countof(_aCursor) && !GUIDEMO_CheckCancel()); i++) {
00002c  bf00              NOP      
00002e  e005              B        |L1.60|
                  |L1.48|
;;;293          _MoveCursor(_aCursor[i]);
000030  4913              LDR      r1,|L1.128|
000032  f8510024          LDR      r0,[r1,r4,LSL #2]
000036  f7fffffe          BL       _MoveCursor
00003a  1c64              ADDS     r4,r4,#1              ;292
                  |L1.60|
00003c  2c04              CMP      r4,#4                 ;292
00003e  d203              BCS      |L1.72|
000040  f7fffffe          BL       GUIDEMO_CheckCancel
000044  2800              CMP      r0,#0                 ;292
000046  d0f3              BEQ      |L1.48|
                  |L1.72|
;;;294      }
;;;295      GUI_CURSOR_SetPosition(0,0);
000048  2100              MOVS     r1,#0
00004a  4608              MOV      r0,r1
00004c  f7fffffe          BL       GUI_CURSOR_SetPosition
;;;296      GUI_CURSOR_Select(&GUI_CursorArrowM);  
000050  480c              LDR      r0,|L1.132|
000052  f7fffffe          BL       GUI_CURSOR_Select
;;;297    }
000056  bd10              POP      {r4,pc}
;;;298    
                          ENDP

                  |L1.88|
000058  0a656d57          DCB      "\nemWin supports\nsoftware cursor",0
00005c  696e2073
000060  7570706f
000064  7274730a
000068  736f6674
00006c  77617265
000070  20637572
000074  736f7200
                  |L1.120|
000078  43757273          DCB      "Cursor",0
00007c  6f7200  
00007f  00                DCB      0
                  |L1.128|
                          DCD      _aCursor
                  |L1.132|
                          DCD      GUI_CursorArrowM

                          AREA ||i._DispCursor||, CODE, READONLY, ALIGN=2

                  _DispCursor PROC
;;;207    */
;;;208    static void _DispCursor(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;209      #if !(GUIDEMO_LARGE)
;;;210        int x0 = 0;
;;;211      #endif
;;;212      int y0, dx, dy;
;;;213      GUI_CURSOR_Hide();
000002  f7fffffe          BL       GUI_CURSOR_Hide
;;;214      GUI_SetTextMode(GUI_TM_TRANS);
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       GUI_SetTextMode
;;;215      #if GUIDEMO_LARGE
;;;216        GUI_SetFont(&GUI_FontComic24B_ASCII);
00000c  4810              LDR      r0,|L2.80|
00000e  f7fffffe          BL       GUI_SetFont
;;;217        GUI_DispStringAt("Available\n  cursors:", 18, 12);
000012  220c              MOVS     r2,#0xc
000014  2112              MOVS     r1,#0x12
000016  a00f              ADR      r0,|L2.84|
000018  f7fffffe          BL       GUI_DispStringAt
;;;218      #else
;;;219        #if GUIDEMO_TINY
;;;220          GUI_SetFont(&GUI_Font13B_ASCII);
;;;221        #else
;;;222          GUI_SetFont(&GUI_FontComic18B_ASCII);
;;;223        #endif
;;;224        GUI_DispStringHCenterAt("Available cursors:", LCD_XSIZE >> 1,  LCD_YSIZE >> 5);
;;;225      #endif
;;;226      /* Display the cursors */
;;;227      #if GUIDEMO_LARGE
;;;228        y0 = 68;
00001c  2444              MOVS     r4,#0x44
;;;229        dx = LCD_XSIZE / 2.5;
00001e  2660              MOVS     r6,#0x60
;;;230        #if (LCD_YSIZE > 240)
;;;231          dy = LCD_YSIZE / 3.2;
000020  2564              MOVS     r5,#0x64
;;;232        #else
;;;233          dy = 75;
;;;234        #endif
;;;235        #if ((LCD_YSIZE < 220) || (LCD_XSIZE < 300))
;;;236          y0 -=  3;
000022  1ee4              SUBS     r4,r4,#3
;;;237          dy -= 12;
000024  3d0c              SUBS     r5,r5,#0xc
;;;238        #endif
;;;239        _ShowCursorType(&_CursorArrow,    0, y0);
000026  4622              MOV      r2,r4
000028  2100              MOVS     r1,#0
00002a  4810              LDR      r0,|L2.108|
00002c  f7fffffe          BL       _ShowCursorType
;;;240        _ShowCursorType(&_CursorCross,    0, y0 + dy);
000030  1962              ADDS     r2,r4,r5
000032  2100              MOVS     r1,#0
000034  480e              LDR      r0,|L2.112|
000036  f7fffffe          BL       _ShowCursorType
;;;241        _ShowCursorType(&_CursorArrowI,  dx, y0);
00003a  4622              MOV      r2,r4
00003c  4631              MOV      r1,r6
00003e  480d              LDR      r0,|L2.116|
000040  f7fffffe          BL       _ShowCursorType
;;;242        _ShowCursorType(&_CursorCrossI,  dx, y0 + dy);
000044  1962              ADDS     r2,r4,r5
000046  4631              MOV      r1,r6
000048  480b              LDR      r0,|L2.120|
00004a  f7fffffe          BL       _ShowCursorType
;;;243      #else
;;;244        #if GUIDEMO_TINY
;;;245          y0 = 20;
;;;246        #else
;;;247          y0 = 30;
;;;248        #endif
;;;249        #if ((LCD_XSIZE < 160) && ((LCD_YSIZE >= 160) || (LCD_YSIZE < 90)))
;;;250          x0 = 10;
;;;251        #endif
;;;252        dx = LCD_XSIZE / 2.2;
;;;253        dy = LCD_YSIZE / 2.6;
;;;254        _ShowCursorType(&_CursorArrow,    x0, y0);
;;;255        #if (LCD_YSIZE >= 160)
;;;256          _ShowCursorType(&_CursorCross,  x0, y0 + dy);
;;;257        #elif (LCD_YSIZE < 90)
;;;258          GUIDEMO_Delay(2000);
;;;259          GUI_ClearRect(0, 20, LCD_XSIZE - 1, LCD_YSIZE - 1);
;;;260          _ShowCursorType(&_CursorCross,  x0, y0);
;;;261        #else
;;;262          _ShowCursorType(&_CursorCross,  dx, y0);
;;;263        #endif
;;;264        #if ((LCD_YSIZE >= 160) && (LCD_XSIZE >= 160))
;;;265          _ShowCursorType(&_CursorArrowI, dx, y0);
;;;266          _ShowCursorType(&_CursorCrossI, dx, y0 + dy);
;;;267        #endif
;;;268      #endif
;;;269    }
00004e  bd70              POP      {r4-r6,pc}
;;;270    
                          ENDP

                  |L2.80|
                          DCD      GUI_FontComic24B_ASCII
                  |L2.84|
000054  41766169          DCB      "Available\n  cursors:",0
000058  6c61626c
00005c  650a2020
000060  63757273
000064  6f72733a
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0
                  |L2.108|
                          DCD      _CursorArrow
                  |L2.112|
                          DCD      _CursorCross
                  |L2.116|
                          DCD      _CursorArrowI
                  |L2.120|
                          DCD      _CursorCrossI

                          AREA ||i._MoveCursor||, CODE, READONLY, ALIGN=1

                  _MoveCursor PROC
;;;182    */
;;;183    static void _MoveCursor(const GUI_CURSOR* Cursor){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
;;;184      int x, y;
;;;185      int xMax = LCD_XSIZE >> 1;
000006  2678              MOVS     r6,#0x78
;;;186      int yMax = LCD_YSIZE >> 1;
000008  27a0              MOVS     r7,#0xa0
;;;187      #if !GUIDEMO_LARGE
;;;188        xMax *= 1.3;
;;;189        yMax *= 1.3;
;;;190      #endif
;;;191      GUI_CURSOR_Select(Cursor);  
00000a  4640              MOV      r0,r8
00000c  f7fffffe          BL       GUI_CURSOR_Select
;;;192      for(x = y = 0; ((x < xMax) && (y < yMax) && !GUIDEMO_CheckCancel()); x += 6, y += 6) {
000010  2000              MOVS     r0,#0
000012  4605              MOV      r5,r0
000014  4604              MOV      r4,r0
000016  e00e              B        |L3.54|
                  |L3.24|
;;;193        if ( x == xMax) {
000018  42b4              CMP      r4,r6
00001a  d100              BNE      |L3.30|
;;;194          x = xMax;
00001c  4634              MOV      r4,r6
                  |L3.30|
;;;195        }
;;;196        if ( y == yMax) {
00001e  42bd              CMP      r5,r7
000020  d100              BNE      |L3.36|
;;;197          y = yMax;
000022  463d              MOV      r5,r7
                  |L3.36|
;;;198        }
;;;199        GUI_CURSOR_SetPosition(x, y);
000024  4629              MOV      r1,r5
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       GUI_CURSOR_SetPosition
;;;200        GUIDEMO_Delay(75);
00002c  204b              MOVS     r0,#0x4b
00002e  f7fffffe          BL       GUIDEMO_Delay
000032  1da4              ADDS     r4,r4,#6              ;192
000034  1dad              ADDS     r5,r5,#6              ;192
                  |L3.54|
000036  42b4              CMP      r4,r6                 ;192
000038  da05              BGE      |L3.70|
00003a  42bd              CMP      r5,r7                 ;192
00003c  da03              BGE      |L3.70|
00003e  f7fffffe          BL       GUIDEMO_CheckCancel
000042  2800              CMP      r0,#0                 ;192
000044  d0e8              BEQ      |L3.24|
                  |L3.70|
;;;201      }
;;;202    }
000046  e8bd81f0          POP      {r4-r8,pc}
;;;203    
                          ENDP


                          AREA ||i._ShowCursorType||, CODE, READONLY, ALIGN=2

                  _ShowCursorType PROC
;;;134    */
;;;135    static void _ShowCursorType(const CURSORTYPE_INFO* pCursorType, int x0, int y0) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4617              MOV      r7,r2
;;;136      const GUI_CURSOR* pCursor;
;;;137      char Char;
;;;138      int i, x, y;
;;;139      int yMax = 0;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;140      int yHot = 0;
00000e  9000              STR      r0,[sp,#0]
;;;141      /* Calculate height and width of biggest cursor */
;;;142      for (i = 0; i < NUM_CURSORS; i++) {
000010  2400              MOVS     r4,#0
000012  e00c              B        |L4.46|
                  |L4.20|
;;;143        pCursor = pCursorType->aCursor[i].pCursor;
000014  f8565034          LDR      r5,[r6,r4,LSL #3]
;;;144        if (pCursor->pBitmap->YSize > yMax) {
000018  6828              LDR      r0,[r5,#0]
00001a  8841              LDRH     r1,[r0,#2]
00001c  9801              LDR      r0,[sp,#4]
00001e  4281              CMP      r1,r0
000020  dd04              BLE      |L4.44|
;;;145          yMax = pCursor->pBitmap->YSize;
000022  6828              LDR      r0,[r5,#0]
000024  8840              LDRH     r0,[r0,#2]
000026  9001              STR      r0,[sp,#4]
;;;146          yHot = pCursor->yHot;
000028  68a8              LDR      r0,[r5,#8]
00002a  9000              STR      r0,[sp,#0]
                  |L4.44|
00002c  1c64              ADDS     r4,r4,#1              ;142
                  |L4.46|
00002e  2c03              CMP      r4,#3                 ;142
000030  dbf0              BLT      |L4.20|
;;;147        }
;;;148      }
;;;149      #if ((LCD_YSIZE >= 220) && (LCD_XSIZE >= 300))
;;;150        GUI_SetFont(&GUI_FontComic18B_ASCII);
;;;151      #else
;;;152        GUI_SetFont(&GUI_Font13B_ASCII);
000032  481f              LDR      r0,|L4.176|
000034  f7fffffe          BL       GUI_SetFont
;;;153      #endif
;;;154      #if (NUM_CURSORS != 3)
;;;155        GUI_SetLBorder(x0);
;;;156      #endif
;;;157      GUI_DispStringAt(pCursorType->pType, x0, y0);
000038  463a              MOV      r2,r7
00003a  4641              MOV      r1,r8
00003c  69b0              LDR      r0,[r6,#0x18]
00003e  f7fffffe          BL       GUI_DispStringAt
;;;158      #if GUIDEMO_LARGE
;;;159        y0 += GUI_GetFontDistY() + 1;
000042  f7fffffe          BL       GUI_GetFontDistY
000046  1c40              ADDS     r0,r0,#1
000048  4407              ADD      r7,r7,r0
;;;160        GUI_SetFont(&GUI_Font13B_ASCII);
00004a  4819              LDR      r0,|L4.176|
00004c  f7fffffe          BL       GUI_SetFont
;;;161      #else
;;;162        #if (LCD_YSIZE < 80)
;;;163          x0 += 50;
;;;164        #else
;;;165          y0 += GUI_GetFontDistY() * 2 + 1;
;;;166        #endif
;;;167        GUI_SetFont(&GUI_Font10_ASCII);
;;;168      #endif
;;;169      for (i = 0; i < NUM_CURSORS; i++) {
000050  2400              MOVS     r4,#0
000052  e028              B        |L4.166|
                  |L4.84|
;;;170        pCursor = pCursorType->aCursor[i].pCursor;
000054  f8565034          LDR      r5,[r6,r4,LSL #3]
;;;171        Char    = pCursorType->aCursor[i].Size;
000058  eb0600c4          ADD      r0,r6,r4,LSL #3
00005c  f8909004          LDRB     r9,[r0,#4]
;;;172        y = y0 + yHot - pCursor->yHot;
000060  9800              LDR      r0,[sp,#0]
000062  4438              ADD      r0,r0,r7
000064  68a9              LDR      r1,[r5,#8]
000066  eba00b01          SUB      r11,r0,r1
;;;173        x = ((pCursor->pBitmap->XSize - GUI_GetCharDistX(Char)) >> 1);
00006a  4648              MOV      r0,r9
00006c  f7fffffe          BL       GUI_GetCharDistX
000070  6829              LDR      r1,[r5,#0]
000072  8809              LDRH     r1,[r1,#0]
000074  1a08              SUBS     r0,r1,r0
000076  ea4f0a60          ASR      r10,r0,#1
;;;174        GUI_DrawBitmap(pCursor->pBitmap, x0 + XMAX * i + 5,     y);
00007a  221c              MOVS     r2,#0x1c
00007c  fb028204          MLA      r2,r2,r4,r8
000080  1d51              ADDS     r1,r2,#5
000082  465a              MOV      r2,r11
000084  6828              LDR      r0,[r5,#0]
000086  f7fffffe          BL       GUI_DrawBitmap
;;;175        GUI_DispCharAt(Char,             x0 + XMAX * i + 5 + x, y0 + yMax + 2);
00008a  9801              LDR      r0,[sp,#4]
00008c  4438              ADD      r0,r0,r7
00008e  1c80              ADDS     r0,r0,#2
000090  b202              SXTH     r2,r0
000092  201c              MOVS     r0,#0x1c
000094  fb008004          MLA      r0,r0,r4,r8
000098  1d40              ADDS     r0,r0,#5
00009a  4450              ADD      r0,r0,r10
00009c  b201              SXTH     r1,r0
00009e  4648              MOV      r0,r9
0000a0  f7fffffe          BL       GUI_DispCharAt
0000a4  1c64              ADDS     r4,r4,#1              ;169
                  |L4.166|
0000a6  2c03              CMP      r4,#3                 ;169
0000a8  dbd4              BLT      |L4.84|
;;;176      }
;;;177    }
0000aa  e8bd9ffc          POP      {r2-r12,pc}
;;;178    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L4.176|
                          DCD      GUI_Font13B_ASCII

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _CursorArrow
                          DCD      GUI_CursorArrowS
000004  53000000          DCB      0x53,0x00,0x00,0x00
                          DCD      GUI_CursorArrowM
00000c  4d000000          DCB      0x4d,0x00,0x00,0x00
                          DCD      GUI_CursorArrowL
000014  4c000000          DCB      0x4c,0x00,0x00,0x00
                          DCD      ||.conststring||
                  _CursorArrowI
                          DCD      GUI_CursorArrowSI
000020  53000000          DCB      0x53,0x00,0x00,0x00
                          DCD      GUI_CursorArrowMI
000028  4d000000          DCB      0x4d,0x00,0x00,0x00
                          DCD      GUI_CursorArrowLI
000030  4c000000          DCB      0x4c,0x00,0x00,0x00
                          DCD      ||.conststring||+0xe
                  _CursorCross
                          DCD      GUI_CursorCrossS
00003c  53000000          DCB      0x53,0x00,0x00,0x00
                          DCD      GUI_CursorCrossM
000044  4d000000          DCB      0x4d,0x00,0x00,0x00
                          DCD      GUI_CursorCrossL
00004c  4c000000          DCB      0x4c,0x00,0x00,0x00
                          DCD      ||.conststring||+0x25
                  _CursorCrossI
                          DCD      GUI_CursorCrossSI
000058  53000000          DCB      0x53,0x00,0x00,0x00
                          DCD      GUI_CursorCrossMI
000060  4d000000          DCB      0x4d,0x00,0x00,0x00
                          DCD      GUI_CursorCrossLI
000068  4c000000          DCB      0x4c,0x00,0x00,0x00
                          DCD      ||.conststring||+0x33

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  6172726f          DCB      "arrow cursors",0
000004  77206375
000008  72736f72
00000c  7300    
00000e  696e7665          DCB      "inverted arrow cursors",0
000012  72746564
000016  20617272
00001a  6f772063
00001e  7572736f
000022  727300  
000025  63726f73          DCB      "cross cursors",0
000029  73206375
00002d  72736f72
000031  7300    
000033  696e7665          DCB      "inverted cross cursors",0
000037  72746564
00003b  2063726f
00003f  73732063
000043  7572736f
000047  727300  

                          AREA ||.data||, DATA, ALIGN=2

                  _aCursor
                          DCD      GUI_CursorArrowM
                          DCD      GUI_CursorArrowMI
                          DCD      GUI_CursorCrossM
                          DCD      GUI_CursorCrossMI
