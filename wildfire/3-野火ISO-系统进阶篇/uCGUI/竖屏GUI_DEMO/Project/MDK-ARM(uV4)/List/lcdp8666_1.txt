; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lcdp8666_1.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\lcdp8666_1.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\ConvertColor\LCDP8666_1.c]
                          THUMB

                          AREA ||i.LCD_Color2Index_8666_1||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_8666_1 PROC
;;;31     */
;;;32     unsigned LCD_Color2Index_8666_1(LCD_COLOR Color) {
000000  b570              PUSH     {r4-r6,lr}
000002  4601              MOV      r1,r0
;;;33       int r, g, b, Index;
;;;34       r = Color & 255;
000004  b2ca              UXTB     r2,r1
;;;35       g = (Color >> 8) & 255;
000006  f3c12307          UBFX     r3,r1,#8,#8
;;;36       b = Color >> 16;
00000a  0c0d              LSRS     r5,r1,#16
;;;37     /* Check if image is a gray scale ... */
;;;38     	if ((r == g) && (g == b)) {
00000c  429a              CMP      r2,r3
00000e  d108              BNE      |L1.34|
000010  42ab              CMP      r3,r5
000012  d106              BNE      |L1.34|
;;;39         return 120 + (r + 8) / 17;  /* Convert into colors from 120 - 135 */
000014  f1020008          ADD      r0,r2,#8
000018  2611              MOVS     r6,#0x11
00001a  fb90f0f6          SDIV     r0,r0,r6
00001e  3078              ADDS     r0,r0,#0x78
                  |L1.32|
;;;40     	}
;;;41     /* Convert into the 6*6*6 colors ... */
;;;42       r = (r * 5 + 127) / 255;
;;;43       g = (g * 5 + 127) / 255;
;;;44       b = (b * 5 + 127) / 255;
;;;45       Index = r + 6 * g + 36 * b;
;;;46       return (Index < 108) ? Index + 12 : Index + 28;
;;;47     }
000020  bd70              POP      {r4-r6,pc}
                  |L1.34|
000022  eb020082          ADD      r0,r2,r2,LSL #2       ;42
000026  307f              ADDS     r0,r0,#0x7f           ;42
000028  26ff              MOVS     r6,#0xff              ;42
00002a  fb90f2f6          SDIV     r2,r0,r6              ;42
00002e  eb030083          ADD      r0,r3,r3,LSL #2       ;43
000032  307f              ADDS     r0,r0,#0x7f           ;43
000034  fb90f3f6          SDIV     r3,r0,r6              ;43
000038  eb050085          ADD      r0,r5,r5,LSL #2       ;44
00003c  307f              ADDS     r0,r0,#0x7f           ;44
00003e  fb90f5f6          SDIV     r5,r0,r6              ;44
000042  2006              MOVS     r0,#6                 ;45
000044  fb002003          MLA      r0,r0,r3,r2           ;45
000048  2624              MOVS     r6,#0x24              ;45
00004a  fb060405          MLA      r4,r6,r5,r0           ;45
00004e  2c6c              CMP      r4,#0x6c              ;46
000050  da02              BGE      |L1.88|
000052  f104000c          ADD      r0,r4,#0xc            ;46
000056  e7e3              B        |L1.32|
                  |L1.88|
000058  f104001c          ADD      r0,r4,#0x1c           ;46
00005c  e7e0              B        |L1.32|
;;;48     
                          ENDP


                          AREA ||i.LCD_GetIndexMask_8666_1||, CODE, READONLY, ALIGN=1

                  LCD_GetIndexMask_8666_1 PROC
;;;77     */
;;;78     unsigned LCD_GetIndexMask_8666_1(void) {
000000  20ff              MOVS     r0,#0xff
;;;79       return 0xff;
;;;80     }
000002  4770              BX       lr
;;;81     
                          ENDP


                          AREA ||i.LCD_Index2Color_8666_1||, CODE, READONLY, ALIGN=1

                  LCD_Index2Color_8666_1 PROC
;;;52     */
;;;53     LCD_COLOR LCD_Index2Color_8666_1(int Index) {
000000  b570              PUSH     {r4-r6,lr}
000002  4601              MOV      r1,r0
;;;54       unsigned int r,g;
;;;55       U32 b;
;;;56       /* 16 Gray scale range ? */
;;;57       if ((Index >= 120) && (Index < 136)) {
000004  2978              CMP      r1,#0x78
000006  db0a              BLT      |L3.30|
000008  2988              CMP      r1,#0x88
00000a  da08              BGE      |L3.30|
;;;58         return (U32)0x111111 * (U32)(Index - 120);
00000c  f1a10078          SUB      r0,r1,#0x78
000010  eb001500          ADD      r5,r0,r0,LSL #4
000014  eb052000          ADD      r0,r5,r0,LSL #8
000018  eb003000          ADD      r0,r0,r0,LSL #12
                  |L3.28|
;;;59     	}
;;;60       if ((Index < 12) || (Index > 243)) {
;;;61         return 0;  /* Black for illegal indices */
;;;62       }
;;;63       if (Index >= 120) {
;;;64         Index -= 28;
;;;65       } else {
;;;66         Index -= 12;
;;;67       }
;;;68       r = (Index % 6) * (255 / 5);
;;;69       g = ((Index / 6) % 6) * (255 / 5);
;;;70       b = (Index / 36) * (255 / 5);
;;;71       return r + (g << 8) + ((U32)b << 16);
;;;72     }
00001c  bd70              POP      {r4-r6,pc}
                  |L3.30|
00001e  290c              CMP      r1,#0xc               ;60
000020  db01              BLT      |L3.38|
000022  29f3              CMP      r1,#0xf3              ;60
000024  dd01              BLE      |L3.42|
                  |L3.38|
000026  2000              MOVS     r0,#0                 ;61
000028  e7f8              B        |L3.28|
                  |L3.42|
00002a  2978              CMP      r1,#0x78              ;63
00002c  db01              BLT      |L3.50|
00002e  391c              SUBS     r1,r1,#0x1c           ;64
000030  e000              B        |L3.52|
                  |L3.50|
000032  390c              SUBS     r1,r1,#0xc            ;66
                  |L3.52|
000034  2006              MOVS     r0,#6                 ;68
000036  fb91f5f0          SDIV     r5,r1,r0              ;68
00003a  fb001015          MLS      r0,r0,r5,r1           ;68
00003e  eb001000          ADD      r0,r0,r0,LSL #4       ;68
000042  eb000440          ADD      r4,r0,r0,LSL #1       ;68
000046  2006              MOVS     r0,#6                 ;69
000048  fb91f0f0          SDIV     r0,r1,r0              ;69
00004c  2506              MOVS     r5,#6                 ;69
00004e  fb90f6f5          SDIV     r6,r0,r5              ;69
000052  fb050016          MLS      r0,r5,r6,r0           ;69
000056  eb001000          ADD      r0,r0,r0,LSL #4       ;69
00005a  eb000240          ADD      r2,r0,r0,LSL #1       ;69
00005e  2024              MOVS     r0,#0x24              ;70
000060  fb91f0f0          SDIV     r0,r1,r0              ;70
000064  eb001000          ADD      r0,r0,r0,LSL #4       ;70
000068  eb000340          ADD      r3,r0,r0,LSL #1       ;70
00006c  eb042002          ADD      r0,r4,r2,LSL #8       ;71
000070  eb004003          ADD      r0,r0,r3,LSL #16      ;71
000074  e7d2              B        |L3.28|
;;;73     
                          ENDP

