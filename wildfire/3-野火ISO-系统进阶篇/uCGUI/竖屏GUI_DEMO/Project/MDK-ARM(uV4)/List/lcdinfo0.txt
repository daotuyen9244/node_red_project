; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lcdinfo0.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\lcdinfo0.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\LCDInfo0.c]
                          THUMB

                          AREA ||i.LCD_GetBitsPerPixel||, CODE, READONLY, ALIGN=1

                  LCD_GetBitsPerPixel PROC
;;;34     int LCD_GetVYSize(void)       { return LCD_VYSIZE; }
;;;35     int LCD_GetBitsPerPixel(void) { return LCD_BITSPERPIXEL; }
000000  2010              MOVS     r0,#0x10
000002  4770              BX       lr
;;;36     U32 LCD_GetNumColors(void)    { return LCD_NUM_COLORS; }
                          ENDP


                          AREA ||i.LCD_GetFixedPalette||, CODE, READONLY, ALIGN=1

                  LCD_GetFixedPalette PROC
;;;38     int LCD_GetXMag(void)         { return LCD_XMAG; }
;;;39     int LCD_GetFixedPalette(void) { return LCD_FIXEDPALETTE; }
000000  f2402035          MOV      r0,#0x235
000004  4770              BX       lr
;;;40     
                          ENDP


                          AREA ||i.LCD_GetNumColors||, CODE, READONLY, ALIGN=1

                  LCD_GetNumColors PROC
;;;35     int LCD_GetBitsPerPixel(void) { return LCD_BITSPERPIXEL; }
;;;36     U32 LCD_GetNumColors(void)    { return LCD_NUM_COLORS; }
000000  f44f3080          MOV      r0,#0x10000
000004  4770              BX       lr
;;;37     int LCD_GetYMag(void)         { return LCD_YMAG; }
                          ENDP


                          AREA ||i.LCD_GetVXSize||, CODE, READONLY, ALIGN=1

                  LCD_GetVXSize PROC
;;;32     int LCD_GetYSize(void)        { return LCD_YSIZE; }
;;;33     int LCD_GetVXSize(void)       { return LCD_VXSIZE; }
000000  20f0              MOVS     r0,#0xf0
000002  4770              BX       lr
;;;34     int LCD_GetVYSize(void)       { return LCD_VYSIZE; }
                          ENDP


                          AREA ||i.LCD_GetVYSize||, CODE, READONLY, ALIGN=1

                  LCD_GetVYSize PROC
;;;33     int LCD_GetVXSize(void)       { return LCD_VXSIZE; }
;;;34     int LCD_GetVYSize(void)       { return LCD_VYSIZE; }
000000  f44f70a0          MOV      r0,#0x140
000004  4770              BX       lr
;;;35     int LCD_GetBitsPerPixel(void) { return LCD_BITSPERPIXEL; }
                          ENDP


                          AREA ||i.LCD_GetXMag||, CODE, READONLY, ALIGN=1

                  LCD_GetXMag PROC
;;;37     int LCD_GetYMag(void)         { return LCD_YMAG; }
;;;38     int LCD_GetXMag(void)         { return LCD_XMAG; }
000000  2001              MOVS     r0,#1
000002  4770              BX       lr
;;;39     int LCD_GetFixedPalette(void) { return LCD_FIXEDPALETTE; }
                          ENDP


                          AREA ||i.LCD_GetXSize||, CODE, READONLY, ALIGN=1

                  LCD_GetXSize PROC
;;;30     
;;;31     int LCD_GetXSize(void)        { return LCD_XSIZE; }
000000  20f0              MOVS     r0,#0xf0
000002  4770              BX       lr
;;;32     int LCD_GetYSize(void)        { return LCD_YSIZE; }
                          ENDP


                          AREA ||i.LCD_GetYMag||, CODE, READONLY, ALIGN=1

                  LCD_GetYMag PROC
;;;36     U32 LCD_GetNumColors(void)    { return LCD_NUM_COLORS; }
;;;37     int LCD_GetYMag(void)         { return LCD_YMAG; }
000000  2001              MOVS     r0,#1
000002  4770              BX       lr
;;;38     int LCD_GetXMag(void)         { return LCD_XMAG; }
                          ENDP


                          AREA ||i.LCD_GetYSize||, CODE, READONLY, ALIGN=1

                  LCD_GetYSize PROC
;;;31     int LCD_GetXSize(void)        { return LCD_XSIZE; }
;;;32     int LCD_GetYSize(void)        { return LCD_YSIZE; }
000000  f44f70a0          MOV      r0,#0x140
000004  4770              BX       lr
;;;33     int LCD_GetVXSize(void)       { return LCD_VXSIZE; }
                          ENDP

