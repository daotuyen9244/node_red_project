; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gui_gif.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\gui_gif.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\GUI_GIF.c]
                          THUMB

                          AREA ||i.GUI_GIF_Draw||, CODE, READONLY, ALIGN=1

                  GUI_GIF_Draw PROC
;;;1008   */
;;;1009   int GUI_GIF_Draw(const void * pGIF, U32 NumBytes, int x0, int y0) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;1010     return GUI_GIF_DrawEx(pGIF, NumBytes, x0, y0, 0);
00000a  2000              MOVS     r0,#0
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  9000              STR      r0,[sp,#0]
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       GUI_GIF_DrawEx
;;;1011   }
00001a  bdf8              POP      {r3-r7,pc}
;;;1012   
                          ENDP


                          AREA ||i.GUI_GIF_DrawEx||, CODE, READONLY, ALIGN=2

                  GUI_GIF_DrawEx PROC
;;;977    */
;;;978    int GUI_GIF_DrawEx(const void * pGIF, U32 NumBytes, int x0, int y0, int Index) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4606              MOV      r6,r0
000008  4688              MOV      r8,r1
00000a  4614              MOV      r4,r2
00000c  461d              MOV      r5,r3
00000e  f8dd9038          LDR      r9,[sp,#0x38]
;;;979      const U8 * pSrc;
;;;980      int Result, OldColorIndex;
;;;981      #if (GUI_WINSUPPORT)
;;;982        int Width, Height;
;;;983        GUI_RECT r;
;;;984        Width  = GUI_GIF_GetXSize(pGIF);
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GUI_GIF_GetXSize
000018  4682              MOV      r10,r0
;;;985        Height = GUI_GIF_GetYSize(pGIF);
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       GUI_GIF_GetYSize
000020  4683              MOV      r11,r0
;;;986      #endif
;;;987      GUI_LOCK();
000022  f7fffffe          BL       GUI_Lock
;;;988      OldColorIndex = LCD_GetColorIndex();
000026  f7fffffe          BL       LCD_GetColorIndex
00002a  9003              STR      r0,[sp,#0xc]
;;;989      pSrc          = (const U8 *)pGIF;
00002c  9604              STR      r6,[sp,#0x10]
;;;990      #if (GUI_WINSUPPORT)
;;;991        WM_ADDORG(x0,y0);
00002e  4818              LDR      r0,|L2.144|
000030  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000032  4404              ADD      r4,r4,r0
000034  4816              LDR      r0,|L2.144|
000036  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000038  4405              ADD      r5,r5,r0
;;;992        r.x1 = (r.x0 = x0) + Width - 1;
00003a  b220              SXTH     r0,r4
00003c  f8ad0004          STRH     r0,[sp,#4]
000040  4450              ADD      r0,r0,r10
000042  1e40              SUBS     r0,r0,#1
000044  b200              SXTH     r0,r0
000046  f8ad0008          STRH     r0,[sp,#8]
;;;993        r.y1 = (r.y0 = y0) + Height - 1;
00004a  b228              SXTH     r0,r5
00004c  f8ad0006          STRH     r0,[sp,#6]
000050  4458              ADD      r0,r0,r11
000052  1e40              SUBS     r0,r0,#1
000054  b200              SXTH     r0,r0
000056  f8ad000a          STRH     r0,[sp,#0xa]
;;;994        WM_ITERATE_START(&r) {
00005a  a801              ADD      r0,sp,#4
00005c  f7fffffe          BL       WM__InitIVRSearch
000060  b168              CBZ      r0,|L2.126|
000062  bf00              NOP      
                  |L2.100|
;;;995      #endif
;;;996      Result = _DrawGIFImage(pSrc, NumBytes, x0, y0, Index);
000064  462b              MOV      r3,r5
000066  4622              MOV      r2,r4
000068  4641              MOV      r1,r8
00006a  f8cd9000          STR      r9,[sp,#0]
00006e  9804              LDR      r0,[sp,#0x10]
000070  f7fffffe          BL       _DrawGIFImage
000074  4607              MOV      r7,r0
;;;997      #if (GUI_WINSUPPORT)
;;;998        } WM_ITERATE_END();
000076  f7fffffe          BL       WM__GetNextIVR
00007a  2800              CMP      r0,#0
00007c  d1f2              BNE      |L2.100|
                  |L2.126|
;;;999      #endif
;;;1000     LCD_SetColorIndex(OldColorIndex);
00007e  9803              LDR      r0,[sp,#0xc]
000080  f7fffffe          BL       LCD_SetColorIndex
;;;1001     GUI_UNLOCK();
000084  f7fffffe          BL       GUI_Unlock
;;;1002     return Result;
000088  4638              MOV      r0,r7
;;;1003   }
00008a  b005              ADD      sp,sp,#0x14
00008c  e8bd8ff0          POP      {r4-r11,pc}
;;;1004   
                          ENDP

                  |L2.144|
                          DCD      GUI_Context

                          AREA ||i.GUI_GIF_GetComment||, CODE, READONLY, ALIGN=1

                  GUI_GIF_GetComment PROC
;;;1042   */
;;;1043   int GUI_GIF_GetComment(const void * pGIF, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index) {
000000  e92d43f8          PUSH     {r3-r9,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;1044     const U8 * pSrc;
;;;1045     pSrc = (const U8 *)pGIF;
000010  46a1              MOV      r9,r4
;;;1046     if (_GetGIFComment(pSrc, NumBytes, pBuffer, MaxSize, Index)) {
000012  463b              MOV      r3,r7
000014  4632              MOV      r2,r6
000016  4629              MOV      r1,r5
000018  4648              MOV      r0,r9
00001a  f8cd8000          STR      r8,[sp,#0]
00001e  f7fffffe          BL       _GetGIFComment
000022  b110              CBZ      r0,|L3.42|
;;;1047       return 1;
000024  2001              MOVS     r0,#1
                  |L3.38|
;;;1048     }
;;;1049     return 0;
;;;1050   }
000026  e8bd83f8          POP      {r3-r9,pc}
                  |L3.42|
00002a  2000              MOVS     r0,#0                 ;1049
00002c  e7fb              B        |L3.38|
;;;1051   
                          ENDP


                          AREA ||i.GUI_GIF_GetImageInfo||, CODE, READONLY, ALIGN=1

                  GUI_GIF_GetImageInfo PROC
;;;1029   */
;;;1030   int GUI_GIF_GetImageInfo(const void * pGIF, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;1031     const U8 * pSrc;
;;;1032     pSrc = (const U8 *)pGIF;
00000c  46a0              MOV      r8,r4
;;;1033     if (_GetImageInfo(pSrc, NumBytes, pInfo, Index)) {
00000e  463b              MOV      r3,r7
000010  4632              MOV      r2,r6
000012  4629              MOV      r1,r5
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       _GetImageInfo
00001a  b110              CBZ      r0,|L4.34|
;;;1034       return 1;
00001c  2001              MOVS     r0,#1
                  |L4.30|
;;;1035     }
;;;1036     return 0;
;;;1037   }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L4.34|
000022  2000              MOVS     r0,#0                 ;1036
000024  e7fb              B        |L4.30|
;;;1038   
                          ENDP


                          AREA ||i.GUI_GIF_GetInfo||, CODE, READONLY, ALIGN=1

                  GUI_GIF_GetInfo PROC
;;;1016   */
;;;1017   int GUI_GIF_GetInfo(const void * pGIF, U32 NumBytes, GUI_GIF_INFO * pInfo) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;1018     const U8 * pSrc;
;;;1019     pSrc = (const U8 *)pGIF;
00000a  4627              MOV      r7,r4
;;;1020     if (_GetGIFInfo(pSrc, NumBytes, pInfo)) {
00000c  4632              MOV      r2,r6
00000e  4629              MOV      r1,r5
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       _GetGIFInfo
000016  b110              CBZ      r0,|L5.30|
;;;1021       return 1;
000018  2001              MOVS     r0,#1
                  |L5.26|
;;;1022     }
;;;1023     return 0;
;;;1024   }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L5.30|
00001e  2000              MOVS     r0,#0                 ;1023
000020  e7fb              B        |L5.26|
;;;1025   
                          ENDP


                          AREA ||i.GUI_GIF_GetXSize||, CODE, READONLY, ALIGN=1

                  GUI_GIF_GetXSize PROC
;;;948    */
;;;949    int GUI_GIF_GetXSize(const void * pGIF) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;950      const U8 * pSrc;
;;;951      if (!pGIF) {
000004  b90c              CBNZ     r4,|L6.10|
;;;952        return 0;
000006  2000              MOVS     r0,#0
                  |L6.8|
;;;953      }
;;;954      pSrc = (const U8 *)pGIF + 6;
;;;955      return GUI__Read16(&pSrc);
;;;956    }
000008  bd38              POP      {r3-r5,pc}
                  |L6.10|
00000a  1da0              ADDS     r0,r4,#6              ;954
00000c  9000              STR      r0,[sp,#0]            ;954
00000e  4668              MOV      r0,sp                 ;955
000010  f7fffffe          BL       GUI__Read16
000014  e7f8              B        |L6.8|
;;;957    
                          ENDP


                          AREA ||i.GUI_GIF_GetYSize||, CODE, READONLY, ALIGN=1

                  GUI_GIF_GetYSize PROC
;;;964    */
;;;965    int GUI_GIF_GetYSize(const void * pGIF) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;966      const U8 * pSrc;
;;;967      if (!pGIF) {
000004  b90c              CBNZ     r4,|L7.10|
;;;968        return 0;
000006  2000              MOVS     r0,#0
                  |L7.8|
;;;969      }
;;;970      pSrc = (const U8 *)pGIF + 8;
;;;971      return GUI__Read16(&pSrc);
;;;972    }
000008  bd38              POP      {r3-r5,pc}
                  |L7.10|
00000a  f1040008          ADD      r0,r4,#8              ;970
00000e  9000              STR      r0,[sp,#0]            ;970
000010  4668              MOV      r0,sp                 ;971
000012  f7fffffe          BL       GUI__Read16
000016  e7f7              B        |L7.8|
;;;973    
                          ENDP


                          AREA ||i._ClearUnusedPixels||, CODE, READONLY, ALIGN=1

                  _ClearUnusedPixels PROC
;;;820    */
;;;821    static void _ClearUnusedPixels(int x0, int y0, IMAGE_DESCRIPTOR * pDescriptor, GUI_GIF_IMAGE_INFO * pInfo) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
;;;822      LCD_SetColorIndex(LCD_GetBkColorIndex());
00000c  f7fffffe          BL       LCD_GetBkColorIndex
000010  4680              MOV      r8,r0
000012  f7fffffe          BL       LCD_SetColorIndex
;;;823      if (pDescriptor->YPos > pInfo->yPos) {
000016  6868              LDR      r0,[r5,#4]
000018  6861              LDR      r1,[r4,#4]
00001a  4288              CMP      r0,r1
00001c  dd16              BLE      |L8.76|
;;;824        LCD_FillRect(x0 + pInfo->xPos,
00001e  f8d4c000          LDR      r12,[r4,#0]
000022  44b4              ADD      r12,r12,r6
000024  f8d48008          LDR      r8,[r4,#8]
000028  44c4              ADD      r12,r12,r8
00002a  f1ac0201          SUB      r2,r12,#1
00002e  f8d5c004          LDR      r12,[r5,#4]
000032  44bc              ADD      r12,r12,r7
000034  f1ac0301          SUB      r3,r12,#1
000038  f8d4c004          LDR      r12,[r4,#4]
00003c  eb0c0107          ADD      r1,r12,r7
000040  f8d4c000          LDR      r12,[r4,#0]
000044  eb0c0006          ADD      r0,r12,r6
000048  f7fffffe          BL       LCD_FillRect
                  |L8.76|
;;;825                     y0 + pInfo->yPos,
;;;826                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;827                     y0 + pDescriptor->YPos - 1);
;;;828      }
;;;829      if (pDescriptor->XPos > pInfo->xPos) {
00004c  6828              LDR      r0,[r5,#0]
00004e  6821              LDR      r1,[r4,#0]
000050  4288              CMP      r0,r1
000052  dd16              BLE      |L8.130|
;;;830        LCD_FillRect(x0 + pInfo->xPos,
000054  f8d4c004          LDR      r12,[r4,#4]
000058  44bc              ADD      r12,r12,r7
00005a  f8d4800c          LDR      r8,[r4,#0xc]
00005e  44c4              ADD      r12,r12,r8
000060  f1ac0301          SUB      r3,r12,#1
000064  f8d5c000          LDR      r12,[r5,#0]
000068  44b4              ADD      r12,r12,r6
00006a  f1ac0201          SUB      r2,r12,#1
00006e  f8d4c004          LDR      r12,[r4,#4]
000072  eb0c0107          ADD      r1,r12,r7
000076  f8d4c000          LDR      r12,[r4,#0]
00007a  eb0c0006          ADD      r0,r12,r6
00007e  f7fffffe          BL       LCD_FillRect
                  |L8.130|
;;;831                     y0 + pInfo->yPos,
;;;832                     x0 + pDescriptor->XPos - 1,
;;;833                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;834      }
;;;835      if ((pDescriptor->YPos + pDescriptor->YSize) < (pInfo->yPos + pInfo->ySize)) {
000082  68e9              LDR      r1,[r5,#0xc]
000084  6868              LDR      r0,[r5,#4]
000086  4408              ADD      r0,r0,r1
000088  68e2              LDR      r2,[r4,#0xc]
00008a  6861              LDR      r1,[r4,#4]
00008c  4411              ADD      r1,r1,r2
00008e  4288              CMP      r0,r1
000090  da1d              BGE      |L8.206|
;;;836        LCD_FillRect(x0 + pInfo->xPos,
000092  f8d4c004          LDR      r12,[r4,#4]
000096  44bc              ADD      r12,r12,r7
000098  f8d4800c          LDR      r8,[r4,#0xc]
00009c  44c4              ADD      r12,r12,r8
00009e  f1ac0301          SUB      r3,r12,#1
0000a2  f8d4c000          LDR      r12,[r4,#0]
0000a6  44b4              ADD      r12,r12,r6
0000a8  f8d48008          LDR      r8,[r4,#8]
0000ac  44c4              ADD      r12,r12,r8
0000ae  f1ac0201          SUB      r2,r12,#1
0000b2  f8d5c004          LDR      r12,[r5,#4]
0000b6  44bc              ADD      r12,r12,r7
0000b8  f8d5800c          LDR      r8,[r5,#0xc]
0000bc  44c4              ADD      r12,r12,r8
0000be  f1ac0101          SUB      r1,r12,#1
0000c2  f8d4c000          LDR      r12,[r4,#0]
0000c6  eb0c0006          ADD      r0,r12,r6
0000ca  f7fffffe          BL       LCD_FillRect
                  |L8.206|
;;;837                     y0 + pDescriptor->YPos + pDescriptor->YSize - 1,
;;;838                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;839                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;840      }
;;;841      if ((pDescriptor->XPos + pDescriptor->XSize) < (pInfo->xPos + pInfo->xSize)) {
0000ce  68a9              LDR      r1,[r5,#8]
0000d0  6828              LDR      r0,[r5,#0]
0000d2  4408              ADD      r0,r0,r1
0000d4  68a2              LDR      r2,[r4,#8]
0000d6  6821              LDR      r1,[r4,#0]
0000d8  4411              ADD      r1,r1,r2
0000da  4288              CMP      r0,r1
0000dc  da1d              BGE      |L8.282|
;;;842        LCD_FillRect(x0 + pDescriptor->XPos + pDescriptor->XSize - 1,
0000de  f8d4c004          LDR      r12,[r4,#4]
0000e2  44bc              ADD      r12,r12,r7
0000e4  f8d4800c          LDR      r8,[r4,#0xc]
0000e8  44c4              ADD      r12,r12,r8
0000ea  f1ac0301          SUB      r3,r12,#1
0000ee  f8d4c000          LDR      r12,[r4,#0]
0000f2  44b4              ADD      r12,r12,r6
0000f4  f8d48008          LDR      r8,[r4,#8]
0000f8  44c4              ADD      r12,r12,r8
0000fa  f1ac0201          SUB      r2,r12,#1
0000fe  f8d5c000          LDR      r12,[r5,#0]
000102  44b4              ADD      r12,r12,r6
000104  f8d58008          LDR      r8,[r5,#8]
000108  44c4              ADD      r12,r12,r8
00010a  f1ac0001          SUB      r0,r12,#1
00010e  f8d4c004          LDR      r12,[r4,#4]
000112  eb0c0107          ADD      r1,r12,r7
000116  f7fffffe          BL       LCD_FillRect
                  |L8.282|
;;;843                     y0 + pInfo->yPos,
;;;844                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;845                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;846      }
;;;847    }
00011a  e8bd81f0          POP      {r4-r8,pc}
;;;848    
                          ENDP


                          AREA ||i._DispGIFImage||, CODE, READONLY, ALIGN=2

                  _DispGIFImage PROC
;;;455    */
;;;456    static int _DispGIFImage(IMAGE_DESCRIPTOR * pDescriptor, int x0, int y0, int Transparency, int Disposal) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08f              SUB      sp,sp,#0x3c
000006  4607              MOV      r7,r0
000008  4693              MOV      r11,r2
00000a  4698              MOV      r8,r3
;;;457      int Codesize, Index, OldIndex, XPos, YPos, YCnt, Pass, Interlace, XEnd;
;;;458      int Width, Height, NumColors, Cnt, BkColorIndex, ColorIndex;
;;;459      LCD_LOGPALETTE LogPalette;
;;;460      const LCD_PIXELINDEX * pTrans;
;;;461      Width     = pDescriptor->XSize;
00000c  68b8              LDR      r0,[r7,#8]
00000e  9009              STR      r0,[sp,#0x24]
;;;462      Height    = pDescriptor->YSize;
000010  68f8              LDR      r0,[r7,#0xc]
000012  9008              STR      r0,[sp,#0x20]
;;;463      NumColors = pDescriptor->NumColors;
000014  6978              LDR      r0,[r7,#0x14]
000016  9007              STR      r0,[sp,#0x1c]
;;;464      XEnd      = Width + x0 - 1;
000018  9910              LDR      r1,[sp,#0x40]
00001a  9809              LDR      r0,[sp,#0x24]
00001c  4408              ADD      r0,r0,r1
00001e  1e40              SUBS     r0,r0,#1
000020  900a              STR      r0,[sp,#0x28]
;;;465      BkColorIndex = LCD_GetBkColorIndex();
000022  f7fffffe          BL       LCD_GetBkColorIndex
000026  9006              STR      r0,[sp,#0x18]
;;;466      /* Get color translation table  */
;;;467      LogPalette.NumEntries  = NumColors;
000028  9807              LDR      r0,[sp,#0x1c]
00002a  9002              STR      r0,[sp,#8]
;;;468      LogPalette.HasTrans    = 0;
00002c  2000              MOVS     r0,#0
00002e  f88d000c          STRB     r0,[sp,#0xc]
;;;469      LogPalette.pPalEntries = _aColorTable;
000032  485b              LDR      r0,|L9.416|
000034  9004              STR      r0,[sp,#0x10]
;;;470      if ((pTrans = LCD_GetpPalConvTable((const LCD_LOGPALETTE *)&LogPalette)) == NULL) {
000036  a802              ADD      r0,sp,#8
000038  f7fffffe          BL       LCD_GetpPalConvTable
00003c  9001              STR      r0,[sp,#4]
00003e  b918              CBNZ     r0,|L9.72|
;;;471        return 1; /* Error */
000040  2001              MOVS     r0,#1
                  |L9.66|
;;;472      }
;;;473      Codesize  = _ReadU8();                 /* Read the LZW codesize */
;;;474      _InitLZW(Codesize);                    /* Initialize the LZW stack with the LZW codesize */
;;;475      Interlace = pDescriptor->Flags & 0x40; /* Evaluate if image is interlaced */
;;;476      for (YCnt = 0, YPos = y0, Pass = 0; YCnt < Height; YCnt++) {
;;;477        Cnt      = 0;
;;;478        OldIndex = -1;    
;;;479        for (XPos = x0; XPos <= XEnd; XPos++) {
;;;480          if (_LZWContext.sp > _LZWContext.aDecompBuffer) {
;;;481            Index = *--(_LZWContext.sp);
;;;482          } else {
;;;483            Index = _GetNextByte();
;;;484          }
;;;485          if (Index == -2) {
;;;486            return 0; /* End code */
;;;487          }
;;;488          if ((Index < 0) || (Index >= NumColors)) {
;;;489            /* If Index out of legal range stop decompressing */
;;;490            return 1; /* Error */
;;;491          }
;;;492          /* If current index equals old index increment counter */
;;;493          if ((Index == OldIndex) && (XPos <= XEnd)) {
;;;494            Cnt++;
;;;495          } else {
;;;496            if (Cnt) {
;;;497              if (OldIndex != Transparency) {
;;;498                LCD_SetColorIndex(*(pTrans + OldIndex));
;;;499                LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;500              } else if (Disposal == 2) {
;;;501                LCD_SetColorIndex(BkColorIndex);
;;;502                LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;503              }
;;;504              Cnt = 0;
;;;505            } else {
;;;506              if (OldIndex >= 0) {
;;;507                if (OldIndex != Transparency) {
;;;508                  LCD_SetPixelIndex(XPos - 1, YPos, *(pTrans + OldIndex));
;;;509                } else if (Disposal == 2) {
;;;510                  LCD_SetPixelIndex(XPos - 1, YPos, BkColorIndex);
;;;511                }
;;;512              }
;;;513            }
;;;514          }
;;;515          OldIndex = Index;
;;;516        }
;;;517        if ((OldIndex != Transparency) || (Disposal == 2)) {
;;;518          if (OldIndex != Transparency) {
;;;519            ColorIndex = *(pTrans + OldIndex);
;;;520          } else {
;;;521            ColorIndex = BkColorIndex;
;;;522          }
;;;523          if (Cnt) {
;;;524            LCD_SetColorIndex(ColorIndex);
;;;525            LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;526          } else {
;;;527            LCD_SetPixelIndex(XEnd, YPos, ColorIndex);
;;;528          }
;;;529        }
;;;530        /* Adjust YPos if image is interlaced */
;;;531        if (Interlace) {
;;;532          YPos += _aInterlaceOffset[Pass];
;;;533          if ((YPos - y0) >= Height) {
;;;534            ++Pass;
;;;535            YPos = _aInterlaceYPos[Pass] + y0;
;;;536          }
;;;537        } else {
;;;538          YPos++;
;;;539        }
;;;540      }
;;;541      return 0;
;;;542    }
000042  b013              ADD      sp,sp,#0x4c
000044  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.72|
000048  f7fffffe          BL       _ReadU8
00004c  900e              STR      r0,[sp,#0x38]         ;473
00004e  980e              LDR      r0,[sp,#0x38]         ;474
000050  f7fffffe          BL       _InitLZW
000054  7c38              LDRB     r0,[r7,#0x10]         ;475
000056  f0000040          AND      r0,r0,#0x40           ;475
00005a  900b              STR      r0,[sp,#0x2c]         ;475
00005c  2000              MOVS     r0,#0                 ;476
00005e  900d              STR      r0,[sp,#0x34]         ;476
000060  46da              MOV      r10,r11               ;476
000062  900c              STR      r0,[sp,#0x30]         ;476
000064  e095              B        |L9.402|
                  |L9.102|
000066  2600              MOVS     r6,#0                 ;477
000068  1e75              SUBS     r5,r6,#1              ;478
00006a  9c10              LDR      r4,[sp,#0x40]         ;479
00006c  e055              B        |L9.282|
                  |L9.110|
00006e  484d              LDR      r0,|L9.420|
000070  6800              LDR      r0,[r0,#0]            ;480
000072  494d              LDR      r1,|L9.424|
000074  4288              CMP      r0,r1                 ;480
000076  d907              BLS      |L9.136|
000078  484a              LDR      r0,|L9.420|
00007a  6800              LDR      r0,[r0,#0]            ;481
00007c  1e40              SUBS     r0,r0,#1              ;481
00007e  4949              LDR      r1,|L9.420|
000080  6008              STR      r0,[r1,#0]            ;481
000082  f8909000          LDRB     r9,[r0,#0]            ;481
000086  e002              B        |L9.142|
                  |L9.136|
000088  f7fffffe          BL       _GetNextByte
00008c  4681              MOV      r9,r0                 ;483
                  |L9.142|
00008e  f1190002          ADDS     r0,r9,#2              ;485
000092  d100              BNE      |L9.150|
000094  e7d5              B        |L9.66|
                  |L9.150|
000096  f1b90f00          CMP      r9,#0                 ;488
00009a  db02              BLT      |L9.162|
00009c  9807              LDR      r0,[sp,#0x1c]         ;488
00009e  4581              CMP      r9,r0                 ;488
0000a0  db01              BLT      |L9.166|
                  |L9.162|
0000a2  2001              MOVS     r0,#1                 ;490
0000a4  e7cd              B        |L9.66|
                  |L9.166|
0000a6  45a9              CMP      r9,r5                 ;493
0000a8  d104              BNE      |L9.180|
0000aa  980a              LDR      r0,[sp,#0x28]         ;493
0000ac  4284              CMP      r4,r0                 ;493
0000ae  dc01              BGT      |L9.180|
0000b0  1c76              ADDS     r6,r6,#1              ;494
0000b2  e030              B        |L9.278|
                  |L9.180|
0000b4  b1de              CBZ      r6,|L9.238|
0000b6  4545              CMP      r5,r8                 ;497
0000b8  d00b              BEQ      |L9.210|
0000ba  9901              LDR      r1,[sp,#4]            ;498
0000bc  f8310015          LDRH     r0,[r1,r5,LSL #1]     ;498
0000c0  f7fffffe          BL       LCD_SetColorIndex
0000c4  1e62              SUBS     r2,r4,#1              ;499
0000c6  1ba1              SUBS     r1,r4,r6              ;499
0000c8  1e48              SUBS     r0,r1,#1              ;499
0000ca  4651              MOV      r1,r10                ;499
0000cc  f7fffffe          BL       LCD_DrawHLine
0000d0  e00b              B        |L9.234|
                  |L9.210|
0000d2  981c              LDR      r0,[sp,#0x70]         ;500
0000d4  2802              CMP      r0,#2                 ;500
0000d6  d108              BNE      |L9.234|
0000d8  9806              LDR      r0,[sp,#0x18]         ;501
0000da  f7fffffe          BL       LCD_SetColorIndex
0000de  1e62              SUBS     r2,r4,#1              ;502
0000e0  1ba1              SUBS     r1,r4,r6              ;502
0000e2  1e48              SUBS     r0,r1,#1              ;502
0000e4  4651              MOV      r1,r10                ;502
0000e6  f7fffffe          BL       LCD_DrawHLine
                  |L9.234|
0000ea  2600              MOVS     r6,#0                 ;504
0000ec  e013              B        |L9.278|
                  |L9.238|
0000ee  2d00              CMP      r5,#0                 ;506
0000f0  db11              BLT      |L9.278|
0000f2  4545              CMP      r5,r8                 ;507
0000f4  d007              BEQ      |L9.262|
0000f6  9901              LDR      r1,[sp,#4]            ;508
0000f8  f8312015          LDRH     r2,[r1,r5,LSL #1]     ;508
0000fc  1e60              SUBS     r0,r4,#1              ;508
0000fe  4651              MOV      r1,r10                ;508
000100  f7fffffe          BL       LCD_SetPixelIndex
000104  e007              B        |L9.278|
                  |L9.262|
000106  981c              LDR      r0,[sp,#0x70]         ;509
000108  2802              CMP      r0,#2                 ;509
00010a  d104              BNE      |L9.278|
00010c  1e60              SUBS     r0,r4,#1              ;510
00010e  4651              MOV      r1,r10                ;510
000110  9a06              LDR      r2,[sp,#0x18]         ;510
000112  f7fffffe          BL       LCD_SetPixelIndex
                  |L9.278|
000116  464d              MOV      r5,r9                 ;515
000118  1c64              ADDS     r4,r4,#1              ;479
                  |L9.282|
00011a  980a              LDR      r0,[sp,#0x28]         ;479
00011c  4284              CMP      r4,r0                 ;479
00011e  dda6              BLE      |L9.110|
000120  4545              CMP      r5,r8                 ;517
000122  d102              BNE      |L9.298|
000124  981c              LDR      r0,[sp,#0x70]         ;517
000126  2802              CMP      r0,#2                 ;517
000128  d118              BNE      |L9.348|
                  |L9.298|
00012a  4545              CMP      r5,r8                 ;518
00012c  d004              BEQ      |L9.312|
00012e  9801              LDR      r0,[sp,#4]            ;519
000130  f8300015          LDRH     r0,[r0,r5,LSL #1]     ;519
000134  9005              STR      r0,[sp,#0x14]         ;519
000136  e001              B        |L9.316|
                  |L9.312|
000138  9806              LDR      r0,[sp,#0x18]         ;521
00013a  9005              STR      r0,[sp,#0x14]         ;521
                  |L9.316|
00013c  b14e              CBZ      r6,|L9.338|
00013e  9805              LDR      r0,[sp,#0x14]         ;524
000140  f7fffffe          BL       LCD_SetColorIndex
000144  1e62              SUBS     r2,r4,#1              ;525
000146  1ba1              SUBS     r1,r4,r6              ;525
000148  1e48              SUBS     r0,r1,#1              ;525
00014a  4651              MOV      r1,r10                ;525
00014c  f7fffffe          BL       LCD_DrawHLine
000150  e004              B        |L9.348|
                  |L9.338|
000152  4651              MOV      r1,r10                ;527
000154  9a05              LDR      r2,[sp,#0x14]         ;527
000156  980a              LDR      r0,[sp,#0x28]         ;527
000158  f7fffffe          BL       LCD_SetPixelIndex
                  |L9.348|
00015c  980b              LDR      r0,[sp,#0x2c]         ;531
00015e  b198              CBZ      r0,|L9.392|
000160  4912              LDR      r1,|L9.428|
000162  980c              LDR      r0,[sp,#0x30]         ;532
000164  f8510020          LDR      r0,[r1,r0,LSL #2]     ;532
000168  4482              ADD      r10,r10,r0            ;532
00016a  ebaa010b          SUB      r1,r10,r11            ;533
00016e  9808              LDR      r0,[sp,#0x20]         ;533
000170  4281              CMP      r1,r0                 ;533
000172  db0b              BLT      |L9.396|
000174  980c              LDR      r0,[sp,#0x30]         ;534
000176  1c40              ADDS     r0,r0,#1              ;534
000178  900c              STR      r0,[sp,#0x30]         ;534
00017a  490d              LDR      r1,|L9.432|
00017c  980c              LDR      r0,[sp,#0x30]         ;535
00017e  f8510020          LDR      r0,[r1,r0,LSL #2]     ;535
000182  eb000a0b          ADD      r10,r0,r11            ;535
000186  e001              B        |L9.396|
                  |L9.392|
000188  f10a0a01          ADD      r10,r10,#1            ;538
                  |L9.396|
00018c  980d              LDR      r0,[sp,#0x34]         ;476
00018e  1c40              ADDS     r0,r0,#1              ;476
000190  900d              STR      r0,[sp,#0x34]         ;476
                  |L9.402|
000192  9908              LDR      r1,[sp,#0x20]         ;476
000194  980d              LDR      r0,[sp,#0x34]         ;476
000196  4288              CMP      r0,r1                 ;476
000198  f6ffaf65          BLT      |L9.102|
00019c  2000              MOVS     r0,#0                 ;541
00019e  e750              B        |L9.66|
;;;543    
                          ENDP

                  |L9.416|
                          DCD      _aColorTable
                  |L9.420|
                          DCD      _LZWContext+0x3cbc
                  |L9.424|
                          DCD      _LZWContext+0x3102
                  |L9.428|
                          DCD      _aInterlaceOffset
                  |L9.432|
                          DCD      _aInterlaceYPos

                          AREA ||i._DrawGIFImage||, CODE, READONLY, ALIGN=2

                  _DrawGIFImage PROC
;;;865    */
;;;866    static int _DrawGIFImage(const U8 * pData, U32 NumBytes, int x0, int y0, int Index) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  b090              SUB      sp,sp,#0x40
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
00000e  9d18              LDR      r5,[sp,#0x60]
;;;867      U8 Disposal;
;;;868      int XSize, YSize, TransIndex, ImageCnt;
;;;869      IMAGE_DESCRIPTOR Descriptor = {0};
000010  2118              MOVS     r1,#0x18
000012  a806              ADD      r0,sp,#0x18
000014  f7fffffe          BL       __aeabi_memclr4
;;;870      GUI_GIF_IMAGE_INFO Info = {0};
000018  2114              MOVS     r1,#0x14
00001a  a801              ADD      r0,sp,#4
00001c  f7fffffe          BL       __aeabi_memclr4
;;;871      U8 Introducer;
;;;872      ImageCnt   =  0;
000020  2400              MOVS     r4,#0
;;;873      TransIndex = -1;
000022  1e60              SUBS     r0,r4,#1
000024  900c              STR      r0,[sp,#0x30]
;;;874      /* Initialize decoding and get size and global color table */
;;;875      if (_GetSizeAndColorTable(pData, NumBytes, &XSize, &YSize, &Descriptor.NumColors)) {
000026  a80b              ADD      r0,sp,#0x2c
000028  ab0d              ADD      r3,sp,#0x34
00002a  aa0e              ADD      r2,sp,#0x38
00002c  4651              MOV      r1,r10
00002e  9000              STR      r0,[sp,#0]
000030  4648              MOV      r0,r9
000032  f7fffffe          BL       _GetSizeAndColorTable
000036  b118              CBZ      r0,|L10.64|
;;;876        return 1; /* Error */
000038  2001              MOVS     r0,#1
                  |L10.58|
;;;877      }
;;;878      /* Iterate over the blocks */
;;;879      do {
;;;880        Introducer = _ReadU8();
;;;881        switch (Introducer) {
;;;882        case GIF_INTRO_IMAGE:
;;;883          /* Read image descriptor */
;;;884          Descriptor.XPos  = _ReadU16();
;;;885          Descriptor.YPos  = _ReadU16();
;;;886          Descriptor.XSize = _ReadU16();
;;;887          Descriptor.YSize = _ReadU16();
;;;888          Descriptor.Flags = _ReadU8 ();
;;;889          if (_Source.RemBytes < 0) {
;;;890            return 1; /* Error */
;;;891          }
;;;892          if (Descriptor.Flags & 0x80) {
;;;893            /* Read local color table */
;;;894            if (_ReadColorMap(Descriptor.NumColors)) {
;;;895              return 1; /* Error */
;;;896            }
;;;897          }
;;;898          if (ImageCnt == Index - 1) {
;;;899            Info.xPos  = Descriptor.XPos;
;;;900            Info.yPos  = Descriptor.YPos;
;;;901            Info.xSize = Descriptor.XSize;
;;;902            Info.ySize = Descriptor.YSize;
;;;903          }
;;;904          if (Index == ImageCnt) {
;;;905            if (Disposal == 2) {
;;;906              _ClearUnusedPixels(x0, y0, &Descriptor, &Info);
;;;907            }
;;;908            if (_DispGIFImage(&Descriptor, x0 + Descriptor.XPos, y0 + Descriptor.YPos, TransIndex, Disposal)) {
;;;909              return 1; /* Error */
;;;910            }
;;;911            if (_ReadU8() != 0) {
;;;912              return 1; /* Error */
;;;913            }
;;;914            return 0;
;;;915          } else {
;;;916            _ReadU8();                    /* Skip codesize */
;;;917            while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;918          }
;;;919          ImageCnt++;
;;;920          break;
;;;921        case GIF_INTRO_TERMINATOR:
;;;922          break;
;;;923        case GIF_INTRO_EXTENSION:
;;;924          /* Read image extension */
;;;925          if (_ReadExtension(&TransIndex, (Index == ImageCnt) ? &Info : NULL, (Index == ImageCnt) ? &Disposal : NULL)) {
;;;926            return 1;
;;;927          }
;;;928          break;
;;;929        default:
;;;930          return 1;
;;;931        }
;;;932      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;933      return 0;
;;;934    }
00003a  b010              ADD      sp,sp,#0x40
00003c  e8bd87f0          POP      {r4-r10,pc}
                  |L10.64|
000040  bf00              NOP                            ;879
                  |L10.66|
000042  f7fffffe          BL       _ReadU8
000046  4606              MOV      r6,r0                 ;880
000048  4630              MOV      r0,r6                 ;881
00004a  2e21              CMP      r6,#0x21              ;881
00004c  d05b              BEQ      |L10.262|
00004e  282c              CMP      r0,#0x2c              ;881
000050  d002              BEQ      |L10.88|
000052  283b              CMP      r0,#0x3b              ;881
000054  d16a              BNE      |L10.300|
000056  e055              B        |L10.260|
                  |L10.88|
000058  f7fffffe          BL       _ReadU16
00005c  9006              STR      r0,[sp,#0x18]         ;884
00005e  f7fffffe          BL       _ReadU16
000062  9007              STR      r0,[sp,#0x1c]         ;885
000064  f7fffffe          BL       _ReadU16
000068  9008              STR      r0,[sp,#0x20]         ;886
00006a  f7fffffe          BL       _ReadU16
00006e  9009              STR      r0,[sp,#0x24]         ;887
000070  f7fffffe          BL       _ReadU8
000074  900a              STR      r0,[sp,#0x28]         ;888
000076  4831              LDR      r0,|L10.316|
000078  6840              LDR      r0,[r0,#4]            ;889  ; _Source
00007a  2800              CMP      r0,#0                 ;889
00007c  da01              BGE      |L10.130|
00007e  2001              MOVS     r0,#1                 ;890
000080  e7db              B        |L10.58|
                  |L10.130|
000082  980a              LDR      r0,[sp,#0x28]         ;892
000084  f0100f80          TST      r0,#0x80              ;892
000088  d005              BEQ      |L10.150|
00008a  980b              LDR      r0,[sp,#0x2c]         ;894
00008c  f7fffffe          BL       _ReadColorMap
000090  b108              CBZ      r0,|L10.150|
000092  2001              MOVS     r0,#1                 ;895
000094  e7d1              B        |L10.58|
                  |L10.150|
000096  1e68              SUBS     r0,r5,#1              ;898
000098  42a0              CMP      r0,r4                 ;898
00009a  d107              BNE      |L10.172|
00009c  9806              LDR      r0,[sp,#0x18]         ;899
00009e  9001              STR      r0,[sp,#4]            ;899
0000a0  9807              LDR      r0,[sp,#0x1c]         ;900
0000a2  9002              STR      r0,[sp,#8]            ;900
0000a4  9808              LDR      r0,[sp,#0x20]         ;901
0000a6  9003              STR      r0,[sp,#0xc]          ;901
0000a8  9809              LDR      r0,[sp,#0x24]         ;902
0000aa  9004              STR      r0,[sp,#0x10]         ;902
                  |L10.172|
0000ac  42a5              CMP      r5,r4                 ;904
0000ae  d11f              BNE      |L10.240|
0000b0  f89d003c          LDRB     r0,[sp,#0x3c]         ;905
0000b4  2802              CMP      r0,#2                 ;905
0000b6  d105              BNE      |L10.196|
0000b8  ab01              ADD      r3,sp,#4              ;906
0000ba  aa06              ADD      r2,sp,#0x18           ;906
0000bc  4641              MOV      r1,r8                 ;906
0000be  4638              MOV      r0,r7                 ;906
0000c0  f7fffffe          BL       _ClearUnusedPixels
                  |L10.196|
0000c4  f89d003c          LDRB     r0,[sp,#0x3c]         ;908
0000c8  9000              STR      r0,[sp,#0]            ;908
0000ca  9807              LDR      r0,[sp,#0x1c]         ;908
0000cc  eb000208          ADD      r2,r0,r8              ;908
0000d0  9806              LDR      r0,[sp,#0x18]         ;908
0000d2  19c1              ADDS     r1,r0,r7              ;908
0000d4  a806              ADD      r0,sp,#0x18           ;908
0000d6  9b0c              LDR      r3,[sp,#0x30]         ;908
0000d8  f7fffffe          BL       _DispGIFImage
0000dc  b108              CBZ      r0,|L10.226|
0000de  2001              MOVS     r0,#1                 ;909
0000e0  e7ab              B        |L10.58|
                  |L10.226|
0000e2  f7fffffe          BL       _ReadU8
0000e6  b108              CBZ      r0,|L10.236|
0000e8  2001              MOVS     r0,#1                 ;912
0000ea  e7a6              B        |L10.58|
                  |L10.236|
0000ec  2000              MOVS     r0,#0                 ;914
0000ee  e7a4              B        |L10.58|
                  |L10.240|
0000f0  f7fffffe          BL       _ReadU8
0000f4  bf00              NOP                            ;917
                  |L10.246|
0000f6  2000              MOVS     r0,#0                 ;917
0000f8  f7fffffe          BL       _GetDataBlock
0000fc  2800              CMP      r0,#0                 ;917
0000fe  dcfa              BGT      |L10.246|
000100  1c64              ADDS     r4,r4,#1              ;919
000102  e015              B        |L10.304|
                  |L10.260|
000104  e014              B        |L10.304|
                  |L10.262|
000106  42a5              CMP      r5,r4                 ;925
000108  d101              BNE      |L10.270|
00010a  a80f              ADD      r0,sp,#0x3c           ;925
00010c  e000              B        |L10.272|
                  |L10.270|
00010e  2000              MOVS     r0,#0                 ;925
                  |L10.272|
000110  4602              MOV      r2,r0                 ;925
000112  42a5              CMP      r5,r4                 ;925
000114  d101              BNE      |L10.282|
000116  a801              ADD      r0,sp,#4              ;925
000118  e000              B        |L10.284|
                  |L10.282|
00011a  2000              MOVS     r0,#0                 ;925
                  |L10.284|
00011c  4601              MOV      r1,r0                 ;925
00011e  a80c              ADD      r0,sp,#0x30           ;925
000120  f7fffffe          BL       _ReadExtension
000124  b108              CBZ      r0,|L10.298|
000126  2001              MOVS     r0,#1                 ;926
000128  e787              B        |L10.58|
                  |L10.298|
00012a  e001              B        |L10.304|
                  |L10.300|
00012c  2001              MOVS     r0,#1                 ;930
00012e  e784              B        |L10.58|
                  |L10.304|
000130  bf00              NOP                            ;920
000132  2e3b              CMP      r6,#0x3b              ;932
000134  d185              BNE      |L10.66|
000136  2000              MOVS     r0,#0                 ;933
000138  e77f              B        |L10.58|
;;;935    
                          ENDP

00013a  0000              DCW      0x0000
                  |L10.316|
                          DCD      _Source

                          AREA ||i._GetDataBlock||, CODE, READONLY, ALIGN=2

                  _GetDataBlock PROC
;;;218    */
;;;219    static int _GetDataBlock(U8 * pBuffer) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;220      U8 Count;
;;;221      Count = _ReadU8(); /* Read the length of the data block */
000004  f7fffffe          BL       _ReadU8
000008  4604              MOV      r4,r0
;;;222      if (Count) {
00000a  b154              CBZ      r4,|L11.34|
;;;223        if (pBuffer) {
00000c  b125              CBZ      r5,|L11.24|
;;;224          _ReadBytes(pBuffer, Count);
00000e  4621              MOV      r1,r4
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       _ReadBytes
000016  e004              B        |L11.34|
                  |L11.24|
;;;225        } else {
;;;226          _Source.pSrc += Count;
000018  4803              LDR      r0,|L11.40|
00001a  6800              LDR      r0,[r0,#0]  ; _Source
00001c  4420              ADD      r0,r0,r4
00001e  4902              LDR      r1,|L11.40|
000020  6008              STR      r0,[r1,#0]  ; _Source
                  |L11.34|
;;;227        }
;;;228      }
;;;229      return((int)Count);
000022  4620              MOV      r0,r4
;;;230    }
000024  bd70              POP      {r4-r6,pc}
;;;231    
                          ENDP

000026  0000              DCW      0x0000
                  |L11.40|
                          DCD      _Source

                          AREA ||i._GetGIFComment||, CODE, READONLY, ALIGN=1

                  _GetGIFComment PROC
;;;776    */
;;;777    static int _GetGIFComment(const U8 * pData, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index) {
000000  e92d4ffe          PUSH     {r1-r11,lr}
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4693              MOV      r11,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8030          LDR      r8,[sp,#0x30]
;;;778      U8 Flags, Introducer;
;;;779      int NumColors, CommentCnt, Size;
;;;780      /* Initialize decoding and skip size and global color table */
;;;781      if (_GetSizeAndColorTable(pData, NumBytes, NULL, NULL, &NumColors)) {
000010  a802              ADD      r0,sp,#8
000012  2300              MOVS     r3,#0
000014  461a              MOV      r2,r3
000016  4651              MOV      r1,r10
000018  9000              STR      r0,[sp,#0]
00001a  4648              MOV      r0,r9
00001c  f7fffffe          BL       _GetSizeAndColorTable
000020  b110              CBZ      r0,|L12.40|
;;;782        return 1; /* Error */
000022  2001              MOVS     r0,#1
                  |L12.36|
;;;783      }
;;;784      CommentCnt = Size = 0;
;;;785      /* Iterate over the blocks */
;;;786      do {
;;;787        Introducer = _ReadU8();
;;;788        switch (Introducer) {
;;;789        case GIF_INTRO_IMAGE:
;;;790          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;791          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;792          if (Flags & 0x80) {
;;;793            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;794          }
;;;795          _SkipBytes(1);                /* Skip codesize */
;;;796          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;797          break;
;;;798        case GIF_INTRO_TERMINATOR:
;;;799          break;
;;;800        case GIF_INTRO_EXTENSION:
;;;801          _ReadComment((Index == CommentCnt) ? pBuffer : NULL, MaxSize, &Size);
;;;802          if ((Size) && (Index == CommentCnt)) {
;;;803            return 0;
;;;804          }
;;;805          break;
;;;806        default:
;;;807          return 1;
;;;808        }
;;;809      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;810      return 1;
;;;811    }
000024  e8bd8ffe          POP      {r1-r11,pc}
                  |L12.40|
000028  2600              MOVS     r6,#0                 ;784
00002a  9601              STR      r6,[sp,#4]            ;784
00002c  bf00              NOP                            ;786
                  |L12.46|
00002e  f7fffffe          BL       _ReadU8
000032  4604              MOV      r4,r0                 ;787
000034  4620              MOV      r0,r4                 ;788
000036  2c21              CMP      r4,#0x21              ;788
000038  d01d              BEQ      |L12.118|
00003a  282c              CMP      r0,#0x2c              ;788
00003c  d002              BEQ      |L12.68|
00003e  283b              CMP      r0,#0x3b              ;788
000040  d12a              BNE      |L12.152|
000042  e017              B        |L12.116|
                  |L12.68|
000044  2008              MOVS     r0,#8                 ;790
000046  f7fffffe          BL       _SkipBytes
00004a  f7fffffe          BL       _ReadU8
00004e  4605              MOV      r5,r0                 ;791
000050  f0150f80          TST      r5,#0x80              ;792
000054  d004              BEQ      |L12.96|
000056  9902              LDR      r1,[sp,#8]            ;793
000058  eb010041          ADD      r0,r1,r1,LSL #1       ;793
00005c  f7fffffe          BL       _SkipBytes
                  |L12.96|
000060  2001              MOVS     r0,#1                 ;795
000062  f7fffffe          BL       _SkipBytes
000066  bf00              NOP                            ;796
                  |L12.104|
000068  2000              MOVS     r0,#0                 ;796
00006a  f7fffffe          BL       _GetDataBlock
00006e  2800              CMP      r0,#0                 ;796
000070  dcfa              BGT      |L12.104|
000072  e013              B        |L12.156|
                  |L12.116|
000074  e012              B        |L12.156|
                  |L12.118|
000076  45b0              CMP      r8,r6                 ;801
000078  d101              BNE      |L12.126|
00007a  4659              MOV      r1,r11                ;801
00007c  e000              B        |L12.128|
                  |L12.126|
00007e  2100              MOVS     r1,#0                 ;801
                  |L12.128|
000080  4608              MOV      r0,r1                 ;801
000082  aa01              ADD      r2,sp,#4              ;801
000084  4639              MOV      r1,r7                 ;801
000086  f7fffffe          BL       _ReadComment
00008a  9801              LDR      r0,[sp,#4]            ;802
00008c  b118              CBZ      r0,|L12.150|
00008e  45b0              CMP      r8,r6                 ;802
000090  d101              BNE      |L12.150|
000092  2000              MOVS     r0,#0                 ;803
000094  e7c6              B        |L12.36|
                  |L12.150|
000096  e001              B        |L12.156|
                  |L12.152|
000098  2001              MOVS     r0,#1                 ;807
00009a  e7c3              B        |L12.36|
                  |L12.156|
00009c  bf00              NOP                            ;797
00009e  2c3b              CMP      r4,#0x3b              ;809
0000a0  d1c5              BNE      |L12.46|
0000a2  2001              MOVS     r0,#1                 ;810
0000a4  e7be              B        |L12.36|
;;;812    
                          ENDP


                          AREA ||i._GetGIFInfo||, CODE, READONLY, ALIGN=1

                  _GetGIFInfo PROC
;;;675    */
;;;676    static int _GetGIFInfo(const U8 * pData, U32 NumBytes, GUI_GIF_INFO * pInfo) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
;;;677      U8 Flags, Introducer;
;;;678      int NumColors, ImageCnt;
;;;679      /* Initialize decoding and get size and global color table */
;;;680      if (_GetSizeAndColorTable(pData, NumBytes, &pInfo->xSize, &pInfo->ySize, &NumColors)) {
00000a  a801              ADD      r0,sp,#4
00000c  1d2b              ADDS     r3,r5,#4
00000e  462a              MOV      r2,r5
000010  4649              MOV      r1,r9
000012  9000              STR      r0,[sp,#0]
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       _GetSizeAndColorTable
00001a  b110              CBZ      r0,|L13.34|
;;;681        return 1; /* Error */
00001c  2001              MOVS     r0,#1
                  |L13.30|
;;;682      }
;;;683      ImageCnt = 0;
;;;684      /* Iterate over the blocks */
;;;685      do {
;;;686        Introducer = _ReadU8();
;;;687        switch (Introducer) {
;;;688        case GIF_INTRO_IMAGE:
;;;689          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;690          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;691          if (Flags & 0x80) {
;;;692            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;693          }
;;;694          _SkipBytes(1);                /* Skip codesize */
;;;695          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;696          ImageCnt++;
;;;697          break;
;;;698        case GIF_INTRO_TERMINATOR:
;;;699          break;
;;;700        case GIF_INTRO_EXTENSION:
;;;701          if (_ReadExtension(NULL, NULL, NULL)) { /* Skip image extension */
;;;702            return 1;
;;;703          }
;;;704          break;
;;;705        default:
;;;706          return 1;
;;;707        }
;;;708      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;709      pInfo->NumImages = ImageCnt;
;;;710      return 0;
;;;711    }
00001e  e8bd87fc          POP      {r2-r10,pc}
                  |L13.34|
000022  2700              MOVS     r7,#0                 ;683
000024  bf00              NOP                            ;685
                  |L13.38|
000026  f7fffffe          BL       _ReadU8
00002a  4604              MOV      r4,r0                 ;686
00002c  2c21              CMP      r4,#0x21              ;687
00002e  d01e              BEQ      |L13.110|
000030  2c2c              CMP      r4,#0x2c              ;687
000032  d002              BEQ      |L13.58|
000034  2c3b              CMP      r4,#0x3b              ;687
000036  d123              BNE      |L13.128|
000038  e018              B        |L13.108|
                  |L13.58|
00003a  2008              MOVS     r0,#8                 ;689
00003c  f7fffffe          BL       _SkipBytes
000040  f7fffffe          BL       _ReadU8
000044  4606              MOV      r6,r0                 ;690
000046  f0160f80          TST      r6,#0x80              ;691
00004a  d004              BEQ      |L13.86|
00004c  9901              LDR      r1,[sp,#4]            ;692
00004e  eb010041          ADD      r0,r1,r1,LSL #1       ;692
000052  f7fffffe          BL       _SkipBytes
                  |L13.86|
000056  2001              MOVS     r0,#1                 ;694
000058  f7fffffe          BL       _SkipBytes
00005c  bf00              NOP                            ;695
                  |L13.94|
00005e  2000              MOVS     r0,#0                 ;695
000060  f7fffffe          BL       _GetDataBlock
000064  2800              CMP      r0,#0                 ;695
000066  dcfa              BGT      |L13.94|
000068  1c7f              ADDS     r7,r7,#1              ;696
00006a  e00b              B        |L13.132|
                  |L13.108|
00006c  e00a              B        |L13.132|
                  |L13.110|
00006e  2200              MOVS     r2,#0                 ;701
000070  4611              MOV      r1,r2                 ;701
000072  4610              MOV      r0,r2                 ;701
000074  f7fffffe          BL       _ReadExtension
000078  b108              CBZ      r0,|L13.126|
00007a  2001              MOVS     r0,#1                 ;702
00007c  e7cf              B        |L13.30|
                  |L13.126|
00007e  e001              B        |L13.132|
                  |L13.128|
000080  2001              MOVS     r0,#1                 ;706
000082  e7cc              B        |L13.30|
                  |L13.132|
000084  bf00              NOP                            ;697
000086  2c3b              CMP      r4,#0x3b              ;708
000088  d1cd              BNE      |L13.38|
00008a  60af              STR      r7,[r5,#8]            ;709
00008c  2000              MOVS     r0,#0                 ;710
00008e  e7c6              B        |L13.30|
;;;712    
                          ENDP


                          AREA ||i._GetGlobalColorTable||, CODE, READONLY, ALIGN=2

                  _GetGlobalColorTable PROC
;;;628    */
;;;629    static int _GetGlobalColorTable(int * pNumColors) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;630      U8 Flags;
;;;631      int NumColors;
;;;632      /* Read flags from logical screen descriptor */
;;;633      Flags = _ReadU8 ();
000004  f7fffffe          BL       _ReadU8
000008  4606              MOV      r6,r0
;;;634      _ReadU8 ();
00000a  f7fffffe          BL       _ReadU8
;;;635      _ReadU8 ();
00000e  f7fffffe          BL       _ReadU8
;;;636      if (_Source.RemBytes < 0) {
000012  480c              LDR      r0,|L14.68|
000014  6840              LDR      r0,[r0,#4]  ; _Source
000016  2800              CMP      r0,#0
000018  da01              BGE      |L14.30|
;;;637        return 1; /* Error */
00001a  2001              MOVS     r0,#1
                  |L14.28|
;;;638      }
;;;639      NumColors = 2 << (Flags & 0x7);
;;;640      if (Flags & 0x80) {
;;;641        /* Read global color table */
;;;642        if (_ReadColorMap(NumColors)) {
;;;643          return 1; /* Error */
;;;644        }
;;;645      }
;;;646      if (pNumColors) {
;;;647        *pNumColors = NumColors;
;;;648      }
;;;649      return 0;
;;;650    }
00001c  bd70              POP      {r4-r6,pc}
                  |L14.30|
00001e  f0060107          AND      r1,r6,#7              ;639
000022  2002              MOVS     r0,#2                 ;639
000024  fa00f501          LSL      r5,r0,r1              ;639
000028  f0160f80          TST      r6,#0x80              ;640
00002c  d005              BEQ      |L14.58|
00002e  4628              MOV      r0,r5                 ;642
000030  f7fffffe          BL       _ReadColorMap
000034  b108              CBZ      r0,|L14.58|
000036  2001              MOVS     r0,#1                 ;643
000038  e7f0              B        |L14.28|
                  |L14.58|
00003a  b104              CBZ      r4,|L14.62|
00003c  6025              STR      r5,[r4,#0]            ;647
                  |L14.62|
00003e  2000              MOVS     r0,#0                 ;649
000040  e7ec              B        |L14.28|
;;;651    
                          ENDP

000042  0000              DCW      0x0000
                  |L14.68|
                          DCD      _Source

                          AREA ||i._GetImageDimension||, CODE, READONLY, ALIGN=1

                  _GetImageDimension PROC
;;;600    */
;;;601    static int _GetImageDimension(int * pxSize, int * pySize) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;602      int XSize, YSize;
;;;603      /* Read image size */
;;;604      XSize = _ReadU16();
000008  f7fffffe          BL       _ReadU16
00000c  4606              MOV      r6,r0
;;;605      YSize = _ReadU16();
00000e  f7fffffe          BL       _ReadU16
000012  4607              MOV      r7,r0
;;;606      if ((XSize > 2000) || (YSize > 2000)) {
000014  f5b66ffa          CMP      r6,#0x7d0
000018  dc02              BGT      |L15.32|
00001a  f5b76ffa          CMP      r7,#0x7d0
00001e  dd02              BLE      |L15.38|
                  |L15.32|
;;;607        return 1; /* Error if image is too large */
000020  2001              MOVS     r0,#1
                  |L15.34|
;;;608      }
;;;609      if (pxSize) {
;;;610        *pxSize = XSize;
;;;611      }
;;;612      if (pySize) {
;;;613        *pySize = YSize;
;;;614      }
;;;615      return 0;
;;;616    }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L15.38|
000026  b104              CBZ      r4,|L15.42|
000028  6026              STR      r6,[r4,#0]            ;610
                  |L15.42|
00002a  b105              CBZ      r5,|L15.46|
00002c  602f              STR      r7,[r5,#0]            ;613
                  |L15.46|
00002e  2000              MOVS     r0,#0                 ;615
000030  e7f7              B        |L15.34|
;;;617    
                          ENDP


                          AREA ||i._GetImageInfo||, CODE, READONLY, ALIGN=1

                  _GetImageInfo PROC
;;;716    */
;;;717    static int _GetImageInfo(const U8 * pData, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
;;;718      U8 Flags, Introducer;
;;;719      int NumColors, ImageCnt;
;;;720      /* Initialize decoding and get size and global color table */
;;;721      if (_GetSizeAndColorTable(pData, NumBytes, NULL, NULL, &NumColors)) {
00000c  a801              ADD      r0,sp,#4
00000e  2300              MOVS     r3,#0
000010  461a              MOV      r2,r3
000012  4651              MOV      r1,r10
000014  9000              STR      r0,[sp,#0]
000016  4648              MOV      r0,r9
000018  f7fffffe          BL       _GetSizeAndColorTable
00001c  b110              CBZ      r0,|L16.36|
;;;722        return 1; /* Error */
00001e  2001              MOVS     r0,#1
                  |L16.32|
;;;723      }
;;;724      ImageCnt = 0;
;;;725      /* Iterate over the blocks */
;;;726      do {
;;;727        Introducer = _ReadU8();
;;;728        switch (Introducer) {
;;;729        case GIF_INTRO_IMAGE:
;;;730          if (Index == ImageCnt) {
;;;731            pInfo->xPos  = _ReadU16();
;;;732            pInfo->xPos  = _ReadU16();
;;;733            pInfo->xSize = _ReadU16();
;;;734            pInfo->ySize = _ReadU16();
;;;735            return 0;
;;;736          }
;;;737          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
;;;738          Flags = _ReadU8();            /* Only 'Flags' are intresting */
;;;739          if (Flags & 0x80) {
;;;740            _SkipBytes(NumColors * 3);  /* Skip local color table */
;;;741          }
;;;742          _SkipBytes(1);                /* Skip codesize */
;;;743          while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;744          ImageCnt++;
;;;745          break;
;;;746        case GIF_INTRO_TERMINATOR:
;;;747          break;
;;;748        case GIF_INTRO_EXTENSION:
;;;749          if (_ReadExtension(NULL, (Index == ImageCnt) ? pInfo : NULL, NULL)) {
;;;750            return 1;
;;;751          }
;;;752          break;
;;;753        default:
;;;754          return 1;
;;;755        }
;;;756      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;757      return 0;
;;;758    }
000020  e8bd87fc          POP      {r2-r10,pc}
                  |L16.36|
000024  2600              MOVS     r6,#0                 ;724
000026  bf00              NOP                            ;726
                  |L16.40|
000028  f7fffffe          BL       _ReadU8
00002c  4605              MOV      r5,r0                 ;727
00002e  4628              MOV      r0,r5                 ;728
000030  2d21              CMP      r5,#0x21              ;728
000032  d02e              BEQ      |L16.146|
000034  282c              CMP      r0,#0x2c              ;728
000036  d002              BEQ      |L16.62|
000038  283b              CMP      r0,#0x3b              ;728
00003a  d138              BNE      |L16.174|
00003c  e028              B        |L16.144|
                  |L16.62|
00003e  42b7              CMP      r7,r6                 ;730
000040  d10d              BNE      |L16.94|
000042  f7fffffe          BL       _ReadU16
000046  6020              STR      r0,[r4,#0]            ;731
000048  f7fffffe          BL       _ReadU16
00004c  6020              STR      r0,[r4,#0]            ;732
00004e  f7fffffe          BL       _ReadU16
000052  60a0              STR      r0,[r4,#8]            ;733
000054  f7fffffe          BL       _ReadU16
000058  60e0              STR      r0,[r4,#0xc]          ;734
00005a  2000              MOVS     r0,#0                 ;735
00005c  e7e0              B        |L16.32|
                  |L16.94|
00005e  2008              MOVS     r0,#8                 ;737
000060  f7fffffe          BL       _SkipBytes
000064  f7fffffe          BL       _ReadU8
000068  4680              MOV      r8,r0                 ;738
00006a  f0180f80          TST      r8,#0x80              ;739
00006e  d004              BEQ      |L16.122|
000070  9901              LDR      r1,[sp,#4]            ;740
000072  eb010041          ADD      r0,r1,r1,LSL #1       ;740
000076  f7fffffe          BL       _SkipBytes
                  |L16.122|
00007a  2001              MOVS     r0,#1                 ;742
00007c  f7fffffe          BL       _SkipBytes
000080  bf00              NOP                            ;743
                  |L16.130|
000082  2000              MOVS     r0,#0                 ;743
000084  f7fffffe          BL       _GetDataBlock
000088  2800              CMP      r0,#0                 ;743
00008a  dcfa              BGT      |L16.130|
00008c  1c76              ADDS     r6,r6,#1              ;744
00008e  e010              B        |L16.178|
                  |L16.144|
000090  e00f              B        |L16.178|
                  |L16.146|
000092  42b7              CMP      r7,r6                 ;749
000094  d101              BNE      |L16.154|
000096  4620              MOV      r0,r4                 ;749
000098  e000              B        |L16.156|
                  |L16.154|
00009a  2000              MOVS     r0,#0                 ;749
                  |L16.156|
00009c  4601              MOV      r1,r0                 ;749
00009e  2200              MOVS     r2,#0                 ;749
0000a0  4610              MOV      r0,r2                 ;749
0000a2  f7fffffe          BL       _ReadExtension
0000a6  b108              CBZ      r0,|L16.172|
0000a8  2001              MOVS     r0,#1                 ;750
0000aa  e7b9              B        |L16.32|
                  |L16.172|
0000ac  e001              B        |L16.178|
                  |L16.174|
0000ae  2001              MOVS     r0,#1                 ;754
0000b0  e7b6              B        |L16.32|
                  |L16.178|
0000b2  bf00              NOP                            ;745
0000b4  2d3b              CMP      r5,#0x3b              ;756
0000b6  d1b7              BNE      |L16.40|
0000b8  2000              MOVS     r0,#0                 ;757
0000ba  e7b1              B        |L16.32|
;;;759    
                          ENDP


                          AREA ||i._GetNextByte||, CODE, READONLY, ALIGN=2

                  _GetNextByte PROC
;;;295    */
;;;296    static int _GetNextByte(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;297      int i, Code, Incode;
;;;298      while ((Code = _GetNextCode()) >= 0) {
000002  e0dd              B        |L17.448|
                  |L17.4|
;;;299        if (Code == _LZWContext.ClearCode) {
000004  4872              LDR      r0,|L17.464|
000006  6800              LDR      r0,[r0,#0]
000008  42a0              CMP      r0,r4
00000a  d140              BNE      |L17.142|
;;;300          /* Corrupt GIFs can make this happen */
;;;301          if (_LZWContext.ClearCode >= (1 << MAX_NUM_LWZ_BITS)) {
00000c  4870              LDR      r0,|L17.464|
00000e  6800              LDR      r0,[r0,#0]
000010  f5b05f80          CMP      r0,#0x1000
000014  db02              BLT      |L17.28|
;;;302            return -1; /* Error */
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L17.26|
;;;303          }
;;;304          /* Clear the tables */
;;;305          GUI__memset((U8 *)_LZWContext.aCode, 0, sizeof(_LZWContext.aCode));
;;;306          for (i = 0; i < _LZWContext.ClearCode; ++i) {
;;;307            _LZWContext.aPrefix[i] = i;
;;;308          }
;;;309          /* Calculate the 'special codes' in dependence of the initial code size
;;;310             and initialize the stack pointer */
;;;311          _LZWContext.CodeSize    = _LZWContext.SetCodeSize + 1;
;;;312          _LZWContext.MaxCodeSize = _LZWContext.ClearCode << 1;
;;;313          _LZWContext.MaxCode     = _LZWContext.ClearCode + 2;
;;;314          _LZWContext.sp          = _LZWContext.aDecompBuffer;
;;;315          /* Read the first code from the stack after clearing and initializing */
;;;316          do {
;;;317            _LZWContext.FirstCode = _GetNextCode();
;;;318          } while (_LZWContext.FirstCode == _LZWContext.ClearCode);
;;;319          _LZWContext.OldCode = _LZWContext.FirstCode;
;;;320          return _LZWContext.FirstCode;
;;;321        }
;;;322        if (Code == _LZWContext.EndCode) {
;;;323          return -2; /* End code */
;;;324        }
;;;325        Incode = Code;
;;;326        if (Code >= _LZWContext.MaxCode) {
;;;327          *(_LZWContext.sp)++ = _LZWContext.FirstCode;
;;;328          Code = _LZWContext.OldCode;
;;;329        }
;;;330        while (Code >= _LZWContext.ClearCode) {
;;;331          *(_LZWContext.sp)++ = _LZWContext.aPrefix[Code];
;;;332          if (Code == _LZWContext.aCode[Code]) {
;;;333            return Code;
;;;334          }
;;;335          if ((_LZWContext.sp - _LZWContext.aDecompBuffer) >= sizeof(_LZWContext.aDecompBuffer)) {
;;;336            return Code;
;;;337          }
;;;338          Code = _LZWContext.aCode[Code];
;;;339        }
;;;340        *(_LZWContext.sp)++ = _LZWContext.FirstCode = _LZWContext.aPrefix[Code];
;;;341        if ((Code = _LZWContext.MaxCode) < (1 << MAX_NUM_LWZ_BITS)) {
;;;342          _LZWContext.aCode  [Code] = _LZWContext.OldCode;
;;;343          _LZWContext.aPrefix[Code] = _LZWContext.FirstCode;
;;;344          ++_LZWContext.MaxCode;
;;;345          if ((_LZWContext.MaxCode >= _LZWContext.MaxCodeSize) && (_LZWContext.MaxCodeSize < (1 << MAX_NUM_LWZ_BITS))) {
;;;346            _LZWContext.MaxCodeSize <<= 1;
;;;347            ++_LZWContext.CodeSize;
;;;348          }
;;;349        }
;;;350        _LZWContext.OldCode = Incode;
;;;351        if (_LZWContext.sp > _LZWContext.aDecompBuffer) {
;;;352          return *--(_LZWContext.sp);
;;;353        }
;;;354      }
;;;355      return Code;
;;;356    }
00001a  bd70              POP      {r4-r6,pc}
                  |L17.28|
00001c  f44f5200          MOV      r2,#0x2000            ;305
000020  2100              MOVS     r1,#0                 ;305
000022  486c              LDR      r0,|L17.468|
000024  f7fffffe          BL       GUI__memset
000028  2500              MOVS     r5,#0                 ;306
00002a  e002              B        |L17.50|
                  |L17.44|
00002c  496a              LDR      r1,|L17.472|
00002e  554d              STRB     r5,[r1,r5]            ;307
000030  1c6d              ADDS     r5,r5,#1              ;306
                  |L17.50|
000032  4867              LDR      r0,|L17.464|
000034  6800              LDR      r0,[r0,#0]            ;306
000036  42a8              CMP      r0,r5                 ;306
000038  dcf8              BGT      |L17.44|
00003a  4865              LDR      r0,|L17.464|
00003c  380c              SUBS     r0,r0,#0xc            ;311
00003e  6800              LDR      r0,[r0,#0]            ;311
000040  1c40              ADDS     r0,r0,#1              ;311
000042  4963              LDR      r1,|L17.464|
000044  3910              SUBS     r1,r1,#0x10           ;311
000046  6008              STR      r0,[r1,#0]            ;311
000048  4861              LDR      r0,|L17.464|
00004a  6800              LDR      r0,[r0,#0]            ;312
00004c  0040              LSLS     r0,r0,#1              ;312
00004e  310c              ADDS     r1,r1,#0xc            ;312
000050  6008              STR      r0,[r1,#0]            ;312
000052  1d08              ADDS     r0,r1,#4              ;313
000054  6800              LDR      r0,[r0,#0]            ;313
000056  1c80              ADDS     r0,r0,#2              ;313
000058  1f09              SUBS     r1,r1,#4              ;313
00005a  6008              STR      r0,[r1,#0]            ;313
00005c  f6a130da          SUB      r0,r1,#0xbda          ;314
000060  3920              SUBS     r1,r1,#0x20           ;314
000062  6008              STR      r0,[r1,#0]            ;314
000064  bf00              NOP                            ;316
                  |L17.102|
000066  f7fffffe          BL       _GetNextCode
00006a  4959              LDR      r1,|L17.464|
00006c  3108              ADDS     r1,r1,#8              ;317
00006e  6008              STR      r0,[r1,#0]            ;317
000070  4608              MOV      r0,r1                 ;318
000072  6800              LDR      r0,[r0,#0]            ;318
000074  3908              SUBS     r1,r1,#8              ;318
000076  6809              LDR      r1,[r1,#0]            ;318
000078  4288              CMP      r0,r1                 ;318
00007a  d0f4              BEQ      |L17.102|
00007c  4854              LDR      r0,|L17.464|
00007e  3008              ADDS     r0,r0,#8              ;319
000080  6800              LDR      r0,[r0,#0]            ;319
000082  4953              LDR      r1,|L17.464|
000084  310c              ADDS     r1,r1,#0xc            ;319
000086  6008              STR      r0,[r1,#0]            ;319
000088  1f08              SUBS     r0,r1,#4              ;320
00008a  6800              LDR      r0,[r0,#0]            ;320
00008c  e7c5              B        |L17.26|
                  |L17.142|
00008e  4850              LDR      r0,|L17.464|
000090  1d00              ADDS     r0,r0,#4              ;322
000092  6800              LDR      r0,[r0,#0]            ;322
000094  42a0              CMP      r0,r4                 ;322
000096  d102              BNE      |L17.158|
000098  f06f0001          MVN      r0,#1                 ;323
00009c  e7bd              B        |L17.26|
                  |L17.158|
00009e  4626              MOV      r6,r4                 ;325
0000a0  484b              LDR      r0,|L17.464|
0000a2  3808              SUBS     r0,r0,#8              ;326
0000a4  6800              LDR      r0,[r0,#0]            ;326
0000a6  42a0              CMP      r0,r4                 ;326
0000a8  dc10              BGT      |L17.204|
0000aa  4849              LDR      r0,|L17.464|
0000ac  3008              ADDS     r0,r0,#8              ;327
0000ae  7800              LDRB     r0,[r0,#0]            ;327
0000b0  4947              LDR      r1,|L17.464|
0000b2  3928              SUBS     r1,r1,#0x28           ;327
0000b4  6809              LDR      r1,[r1,#0]            ;327
0000b6  7008              STRB     r0,[r1,#0]            ;327
0000b8  4845              LDR      r0,|L17.464|
0000ba  3828              SUBS     r0,r0,#0x28           ;327
0000bc  6800              LDR      r0,[r0,#0]            ;327
0000be  1c40              ADDS     r0,r0,#1              ;327
0000c0  4943              LDR      r1,|L17.464|
0000c2  3928              SUBS     r1,r1,#0x28           ;327
0000c4  6008              STR      r0,[r1,#0]            ;327
0000c6  f1010034          ADD      r0,r1,#0x34           ;328
0000ca  6804              LDR      r4,[r0,#0]            ;328
                  |L17.204|
0000cc  e021              B        |L17.274|
                  |L17.206|
0000ce  4842              LDR      r0,|L17.472|
0000d0  5d00              LDRB     r0,[r0,r4]            ;331
0000d2  493f              LDR      r1,|L17.464|
0000d4  3928              SUBS     r1,r1,#0x28           ;331
0000d6  6809              LDR      r1,[r1,#0]            ;331
0000d8  7008              STRB     r0,[r1,#0]            ;331
0000da  483d              LDR      r0,|L17.464|
0000dc  3828              SUBS     r0,r0,#0x28           ;331
0000de  6800              LDR      r0,[r0,#0]            ;331
0000e0  1c40              ADDS     r0,r0,#1              ;331
0000e2  493b              LDR      r1,|L17.464|
0000e4  3928              SUBS     r1,r1,#0x28           ;331
0000e6  6008              STR      r0,[r1,#0]            ;331
0000e8  483a              LDR      r0,|L17.468|
0000ea  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;332
0000ee  42a0              CMP      r0,r4                 ;332
0000f0  d101              BNE      |L17.246|
0000f2  4620              MOV      r0,r4                 ;333
0000f4  e791              B        |L17.26|
                  |L17.246|
0000f6  4836              LDR      r0,|L17.464|
0000f8  3828              SUBS     r0,r0,#0x28           ;335
0000fa  6800              LDR      r0,[r0,#0]            ;335
0000fc  4937              LDR      r1,|L17.476|
0000fe  1a40              SUBS     r0,r0,r1              ;335
000100  f64031b8          MOV      r1,#0xbb8             ;335
000104  4288              CMP      r0,r1                 ;335
000106  d301              BCC      |L17.268|
000108  4620              MOV      r0,r4                 ;336
00010a  e786              B        |L17.26|
                  |L17.268|
00010c  4831              LDR      r0,|L17.468|
00010e  f9304014          LDRSH    r4,[r0,r4,LSL #1]     ;338
                  |L17.274|
000112  482f              LDR      r0,|L17.464|
000114  6800              LDR      r0,[r0,#0]            ;330
000116  42a0              CMP      r0,r4                 ;330
000118  ddd9              BLE      |L17.206|
00011a  482f              LDR      r0,|L17.472|
00011c  5d00              LDRB     r0,[r0,r4]            ;340
00011e  492c              LDR      r1,|L17.464|
000120  3108              ADDS     r1,r1,#8              ;340
000122  6008              STR      r0,[r1,#0]            ;340
000124  3930              SUBS     r1,r1,#0x30           ;340
000126  6809              LDR      r1,[r1,#0]            ;340
000128  7008              STRB     r0,[r1,#0]            ;340
00012a  4829              LDR      r0,|L17.464|
00012c  3828              SUBS     r0,r0,#0x28           ;340
00012e  6800              LDR      r0,[r0,#0]            ;340
000130  1c40              ADDS     r0,r0,#1              ;340
000132  4927              LDR      r1,|L17.464|
000134  3928              SUBS     r1,r1,#0x28           ;340
000136  6008              STR      r0,[r1,#0]            ;340
000138  f1010020          ADD      r0,r1,#0x20           ;341
00013c  6800              LDR      r0,[r0,#0]            ;341
00013e  4604              MOV      r4,r0                 ;341
000140  f5b05f80          CMP      r0,#0x1000            ;341
000144  da2b              BGE      |L17.414|
000146  f1010034          ADD      r0,r1,#0x34           ;342
00014a  8800              LDRH     r0,[r0,#0]            ;342
00014c  b201              SXTH     r1,r0                 ;342
00014e  4821              LDR      r0,|L17.468|
000150  f8201014          STRH     r1,[r0,r4,LSL #1]     ;342
000154  481e              LDR      r0,|L17.464|
000156  3008              ADDS     r0,r0,#8              ;343
000158  7800              LDRB     r0,[r0,#0]            ;343
00015a  491f              LDR      r1,|L17.472|
00015c  5508              STRB     r0,[r1,r4]            ;343
00015e  481c              LDR      r0,|L17.464|
000160  3808              SUBS     r0,r0,#8              ;344
000162  6800              LDR      r0,[r0,#0]            ;344
000164  1c40              ADDS     r0,r0,#1              ;344
000166  491a              LDR      r1,|L17.464|
000168  3908              SUBS     r1,r1,#8              ;344
00016a  6008              STR      r0,[r1,#0]            ;344
00016c  4608              MOV      r0,r1                 ;345
00016e  6800              LDR      r0,[r0,#0]            ;345
000170  1d09              ADDS     r1,r1,#4              ;345
000172  6809              LDR      r1,[r1,#0]            ;345
000174  4288              CMP      r0,r1                 ;345
000176  db12              BLT      |L17.414|
000178  4815              LDR      r0,|L17.464|
00017a  1f00              SUBS     r0,r0,#4              ;345
00017c  6800              LDR      r0,[r0,#0]            ;345
00017e  f5b05f80          CMP      r0,#0x1000            ;345
000182  da0c              BGE      |L17.414|
000184  4812              LDR      r0,|L17.464|
000186  1f00              SUBS     r0,r0,#4              ;346
000188  6800              LDR      r0,[r0,#0]            ;346
00018a  0040              LSLS     r0,r0,#1              ;346
00018c  4910              LDR      r1,|L17.464|
00018e  1f09              SUBS     r1,r1,#4              ;346
000190  6008              STR      r0,[r1,#0]            ;346
000192  f1a1000c          SUB      r0,r1,#0xc            ;347
000196  6800              LDR      r0,[r0,#0]            ;347
000198  1c40              ADDS     r0,r0,#1              ;347
00019a  390c              SUBS     r1,r1,#0xc            ;347
00019c  6008              STR      r0,[r1,#0]            ;347
                  |L17.414|
00019e  480c              LDR      r0,|L17.464|
0001a0  300c              ADDS     r0,r0,#0xc            ;350
0001a2  6006              STR      r6,[r0,#0]            ;350
0001a4  3834              SUBS     r0,r0,#0x34           ;351
0001a6  6800              LDR      r0,[r0,#0]            ;351
0001a8  490c              LDR      r1,|L17.476|
0001aa  4288              CMP      r0,r1                 ;351
0001ac  d908              BLS      |L17.448|
0001ae  f60130ba          ADD      r0,r1,#0xbba          ;352
0001b2  6800              LDR      r0,[r0,#0]            ;352
0001b4  1e40              SUBS     r0,r0,#1              ;352
0001b6  f60131ba          ADD      r1,r1,#0xbba          ;352
0001ba  6008              STR      r0,[r1,#0]            ;352
0001bc  7800              LDRB     r0,[r0,#0]            ;352
0001be  e72c              B        |L17.26|
                  |L17.448|
0001c0  f7fffffe          BL       _GetNextCode
0001c4  1e04              SUBS     r4,r0,#0              ;298
0001c6  f6bfaf1d          BGE      |L17.4|
0001ca  4620              MOV      r0,r4                 ;355
0001cc  e725              B        |L17.26|
;;;357    
                          ENDP

0001ce  0000              DCW      0x0000
                  |L17.464|
                          DCD      _LZWContext+0x3ce4
                  |L17.468|
                          DCD      _LZWContext+0x102
                  |L17.472|
                          DCD      _LZWContext+0x2102
                  |L17.476|
                          DCD      _LZWContext+0x3102

                          AREA ||i._GetNextCode||, CODE, READONLY, ALIGN=2

                  _GetNextCode PROC
;;;242    */
;;;243    static int _GetNextCode(void) {
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;244      int i, j, End;
;;;245      long Result;
;;;246      if (_LZWContext.ReturnClear) {
000004  4847              LDR      r0,|L18.292|
000006  6800              LDR      r0,[r0,#0]
000008  b138              CBZ      r0,|L18.26|
;;;247        /* The first code should be a clear code. */
;;;248        _LZWContext.ReturnClear = 0;
00000a  2000              MOVS     r0,#0
00000c  4945              LDR      r1,|L18.292|
00000e  6008              STR      r0,[r1,#0]
;;;249        return _LZWContext.ClearCode;
000010  f1010014          ADD      r0,r1,#0x14
000014  6800              LDR      r0,[r0,#0]
                  |L18.22|
;;;250      }
;;;251      End = _LZWContext.CurBit + _LZWContext.CodeSize;
;;;252      if (End >= _LZWContext.LastBit) {
;;;253        int Count;
;;;254        if (_LZWContext.GetDone) {
;;;255          return -1; /* Error */
;;;256        }
;;;257        _LZWContext.aBuffer[0] = _LZWContext.aBuffer[_LZWContext.LastByte - 2];
;;;258        _LZWContext.aBuffer[1] = _LZWContext.aBuffer[_LZWContext.LastByte - 1];
;;;259        if ((Count = _GetDataBlock(&_LZWContext.aBuffer[2])) == 0) {
;;;260          _LZWContext.GetDone = 1;
;;;261        }
;;;262        if (Count < 0) {
;;;263          return -1; /* Error */
;;;264        }
;;;265        _LZWContext.LastByte = 2 + Count;
;;;266        _LZWContext.CurBit   = (_LZWContext.CurBit - _LZWContext.LastBit) + 16;
;;;267        _LZWContext.LastBit  = (2 + Count) * 8 ;
;;;268        End                  = _LZWContext.CurBit + _LZWContext.CodeSize;
;;;269      }
;;;270      j = End >> 3;
;;;271      i = _LZWContext.CurBit >> 3;
;;;272      if (i == j) {
;;;273        Result = (long)_LZWContext.aBuffer[i];
;;;274      } else if (i + 1 == j) {
;;;275        Result = (long)_LZWContext.aBuffer[i] | ((long)_LZWContext.aBuffer[i + 1] << 8);
;;;276      }  else {
;;;277        Result = (long)_LZWContext.aBuffer[i] | ((long)_LZWContext.aBuffer[i + 1] << 8) | ((long)_LZWContext.aBuffer[i + 2] << 16);
;;;278      }
;;;279      Result = (Result >> (_LZWContext.CurBit & 0x7)) & _aMaskTbl[_LZWContext.CodeSize];
;;;280      _LZWContext.CurBit += _LZWContext.CodeSize;
;;;281      return (int)Result;
;;;282    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L18.26|
00001a  4842              LDR      r0,|L18.292|
00001c  3810              SUBS     r0,r0,#0x10           ;251
00001e  6800              LDR      r0,[r0,#0]            ;251
000020  4940              LDR      r1,|L18.292|
000022  1d09              ADDS     r1,r1,#4              ;251
000024  6809              LDR      r1,[r1,#0]            ;251
000026  eb000801          ADD      r8,r0,r1              ;251
00002a  483e              LDR      r0,|L18.292|
00002c  380c              SUBS     r0,r0,#0xc            ;252
00002e  6800              LDR      r0,[r0,#0]            ;252
000030  4540              CMP      r0,r8                 ;252
000032  dc3a              BGT      |L18.170|
000034  483b              LDR      r0,|L18.292|
000036  3808              SUBS     r0,r0,#8              ;254
000038  6800              LDR      r0,[r0,#0]            ;254
00003a  b110              CBZ      r0,|L18.66|
00003c  f04f30ff          MOV      r0,#0xffffffff        ;255
000040  e7e9              B        |L18.22|
                  |L18.66|
000042  4838              LDR      r0,|L18.292|
000044  1f00              SUBS     r0,r0,#4              ;257
000046  6800              LDR      r0,[r0,#0]            ;257
000048  1e80              SUBS     r0,r0,#2              ;257
00004a  4937              LDR      r1,|L18.296|
00004c  5c08              LDRB     r0,[r1,r0]            ;257
00004e  7008              STRB     r0,[r1,#0]            ;257
000050  4834              LDR      r0,|L18.292|
000052  1f00              SUBS     r0,r0,#4              ;258
000054  6800              LDR      r0,[r0,#0]            ;258
000056  1e40              SUBS     r0,r0,#1              ;258
000058  5c08              LDRB     r0,[r1,r0]            ;258
00005a  7048              STRB     r0,[r1,#1]            ;258
00005c  1c88              ADDS     r0,r1,#2              ;259
00005e  f7fffffe          BL       _GetDataBlock
000062  0006              MOVS     r6,r0                 ;259
000064  d103              BNE      |L18.110|
000066  2001              MOVS     r0,#1                 ;260
000068  492e              LDR      r1,|L18.292|
00006a  3908              SUBS     r1,r1,#8              ;260
00006c  6008              STR      r0,[r1,#0]            ;260
                  |L18.110|
00006e  2e00              CMP      r6,#0                 ;262
000070  da02              BGE      |L18.120|
000072  f04f30ff          MOV      r0,#0xffffffff        ;263
000076  e7ce              B        |L18.22|
                  |L18.120|
000078  1cb0              ADDS     r0,r6,#2              ;265
00007a  492a              LDR      r1,|L18.292|
00007c  1f09              SUBS     r1,r1,#4              ;265
00007e  6008              STR      r0,[r1,#0]            ;265
000080  f1a1000c          SUB      r0,r1,#0xc            ;266
000084  6800              LDR      r0,[r0,#0]            ;266
000086  3908              SUBS     r1,r1,#8              ;266
000088  6809              LDR      r1,[r1,#0]            ;266
00008a  1a40              SUBS     r0,r0,r1              ;266
00008c  3010              ADDS     r0,r0,#0x10           ;266
00008e  4925              LDR      r1,|L18.292|
000090  3910              SUBS     r1,r1,#0x10           ;266
000092  6008              STR      r0,[r1,#0]            ;266
000094  1cb0              ADDS     r0,r6,#2              ;267
000096  00c0              LSLS     r0,r0,#3              ;267
000098  1d09              ADDS     r1,r1,#4              ;267
00009a  6008              STR      r0,[r1,#0]            ;267
00009c  1f08              SUBS     r0,r1,#4              ;268
00009e  6800              LDR      r0,[r0,#0]            ;268
0000a0  3110              ADDS     r1,r1,#0x10           ;268
0000a2  6809              LDR      r1,[r1,#0]            ;268
0000a4  eb000801          ADD      r8,r0,r1              ;268
0000a8  bf00              NOP                            ;269
                  |L18.170|
0000aa  ea4f07e8          ASR      r7,r8,#3              ;270
0000ae  481d              LDR      r0,|L18.292|
0000b0  3810              SUBS     r0,r0,#0x10           ;271
0000b2  6800              LDR      r0,[r0,#0]            ;271
0000b4  10c4              ASRS     r4,r0,#3              ;271
0000b6  42bc              CMP      r4,r7                 ;272
0000b8  d102              BNE      |L18.192|
0000ba  481b              LDR      r0,|L18.296|
0000bc  5d05              LDRB     r5,[r0,r4]            ;273
0000be  e015              B        |L18.236|
                  |L18.192|
0000c0  1c60              ADDS     r0,r4,#1              ;274
0000c2  42b8              CMP      r0,r7                 ;274
0000c4  d107              BNE      |L18.214|
0000c6  4818              LDR      r0,|L18.296|
0000c8  5d01              LDRB     r1,[r0,r4]            ;275
0000ca  4602              MOV      r2,r0                 ;275
0000cc  1c60              ADDS     r0,r4,#1              ;275
0000ce  5c10              LDRB     r0,[r2,r0]            ;275
0000d0  ea412500          ORR      r5,r1,r0,LSL #8       ;275
0000d4  e00a              B        |L18.236|
                  |L18.214|
0000d6  4814              LDR      r0,|L18.296|
0000d8  5d01              LDRB     r1,[r0,r4]            ;277
0000da  4602              MOV      r2,r0                 ;277
0000dc  1c60              ADDS     r0,r4,#1              ;277
0000de  5c10              LDRB     r0,[r2,r0]            ;277
0000e0  ea412100          ORR      r1,r1,r0,LSL #8       ;277
0000e4  1ca0              ADDS     r0,r4,#2              ;277
0000e6  5c10              LDRB     r0,[r2,r0]            ;277
0000e8  ea414500          ORR      r5,r1,r0,LSL #16      ;277
                  |L18.236|
0000ec  480d              LDR      r0,|L18.292|
0000ee  3810              SUBS     r0,r0,#0x10           ;279
0000f0  7800              LDRB     r0,[r0,#0]            ;279
0000f2  f0000107          AND      r1,r0,#7              ;279
0000f6  fa45f001          ASR      r0,r5,r1              ;279
0000fa  490a              LDR      r1,|L18.292|
0000fc  1d09              ADDS     r1,r1,#4              ;279
0000fe  6809              LDR      r1,[r1,#0]            ;279
000100  4a0a              LDR      r2,|L18.300|
000102  f8521021          LDR      r1,[r2,r1,LSL #2]     ;279
000106  ea000501          AND      r5,r0,r1              ;279
00010a  4806              LDR      r0,|L18.292|
00010c  3810              SUBS     r0,r0,#0x10           ;280
00010e  6800              LDR      r0,[r0,#0]            ;280
000110  4904              LDR      r1,|L18.292|
000112  1d09              ADDS     r1,r1,#4              ;280
000114  6809              LDR      r1,[r1,#0]            ;280
000116  4401              ADD      r1,r1,r0              ;280
000118  4802              LDR      r0,|L18.292|
00011a  3810              SUBS     r0,r0,#0x10           ;280
00011c  6001              STR      r1,[r0,#0]            ;280
00011e  4628              MOV      r0,r5                 ;281
000120  e779              B        |L18.22|
;;;283    
                          ENDP

000122  0000              DCW      0x0000
                  |L18.292|
                          DCD      _LZWContext+0x3cd0
                  |L18.296|
                          DCD      _LZWContext
                  |L18.300|
                          DCD      _aMaskTbl

                          AREA ||i._GetSizeAndColorTable||, CODE, READONLY, ALIGN=1

                  _GetSizeAndColorTable PROC
;;;655    */
;;;656    static int _GetSizeAndColorTable(const U8 * pData, U32 NumBytes, int * pxSize, int * pySize, int * pNumColors) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;657      /* Initialize decoding */
;;;658      if (_InitGIFDecoding(pData, NumBytes)) {
000010  4639              MOV      r1,r7
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       _InitGIFDecoding
000018  b110              CBZ      r0,|L19.32|
;;;659        return 1; /* Error */
00001a  2001              MOVS     r0,#1
                  |L19.28|
;;;660      }
;;;661      /* Get image size */
;;;662      if (_GetImageDimension(pxSize, pySize)) {
;;;663        return 1; /* Error */
;;;664      }
;;;665      /* Get global color table (if available) */
;;;666      if (_GetGlobalColorTable(pNumColors)) {
;;;667        return 1; /* Error */
;;;668      }
;;;669      return 0;
;;;670    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L19.32|
000020  4629              MOV      r1,r5                 ;662
000022  4620              MOV      r0,r4                 ;662
000024  f7fffffe          BL       _GetImageDimension
000028  b108              CBZ      r0,|L19.46|
00002a  2001              MOVS     r0,#1                 ;663
00002c  e7f6              B        |L19.28|
                  |L19.46|
00002e  4640              MOV      r0,r8                 ;666
000030  f7fffffe          BL       _GetGlobalColorTable
000034  b108              CBZ      r0,|L19.58|
000036  2001              MOVS     r0,#1                 ;667
000038  e7f0              B        |L19.28|
                  |L19.58|
00003a  2000              MOVS     r0,#0                 ;669
00003c  e7ee              B        |L19.28|
;;;671    
                          ENDP


                          AREA ||i._InitGIFDecoding||, CODE, READONLY, ALIGN=2

                  _InitGIFDecoding PROC
;;;573    */
;;;574    static int _InitGIFDecoding(const U8 * pData, U32 NumBytes) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;575      U8 acVersion[7] = {0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;576      _Source.pSrc     = pData;
00000c  4815              LDR      r0,|L20.100|
00000e  6005              STR      r5,[r0,#0]  ; _Source
;;;577      _Source.RemBytes = NumBytes;
000010  6044              STR      r4,[r0,#4]  ; _Source
;;;578      /* Check if the file is a legal GIF file by checking the 6 byte file header */
;;;579      _ReadBytes(acVersion, 6); if (!_Source.RemBytes) { return 0; }
000012  2106              MOVS     r1,#6
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       _ReadBytes
00001a  4812              LDR      r0,|L20.100|
00001c  6840              LDR      r0,[r0,#4]  ; _Source
00001e  b908              CBNZ     r0,|L20.36|
000020  2000              MOVS     r0,#0
                  |L20.34|
;;;580      if ( (acVersion[0] != 'G') || 
;;;581           (acVersion[1] != 'I') || 
;;;582           (acVersion[2] != 'F') || 
;;;583           (acVersion[3] != '8') ||
;;;584          ((acVersion[4] != '7') && (acVersion[4] != '9')) ||
;;;585           (acVersion[5] != 'a')) {
;;;586        return 1;
;;;587      }
;;;588      return 0;
;;;589    }
000022  bd7c              POP      {r2-r6,pc}
                  |L20.36|
000024  f89d0000          LDRB     r0,[sp,#0]            ;580
000028  2847              CMP      r0,#0x47              ;580
00002a  d117              BNE      |L20.92|
00002c  f89d0001          LDRB     r0,[sp,#1]            ;581
000030  2849              CMP      r0,#0x49              ;581
000032  d113              BNE      |L20.92|
000034  f89d0002          LDRB     r0,[sp,#2]            ;582
000038  2846              CMP      r0,#0x46              ;582
00003a  d10f              BNE      |L20.92|
00003c  f89d0003          LDRB     r0,[sp,#3]            ;583
000040  2838              CMP      r0,#0x38              ;583
000042  d10b              BNE      |L20.92|
000044  f89d0004          LDRB     r0,[sp,#4]            ;584
000048  2837              CMP      r0,#0x37              ;584
00004a  d003              BEQ      |L20.84|
00004c  f89d0004          LDRB     r0,[sp,#4]            ;584
000050  2839              CMP      r0,#0x39              ;584
000052  d103              BNE      |L20.92|
                  |L20.84|
000054  f89d0005          LDRB     r0,[sp,#5]            ;585
000058  2861              CMP      r0,#0x61              ;585
00005a  d001              BEQ      |L20.96|
                  |L20.92|
00005c  2001              MOVS     r0,#1                 ;586
00005e  e7e0              B        |L20.34|
                  |L20.96|
000060  2000              MOVS     r0,#0                 ;588
000062  e7de              B        |L20.34|
;;;590    
                          ENDP

                  |L20.100|
                          DCD      _Source

                          AREA ||i._InitLZW||, CODE, READONLY, ALIGN=2

                  _InitLZW PROC
;;;194    */
;;;195    static void _InitLZW(int InputCodeSize) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;196      GUI__memset((U8 *)&_LZWContext, 0, sizeof(LZW_CONTEXT));
000004  f64342f4          MOV      r2,#0x3cf4
000008  2100              MOVS     r1,#0
00000a  4813              LDR      r0,|L21.88|
00000c  f7fffffe          BL       GUI__memset
;;;197      _LZWContext.SetCodeSize  = InputCodeSize;
000010  4812              LDR      r0,|L21.92|
000012  6004              STR      r4,[r0,#0]
;;;198      _LZWContext.CodeSize     = InputCodeSize + 1;
000014  1c60              ADDS     r0,r4,#1
000016  4911              LDR      r1,|L21.92|
000018  1f09              SUBS     r1,r1,#4
00001a  6008              STR      r0,[r1,#0]
;;;199      _LZWContext.ClearCode    = (1 << InputCodeSize);
00001c  2001              MOVS     r0,#1
00001e  40a0              LSLS     r0,r0,r4
000020  3110              ADDS     r1,r1,#0x10
000022  6008              STR      r0,[r1,#0]
;;;200      _LZWContext.EndCode      = (1 << InputCodeSize) + 1;
000024  2001              MOVS     r0,#1
000026  40a0              LSLS     r0,r0,r4
000028  1c40              ADDS     r0,r0,#1
00002a  1d09              ADDS     r1,r1,#4
00002c  6008              STR      r0,[r1,#0]
;;;201      _LZWContext.MaxCode      = (1 << InputCodeSize) + 2;
00002e  2001              MOVS     r0,#1
000030  40a0              LSLS     r0,r0,r4
000032  1c80              ADDS     r0,r0,#2
000034  390c              SUBS     r1,r1,#0xc
000036  6008              STR      r0,[r1,#0]
;;;202      _LZWContext.MaxCodeSize  = (1 << InputCodeSize) << 1;
000038  2001              MOVS     r0,#1
00003a  40a0              LSLS     r0,r0,r4
00003c  0040              LSLS     r0,r0,#1
00003e  1d09              ADDS     r1,r1,#4
000040  6008              STR      r0,[r1,#0]
;;;203      _LZWContext.ReturnClear  = 1;
000042  2001              MOVS     r0,#1
000044  3910              SUBS     r1,r1,#0x10
000046  6008              STR      r0,[r1,#0]
;;;204      _LZWContext.LastByte     = 2;
000048  2002              MOVS     r0,#2
00004a  1f09              SUBS     r1,r1,#4
00004c  6008              STR      r0,[r1,#0]
;;;205      _LZWContext.sp           = _LZWContext.aDecompBuffer;
00004e  f6a130ca          SUB      r0,r1,#0xbca
000052  3910              SUBS     r1,r1,#0x10
000054  6008              STR      r0,[r1,#0]
;;;206    }
000056  bd10              POP      {r4,pc}
;;;207    
                          ENDP

                  |L21.88|
                          DCD      _LZWContext
                  |L21.92|
                          DCD      _LZWContext+0x3cd8

                          AREA ||i._ReadBytes||, CODE, READONLY, ALIGN=2

                  _ReadBytes PROC
;;;155    */
;;;156    static void _ReadBytes(U8 * pBuffer, int Len) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;157      if (_Source.RemBytes < 0) {
000006  480f              LDR      r0,|L22.68|
000008  6840              LDR      r0,[r0,#4]  ; _Source
00000a  2800              CMP      r0,#0
00000c  da00              BGE      |L22.16|
                  |L22.14|
;;;158        return;
;;;159      }
;;;160      if (_Source.RemBytes < Len) {
;;;161        Len = _Source.RemBytes;
;;;162        return;
;;;163      }
;;;164      _Source.RemBytes -= Len;
;;;165      memcpy(pBuffer, _Source.pSrc, Len);
;;;166      _Source.pSrc += Len;
;;;167    }
00000e  bd70              POP      {r4-r6,pc}
                  |L22.16|
000010  480c              LDR      r0,|L22.68|
000012  6840              LDR      r0,[r0,#4]            ;160  ; _Source
000014  42a0              CMP      r0,r4                 ;160
000016  da02              BGE      |L22.30|
000018  480a              LDR      r0,|L22.68|
00001a  6844              LDR      r4,[r0,#4]            ;161  ; _Source
00001c  e7f7              B        |L22.14|
                  |L22.30|
00001e  4809              LDR      r0,|L22.68|
000020  6840              LDR      r0,[r0,#4]            ;164  ; _Source
000022  1b00              SUBS     r0,r0,r4              ;164
000024  4907              LDR      r1,|L22.68|
000026  6048              STR      r0,[r1,#4]            ;164  ; _Source
000028  4608              MOV      r0,r1                 ;165
00002a  4622              MOV      r2,r4                 ;165
00002c  6801              LDR      r1,[r0,#0]            ;165  ; _Source
00002e  4628              MOV      r0,r5                 ;165
000030  f7fffffe          BL       __aeabi_memcpy
000034  4803              LDR      r0,|L22.68|
000036  6800              LDR      r0,[r0,#0]            ;166  ; _Source
000038  4420              ADD      r0,r0,r4              ;166
00003a  4902              LDR      r1,|L22.68|
00003c  6008              STR      r0,[r1,#0]            ;166  ; _Source
00003e  bf00              NOP      
000040  e7e5              B        |L22.14|
;;;168    
                          ENDP

000042  0000              DCW      0x0000
                  |L22.68|
                          DCD      _Source

                          AREA ||i._ReadColorMap||, CODE, READONLY, ALIGN=2

                  _ReadColorMap PROC
;;;547    */
;;;548    static int _ReadColorMap(int NumColors) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;549      int i;
;;;550      for (i = 0; i < NumColors; i++) {
000006  2400              MOVS     r4,#0
000008  e017              B        |L23.58|
                  |L23.10|
;;;551        U8 r, g, b;
;;;552        r = _ReadU8 ();
00000a  f7fffffe          BL       _ReadU8
00000e  4606              MOV      r6,r0
;;;553        g = _ReadU8 ();
000010  f7fffffe          BL       _ReadU8
000014  4607              MOV      r7,r0
;;;554        b = _ReadU8 ();
000016  f7fffffe          BL       _ReadU8
00001a  4680              MOV      r8,r0
;;;555        if (_Source.RemBytes < 0) {
00001c  4809              LDR      r0,|L23.68|
00001e  6840              LDR      r0,[r0,#4]  ; _Source
000020  2800              CMP      r0,#0
000022  da02              BGE      |L23.42|
;;;556          return 1; /* Error */
000024  2001              MOVS     r0,#1
                  |L23.38|
;;;557        }
;;;558        _aColorTable[i] = r | ((U16)g << 8) | ((U32)b << 16);
;;;559      }
;;;560      return 0;
;;;561    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L23.42|
00002a  ea462007          ORR      r0,r6,r7,LSL #8       ;558
00002e  ea404008          ORR      r0,r0,r8,LSL #16      ;558
000032  4905              LDR      r1,|L23.72|
000034  f8410024          STR      r0,[r1,r4,LSL #2]     ;558
000038  1c64              ADDS     r4,r4,#1              ;550
                  |L23.58|
00003a  42ac              CMP      r4,r5                 ;550
00003c  dbe5              BLT      |L23.10|
00003e  2000              MOVS     r0,#0                 ;560
000040  e7f1              B        |L23.38|
;;;562    
                          ENDP

000042  0000              DCW      0x0000
                  |L23.68|
                          DCD      _Source
                  |L23.72|
                          DCD      _aColorTable

                          AREA ||i._ReadComment||, CODE, READONLY, ALIGN=2

                  _ReadComment PROC
;;;405    */
;;;406    static int _ReadComment(U8 * pBuffer, int MaxSize, int * pSize) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;407      U8 Label;
;;;408      int Size;
;;;409      Label = _ReadU8();
00000a  f7fffffe          BL       _ReadU8
00000e  4680              MOV      r8,r0
;;;410      switch (Label) {
000010  f1b80f01          CMP      r8,#1
000014  d009              BEQ      |L24.42|
000016  f1b80ff9          CMP      r8,#0xf9
00001a  d020              BEQ      |L24.94|
00001c  f1b80ffe          CMP      r8,#0xfe
000020  d00d              BEQ      |L24.62|
000022  f1b80fff          CMP      r8,#0xff
000026  d128              BNE      |L24.122|
000028  e000              B        |L24.44|
                  |L24.42|
;;;411      case GIF_PLAINTEXT:
;;;412      case GIF_APPLICATION:
00002a  bf00              NOP      
                  |L24.44|
;;;413        while (_GetDataBlock(_aBuffer) > 0);
00002c  bf00              NOP      
                  |L24.46|
00002e  4814              LDR      r0,|L24.128|
000030  f7fffffe          BL       _GetDataBlock
000034  2800              CMP      r0,#0
000036  dcfa              BGT      |L24.46|
;;;414        return 0;
000038  2000              MOVS     r0,#0
                  |L24.58|
;;;415      case GIF_COMMENT:
;;;416        Size = _GetDataBlock(_aBuffer);
;;;417        if (Size > MaxSize) {
;;;418          Size = MaxSize;
;;;419        }
;;;420        if (pBuffer) {
;;;421          *pSize = Size;
;;;422          memcpy(pBuffer, _aBuffer, Size);
;;;423        }
;;;424        return 0;
;;;425      case GIF_GRAPHICCTL:
;;;426        if (_GetDataBlock(_aBuffer) != 4) { /* Length of a graphic control block must be 4 */
;;;427          return 1;
;;;428        }
;;;429        if (_ReadU8() != 0) { /* Read block terminator, must be 0 */
;;;430          return 1;
;;;431        }
;;;432        return 0;
;;;433      }
;;;434      return 1; /* Error */
;;;435    }
00003a  e8bd81f0          POP      {r4-r8,pc}
                  |L24.62|
00003e  4810              LDR      r0,|L24.128|
000040  f7fffffe          BL       _GetDataBlock
000044  4604              MOV      r4,r0                 ;416
000046  42ac              CMP      r4,r5                 ;417
000048  dd00              BLE      |L24.76|
00004a  462c              MOV      r4,r5                 ;418
                  |L24.76|
00004c  b12e              CBZ      r6,|L24.90|
00004e  603c              STR      r4,[r7,#0]            ;421
000050  4622              MOV      r2,r4                 ;422
000052  490b              LDR      r1,|L24.128|
000054  4630              MOV      r0,r6                 ;422
000056  f7fffffe          BL       __aeabi_memcpy
                  |L24.90|
00005a  2000              MOVS     r0,#0                 ;424
00005c  e7ed              B        |L24.58|
                  |L24.94|
00005e  4808              LDR      r0,|L24.128|
000060  f7fffffe          BL       _GetDataBlock
000064  2804              CMP      r0,#4                 ;426
000066  d001              BEQ      |L24.108|
000068  2001              MOVS     r0,#1                 ;427
00006a  e7e6              B        |L24.58|
                  |L24.108|
00006c  f7fffffe          BL       _ReadU8
000070  b108              CBZ      r0,|L24.118|
000072  2001              MOVS     r0,#1                 ;430
000074  e7e1              B        |L24.58|
                  |L24.118|
000076  2000              MOVS     r0,#0                 ;432
000078  e7df              B        |L24.58|
                  |L24.122|
00007a  2001              MOVS     r0,#1                 ;434
00007c  e7dd              B        |L24.58|
;;;436    
                          ENDP

00007e  0000              DCW      0x0000
                  |L24.128|
                          DCD      _aBuffer

                          AREA ||i._ReadExtension||, CODE, READONLY, ALIGN=2

                  _ReadExtension PROC
;;;365    */
;;;366    static int _ReadExtension(int * pTransIndex, GUI_GIF_IMAGE_INFO * pInfo, U8 * pDisposal) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;367      U8 Label;
;;;368      Label = _ReadU8();
00000a  f7fffffe          BL       _ReadU8
00000e  4607              MOV      r7,r0
;;;369      switch (Label) {
000010  2f01              CMP      r7,#1
000012  d006              BEQ      |L25.34|
000014  2ff9              CMP      r7,#0xf9
000016  d00f              BEQ      |L25.56|
000018  2ffe              CMP      r7,#0xfe
00001a  d004              BEQ      |L25.38|
00001c  2fff              CMP      r7,#0xff
00001e  d130              BNE      |L25.130|
000020  e000              B        |L25.36|
                  |L25.34|
;;;370      case GIF_PLAINTEXT:
;;;371      case GIF_APPLICATION:
000022  bf00              NOP      
                  |L25.36|
;;;372      case GIF_COMMENT:
000024  bf00              NOP      
                  |L25.38|
;;;373        while (_GetDataBlock(_aBuffer) > 0);
000026  bf00              NOP      
                  |L25.40|
000028  4817              LDR      r0,|L25.136|
00002a  f7fffffe          BL       _GetDataBlock
00002e  2800              CMP      r0,#0
000030  dcfa              BGT      |L25.40|
;;;374        return 0;
000032  2000              MOVS     r0,#0
                  |L25.52|
;;;375      case GIF_GRAPHICCTL:
;;;376        if (_GetDataBlock(_aBuffer) != 4) { /* Length of a graphic control block must be 4 */
;;;377          return 1;
;;;378        }
;;;379        if (pInfo) {
;;;380          pInfo->Delay    = (_aBuffer[2] << 8) | _aBuffer[1];
;;;381        }
;;;382        if (pDisposal) {
;;;383          *pDisposal = (_aBuffer[0] >> 2) & 0x7;
;;;384        }
;;;385        if (pTransIndex) {
;;;386          if ((_aBuffer[0] & 0x1) != 0) {
;;;387            *pTransIndex = _aBuffer[3];
;;;388          }
;;;389        }
;;;390        if (_ReadU8() != 0) { /* Read block terminator */
;;;391          return 1;
;;;392        }
;;;393        return 0;
;;;394      }
;;;395      return 1; /* Error */
;;;396    }
000034  e8bd81f0          POP      {r4-r8,pc}
                  |L25.56|
000038  4813              LDR      r0,|L25.136|
00003a  f7fffffe          BL       _GetDataBlock
00003e  2804              CMP      r0,#4                 ;376
000040  d001              BEQ      |L25.70|
000042  2001              MOVS     r0,#1                 ;377
000044  e7f6              B        |L25.52|
                  |L25.70|
000046  b135              CBZ      r5,|L25.86|
000048  480f              LDR      r0,|L25.136|
00004a  7840              LDRB     r0,[r0,#1]            ;380  ; _aBuffer
00004c  490e              LDR      r1,|L25.136|
00004e  7889              LDRB     r1,[r1,#2]            ;380  ; _aBuffer
000050  ea402001          ORR      r0,r0,r1,LSL #8       ;380
000054  6128              STR      r0,[r5,#0x10]         ;380
                  |L25.86|
000056  b126              CBZ      r6,|L25.98|
000058  480b              LDR      r0,|L25.136|
00005a  7800              LDRB     r0,[r0,#0]            ;383  ; _aBuffer
00005c  f3c00082          UBFX     r0,r0,#2,#3           ;383
000060  7030              STRB     r0,[r6,#0]            ;383
                  |L25.98|
000062  b13c              CBZ      r4,|L25.116|
000064  4808              LDR      r0,|L25.136|
000066  7800              LDRB     r0,[r0,#0]            ;386  ; _aBuffer
000068  f0100f01          TST      r0,#1                 ;386
00006c  d002              BEQ      |L25.116|
00006e  4806              LDR      r0,|L25.136|
000070  78c0              LDRB     r0,[r0,#3]            ;387  ; _aBuffer
000072  6020              STR      r0,[r4,#0]            ;387
                  |L25.116|
000074  f7fffffe          BL       _ReadU8
000078  b108              CBZ      r0,|L25.126|
00007a  2001              MOVS     r0,#1                 ;391
00007c  e7da              B        |L25.52|
                  |L25.126|
00007e  2000              MOVS     r0,#0                 ;393
000080  e7d8              B        |L25.52|
                  |L25.130|
000082  2001              MOVS     r0,#1                 ;395
000084  e7d6              B        |L25.52|
;;;397    
                          ENDP

000086  0000              DCW      0x0000
                  |L25.136|
                          DCD      _aBuffer

                          AREA ||i._ReadU16||, CODE, READONLY, ALIGN=1

                  _ReadU16 PROC
;;;139    */
;;;140    static U16 _ReadU16(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;141      U16 Value;
;;;142      U8 Byte0, Byte1;
;;;143      Byte0 = _ReadU8();
000002  f7fffffe          BL       _ReadU8
000006  4605              MOV      r5,r0
;;;144      Byte1 = _ReadU8();
000008  f7fffffe          BL       _ReadU8
00000c  4606              MOV      r6,r0
;;;145      Value = (Byte1 << 8) | Byte0;
00000e  ea452406          ORR      r4,r5,r6,LSL #8
;;;146      return Value;
000012  4620              MOV      r0,r4
;;;147    }
000014  bd70              POP      {r4-r6,pc}
;;;148    
                          ENDP


                          AREA ||i._ReadU8||, CODE, READONLY, ALIGN=2

                  _ReadU8 PROC
;;;122    */
;;;123    static U8 _ReadU8(void) {
000000  480a              LDR      r0,|L27.44|
;;;124      U8 Value;
;;;125      _Source.RemBytes -= 1;
000002  6840              LDR      r0,[r0,#4]  ; _Source
000004  1e40              SUBS     r0,r0,#1
000006  4a09              LDR      r2,|L27.44|
000008  6050              STR      r0,[r2,#4]  ; _Source
;;;126      if (_Source.RemBytes < 0) {
00000a  4610              MOV      r0,r2
00000c  6840              LDR      r0,[r0,#4]  ; _Source
00000e  2800              CMP      r0,#0
000010  da01              BGE      |L27.22|
;;;127        return 0;
000012  2000              MOVS     r0,#0
                  |L27.20|
;;;128      }
;;;129      Value = *(_Source.pSrc++);
;;;130      return Value;
;;;131    }
000014  4770              BX       lr
                  |L27.22|
000016  4805              LDR      r0,|L27.44|
000018  6800              LDR      r0,[r0,#0]            ;129  ; _Source
00001a  7801              LDRB     r1,[r0,#0]            ;129
00001c  4803              LDR      r0,|L27.44|
00001e  6800              LDR      r0,[r0,#0]            ;129  ; _Source
000020  1c40              ADDS     r0,r0,#1              ;129
000022  4a02              LDR      r2,|L27.44|
000024  6010              STR      r0,[r2,#0]            ;129  ; _Source
000026  4608              MOV      r0,r1                 ;130
000028  e7f4              B        |L27.20|
;;;132    
                          ENDP

00002a  0000              DCW      0x0000
                  |L27.44|
                          DCD      _Source

                          AREA ||i._SkipBytes||, CODE, READONLY, ALIGN=2

                  _SkipBytes PROC
;;;175    */
;;;176    static void _SkipBytes(int Len) {
000000  490b              LDR      r1,|L28.48|
;;;177      if (_Source.RemBytes < 0) {
000002  6849              LDR      r1,[r1,#4]  ; _Source
000004  2900              CMP      r1,#0
000006  da00              BGE      |L28.10|
                  |L28.8|
;;;178        return;
;;;179      }
;;;180      if (_Source.RemBytes < Len) {
;;;181        Len = _Source.RemBytes;
;;;182        return;
;;;183      }
;;;184      _Source.RemBytes -= Len;
;;;185      _Source.pSrc += Len;
;;;186    }
000008  4770              BX       lr
                  |L28.10|
00000a  4909              LDR      r1,|L28.48|
00000c  6849              LDR      r1,[r1,#4]            ;180  ; _Source
00000e  4281              CMP      r1,r0                 ;180
000010  da02              BGE      |L28.24|
000012  4907              LDR      r1,|L28.48|
000014  6848              LDR      r0,[r1,#4]            ;181  ; _Source
000016  e7f7              B        |L28.8|
                  |L28.24|
000018  4905              LDR      r1,|L28.48|
00001a  6849              LDR      r1,[r1,#4]            ;184  ; _Source
00001c  1a09              SUBS     r1,r1,r0              ;184
00001e  4a04              LDR      r2,|L28.48|
000020  6051              STR      r1,[r2,#4]            ;184  ; _Source
000022  4611              MOV      r1,r2                 ;185
000024  6809              LDR      r1,[r1,#0]            ;185  ; _Source
000026  4401              ADD      r1,r1,r0              ;185
000028  6011              STR      r1,[r2,#0]            ;185  ; _Source
00002a  bf00              NOP      
00002c  e7ec              B        |L28.8|
;;;187    
                          ENDP

00002e  0000              DCW      0x0000
                  |L28.48|
                          DCD      _Source

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _LZWContext
                          %        15604
                  _aColorTable
                          %        1024
                  _aBuffer
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _aMaskTbl
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000003
                          DCD      0x00000007
                          DCD      0x0000000f
                          DCD      0x0000001f
                          DCD      0x0000003f
                          DCD      0x0000007f
                          DCD      0x000000ff
                          DCD      0x000001ff
                          DCD      0x000003ff
                          DCD      0x000007ff
                          DCD      0x00000fff
                          DCD      0x00001fff
                          DCD      0x00003fff
                          DCD      0x00007fff
                  _aInterlaceOffset
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000004
                          DCD      0x00000002
                  _aInterlaceYPos
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000002
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  _Source
                          %        8
