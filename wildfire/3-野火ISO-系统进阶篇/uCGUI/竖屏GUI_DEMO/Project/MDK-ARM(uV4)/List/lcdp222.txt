; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lcdp222.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\lcdp222.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\ConvertColor\LCDP222.c]
                          THUMB

                          AREA ||i.LCD_Color2Index_222||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_222 PROC
;;;31     */
;;;32     unsigned LCD_Color2Index_222(LCD_COLOR Color) {
000000  b530              PUSH     {r4,r5,lr}
000002  4601              MOV      r1,r0
;;;33       int r,g,b;
;;;34       r = ((Color&255)      +0x2a)/0x55;
000004  b2c8              UXTB     r0,r1
000006  302a              ADDS     r0,r0,#0x2a
000008  2555              MOVS     r5,#0x55
00000a  fbb0f2f5          UDIV     r2,r0,r5
;;;35       g = (((Color>>8)&255) +0x2a)/0x55;
00000e  f3c12007          UBFX     r0,r1,#8,#8
000012  302a              ADDS     r0,r0,#0x2a
000014  fbb0f3f5          UDIV     r3,r0,r5
;;;36       b = (((Color>>16)&255)+0x2a)/0x55;
000018  f3c14007          UBFX     r0,r1,#16,#8
00001c  302a              ADDS     r0,r0,#0x2a
00001e  fbb0f4f5          UDIV     r4,r0,r5
;;;37       return r+(g<<2)+(b<<4);
000022  eb020083          ADD      r0,r2,r3,LSL #2
000026  eb001004          ADD      r0,r0,r4,LSL #4
;;;38     }
00002a  bd30              POP      {r4,r5,pc}
;;;39     
                          ENDP


                          AREA ||i.LCD_Color2Index_M222||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_M222 PROC
;;;69     */
;;;70     unsigned LCD_Color2Index_M222(LCD_COLOR Color) {
000000  b530              PUSH     {r4,r5,lr}
000002  4601              MOV      r1,r0
;;;71       int r,g,b;
;;;72       r = ((Color&255)      +0x2a)/0x55;
000004  b2c8              UXTB     r0,r1
000006  302a              ADDS     r0,r0,#0x2a
000008  2555              MOVS     r5,#0x55
00000a  fbb0f2f5          UDIV     r2,r0,r5
;;;73       g = (((Color>>8)&255) +0x2a)/0x55;
00000e  f3c12007          UBFX     r0,r1,#8,#8
000012  302a              ADDS     r0,r0,#0x2a
000014  fbb0f3f5          UDIV     r3,r0,r5
;;;74       b = (((Color>>16)&255)+0x2a)/0x55;
000018  f3c14007          UBFX     r0,r1,#16,#8
00001c  302a              ADDS     r0,r0,#0x2a
00001e  fbb0f4f5          UDIV     r4,r0,r5
;;;75       return b+(g<<2)+(r<<4);
000022  eb040083          ADD      r0,r4,r3,LSL #2
000026  eb001002          ADD      r0,r0,r2,LSL #4
;;;76     }
00002a  bd30              POP      {r4,r5,pc}
;;;77     
                          ENDP


                          AREA ||i.LCD_GetIndexMask_222||, CODE, READONLY, ALIGN=1

                  LCD_GetIndexMask_222 PROC
;;;55     */
;;;56     unsigned LCD_GetIndexMask_222(void) {
000000  203f              MOVS     r0,#0x3f
;;;57       return 0x0003f;
;;;58     }
000002  4770              BX       lr
;;;59     
                          ENDP


                          AREA ||i.LCD_GetIndexMask_M222||, CODE, READONLY, ALIGN=1

                  LCD_GetIndexMask_M222 PROC
;;;93     */
;;;94     unsigned LCD_GetIndexMask_M222(void) {
000000  203f              MOVS     r0,#0x3f
;;;95       return 0x003f;
;;;96     }
000002  4770              BX       lr
;;;97     
                          ENDP


                          AREA ||i.LCD_Index2Color_222||, CODE, READONLY, ALIGN=1

                  LCD_Index2Color_222 PROC
;;;43     */
;;;44     LCD_COLOR LCD_Index2Color_222(int Index) {
000000  b510              PUSH     {r4,lr}
000002  4601              MOV      r1,r0
;;;45       U16P r,g,b;
;;;46       r = ((Index>>0)&3)*0x55;
000004  f0010003          AND      r0,r1,#3
000008  eb001000          ADD      r0,r0,r0,LSL #4
00000c  eb000280          ADD      r2,r0,r0,LSL #2
;;;47       g = ((Index>>2)&3)*0x55;
000010  f3c10081          UBFX     r0,r1,#2,#2
000014  eb001000          ADD      r0,r0,r0,LSL #4
000018  eb000380          ADD      r3,r0,r0,LSL #2
;;;48       b = (Index>>4)    *0x55;
00001c  1108              ASRS     r0,r1,#4
00001e  eb001000          ADD      r0,r0,r0,LSL #4
000022  eb000480          ADD      r4,r0,r0,LSL #2
;;;49       return (((U32)b)<<16)|(g<<8)|r;
000026  0420              LSLS     r0,r4,#16
000028  ea402003          ORR      r0,r0,r3,LSL #8
00002c  4310              ORRS     r0,r0,r2
;;;50     }
00002e  bd10              POP      {r4,pc}
;;;51     
                          ENDP


                          AREA ||i.LCD_Index2Color_M222||, CODE, READONLY, ALIGN=1

                  LCD_Index2Color_M222 PROC
;;;81     */
;;;82     LCD_COLOR LCD_Index2Color_M222(int Index) {
000000  b510              PUSH     {r4,lr}
000002  4601              MOV      r1,r0
;;;83       U16P r,g,b;
;;;84       r = ((Index>>0)&3)*0x55;
000004  f0010003          AND      r0,r1,#3
000008  eb001000          ADD      r0,r0,r0,LSL #4
00000c  eb000280          ADD      r2,r0,r0,LSL #2
;;;85       g = ((Index>>2)&3)*0x55;
000010  f3c10081          UBFX     r0,r1,#2,#2
000014  eb001000          ADD      r0,r0,r0,LSL #4
000018  eb000380          ADD      r3,r0,r0,LSL #2
;;;86       b = (Index>>4)    *0x55;
00001c  1108              ASRS     r0,r1,#4
00001e  eb001000          ADD      r0,r0,r0,LSL #4
000022  eb000080          ADD      r0,r0,r0,LSL #2
000026  b284              UXTH     r4,r0
;;;87       return (((U32)r)<<16)|(g<<8)|b;
000028  0410              LSLS     r0,r2,#16
00002a  ea402003          ORR      r0,r0,r3,LSL #8
00002e  4320              ORRS     r0,r0,r4
;;;88     }
000030  bd10              POP      {r4,pc}
;;;89     
                          ENDP

