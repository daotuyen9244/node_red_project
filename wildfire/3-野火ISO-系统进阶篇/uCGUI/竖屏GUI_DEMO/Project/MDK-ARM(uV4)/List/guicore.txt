; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guicore.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guicore.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\GUICore.c]
                          THUMB

                          AREA ||i.GUI_Clear||, CODE, READONLY, ALIGN=1

                  GUI_Clear PROC
;;;129    */
;;;130    void GUI_Clear(void) {
000000  b510              PUSH     {r4,lr}
;;;131      GUI_GotoXY(0,0);     /* Reset text cursor to upper left */
000002  2100              MOVS     r1,#0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       GUI_GotoXY
;;;132      GUI_ClearRect(GUI_XMIN, GUI_YMIN, GUI_XMAX, GUI_YMAX);
00000a  f64073ff          MOV      r3,#0xfff
00000e  461a              MOV      r2,r3
000010  4259              RSBS     r1,r3,#0
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       GUI_ClearRect
;;;133    }
000018  bd10              POP      {r4,pc}
;;;134    
                          ENDP


                          AREA ||i.GUI_ClearRect||, CODE, READONLY, ALIGN=2

                  GUI_ClearRect PROC
;;;101    */
;;;102    void GUI_ClearRect(int x0, int y0, int x1, int y1) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;103      GUI_DRAWMODE PrevDraw;
;;;104      #if GUI_WINSUPPORT
;;;105        GUI_RECT r;
;;;106      #endif
;;;107      GUI_LOCK();
00000c  f7fffffe          BL       GUI_Lock
;;;108      PrevDraw = LCD_SetDrawMode(GUI_DRAWMODE_REV);
000010  2004              MOVS     r0,#4
000012  f7fffffe          BL       LCD_SetDrawMode
000016  4680              MOV      r8,r0
;;;109      #if GUI_WINSUPPORT
;;;110        WM_ADDORG(x0,y0);
000018  4816              LDR      r0,|L2.116|
00001a  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
00001c  4404              ADD      r4,r4,r0
00001e  4815              LDR      r0,|L2.116|
000020  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000022  4405              ADD      r5,r5,r0
;;;111        WM_ADDORG(x1,y1);
000024  4813              LDR      r0,|L2.116|
000026  6c40              LDR      r0,[r0,#0x44]  ; GUI_Context
000028  4406              ADD      r6,r6,r0
00002a  4812              LDR      r0,|L2.116|
00002c  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00002e  4407              ADD      r7,r7,r0
;;;112        r.x0 = x0;
000030  b220              SXTH     r0,r4
000032  f8ad0000          STRH     r0,[sp,#0]
;;;113        r.x1 = x1;
000036  b230              SXTH     r0,r6
000038  f8ad0004          STRH     r0,[sp,#4]
;;;114        r.y0 = y0;
00003c  b228              SXTH     r0,r5
00003e  f8ad0002          STRH     r0,[sp,#2]
;;;115        r.y1 = y1;
000042  b238              SXTH     r0,r7
000044  f8ad0006          STRH     r0,[sp,#6]
;;;116        WM_ITERATE_START(&r) {
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       WM__InitIVRSearch
00004e  b150              CBZ      r0,|L2.102|
000050  bf00              NOP      
                  |L2.82|
;;;117      #endif
;;;118      LCD_FillRect(x0,y0,x1,y1);
000052  463b              MOV      r3,r7
000054  4632              MOV      r2,r6
000056  4629              MOV      r1,r5
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       LCD_FillRect
;;;119      #if GUI_WINSUPPORT
;;;120        } WM_ITERATE_END();
00005e  f7fffffe          BL       WM__GetNextIVR
000062  2800              CMP      r0,#0
000064  d1f5              BNE      |L2.82|
                  |L2.102|
;;;121      #endif
;;;122      LCD_SetDrawMode(PrevDraw);
000066  4640              MOV      r0,r8
000068  f7fffffe          BL       LCD_SetDrawMode
;;;123      GUI_UNLOCK();
00006c  f7fffffe          BL       GUI_Unlock
;;;124    }
000070  e8bd81fc          POP      {r2-r8,pc}
;;;125    
                          ENDP

                  |L2.116|
                          DCD      GUI_Context

                          AREA ||i.GUI_Init||, CODE, READONLY, ALIGN=2

                  GUI_Init PROC
;;;141    */
;;;142    int GUI_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;143      int r;
;;;144      GUI_DEBUG_LOG("\nGUI_Init()");
;;;145      /* Init system wide globals first */
;;;146      GUI_DecChar = '.';
000002  202e              MOVS     r0,#0x2e
000004  4908              LDR      r1,|L3.40|
000006  7008              STRB     r0,[r1,#0]
;;;147      GUI_X_Init();
000008  f7fffffe          BL       GUI_X_Init
;;;148      /* Init context */
;;;149      _InitContext(&GUI_Context);
00000c  4807              LDR      r0,|L3.44|
00000e  f7fffffe          BL       _InitContext
;;;150      GUITASK_INIT();
000012  f7fffffe          BL       GUITASK_Init
;;;151      r = LCD_Init();
000016  f7fffffe          BL       LCD_Init
00001a  4604              MOV      r4,r0
;;;152      #if GUI_WINSUPPORT
;;;153        WM_Init();
00001c  f7fffffe          BL       WM_Init
;;;154      #endif
;;;155      GUITASK_COPY_CONTEXT();
000020  f7fffffe          BL       GUITASK_CopyContext
;;;156      #if defined(GUI_TRIAL_VERSION)
;;;157        #if GUI_TRIAL_VERSION
;;;158          GUI_DispString(  "This software\n"
;;;159    	                     "contains an eval-\n"
;;;160    	                     "uC/GUI build.\n"
;;;161    	                     "\n"
;;;162    	                     "A license is\n"
;;;163    	                     "required to use\n"
;;;164    	                     "it in a product.\n\n"
;;;165    	                     "www.segger.com\n");
;;;166          GUI_GotoXY(0, 0);
;;;167          GUI_X_Delay(1000);
;;;168          GUI_Clear();
;;;169        #endif
;;;170      #endif
;;;171      return r;
000024  4620              MOV      r0,r4
;;;172    }
000026  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  |L3.40|
                          DCD      GUI_DecChar
                  |L3.44|
                          DCD      GUI_Context

                          AREA ||i._InitContext||, CODE, READONLY, ALIGN=2

                  _InitContext PROC
;;;61     */
;;;62     static void _InitContext(GUI_CONTEXT* pContext) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;63       /* memset(..,0,..) is not required, as this function is called only at startup of the GUI when data is 0 */
;;;64       #if GUI_SUPPORT_DEVICES
;;;65         pContext->pDeviceAPI   = LCD_aAPI[0]; /* &LCD_L0_APIList; */
000004  4812              LDR      r0,|L4.80|
000006  6800              LDR      r0,[r0,#0]  ; LCD_aAPI
000008  64e0              STR      r0,[r4,#0x4c]
;;;66       #endif
;;;67       pContext->pClipRect_HL = &GUI_Context.ClipRect;
00000a  4812              LDR      r0,|L4.84|
00000c  6160              STR      r0,[r4,#0x14]
;;;68       LCD_L0_GetRect(&pContext->ClipRect);
00000e  f1040008          ADD      r0,r4,#8
000012  f7fffffe          BL       LCD_L0_GetRect
;;;69       #if GUI_SUPPORT_AA
;;;70         pContext->pLCD_HL      = &_HL_APIList;
000016  4810              LDR      r0,|L4.88|
000018  65e0              STR      r0,[r4,#0x5c]
;;;71       #endif
;;;72       pContext->pAFont       = GUI_DEFAULT_FONT;
00001a  4810              LDR      r0,|L4.92|
00001c  61e0              STR      r0,[r4,#0x1c]
;;;73       pContext->pClipRect_HL = &GUI_Context.ClipRect;
00001e  480d              LDR      r0,|L4.84|
000020  6160              STR      r0,[r4,#0x14]
;;;74       pContext->PenSize      = 1;
000022  2001              MOVS     r0,#1
000024  7620              STRB     r0,[r4,#0x18]
;;;75       /* Variables in WM module */
;;;76       #if GUI_WINSUPPORT
;;;77         pContext->hAWin    = WM_GetDesktopWindow();
000026  f7fffffe          BL       WM_GetDesktopWindow
00002a  f8a40040          STRH     r0,[r4,#0x40]
;;;78       #endif
;;;79       /* Variables in GUI_AA module */
;;;80       #if GUI_SUPPORT_AA
;;;81         pContext->AA_Factor = 3;
00002e  2003              MOVS     r0,#3
000030  f8840060          STRB     r0,[r4,#0x60]
;;;82       #endif
;;;83       pContext->Color   = GUI_INVALID_COLOR;
000034  f06f4070          MVN      r0,#0xf0000000
000038  6360              STR      r0,[r4,#0x34]
;;;84       pContext->BkColor = GUI_INVALID_COLOR;
00003a  63a0              STR      r0,[r4,#0x38]
;;;85       LCD_SetBkColor(GUI_DEFAULT_BKCOLOR);
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       LCD_SetBkColor
;;;86       LCD_SetColor(GUI_DEFAULT_COLOR);
000042  f06f407f          MVN      r0,#0xff000000
000046  f7fffffe          BL       LCD_SetColor
;;;87       #if GUI_SUPPORT_UNICODE
;;;88        pContext->pUC_API = &GUI_UC_None;
00004a  4805              LDR      r0,|L4.96|
00004c  6220              STR      r0,[r4,#0x20]
;;;89       #endif
;;;90     }
00004e  bd10              POP      {r4,pc}
;;;91     
                          ENDP

                  |L4.80|
                          DCD      LCD_aAPI
                  |L4.84|
                          DCD      GUI_Context+0x8
                  |L4.88|
                          DCD      _HL_APIList
                  |L4.92|
                          DCD      GUI_Font6x8
                  |L4.96|
                          DCD      GUI_UC_None

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  GUI_Context
                          %        100

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _HL_APIList
                          DCD      LCD_DrawHLine
                          DCD      LCD_DrawPixel

                          AREA ||.data||, DATA, ALIGN=2

                  GUI_DecChar
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  GUI_pfTimerExec
                          DCD      0x00000000
                  WM_pfHandlePID
                          DCD      0x00000000
                  GUI_pfDispCharStyle
                          DCD      0x00000000
                  GUI_pLCD_APIList
                          DCD      0x00000000
                  GUI_CURSOR_pfTempHide
                          DCD      0x00000000
                  GUI_CURSOR_pfTempUnhide
                          DCD      0x00000000
                  GUI_OrgX
00001c  0000              DCB      0x00,0x00
                  GUI_OrgY
00001e  0000              DCB      0x00,0x00
                  GUI_MoveRTL
000020  00                DCB      0x00
