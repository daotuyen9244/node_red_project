; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\text.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\text.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Widget\TEXT.c]
                          THUMB

                          AREA ||i.TEXT_Callback||, CODE, READONLY, ALIGN=1

                  TEXT_Callback PROC
;;;159    */
;;;160    void TEXT_Callback (WM_MESSAGE*pMsg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;161      TEXT_Handle hObj;
;;;162      TEXT_Obj * pObj;
;;;163      hObj = pMsg->hWin;
000004  f9b45004          LDRSH    r5,[r4,#4]
;;;164      pObj = (TEXT_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       GUI_ALLOC_h2p
00000e  4606              MOV      r6,r0
;;;165      /* Let widget handle the standard messages */
;;;166      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       WIDGET_HandleActive
000018  b900              CBNZ     r0,|L1.28|
                  |L1.26|
;;;167        return;
;;;168      }
;;;169      switch (pMsg->MsgId) {
;;;170      case WM_PAINT:
;;;171        GUI_DEBUG_LOG("TEXT: _Callback(WM_PAINT)\n");
;;;172        _Paint(hObj, pObj);
;;;173        return;
;;;174      case WM_DELETE:
;;;175        GUI_DEBUG_LOG("TEXT: _Callback(WM_DELETE)\n");
;;;176        _Delete(pObj);
;;;177        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;178      }
;;;179      WM_DefaultProc(pMsg);
;;;180    }
00001a  bd70              POP      {r4-r6,pc}
                  |L1.28|
00001c  6820              LDR      r0,[r4,#0]            ;169
00001e  280b              CMP      r0,#0xb               ;169
000020  d006              BEQ      |L1.48|
000022  280f              CMP      r0,#0xf               ;169
000024  d108              BNE      |L1.56|
000026  4631              MOV      r1,r6                 ;172
000028  4628              MOV      r0,r5                 ;172
00002a  f7fffffe          BL       _Paint
00002e  e7f4              B        |L1.26|
                  |L1.48|
000030  4630              MOV      r0,r6                 ;176
000032  f7fffffe          BL       _Delete
000036  bf00              NOP                            ;177
                  |L1.56|
000038  bf00              NOP                            ;177
00003a  4620              MOV      r0,r4                 ;179
00003c  f7fffffe          BL       WM_DefaultProc
000040  bf00              NOP      
000042  e7ea              B        |L1.26|
;;;181    
                          ENDP


                          AREA ||i.TEXT_CreateEx||, CODE, READONLY, ALIGN=2

                  TEXT_CreateEx PROC
;;;195    */
;;;196    TEXT_Handle TEXT_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;197                              int WinFlags, int ExFlags, int Id, const char* pText)
;;;198    {
000004  b085              SUB      sp,sp,#0x14
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
00000a  9f13              LDR      r7,[sp,#0x4c]
00000c  9d16              LDR      r5,[sp,#0x58]
;;;199      TEXT_Handle hObj;
;;;200      /* Create the window */
;;;201      #if TEXT_SUPPORT_TRANSPARENCY
;;;202        WinFlags |= WM_CF_HASTRANS;
00000e  f0470701          ORR      r7,r7,#1
;;;203      #endif
;;;204      WM_LOCK();
000012  f7fffffe          BL       GUI_Lock
;;;205      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, TEXT_Callback,
000016  221c              MOVS     r2,#0x1c
000018  4b1e              LDR      r3,|L2.148|
00001a  b2b8              UXTH     r0,r7
00001c  9912              LDR      r1,[sp,#0x48]
00001e  e9cd3202          STRD     r3,r2,[sp,#8]
000022  e9cd1000          STRD     r1,r0,[sp,#0]
000026  4651              MOV      r1,r10
000028  4648              MOV      r0,r9
00002a  e9dd2307          LDRD     r2,r3,[sp,#0x1c]
00002e  f7fffffe          BL       WM_CreateWindowAsChild
000032  4680              MOV      r8,r0
;;;206                                    sizeof(TEXT_Obj) - sizeof(WM_Obj));
;;;207      if (hObj) {
000034  f1b80f00          CMP      r8,#0
000038  d026              BEQ      |L2.136|
;;;208        TEXT_Obj* pObj;
;;;209        WM_HMEM hMem = 0;
00003a  2600              MOVS     r6,#0
;;;210        pObj = (TEXT_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
00003c  4640              MOV      r0,r8
00003e  f7fffffe          BL       GUI_ALLOC_h2p
000042  4604              MOV      r4,r0
;;;211        /* init widget specific variables */
;;;212        WIDGET__Init(&pObj->Widget, Id, 0);
000044  2200              MOVS     r2,#0
000046  4620              MOV      r0,r4
000048  9915              LDR      r1,[sp,#0x54]
00004a  f7fffffe          BL       WIDGET__Init
;;;213        /* init member variables */
;;;214        TEXT_INIT_ID(pObj);
;;;215        if (pText) {
00004e  b18d              CBZ      r5,|L2.116|
;;;216          hMem = GUI_ALLOC_AllocZero(strlen(pText) + 1);
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       strlen
000056  1c40              ADDS     r0,r0,#1
000058  fa0ffb80          SXTH     r11,r0
00005c  4658              MOV      r0,r11
00005e  f7fffffe          BL       GUI_ALLOC_AllocZero
000062  4606              MOV      r6,r0
;;;217          if (hMem) {
000064  b136              CBZ      r6,|L2.116|
;;;218            strcpy((char*) GUI_ALLOC_h2p(hMem), pText);
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       GUI_ALLOC_h2p
00006c  4683              MOV      r11,r0
00006e  4629              MOV      r1,r5
000070  f7fffffe          BL       strcpy
                  |L2.116|
;;;219          }
;;;220        }
;;;221        pObj->hpText = hMem;
000074  8726              STRH     r6,[r4,#0x38]
;;;222        pObj->Align  = ExFlags;
000076  9814              LDR      r0,[sp,#0x50]
000078  b200              SXTH     r0,r0
00007a  8760              STRH     r0,[r4,#0x3a]
;;;223        pObj->Props  = TEXT__DefaultProps;
00007c  4b06              LDR      r3,|L2.152|
00007e  cb0f              LDM      r3,{r0-r3}
000080  3428              ADDS     r4,r4,#0x28
000082  c40f              STM      r4!,{r0-r3}
000084  3c38              SUBS     r4,r4,#0x38
;;;224      } else {
000086  bf00              NOP      
                  |L2.136|
;;;225        GUI_DEBUG_ERROROUT_IF(hObj==0, "TEXT_Create failed")
;;;226      }
;;;227      WM_UNLOCK();
000088  f7fffffe          BL       GUI_Unlock
;;;228      return hObj;
00008c  4640              MOV      r0,r8
;;;229    }
00008e  b009              ADD      sp,sp,#0x24
000090  e8bd8ff0          POP      {r4-r11,pc}
;;;230    
                          ENDP

                  |L2.148|
                          DCD      TEXT_Callback
                  |L2.152|
                          DCD      TEXT__DefaultProps

                          AREA ||i._Delete||, CODE, READONLY, ALIGN=1

                  _Delete PROC
;;;120    */
;;;121    static void _Delete(TEXT_Obj* pObj) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;122      /* Delete attached objects (if any) */
;;;123      GUI_DEBUG_LOG("TEXT: Delete() Deleting attached items");
;;;124      _FreeAttached(pObj);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _FreeAttached
;;;125    }
00000a  bd10              POP      {r4,pc}
;;;126    
                          ENDP


                          AREA ||i._FreeAttached||, CODE, READONLY, ALIGN=1

                  _FreeAttached PROC
;;;79     */
;;;80     static void _FreeAttached(TEXT_Obj* pObj) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;81       GUI_ALLOC_FreePtr(&pObj->hpText);
000004  f1040038          ADD      r0,r4,#0x38
000008  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;82     }
00000c  bd10              POP      {r4,pc}
;;;83     
                          ENDP


                          AREA ||i._Paint||, CODE, READONLY, ALIGN=1

                  _Paint PROC
;;;87     */
;;;88     static void _Paint(TEXT_Handle hObj, TEXT_Obj* pObj) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;89       const char * s;
;;;90       GUI_RECT Rect;
;;;91       GUI_USE_PARA(hObj);
000006  bf00              NOP      
;;;92       LCD_SetColor(pObj->Props.TextColor);
000008  6ae0              LDR      r0,[r4,#0x2c]
00000a  f7fffffe          BL       LCD_SetColor
;;;93       GUI_SetFont    (pObj->Props.pFont);
00000e  6aa0              LDR      r0,[r4,#0x28]
000010  f7fffffe          BL       GUI_SetFont
;;;94       /* Fill with parents background color */
;;;95       #if !TEXT_SUPPORT_TRANSPARENCY   /* Not needed any more, since window is transparent*/
;;;96         if (pObj->Props.BkColor == GUI_INVALID_COLOR) {
;;;97           LCD_SetBkColor(WIDGET__GetBkColor(hObj));
;;;98         } else {
;;;99           LCD_SetBkColor(pObj->Props.BkColor);
;;;100        }
;;;101        GUI_Clear();
;;;102      #else
;;;103        if (!WM_GetHasTrans(hObj)) {
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       WM_GetHasTrans
00001a  b920              CBNZ     r0,|L5.38|
;;;104          LCD_SetBkColor(pObj->Props.BkColor);
00001c  6b20              LDR      r0,[r4,#0x30]
00001e  f7fffffe          BL       LCD_SetBkColor
;;;105          GUI_Clear();
000022  f7fffffe          BL       GUI_Clear
                  |L5.38|
;;;106        }
;;;107      #endif
;;;108      /* Show the text */
;;;109      if (pObj->hpText) {
000026  8f20              LDRH     r0,[r4,#0x38]
000028  b190              CBZ      r0,|L5.80|
;;;110        s = (const char*) GUI_ALLOC_h2p(pObj->hpText);
00002a  f9b40038          LDRSH    r0,[r4,#0x38]
00002e  f7fffffe          BL       GUI_ALLOC_h2p
000032  4606              MOV      r6,r0
;;;111        GUI_SetTextMode(GUI_TM_TRANS);
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       GUI_SetTextMode
;;;112        WM_GetClientRect(&Rect);
00003a  4668              MOV      r0,sp
00003c  f7fffffe          BL       WM_GetClientRect
;;;113        GUI_DispStringInRectWrap(s, &Rect, pObj->Align, pObj->Props.WrapMode);
000040  2034              MOVS     r0,#0x34
000042  5d03              LDRB     r3,[r0,r4]
000044  f9b4203a          LDRSH    r2,[r4,#0x3a]
000048  4669              MOV      r1,sp
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       GUI_DispStringInRectWrap
                  |L5.80|
;;;114      }
;;;115    }
000050  bd7c              POP      {r2-r6,pc}
;;;116    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  TEXT__DefaultProps
                          DCD      GUI_Font13_1
                          DCD      0x00000000
                          DCD      0x0fffffff
00000c  00000000          DCB      0x00,0x00,0x00,0x00
