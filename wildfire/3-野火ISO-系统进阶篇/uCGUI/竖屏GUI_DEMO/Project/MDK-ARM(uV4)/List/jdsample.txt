; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\jdsample.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\jdsample.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\JPEG\jdsample.c]
                          THUMB

                          AREA ||i.fullsize_upsample||, CODE, READONLY, ALIGN=1

                  fullsize_upsample PROC
;;;157    METHODDEF(void)
;;;158    fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  bf00              NOP      
;;;159    		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;160    {
;;;161      GUI_USE_PARA(compptr);
;;;162      GUI_USE_PARA(cinfo);
000002  bf00              NOP      
;;;163      *output_data_ptr = input_data;
000004  601a              STR      r2,[r3,#0]
;;;164    }
000006  4770              BX       lr
;;;165    
                          ENDP


                          AREA ||i.h2v1_fancy_upsample||, CODE, READONLY, ALIGN=1

                  h2v1_fancy_upsample PROC
;;;311    METHODDEF(void)
;;;312    h2v1_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;313    		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;314    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;315      JSAMPARRAY output_data = *output_data_ptr;
00000c  f8d78000          LDR      r8,[r7,#0]
;;;316      register JSAMPROW inptr, outptr;
;;;317      register int invalue;
;;;318      register JDIMENSION colctr;
;;;319      int inrow;
;;;320    
;;;321      for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
000010  2300              MOVS     r3,#0
000012  e040              B        |L2.150|
                  |L2.20|
;;;322        inptr = input_data[inrow];
000014  f8561023          LDR      r1,[r6,r3,LSL #2]
;;;323        outptr = output_data[inrow];
000018  f8580023          LDR      r0,[r8,r3,LSL #2]
;;;324        /* Special case for first column */
;;;325        invalue = GETJSAMPLE(*inptr++);
00001c  f8112b01          LDRB     r2,[r1],#1
;;;326        *outptr++ = (JSAMPLE) invalue;
000020  f8002b01          STRB     r2,[r0],#1
;;;327        *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(*inptr) + 2) >> 2);
000024  eb020942          ADD      r9,r2,r2,LSL #1
000028  f891a000          LDRB     r10,[r1,#0]
00002c  44d1              ADD      r9,r9,r10
00002e  f1090902          ADD      r9,r9,#2
000032  f3c90987          UBFX     r9,r9,#2,#8
000036  f8009b01          STRB     r9,[r0],#1
;;;328    
;;;329        for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
00003a  f8d59028          LDR      r9,[r5,#0x28]
00003e  f1a90c02          SUB      r12,r9,#2
000042  e017              B        |L2.116|
                  |L2.68|
;;;330          /* General case: 3/4 * nearer pixel + 1/4 * further pixel */
;;;331          invalue = GETJSAMPLE(*inptr++) * 3;
000044  f811ab01          LDRB     r10,[r1],#1
000048  eb0a024a          ADD      r2,r10,r10,LSL #1
;;;332          *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(inptr[-2]) + 1) >> 2);
00004c  f8119c02          LDRB     r9,[r1,#-2]
000050  4491              ADD      r9,r9,r2
000052  f1090901          ADD      r9,r9,#1
000056  f3c90987          UBFX     r9,r9,#2,#8
00005a  f8009b01          STRB     r9,[r0],#1
;;;333          *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(*inptr) + 2) >> 2);
00005e  f8919000          LDRB     r9,[r1,#0]
000062  4491              ADD      r9,r9,r2
000064  f1090902          ADD      r9,r9,#2
000068  f3c90987          UBFX     r9,r9,#2,#8
00006c  f8009b01          STRB     r9,[r0],#1
000070  f1ac0c01          SUB      r12,r12,#1            ;329
                  |L2.116|
000074  f1bc0f00          CMP      r12,#0                ;329
000078  d1e4              BNE      |L2.68|
;;;334        }
;;;335    
;;;336        /* Special case for last column */
;;;337        invalue = GETJSAMPLE(*inptr);
00007a  780a              LDRB     r2,[r1,#0]
;;;338        *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(inptr[-1]) + 1) >> 2);
00007c  eb020942          ADD      r9,r2,r2,LSL #1
000080  f811ac01          LDRB     r10,[r1,#-1]
000084  44d1              ADD      r9,r9,r10
000086  f1090901          ADD      r9,r9,#1
00008a  f3c90987          UBFX     r9,r9,#2,#8
00008e  f8009b01          STRB     r9,[r0],#1
;;;339        *outptr   = (JSAMPLE) invalue;
000092  7002              STRB     r2,[r0,#0]
000094  1c5b              ADDS     r3,r3,#1              ;321
                  |L2.150|
000096  f8d49138          LDR      r9,[r4,#0x138]        ;321
00009a  4599              CMP      r9,r3                 ;321
00009c  dcba              BGT      |L2.20|
;;;340      }
;;;341    }
00009e  e8bd87f0          POP      {r4-r10,pc}
;;;342    
                          ENDP


                          AREA ||i.h2v1_upsample||, CODE, READONLY, ALIGN=1

                  h2v1_upsample PROC
;;;238    METHODDEF(void)
;;;239    h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;240    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;241    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;242      JSAMPARRAY output_data = *output_data_ptr;
00000a  f8d38000          LDR      r8,[r3,#0]
;;;243      register JSAMPROW inptr, outptr;
;;;244      register JSAMPLE invalue;
;;;245      JSAMPROW outend;
;;;246      int inrow;
;;;247    
;;;248      GUI_USE_PARA(compptr);
00000e  bf00              NOP      
;;;249      for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
000010  2100              MOVS     r1,#0
000012  e011              B        |L3.56|
                  |L3.20|
;;;250        inptr = input_data[inrow];
000014  f8567021          LDR      r7,[r6,r1,LSL #2]
;;;251        outptr = output_data[inrow];
000018  f8580021          LDR      r0,[r8,r1,LSL #2]
;;;252        outend = outptr + cinfo->output_width;
00001c  f8d49070          LDR      r9,[r4,#0x70]
000020  eb090c00          ADD      r12,r9,r0
;;;253        while (outptr < outend) {
000024  e005              B        |L3.50|
                  |L3.38|
;;;254          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
000026  f8172b01          LDRB     r2,[r7],#1
;;;255          *outptr++ = invalue;
00002a  f8002b01          STRB     r2,[r0],#1
;;;256          *outptr++ = invalue;
00002e  f8002b01          STRB     r2,[r0],#1
                  |L3.50|
000032  4560              CMP      r0,r12                ;253
000034  d3f7              BCC      |L3.38|
000036  1c49              ADDS     r1,r1,#1              ;249
                  |L3.56|
000038  f8d49138          LDR      r9,[r4,#0x138]        ;249
00003c  4589              CMP      r9,r1                 ;249
00003e  dce9              BGT      |L3.20|
;;;257        }
;;;258      }
;;;259    }
000040  e8bd83f0          POP      {r4-r9,pc}
;;;260    
                          ENDP


                          AREA ||i.h2v2_fancy_upsample||, CODE, READONLY, ALIGN=1

                  h2v2_fancy_upsample PROC
;;;352    METHODDEF(void)
;;;353    h2v2_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;354    		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;355    {
000004  b081              SUB      sp,sp,#4
000006  4614              MOV      r4,r2
;;;356      JSAMPARRAY output_data = *output_data_ptr;
000008  f8dda010          LDR      r10,[sp,#0x10]
00000c  f8daa000          LDR      r10,[r10,#0]
000010  f8cda000          STR      r10,[sp,#0]
;;;357      register JSAMPROW inptr0, inptr1, outptr;
;;;358    #if BITS_IN_JSAMPLE == 8
;;;359      register int thiscolsum, lastcolsum, nextcolsum;
;;;360    #else
;;;361      register INT32 thiscolsum, lastcolsum, nextcolsum;
;;;362    #endif
;;;363      register JDIMENSION colctr;
;;;364      int inrow, outrow, v;
;;;365    
;;;366      inrow = outrow = 0;
000014  f04f0a00          MOV      r10,#0
000018  46d1              MOV      r9,r10
00001a  4656              MOV      r6,r10
;;;367      while (outrow < cinfo->max_v_samp_factor) {
00001c  e074              B        |L4.264|
                  |L4.30|
;;;368        for (v = 0; v < 2; v++) {
00001e  2700              MOVS     r7,#0
000020  e06f              B        |L4.258|
                  |L4.34|
;;;369          /* inptr0 points to nearest input row, inptr1 points to next nearest */
;;;370          inptr0 = input_data[inrow];
000022  f8542026          LDR      r2,[r4,r6,LSL #2]
;;;371          if (v == 0)		/* next nearest is row above */
000026  b927              CBNZ     r7,|L4.50|
;;;372    	inptr1 = input_data[inrow-1];
000028  f1a60a01          SUB      r10,r6,#1
00002c  f854302a          LDR      r3,[r4,r10,LSL #2]
000030  e003              B        |L4.58|
                  |L4.50|
;;;373          else			/* next nearest is row below */
;;;374    	inptr1 = input_data[inrow+1];
000032  f1060a01          ADD      r10,r6,#1
000036  f854302a          LDR      r3,[r4,r10,LSL #2]
                  |L4.58|
;;;375          outptr = output_data[outrow++];
00003a  46ca              MOV      r10,r9
00003c  f1090901          ADD      r9,r9,#1
000040  f8ddb000          LDR      r11,[sp,#0]
000044  f85b002a          LDR      r0,[r11,r10,LSL #2]
;;;376    
;;;377          /* Special case for first column */
;;;378          thiscolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
000048  f812bb01          LDRB     r11,[r2],#1
00004c  eb0b0a4b          ADD      r10,r11,r11,LSL #1
000050  f813bb01          LDRB     r11,[r3],#1
000054  eb0a010b          ADD      r1,r10,r11
;;;379          nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
000058  f812bb01          LDRB     r11,[r2],#1
00005c  eb0b0a4b          ADD      r10,r11,r11,LSL #1
000060  f813bb01          LDRB     r11,[r3],#1
000064  eb0a050b          ADD      r5,r10,r11
;;;380          *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 8) >> 4);
000068  f04f0a08          MOV      r10,#8
00006c  eb0a0a81          ADD      r10,r10,r1,LSL #2
000070  f3ca1a07          UBFX     r10,r10,#4,#8
000074  f800ab01          STRB     r10,[r0],#1
;;;381          *outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
000078  eb010a41          ADD      r10,r1,r1,LSL #1
00007c  44aa              ADD      r10,r10,r5
00007e  f10a0a07          ADD      r10,r10,#7
000082  f3ca1a07          UBFX     r10,r10,#4,#8
000086  f800ab01          STRB     r10,[r0],#1
;;;382          lastcolsum = thiscolsum; thiscolsum = nextcolsum;
00008a  468c              MOV      r12,r1
00008c  4629              MOV      r1,r5
;;;383    
;;;384          for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
00008e  f8dda008          LDR      r10,[sp,#8]
000092  f8daa028          LDR      r10,[r10,#0x28]
000096  f1aa0802          SUB      r8,r10,#2
00009a  e01d              B        |L4.216|
                  |L4.156|
;;;385    	/* General case: 3/4 * nearer pixel + 1/4 * further pixel in each */
;;;386    	/* dimension, thus 9/16, 3/16, 3/16, 1/16 overall */
;;;387    	nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
00009c  f812bb01          LDRB     r11,[r2],#1
0000a0  eb0b0a4b          ADD      r10,r11,r11,LSL #1
0000a4  f813bb01          LDRB     r11,[r3],#1
0000a8  eb0a050b          ADD      r5,r10,r11
;;;388    	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
0000ac  eb010a41          ADD      r10,r1,r1,LSL #1
0000b0  44e2              ADD      r10,r10,r12
0000b2  f10a0a08          ADD      r10,r10,#8
0000b6  f3ca1a07          UBFX     r10,r10,#4,#8
0000ba  f800ab01          STRB     r10,[r0],#1
;;;389    	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
0000be  eb010a41          ADD      r10,r1,r1,LSL #1
0000c2  44aa              ADD      r10,r10,r5
0000c4  f10a0a07          ADD      r10,r10,#7
0000c8  f3ca1a07          UBFX     r10,r10,#4,#8
0000cc  f800ab01          STRB     r10,[r0],#1
;;;390    	lastcolsum = thiscolsum; thiscolsum = nextcolsum;
0000d0  468c              MOV      r12,r1
0000d2  4629              MOV      r1,r5
0000d4  f1a80801          SUB      r8,r8,#1              ;384
                  |L4.216|
0000d8  f1b80f00          CMP      r8,#0                 ;384
0000dc  d1de              BNE      |L4.156|
;;;391          }
;;;392    
;;;393          /* Special case for last column */
;;;394          *outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
0000de  eb010a41          ADD      r10,r1,r1,LSL #1
0000e2  44e2              ADD      r10,r10,r12
0000e4  f10a0a08          ADD      r10,r10,#8
0000e8  f3ca1a07          UBFX     r10,r10,#4,#8
0000ec  f800ab01          STRB     r10,[r0],#1
;;;395          *outptr   = (JSAMPLE) ((thiscolsum * 4 + 7) >> 4);
0000f0  f04f0a07          MOV      r10,#7
0000f4  eb0a0a81          ADD      r10,r10,r1,LSL #2
0000f8  f3ca1a07          UBFX     r10,r10,#4,#8
0000fc  f880a000          STRB     r10,[r0,#0]
000100  1c7f              ADDS     r7,r7,#1              ;368
                  |L4.258|
000102  2f02              CMP      r7,#2                 ;368
000104  db8d              BLT      |L4.34|
;;;396        }
;;;397        inrow++;
000106  1c76              ADDS     r6,r6,#1
                  |L4.264|
000108  f8dda004          LDR      r10,[sp,#4]           ;367
00010c  f8daa138          LDR      r10,[r10,#0x138]      ;367
000110  45ca              CMP      r10,r9                ;367
000112  dc84              BGT      |L4.30|
;;;398      }
;;;399    }
000114  b005              ADD      sp,sp,#0x14
000116  e8bd8ff0          POP      {r4-r11,pc}
;;;400    
                          ENDP


                          AREA ||i.h2v2_upsample||, CODE, READONLY, ALIGN=1

                  h2v2_upsample PROC
;;;267    METHODDEF(void)
;;;268    h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;269    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;270    {
000004  b083              SUB      sp,sp,#0xc
000006  4606              MOV      r6,r0
000008  4689              MOV      r9,r1
;;;271      JSAMPARRAY output_data = *output_data_ptr;
00000a  9806              LDR      r0,[sp,#0x18]
00000c  6807              LDR      r7,[r0,#0]
;;;272      register JSAMPROW inptr, outptr;
;;;273      register JSAMPLE invalue;
;;;274      JSAMPROW outend;
;;;275      int inrow, outrow;
;;;276    
;;;277      GUI_USE_PARA(compptr);
00000e  bf00              NOP      
;;;278      inrow = outrow = 0;
000010  2000              MOVS     r0,#0
000012  4605              MOV      r5,r0
000014  9002              STR      r0,[sp,#8]
;;;279      while (outrow < cinfo->max_v_samp_factor) {
000016  e01f              B        |L5.88|
                  |L5.24|
;;;280        inptr = input_data[inrow];
000018  9902              LDR      r1,[sp,#8]
00001a  9805              LDR      r0,[sp,#0x14]
00001c  f850a021          LDR      r10,[r0,r1,LSL #2]
;;;281        outptr = output_data[outrow];
000020  f8574025          LDR      r4,[r7,r5,LSL #2]
;;;282        outend = outptr + cinfo->output_width;
000024  6f30              LDR      r0,[r6,#0x70]
000026  eb000b04          ADD      r11,r0,r4
;;;283        while (outptr < outend) {
00002a  e005              B        |L5.56|
                  |L5.44|
;;;284          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
00002c  f81a8b01          LDRB     r8,[r10],#1
;;;285          *outptr++ = invalue;
000030  f8048b01          STRB     r8,[r4],#1
;;;286          *outptr++ = invalue;
000034  f8048b01          STRB     r8,[r4],#1
                  |L5.56|
000038  455c              CMP      r4,r11                ;283
00003a  d3f7              BCC      |L5.44|
;;;287        }
;;;288        jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
00003c  2101              MOVS     r1,#1
00003e  6f30              LDR      r0,[r6,#0x70]
000040  1c6b              ADDS     r3,r5,#1
000042  463a              MOV      r2,r7
000044  e9cd1000          STRD     r1,r0,[sp,#0]
000048  4629              MOV      r1,r5
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       jcopy_sample_rows
;;;289    		      1, cinfo->output_width);
;;;290        inrow++;
000050  9802              LDR      r0,[sp,#8]
000052  1c40              ADDS     r0,r0,#1
000054  9002              STR      r0,[sp,#8]
;;;291        outrow += 2;
000056  1cad              ADDS     r5,r5,#2
                  |L5.88|
000058  f8d60138          LDR      r0,[r6,#0x138]        ;279
00005c  42a8              CMP      r0,r5                 ;279
00005e  dcdb              BGT      |L5.24|
;;;292      }
;;;293    }
000060  b007              ADD      sp,sp,#0x1c
000062  e8bd8ff0          POP      {r4-r11,pc}
;;;294    
                          ENDP


                          AREA ||i.int_upsample||, CODE, READONLY, ALIGN=1

                  int_upsample PROC
;;;194    METHODDEF(void)
;;;195    int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;196    	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;197    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460f              MOV      r7,r1
;;;198      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
00000a  f8d4a1c4          LDR      r10,[r4,#0x1c4]
;;;199      JSAMPARRAY output_data = *output_data_ptr;
00000e  980a              LDR      r0,[sp,#0x28]
000010  f8d08000          LDR      r8,[r0,#0]
;;;200      register JSAMPROW inptr, outptr;
;;;201      register JSAMPLE invalue;
;;;202      register int h;
;;;203      JSAMPROW outend;
;;;204      int h_expand, v_expand;
;;;205      int inrow, outrow;
;;;206    
;;;207      h_expand = upsample->h_expand[compptr->component_index];
000014  f10a0044          ADD      r0,r10,#0x44
000018  6879              LDR      r1,[r7,#4]
00001a  5c40              LDRB     r0,[r0,r1]
00001c  9003              STR      r0,[sp,#0xc]
;;;208      v_expand = upsample->v_expand[compptr->component_index];
00001e  f10a0048          ADD      r0,r10,#0x48
000022  6879              LDR      r1,[r7,#4]
000024  f8109001          LDRB     r9,[r0,r1]
;;;209    
;;;210      inrow = outrow = 0;
000028  2000              MOVS     r0,#0
00002a  4605              MOV      r5,r0
00002c  9002              STR      r0,[sp,#8]
;;;211      while (outrow < cinfo->max_v_samp_factor) {
00002e  e02e              B        |L6.142|
                  |L6.48|
;;;212        /* Generate one output row with proper horizontal expansion */
;;;213        inptr = input_data[inrow];
000030  9902              LDR      r1,[sp,#8]
000032  9809              LDR      r0,[sp,#0x24]
000034  f8500021          LDR      r0,[r0,r1,LSL #2]
000038  9006              STR      r0,[sp,#0x18]
;;;214        outptr = output_data[outrow];
00003a  f8586025          LDR      r6,[r8,r5,LSL #2]
;;;215        outend = outptr + cinfo->output_width;
00003e  6f20              LDR      r0,[r4,#0x70]
000040  4430              ADD      r0,r0,r6
000042  9004              STR      r0,[sp,#0x10]
;;;216        while (outptr < outend) {
000044  e00e              B        |L6.100|
                  |L6.70|
;;;217          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
000046  9806              LDR      r0,[sp,#0x18]
000048  f810bb01          LDRB     r11,[r0],#1
00004c  9006              STR      r0,[sp,#0x18]
;;;218          for (h = h_expand; h > 0; h--) {
00004e  9803              LDR      r0,[sp,#0xc]
000050  9005              STR      r0,[sp,#0x14]
000052  e004              B        |L6.94|
                  |L6.84|
;;;219    	*outptr++ = invalue;
000054  f806bb01          STRB     r11,[r6],#1
000058  9805              LDR      r0,[sp,#0x14]         ;218
00005a  1e40              SUBS     r0,r0,#1              ;218
00005c  9005              STR      r0,[sp,#0x14]         ;218
                  |L6.94|
00005e  9805              LDR      r0,[sp,#0x14]         ;218
000060  2800              CMP      r0,#0                 ;218
000062  dcf7              BGT      |L6.84|
                  |L6.100|
000064  9804              LDR      r0,[sp,#0x10]         ;216
000066  4286              CMP      r6,r0                 ;216
000068  d3ed              BCC      |L6.70|
;;;220          }
;;;221        }
;;;222        /* Generate any additional output rows by duplicating the first one */
;;;223        if (v_expand > 1) {
00006a  f1b90f01          CMP      r9,#1
00006e  dd0a              BLE      |L6.134|
;;;224          jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
000070  f1a90001          SUB      r0,r9,#1
000074  6f21              LDR      r1,[r4,#0x70]
000076  1c6b              ADDS     r3,r5,#1
000078  4642              MOV      r2,r8
00007a  e9cd0100          STRD     r0,r1,[sp,#0]
00007e  4629              MOV      r1,r5
000080  4640              MOV      r0,r8
000082  f7fffffe          BL       jcopy_sample_rows
                  |L6.134|
;;;225    			v_expand-1, cinfo->output_width);
;;;226        }
;;;227        inrow++;
000086  9802              LDR      r0,[sp,#8]
000088  1c40              ADDS     r0,r0,#1
00008a  9002              STR      r0,[sp,#8]
;;;228        outrow += v_expand;
00008c  444d              ADD      r5,r5,r9
                  |L6.142|
00008e  f8d40138          LDR      r0,[r4,#0x138]        ;211
000092  42a8              CMP      r0,r5                 ;211
000094  dccc              BGT      |L6.48|
;;;229      }
;;;230    }
000096  b00b              ADD      sp,sp,#0x2c
000098  e8bd8ff0          POP      {r4-r11,pc}
;;;231    
                          ENDP


                          AREA ||i.jinit_upsampler||, CODE, READONLY, ALIGN=2

                  jinit_upsampler PROC
;;;406    GLOBAL(void)
;;;407    jinit_upsampler (j_decompress_ptr cinfo)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;408    {
000004  4604              MOV      r4,r0
;;;409      my_upsample_ptr upsample;
;;;410      int ci;
;;;411      jpeg_component_info * compptr;
;;;412      boolean need_buffer, do_fancy;
;;;413      int h_in_group, v_in_group, h_out_group, v_out_group;
;;;414    
;;;415      upsample = (my_upsample_ptr)
000006  6860              LDR      r0,[r4,#4]
000008  224c              MOVS     r2,#0x4c
00000a  2101              MOVS     r1,#1
00000c  6803              LDR      r3,[r0,#0]
00000e  4620              MOV      r0,r4
000010  4798              BLX      r3
000012  4605              MOV      r5,r0
;;;416        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;417    				SIZEOF(my_upsampler));
;;;418      cinfo->upsample = (struct jpeg_upsampler *) upsample;
000014  f8c451c4          STR      r5,[r4,#0x1c4]
;;;419      upsample->pub.start_pass = start_pass_upsample;
000018  485d              LDR      r0,|L7.400|
00001a  6028              STR      r0,[r5,#0]
;;;420      upsample->pub.upsample = sep_upsample;
00001c  485d              LDR      r0,|L7.404|
00001e  6068              STR      r0,[r5,#4]
;;;421      upsample->pub.need_context_rows = FALSE; /* until we find out differently */
000020  2000              MOVS     r0,#0
000022  60a8              STR      r0,[r5,#8]
;;;422    
;;;423      if (cinfo->CCIR601_sampling)	/* this isn't supported */
000024  f8d4012c          LDR      r0,[r4,#0x12c]
000028  b130              CBZ      r0,|L7.56|
;;;424        ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
00002a  2019              MOVS     r0,#0x19
00002c  6821              LDR      r1,[r4,#0]
00002e  6148              STR      r0,[r1,#0x14]
000030  6820              LDR      r0,[r4,#0]
000032  6801              LDR      r1,[r0,#0]
000034  4620              MOV      r0,r4
000036  4788              BLX      r1
                  |L7.56|
;;;425    
;;;426      /* jdmainct.c doesn't support context rows when min_DCT_scaled_size = 1,
;;;427       * so don't ask for it.
;;;428       */
;;;429      do_fancy = cinfo->do_fancy_upsampling && cinfo->min_DCT_scaled_size > 1;
000038  6ce0              LDR      r0,[r4,#0x4c]
00003a  b128              CBZ      r0,|L7.72|
00003c  f8d4013c          LDR      r0,[r4,#0x13c]
000040  2801              CMP      r0,#1
000042  dd01              BLE      |L7.72|
000044  2001              MOVS     r0,#1
000046  e000              B        |L7.74|
                  |L7.72|
000048  2000              MOVS     r0,#0
                  |L7.74|
00004a  9001              STR      r0,[sp,#4]
;;;430    
;;;431      /* Verify we can handle the sampling factors, select per-component methods,
;;;432       * and create storage as needed.
;;;433       */
;;;434      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
00004c  2600              MOVS     r6,#0
00004e  f8d470d8          LDR      r7,[r4,#0xd8]
000052  e096              B        |L7.386|
                  |L7.84|
;;;435           ci++, compptr++) {
;;;436        /* Compute size of an "input group" after IDCT scaling.  This many samples
;;;437         * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
;;;438         */
;;;439        h_in_group = (compptr->h_samp_factor * compptr->DCT_scaled_size) /
000054  6a79              LDR      r1,[r7,#0x24]
000056  68b8              LDR      r0,[r7,#8]
000058  4348              MULS     r0,r1,r0
00005a  f8d4113c          LDR      r1,[r4,#0x13c]
00005e  fb90f8f1          SDIV     r8,r0,r1
;;;440    		 cinfo->min_DCT_scaled_size;
;;;441        v_in_group = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
000062  6a79              LDR      r1,[r7,#0x24]
000064  68f8              LDR      r0,[r7,#0xc]
000066  4348              MULS     r0,r1,r0
000068  f8d4113c          LDR      r1,[r4,#0x13c]
00006c  fb90f9f1          SDIV     r9,r0,r1
;;;442    		 cinfo->min_DCT_scaled_size;
;;;443        h_out_group = cinfo->max_h_samp_factor;
000070  f8d4a134          LDR      r10,[r4,#0x134]
;;;444        v_out_group = cinfo->max_v_samp_factor;
000074  f8d4b138          LDR      r11,[r4,#0x138]
;;;445        upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
000078  f1050034          ADD      r0,r5,#0x34
00007c  f8409026          STR      r9,[r0,r6,LSL #2]
;;;446        need_buffer = TRUE;
000080  2001              MOVS     r0,#1
000082  9002              STR      r0,[sp,#8]
;;;447        if (! compptr->component_needed) {
000084  6b38              LDR      r0,[r7,#0x30]
000086  b938              CBNZ     r0,|L7.152|
;;;448          /* Don't bother to upsample an uninteresting component. */
;;;449          upsample->methods[ci] = noop_upsample;
000088  4943              LDR      r1,|L7.408|
00008a  f105001c          ADD      r0,r5,#0x1c
00008e  f8401026          STR      r1,[r0,r6,LSL #2]
;;;450          need_buffer = FALSE;
000092  2000              MOVS     r0,#0
000094  9002              STR      r0,[sp,#8]
000096  e05d              B        |L7.340|
                  |L7.152|
;;;451        } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
000098  45d0              CMP      r8,r10
00009a  d109              BNE      |L7.176|
00009c  45d9              CMP      r9,r11
00009e  d107              BNE      |L7.176|
;;;452          /* Fullsize components can be processed without any work. */
;;;453          upsample->methods[ci] = fullsize_upsample;
0000a0  493e              LDR      r1,|L7.412|
0000a2  f105001c          ADD      r0,r5,#0x1c
0000a6  f8401026          STR      r1,[r0,r6,LSL #2]
;;;454          need_buffer = FALSE;
0000aa  2000              MOVS     r0,#0
0000ac  9002              STR      r0,[sp,#8]
0000ae  e051              B        |L7.340|
                  |L7.176|
;;;455        } else if (h_in_group * 2 == h_out_group &&
0000b0  ebba0f48          CMP      r10,r8,LSL #1
0000b4  d112              BNE      |L7.220|
;;;456    	       v_in_group == v_out_group) {
0000b6  45d9              CMP      r9,r11
0000b8  d110              BNE      |L7.220|
;;;457          /* Special cases for 2h1v upsampling */
;;;458          if (do_fancy && compptr->downsampled_width > 2)
0000ba  9801              LDR      r0,[sp,#4]
0000bc  b140              CBZ      r0,|L7.208|
0000be  6ab8              LDR      r0,[r7,#0x28]
0000c0  2802              CMP      r0,#2
0000c2  d905              BLS      |L7.208|
;;;459    	upsample->methods[ci] = h2v1_fancy_upsample;
0000c4  4936              LDR      r1,|L7.416|
0000c6  f105001c          ADD      r0,r5,#0x1c
0000ca  f8401026          STR      r1,[r0,r6,LSL #2]
0000ce  e041              B        |L7.340|
                  |L7.208|
;;;460          else
;;;461    	upsample->methods[ci] = h2v1_upsample;
0000d0  4934              LDR      r1,|L7.420|
0000d2  f105001c          ADD      r0,r5,#0x1c
0000d6  f8401026          STR      r1,[r0,r6,LSL #2]
0000da  e03b              B        |L7.340|
                  |L7.220|
;;;462        } else if (h_in_group * 2 == h_out_group &&
0000dc  ebba0f48          CMP      r10,r8,LSL #1
0000e0  d115              BNE      |L7.270|
;;;463    	       v_in_group * 2 == v_out_group) {
0000e2  ebbb0f49          CMP      r11,r9,LSL #1
0000e6  d112              BNE      |L7.270|
;;;464          /* Special cases for 2h2v upsampling */
;;;465          if (do_fancy && compptr->downsampled_width > 2) {
0000e8  9801              LDR      r0,[sp,#4]
0000ea  b150              CBZ      r0,|L7.258|
0000ec  6ab8              LDR      r0,[r7,#0x28]
0000ee  2802              CMP      r0,#2
0000f0  d907              BLS      |L7.258|
;;;466    	upsample->methods[ci] = h2v2_fancy_upsample;
0000f2  492d              LDR      r1,|L7.424|
0000f4  f105001c          ADD      r0,r5,#0x1c
0000f8  f8401026          STR      r1,[r0,r6,LSL #2]
;;;467    	upsample->pub.need_context_rows = TRUE;
0000fc  2001              MOVS     r0,#1
0000fe  60a8              STR      r0,[r5,#8]
000100  e028              B        |L7.340|
                  |L7.258|
;;;468          } else
;;;469    	upsample->methods[ci] = h2v2_upsample;
000102  492a              LDR      r1,|L7.428|
000104  f105001c          ADD      r0,r5,#0x1c
000108  f8401026          STR      r1,[r0,r6,LSL #2]
00010c  e022              B        |L7.340|
                  |L7.270|
;;;470        } else if ((h_out_group % h_in_group) == 0 &&
00010e  fb9af0f8          SDIV     r0,r10,r8
000112  fb08a010          MLS      r0,r8,r0,r10
000116  b9b0              CBNZ     r0,|L7.326|
;;;471    	       (v_out_group % v_in_group) == 0) {
000118  fb9bf0f9          SDIV     r0,r11,r9
00011c  fb09b010          MLS      r0,r9,r0,r11
000120  b988              CBNZ     r0,|L7.326|
;;;472          /* Generic integral-factors upsampling method */
;;;473          upsample->methods[ci] = int_upsample;
000122  4923              LDR      r1,|L7.432|
000124  f105001c          ADD      r0,r5,#0x1c
000128  f8401026          STR      r1,[r0,r6,LSL #2]
;;;474          upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
00012c  fb9af0f8          SDIV     r0,r10,r8
000130  b2c1              UXTB     r1,r0
000132  f1050044          ADD      r0,r5,#0x44
000136  5581              STRB     r1,[r0,r6]
;;;475          upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
000138  fb9bf0f9          SDIV     r0,r11,r9
00013c  b2c1              UXTB     r1,r0
00013e  f1050048          ADD      r0,r5,#0x48
000142  5581              STRB     r1,[r0,r6]
000144  e006              B        |L7.340|
                  |L7.326|
;;;476        } else
;;;477          ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
000146  2026              MOVS     r0,#0x26
000148  6821              LDR      r1,[r4,#0]
00014a  6148              STR      r0,[r1,#0x14]
00014c  6820              LDR      r0,[r4,#0]
00014e  6801              LDR      r1,[r0,#0]
000150  4620              MOV      r0,r4
000152  4788              BLX      r1
                  |L7.340|
;;;478        if (need_buffer) {
000154  9802              LDR      r0,[sp,#8]
000156  b190              CBZ      r0,|L7.382|
;;;479          upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
000158  f8d41134          LDR      r1,[r4,#0x134]
00015c  6f20              LDR      r0,[r4,#0x70]
00015e  f7fffffe          BL       jround_up
000162  9000              STR      r0,[sp,#0]
000164  f8d43138          LDR      r3,[r4,#0x138]
000168  6860              LDR      r0,[r4,#4]
00016a  f8d0c008          LDR      r12,[r0,#8]
00016e  2101              MOVS     r1,#1
000170  4620              MOV      r0,r4
000172  9a00              LDR      r2,[sp,#0]
000174  47e0              BLX      r12
000176  f105010c          ADD      r1,r5,#0xc
00017a  f8410026          STR      r0,[r1,r6,LSL #2]
                  |L7.382|
00017e  1c76              ADDS     r6,r6,#1              ;435
000180  3754              ADDS     r7,r7,#0x54           ;435
                  |L7.386|
000182  6a60              LDR      r0,[r4,#0x24]         ;434
000184  42b0              CMP      r0,r6                 ;434
000186  f73faf65          BGT      |L7.84|
;;;480    	((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;481    	 (JDIMENSION) jround_up((long) cinfo->output_width,
;;;482    				(long) cinfo->max_h_samp_factor),
;;;483    	 (JDIMENSION) cinfo->max_v_samp_factor);
;;;484        }
;;;485      }
;;;486    }
00018a  e8bd8ffe          POP      {r1-r11,pc}
                          ENDP

00018e  0000              DCW      0x0000
                  |L7.400|
                          DCD      start_pass_upsample
                  |L7.404|
                          DCD      sep_upsample
                  |L7.408|
                          DCD      noop_upsample
                  |L7.412|
                          DCD      fullsize_upsample
                  |L7.416|
                          DCD      h2v1_fancy_upsample
                  |L7.420|
                          DCD      h2v1_upsample
                  |L7.424|
                          DCD      h2v2_fancy_upsample
                  |L7.428|
                          DCD      h2v2_upsample
                  |L7.432|
                          DCD      int_upsample

                          AREA ||i.noop_upsample||, CODE, READONLY, ALIGN=1

                  noop_upsample PROC
;;;172    METHODDEF(void)
;;;173    noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  b510              PUSH     {r4,lr}
;;;174    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;175    {
;;;176      GUI_USE_PARA(cinfo);
000002  bf00              NOP      
;;;177      GUI_USE_PARA(compptr);
000004  bf00              NOP      
;;;178      GUI_USE_PARA(input_data);
000006  bf00              NOP      
;;;179      *output_data_ptr = NULL;	/* safety check */
000008  2400              MOVS     r4,#0
00000a  601c              STR      r4,[r3,#0]
;;;180    }
00000c  bd10              POP      {r4,pc}
;;;181    
                          ENDP


                          AREA ||i.sep_upsample||, CODE, READONLY, ALIGN=1

                  sep_upsample PROC
;;;88     METHODDEF(void)
;;;89     sep_upsample (j_decompress_ptr cinfo,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;90     	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
;;;91     	      JDIMENSION in_row_groups_avail,
;;;92     	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
;;;93     	      JDIMENSION out_rows_avail)
;;;94     {
000004  b081              SUB      sp,sp,#4
000006  4605              MOV      r5,r0
000008  4690              MOV      r8,r2
00000a  e9dd9a0f          LDRD     r9,r10,[sp,#0x3c]
;;;95       my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
00000e  f8d541c4          LDR      r4,[r5,#0x1c4]
;;;96       int ci;
;;;97       jpeg_component_info * compptr;
;;;98       JDIMENSION num_rows;
;;;99     
;;;100      GUI_USE_PARA(in_row_groups_avail);
000012  9804              LDR      r0,[sp,#0x10]
000014  9004              STR      r0,[sp,#0x10]
;;;101      /* Fill the conversion buffer, if it's empty */
;;;102      if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
000016  6ae0              LDR      r0,[r4,#0x2c]
000018  f8d51138          LDR      r1,[r5,#0x138]
00001c  4288              CMP      r0,r1
00001e  db21              BLT      |L9.100|
;;;103        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
000020  2600              MOVS     r6,#0
000022  f8d5b0d8          LDR      r11,[r5,#0xd8]
000026  e018              B        |L9.90|
                  |L9.40|
;;;104    	 ci++, compptr++) {
;;;105          /* Invoke per-component upsample method.  Notice we pass a POINTER
;;;106           * to color_buf[ci], so that fullsize_upsample can change it.
;;;107           */
;;;108          (*upsample->methods[ci]) (cinfo, compptr,
000028  f1040134          ADD      r1,r4,#0x34
00002c  f8511026          LDR      r1,[r1,r6,LSL #2]
000030  f8d80000          LDR      r0,[r8,#0]
000034  4348              MULS     r0,r1,r0
000036  9902              LDR      r1,[sp,#8]
000038  f8511026          LDR      r1,[r1,r6,LSL #2]
00003c  eb010280          ADD      r2,r1,r0,LSL #2
000040  f104000c          ADD      r0,r4,#0xc
000044  eb000386          ADD      r3,r0,r6,LSL #2
000048  3010              ADDS     r0,r0,#0x10
00004a  f850c026          LDR      r12,[r0,r6,LSL #2]
00004e  4659              MOV      r1,r11
000050  4628              MOV      r0,r5
000052  47e0              BLX      r12
000054  1c76              ADDS     r6,r6,#1              ;104
000056  f10b0b54          ADD      r11,r11,#0x54         ;104
                  |L9.90|
00005a  6a68              LDR      r0,[r5,#0x24]         ;103
00005c  42b0              CMP      r0,r6                 ;103
00005e  dce3              BGT      |L9.40|
;;;109    	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
;;;110    	upsample->color_buf + ci);
;;;111        }
;;;112        upsample->next_row_out = 0;
000060  2000              MOVS     r0,#0
000062  62e0              STR      r0,[r4,#0x2c]
                  |L9.100|
;;;113      }
;;;114    
;;;115      /* Color-convert and emit rows */
;;;116    
;;;117      /* How many we have in the buffer: */
;;;118      num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
000064  f8d50138          LDR      r0,[r5,#0x138]
000068  6ae1              LDR      r1,[r4,#0x2c]
00006a  1a47              SUBS     r7,r0,r1
;;;119      /* Not more than the distance to the end of the image.  Need this test
;;;120       * in case the image height is not a multiple of max_v_samp_factor:
;;;121       */
;;;122      if (num_rows > upsample->rows_to_go) 
00006c  6b20              LDR      r0,[r4,#0x30]
00006e  42b8              CMP      r0,r7
000070  d200              BCS      |L9.116|
;;;123        num_rows = upsample->rows_to_go;
000072  6b27              LDR      r7,[r4,#0x30]
                  |L9.116|
;;;124      /* And not more than what the client can accept: */
;;;125      out_rows_avail -= *out_row_ctr;
000074  f8d90000          LDR      r0,[r9,#0]
000078  ebaa0a00          SUB      r10,r10,r0
;;;126      if (num_rows > out_rows_avail)
00007c  4557              CMP      r7,r10
00007e  d900              BLS      |L9.130|
;;;127        num_rows = out_rows_avail;
000080  4657              MOV      r7,r10
                  |L9.130|
;;;128    
;;;129      (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
000082  9700              STR      r7,[sp,#0]
000084  f8d91000          LDR      r1,[r9,#0]
000088  980e              LDR      r0,[sp,#0x38]
00008a  eb000381          ADD      r3,r0,r1,LSL #2
00008e  6ae2              LDR      r2,[r4,#0x2c]
000090  f8d501c8          LDR      r0,[r5,#0x1c8]
000094  f104010c          ADD      r1,r4,#0xc
000098  f8d0c004          LDR      r12,[r0,#4]
00009c  4628              MOV      r0,r5
00009e  47e0              BLX      r12
;;;130    				     (JDIMENSION) upsample->next_row_out,
;;;131    				     output_buf + *out_row_ctr,
;;;132    				     (int) num_rows);
;;;133    
;;;134      /* Adjust counts */
;;;135      *out_row_ctr += num_rows;
0000a0  f8d90000          LDR      r0,[r9,#0]
0000a4  4438              ADD      r0,r0,r7
0000a6  f8c90000          STR      r0,[r9,#0]
;;;136      upsample->rows_to_go -= num_rows;
0000aa  6b20              LDR      r0,[r4,#0x30]
0000ac  1bc0              SUBS     r0,r0,r7
0000ae  6320              STR      r0,[r4,#0x30]
;;;137      upsample->next_row_out += num_rows;
0000b0  6ae0              LDR      r0,[r4,#0x2c]
0000b2  4438              ADD      r0,r0,r7
0000b4  62e0              STR      r0,[r4,#0x2c]
;;;138      /* When the buffer is emptied, declare this input row group consumed */
;;;139      if (upsample->next_row_out >= cinfo->max_v_samp_factor)
0000b6  6ae0              LDR      r0,[r4,#0x2c]
0000b8  f8d51138          LDR      r1,[r5,#0x138]
0000bc  4288              CMP      r0,r1
0000be  db04              BLT      |L9.202|
;;;140        (*in_row_group_ctr)++;
0000c0  f8d80000          LDR      r0,[r8,#0]
0000c4  1c40              ADDS     r0,r0,#1
0000c6  f8c80000          STR      r0,[r8,#0]
                  |L9.202|
;;;141    }
0000ca  b005              ADD      sp,sp,#0x14
0000cc  e8bd8ff0          POP      {r4-r11,pc}
;;;142    
                          ENDP


                          AREA ||i.start_pass_upsample||, CODE, READONLY, ALIGN=1

                  start_pass_upsample PROC
;;;68     METHODDEF(void)
;;;69     start_pass_upsample (j_decompress_ptr cinfo)
000000  f8d011c4          LDR      r1,[r0,#0x1c4]
;;;70     {
;;;71       my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
;;;72     
;;;73       /* Mark the conversion buffer empty */
;;;74       upsample->next_row_out = cinfo->max_v_samp_factor;
000004  f8d02138          LDR      r2,[r0,#0x138]
000008  62ca              STR      r2,[r1,#0x2c]
;;;75       /* Initialize total-height counter for detecting bottom of image */
;;;76       upsample->rows_to_go = cinfo->output_height;
00000a  6f42              LDR      r2,[r0,#0x74]
00000c  630a              STR      r2,[r1,#0x30]
;;;77     }
00000e  4770              BX       lr
;;;78     
                          ENDP

