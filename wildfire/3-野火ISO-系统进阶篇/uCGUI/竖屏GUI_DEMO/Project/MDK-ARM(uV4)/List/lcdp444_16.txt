; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lcdp444_16.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\lcdp444_16.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\ConvertColor\LCDP444_16.c]
                          THUMB

                          AREA ||i.LCD_Color2Index_444_16||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_444_16 PROC
;;;33     */
;;;34     unsigned LCD_Color2Index_444_16(LCD_COLOR Color) {
000000  b530              PUSH     {r4,r5,lr}
000002  4601              MOV      r1,r0
;;;35       unsigned int r,g,b;
;;;36       r = Color         & 255;
000004  b2cc              UXTB     r4,r1
;;;37       g = (Color >> 8)  & 255;
000006  f3c12207          UBFX     r2,r1,#8,#8
;;;38       b = (Color >> 16) & 255;
00000a  f3c14307          UBFX     r3,r1,#16,#8
;;;39       r = (r + 8) / 17;
00000e  f1040008          ADD      r0,r4,#8
000012  2511              MOVS     r5,#0x11
000014  fbb0f4f5          UDIV     r4,r0,r5
;;;40       g = (g + 8) / 17;
000018  f1020008          ADD      r0,r2,#8
00001c  fbb0f2f5          UDIV     r2,r0,r5
;;;41       b = (b + 8) / 17;
000020  f1030008          ADD      r0,r3,#8
000024  fbb0f3f5          UDIV     r3,r0,r5
;;;42       return (r << 1) + (g << 6) + (b << 11);
000028  0060              LSLS     r0,r4,#1
00002a  eb001082          ADD      r0,r0,r2,LSL #6
00002e  eb0020c3          ADD      r0,r0,r3,LSL #11
;;;43     }
000032  bd30              POP      {r4,r5,pc}
;;;44     
                          ENDP


                          AREA ||i.LCD_GetIndexMask_444_16||, CODE, READONLY, ALIGN=1

                  LCD_GetIndexMask_444_16 PROC
;;;65     */
;;;66     unsigned LCD_GetIndexMask_444_16(void) {
000000  f64730de          MOV      r0,#0x7bde
;;;67       return 0x7bde;
;;;68     }
000004  4770              BX       lr
;;;69     
                          ENDP


                          AREA ||i.LCD_Index2Color_444_16||, CODE, READONLY, ALIGN=1

                  LCD_Index2Color_444_16 PROC
;;;48     */
;;;49     LCD_COLOR LCD_Index2Color_444_16(int Index) {
000000  b510              PUSH     {r4,lr}
000002  4601              MOV      r1,r0
;;;50       unsigned int r,g,b;
;;;51       /* Separate the color masks */
;;;52       r = (Index >> 1) & 0xf;
000004  f3c10443          UBFX     r4,r1,#1,#4
;;;53       g = (Index >> 6) & 0xf;
000008  f3c11283          UBFX     r2,r1,#6,#4
;;;54       b = ((unsigned)Index >> 11) & 0xf;
00000c  f3c123c3          UBFX     r3,r1,#11,#4
;;;55       /* Convert the color masks */
;;;56       r = r * 17;
000010  eb041404          ADD      r4,r4,r4,LSL #4
;;;57       g = g * 17;
000014  eb021202          ADD      r2,r2,r2,LSL #4
;;;58       b = b * 17;
000018  eb031303          ADD      r3,r3,r3,LSL #4
;;;59       return r + (g<<8) + (((U32)b)<<16);
00001c  eb042002          ADD      r0,r4,r2,LSL #8
000020  eb004003          ADD      r0,r0,r3,LSL #16
;;;60     }
000024  bd10              POP      {r4,pc}
;;;61     
                          ENDP

