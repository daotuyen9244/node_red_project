; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guipolye.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guipolye.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\GUIPolyE.c]
                          THUMB

                          AREA ||i.GUI_EnlargePolygon||, CODE, READONLY, ALIGN=1

                  GUI_EnlargePolygon PROC
;;;126    
;;;127    void GUI_EnlargePolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, int Len) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
;;;128      int j;
;;;129      /* Calc destination points */
;;;130      for (j=0; j<NumPoints; j++) {
00000e  2400              MOVS     r4,#0
000010  e044              B        |L1.156|
                  |L1.18|
;;;131        int x, y;
;;;132        tfPoint aVect[2];
;;;133        /* Get the vectors */
;;;134        _GetVect(&aVect[0], pSrc, NumPoints, j);
000012  4623              MOV      r3,r4
000014  463a              MOV      r2,r7
000016  4631              MOV      r1,r6
000018  a801              ADD      r0,sp,#4
00001a  f7fffffe          BL       _GetVect
;;;135        _GetVect(&aVect[1], pSrc, NumPoints, j+1);
00001e  1c63              ADDS     r3,r4,#1
000020  463a              MOV      r2,r7
000022  4631              MOV      r1,r6
000024  a803              ADD      r0,sp,#0xc
000026  f7fffffe          BL       _GetVect
;;;136        /* Normalize the vectors and add vectors */
;;;137        _Normalize(&aVect[0]);
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       _Normalize
;;;138        _Normalize(&aVect[1]);
000030  a803              ADD      r0,sp,#0xc
000032  f7fffffe          BL       _Normalize
;;;139        aVect[0].x += aVect[1].x;
000036  9903              LDR      r1,[sp,#0xc]
000038  9801              LDR      r0,[sp,#4]
00003a  f7fffffe          BL       __aeabi_fadd
00003e  9001              STR      r0,[sp,#4]
;;;140        aVect[0].y += aVect[1].y;
000040  9904              LDR      r1,[sp,#0x10]
000042  9802              LDR      r0,[sp,#8]
000044  f7fffffe          BL       __aeabi_fadd
000048  9002              STR      r0,[sp,#8]
;;;141        /* Resulting vector needs to be normalized again */
;;;142        _ReverseLen(&aVect[0]);
00004a  a801              ADD      r0,sp,#4
00004c  f7fffffe          BL       _ReverseLen
;;;143        x =  _fround(aVect[0].y * Len);
000050  4640              MOV      r0,r8
000052  f7fffffe          BL       __aeabi_i2f
000056  9000              STR      r0,[sp,#0]
000058  9902              LDR      r1,[sp,#8]
00005a  f7fffffe          BL       __aeabi_fmul
00005e  4683              MOV      r11,r0
000060  f7fffffe          BL       _fround
000064  4681              MOV      r9,r0
;;;144        y = -_fround(aVect[0].x * Len);
000066  4640              MOV      r0,r8
000068  f7fffffe          BL       __aeabi_i2f
00006c  9000              STR      r0,[sp,#0]
00006e  9901              LDR      r1,[sp,#4]
000070  f7fffffe          BL       __aeabi_fmul
000074  4683              MOV      r11,r0
000076  f7fffffe          BL       _fround
00007a  f1c00a00          RSB      r10,r0,#0
;;;145        /* Store destination */
;;;146        (pDest+j)->x = (pSrc+j)->x + x;
00007e  f8360024          LDRH     r0,[r6,r4,LSL #2]
000082  4448              ADD      r0,r0,r9
000084  b200              SXTH     r0,r0
000086  f8250024          STRH     r0,[r5,r4,LSL #2]
;;;147        (pDest+j)->y = (pSrc+j)->y + y;
00008a  eb060084          ADD      r0,r6,r4,LSL #2
00008e  8840              LDRH     r0,[r0,#2]
000090  4450              ADD      r0,r0,r10
000092  b200              SXTH     r0,r0
000094  eb050184          ADD      r1,r5,r4,LSL #2
000098  8048              STRH     r0,[r1,#2]
00009a  1c64              ADDS     r4,r4,#1              ;130
                  |L1.156|
00009c  42bc              CMP      r4,r7                 ;130
00009e  dbb8              BLT      |L1.18|
;;;148      }
;;;149    }
0000a0  b005              ADD      sp,sp,#0x14
0000a2  e8bd8ff0          POP      {r4-r11,pc}
;;;150    #endif
                          ENDP


                          AREA ||i._GetVect||, CODE, READONLY, ALIGN=1

                  _GetVect PROC
;;;82     */
;;;83     static void _GetVect(tfPoint* pfPoint, const GUI_POINT* pSrc, int NumPoints, int Index) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;84       int Off0 = (Index + NumPoints-1) % NumPoints;
00000c  1978              ADDS     r0,r7,r5
00000e  1e40              SUBS     r0,r0,#1
000010  fb90f1f5          SDIV     r1,r0,r5
000014  fb050811          MLS      r8,r5,r1,r0
;;;85       int Off1 = Index % NumPoints;
000018  fb97f0f5          SDIV     r0,r7,r5
00001c  fb057910          MLS      r9,r5,r0,r7
;;;86       pfPoint->x = pSrc[Off1].x - pSrc[Off0].x; 
000020  f9341029          LDRSH    r1,[r4,r9,LSL #2]
000024  f9342028          LDRSH    r2,[r4,r8,LSL #2]
000028  1a88              SUBS     r0,r1,r2
00002a  f7fffffe          BL       __aeabi_i2f
00002e  6030              STR      r0,[r6,#0]
;;;87       pfPoint->y = pSrc[Off1].y - pSrc[Off0].y; 
000030  eb040189          ADD      r1,r4,r9,LSL #2
000034  f9b11002          LDRSH    r1,[r1,#2]
000038  eb040288          ADD      r2,r4,r8,LSL #2
00003c  f9b22002          LDRSH    r2,[r2,#2]
000040  1a88              SUBS     r0,r1,r2
000042  f7fffffe          BL       __aeabi_i2f
000046  6070              STR      r0,[r6,#4]
;;;88     }
000048  e8bd87f0          POP      {r4-r10,pc}
;;;89     
                          ENDP


                          AREA ||i._Normalize||, CODE, READONLY, ALIGN=1

                  _Normalize PROC
;;;54     */
;;;55     static void _Normalize(tfPoint* pfPoint) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  4604              MOV      r4,r0
;;;56       float fx = pfPoint->x;
000006  6825              LDR      r5,[r4,#0]
;;;57       float fy = pfPoint->y;
000008  6866              LDR      r6,[r4,#4]
;;;58       float r = sqrt(fx*fx + fy*fy);
00000a  4631              MOV      r1,r6
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       __aeabi_fmul
000012  4683              MOV      r11,r0
000014  4629              MOV      r1,r5
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       __aeabi_fmul
00001c  4659              MOV      r1,r11
00001e  9001              STR      r0,[sp,#4]
000020  f7fffffe          BL       __aeabi_fadd
000024  4682              MOV      r10,r0
000026  f7fffffe          BL       __aeabi_f2d
00002a  e9cd0102          STRD     r0,r1,[sp,#8]
00002e  f7fffffe          BL       sqrt
000032  4607              MOV      r7,r0
000034  f7fffffe          BL       __aeabi_d2f
000038  4681              MOV      r9,r0
;;;59       if (r > 0) {
00003a  2100              MOVS     r1,#0
00003c  4648              MOV      r0,r9
00003e  f7fffffe          BL       __aeabi_cfrcmple
000042  d209              BCS      |L3.88|
;;;60         pfPoint->x = fx/r;
000044  4649              MOV      r1,r9
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       __aeabi_fdiv
00004c  6020              STR      r0,[r4,#0]
;;;61         pfPoint->y = fy/r;
00004e  4649              MOV      r1,r9
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       __aeabi_fdiv
000056  6060              STR      r0,[r4,#4]
                  |L3.88|
;;;62       }
;;;63     }
000058  e8bd9fff          POP      {r0-r12,pc}
;;;64     
                          ENDP


                          AREA ||i._ReverseLen||, CODE, READONLY, ALIGN=1

                  _ReverseLen PROC
;;;68     */
;;;69     static void _ReverseLen(tfPoint* pfPoint) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  4604              MOV      r4,r0
;;;70       float fx = pfPoint->x;
000006  6825              LDR      r5,[r4,#0]
;;;71       float fy = pfPoint->y;
000008  6866              LDR      r6,[r4,#4]
;;;72       float r = sqrt(fx*fx/2 + fy*fy/2);
00000a  4631              MOV      r1,r6
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       __aeabi_fmul
000012  f04f4180          MOV      r1,#0x40000000
000016  9000              STR      r0,[sp,#0]
000018  f7fffffe          BL       __aeabi_fdiv
00001c  4683              MOV      r11,r0
00001e  4629              MOV      r1,r5
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       __aeabi_fmul
000026  f04f4180          MOV      r1,#0x40000000
00002a  9000              STR      r0,[sp,#0]
00002c  f7fffffe          BL       __aeabi_fdiv
000030  4659              MOV      r1,r11
000032  9001              STR      r0,[sp,#4]
000034  f7fffffe          BL       __aeabi_fadd
000038  4682              MOV      r10,r0
00003a  f7fffffe          BL       __aeabi_f2d
00003e  e9cd0102          STRD     r0,r1,[sp,#8]
000042  f7fffffe          BL       sqrt
000046  4607              MOV      r7,r0
000048  f7fffffe          BL       __aeabi_d2f
00004c  4681              MOV      r9,r0
;;;73       if (r > 0) {
00004e  2100              MOVS     r1,#0
000050  4648              MOV      r0,r9
000052  f7fffffe          BL       __aeabi_cfrcmple
000056  d211              BCS      |L4.124|
;;;74         pfPoint->x = fx/r/r;
000058  4649              MOV      r1,r9
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       __aeabi_fdiv
000060  4607              MOV      r7,r0
000062  4649              MOV      r1,r9
000064  f7fffffe          BL       __aeabi_fdiv
000068  6020              STR      r0,[r4,#0]
;;;75         pfPoint->y = fy/r/r;
00006a  4649              MOV      r1,r9
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       __aeabi_fdiv
000072  4607              MOV      r7,r0
000074  4649              MOV      r1,r9
000076  f7fffffe          BL       __aeabi_fdiv
00007a  6060              STR      r0,[r4,#4]
                  |L4.124|
;;;76       }
;;;77     }
00007c  e8bd9fff          POP      {r0-r12,pc}
;;;78     
                          ENDP


                          AREA ||i._fround||, CODE, READONLY, ALIGN=2

                  _fround PROC
;;;44     */
;;;45     static int _fround(float f) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;46       if (f>0)
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_cfrcmple
00000e  d20c              BCS      |L5.42|
;;;47         return f+0.5;
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       __aeabi_f2d
000016  4605              MOV      r5,r0
000018  2200              MOVS     r2,#0
00001a  4b0a              LDR      r3,|L5.68|
00001c  f7fffffe          BL       __aeabi_dadd
000020  4607              MOV      r7,r0
000022  f7fffffe          BL       __aeabi_d2iz
                  |L5.38|
;;;48       return f-0.5;
;;;49     }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L5.42|
00002a  4620              MOV      r0,r4                 ;48
00002c  f7fffffe          BL       __aeabi_f2d
000030  4605              MOV      r5,r0                 ;48
000032  2200              MOVS     r2,#0                 ;48
000034  4b03              LDR      r3,|L5.68|
000036  f7fffffe          BL       __aeabi_dsub
00003a  4607              MOV      r7,r0                 ;48
00003c  f7fffffe          BL       __aeabi_d2iz
000040  e7f1              B        |L5.38|
;;;50     
                          ENDP

000042  0000              DCW      0x0000
                  |L5.68|
                          DCD      0x3fe00000
