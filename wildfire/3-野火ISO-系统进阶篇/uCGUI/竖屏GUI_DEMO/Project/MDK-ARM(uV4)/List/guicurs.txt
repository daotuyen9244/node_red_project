; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guicurs.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guicurs.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\GUICurs.c]
                          THUMB

                          AREA ||i.GUI_CURSOR_Activate||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_Activate PROC
;;;237    */
;;;238    void GUI_CURSOR_Activate(void) {
000000  b510              PUSH     {r4,lr}
;;;239      GUI_LOCK();
000002  f7fffffe          BL       GUI_Lock
;;;240      if ((--_CursorDeActCnt) ==0) {
000006  4806              LDR      r0,|L1.32|
000008  7800              LDRB     r0,[r0,#0]  ; _CursorDeActCnt
00000a  1e40              SUBS     r0,r0,#1
00000c  f01000ff          ANDS     r0,r0,#0xff
000010  4903              LDR      r1,|L1.32|
000012  7008              STRB     r0,[r1,#0]
000014  d101              BNE      |L1.26|
;;;241        _Show();
000016  f7fffffe          BL       _Show
                  |L1.26|
;;;242      }
;;;243      GUI_UNLOCK();
00001a  f7fffffe          BL       GUI_Unlock
;;;244    }
00001e  bd10              POP      {r4,pc}
;;;245    
                          ENDP

                  |L1.32|
                          DCD      _CursorDeActCnt

                          AREA ||i.GUI_CURSOR_Deactivate||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_Deactivate PROC
;;;249    */
;;;250    void GUI_CURSOR_Deactivate(void) {
000000  b510              PUSH     {r4,lr}
;;;251      GUI_LOCK();
000002  f7fffffe          BL       GUI_Lock
;;;252      if (_CursorDeActCnt++ ==0)
000006  4806              LDR      r0,|L2.32|
000008  7801              LDRB     r1,[r0,#0]  ; _CursorDeActCnt
00000a  7800              LDRB     r0,[r0,#0]  ; _CursorDeActCnt
00000c  1c40              ADDS     r0,r0,#1
00000e  4a04              LDR      r2,|L2.32|
000010  7010              STRB     r0,[r2,#0]
000012  b909              CBNZ     r1,|L2.24|
;;;253        _Hide();
000014  f7fffffe          BL       _Hide
                  |L2.24|
;;;254      GUI_UNLOCK();
000018  f7fffffe          BL       GUI_Unlock
;;;255    }
00001c  bd10              POP      {r4,pc}
;;;256    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      _CursorDeActCnt

                          AREA ||i.GUI_CURSOR_GetState||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_GetState PROC
;;;328    */
;;;329    int GUI_CURSOR_GetState(void) {
000000  b510              PUSH     {r4,lr}
;;;330      int r;
;;;331      GUI_LOCK();
000002  f7fffffe          BL       GUI_Lock
;;;332      r = _CursorOn;
000006  4803              LDR      r0,|L3.20|
000008  7804              LDRB     r4,[r0,#0]  ; _CursorOn
;;;333      GUI_UNLOCK();
00000a  f7fffffe          BL       GUI_Unlock
;;;334      return r;
00000e  4620              MOV      r0,r4
;;;335    }
000010  bd10              POP      {r4,pc}
;;;336    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      _CursorOn

                          AREA ||i.GUI_CURSOR_Hide||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_Hide PROC
;;;294    */
;;;295    void GUI_CURSOR_Hide(void) {
000000  b510              PUSH     {r4,lr}
;;;296      GUI_LOCK();
000002  f7fffffe          BL       GUI_Lock
;;;297      _Hide();
000006  f7fffffe          BL       _Hide
;;;298      _CursorOn = 0;
00000a  2000              MOVS     r0,#0
00000c  4904              LDR      r1,|L4.32|
00000e  7008              STRB     r0,[r1,#0]
;;;299      /* Set function pointer which window manager can use */
;;;300      GUI_CURSOR_pfTempHide   = NULL;
000010  4904              LDR      r1,|L4.36|
000012  6008              STR      r0,[r1,#0]  ; GUI_CURSOR_pfTempHide
;;;301      GUI_CURSOR_pfTempUnhide = NULL;
000014  4904              LDR      r1,|L4.40|
000016  6008              STR      r0,[r1,#0]  ; GUI_CURSOR_pfTempUnhide
;;;302      GUI_UNLOCK();
000018  f7fffffe          BL       GUI_Unlock
;;;303    }
00001c  bd10              POP      {r4,pc}
;;;304    
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      _CursorOn
                  |L4.36|
                          DCD      GUI_CURSOR_pfTempHide
                  |L4.40|
                          DCD      GUI_CURSOR_pfTempUnhide

                          AREA ||i.GUI_CURSOR_Select||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_Select PROC
;;;260    */
;;;261    const GUI_CURSOR GUI_UNI_PTR * GUI_CURSOR_Select(const GUI_CURSOR GUI_UNI_PTR * pCursor) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
;;;262      int AllocSize;
;;;263      const GUI_BITMAP GUI_UNI_PTR * pBM;
;;;264      const GUI_CURSOR GUI_UNI_PTR * pOldCursor;
;;;265      GUI_LOCK();
000006  f7fffffe          BL       GUI_Lock
;;;266      pOldCursor = _pCursor;
00000a  4823              LDR      r0,|L5.152|
00000c  f8d08000          LDR      r8,[r0,#0]  ; _pCursor
;;;267      if (pCursor != _pCursor) {
000010  6800              LDR      r0,[r0,#0]  ; _pCursor
000012  4285              CMP      r5,r0
000014  d03a              BEQ      |L5.140|
;;;268        int i;
;;;269        pBM = pCursor->pBitmap;
000016  682c              LDR      r4,[r5,#0]
;;;270        i = pBM->pPal->NumEntries > 4 ? 4 : pBM->pPal->NumEntries;
000018  68e0              LDR      r0,[r4,#0xc]
00001a  6800              LDR      r0,[r0,#0]
00001c  2804              CMP      r0,#4
00001e  dd01              BLE      |L5.36|
000020  2004              MOVS     r0,#4
000022  e001              B        |L5.40|
                  |L5.36|
000024  68e0              LDR      r0,[r4,#0xc]
000026  6800              LDR      r0,[r0,#0]
                  |L5.40|
000028  4607              MOV      r7,r0
;;;271        while (i--) {
00002a  e00a              B        |L5.66|
                  |L5.44|
;;;272          LCD_COLOR Color = *(pBM->pPal->pPalEntries + i);
00002c  68e0              LDR      r0,[r4,#0xc]
00002e  6880              LDR      r0,[r0,#8]
000030  f8509027          LDR      r9,[r0,r7,LSL #2]
;;;273          _ColorIndex[i] = LCD_Color2Index(Color);
000034  4648              MOV      r0,r9
000036  f7fffffe          BL       LCD_Color2Index
00003a  4918              LDR      r1,|L5.156|
00003c  f8210017          STRH     r0,[r1,r7,LSL #1]
;;;274        }
000040  bf00              NOP      
                  |L5.66|
000042  0038              MOVS     r0,r7                 ;271
000044  f1a70701          SUB      r7,r7,#1              ;271
000048  d1f0              BNE      |L5.44|
;;;275        _Hide();
00004a  f7fffffe          BL       _Hide
;;;276        AllocSize = pBM->XSize * pBM->YSize * sizeof(LCD_PIXELINDEX);
00004e  8820              LDRH     r0,[r4,#0]
000050  8861              LDRH     r1,[r4,#2]
000052  4348              MULS     r0,r1,r0
000054  0046              LSLS     r6,r0,#1
;;;277        if (AllocSize != _AllocSize) {
000056  4812              LDR      r0,|L5.160|
000058  6800              LDR      r0,[r0,#0]  ; _AllocSize
00005a  4286              CMP      r6,r0
00005c  d007              BEQ      |L5.110|
;;;278          GUI_ALLOC_Free(_hBuffer);
00005e  4811              LDR      r0,|L5.164|
000060  f9b00000          LDRSH    r0,[r0,#0]  ; _hBuffer
000064  f7fffffe          BL       GUI_ALLOC_Free
;;;279          _hBuffer = 0;
000068  2000              MOVS     r0,#0
00006a  490e              LDR      r1,|L5.164|
00006c  8008              STRH     r0,[r1,#0]
                  |L5.110|
;;;280        }
;;;281        _hBuffer = GUI_ALLOC_AllocZero(AllocSize);
00006e  b230              SXTH     r0,r6
000070  f7fffffe          BL       GUI_ALLOC_AllocZero
000074  490b              LDR      r1,|L5.164|
000076  8008              STRH     r0,[r1,#0]
;;;282        _CursorOn = 1;
000078  2001              MOVS     r0,#1
00007a  490b              LDR      r1,|L5.168|
00007c  7008              STRB     r0,[r1,#0]
;;;283        _pCursor = pCursor;
00007e  4806              LDR      r0,|L5.152|
000080  6005              STR      r5,[r0,#0]  ; _pCursor
;;;284        _CalcRect();
000082  f7fffffe          BL       _CalcRect
;;;285        _Show();
000086  f7fffffe          BL       _Show
;;;286      }
00008a  bf00              NOP      
                  |L5.140|
;;;287      GUI_UNLOCK();
00008c  f7fffffe          BL       GUI_Unlock
;;;288      return pOldCursor;
000090  4640              MOV      r0,r8
;;;289    }
000092  e8bd87f0          POP      {r4-r10,pc}
;;;290    
                          ENDP

000096  0000              DCW      0x0000
                  |L5.152|
                          DCD      _pCursor
                  |L5.156|
                          DCD      _ColorIndex
                  |L5.160|
                          DCD      _AllocSize
                  |L5.164|
                          DCD      _hBuffer
                  |L5.168|
                          DCD      _CursorOn

                          AREA ||i.GUI_CURSOR_SetPosition||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_SetPosition PROC
;;;340    */
;;;341    void GUI_CURSOR_SetPosition(int xNewPos, int yNewPos) {
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
000004  b093              SUB      sp,sp,#0x4c
;;;342      int x, xStart, xStep, xEnd, xOff, xOverlapMin, xOverlapMax;
;;;343      int y, yStart, yStep, yEnd, yOff, yOverlapMin, yOverlapMax;
;;;344      int xSize;
;;;345      LCD_PIXELINDEX* pData;
;;;346      GUI_LOCK();
000006  f7fffffe          BL       GUI_Lock
;;;347      if (_hBuffer) {
00000a  4889              LDR      r0,|L6.560|
00000c  8800              LDRH     r0,[r0,#0]  ; _hBuffer
00000e  2800              CMP      r0,#0
                  |L6.16|
000010  d077              BEQ      |L6.258|
;;;348        if ((_x != xNewPos) | (_y != yNewPos)) {
000012  4888              LDR      r0,|L6.564|
000014  6801              LDR      r1,[r0,#0]  ; _x
000016  9813              LDR      r0,[sp,#0x4c]
000018  4281              CMP      r1,r0
00001a  d001              BEQ      |L6.32|
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L6.34|
                  |L6.32|
000020  2000              MOVS     r0,#0
                  |L6.34|
000022  4985              LDR      r1,|L6.568|
000024  680a              LDR      r2,[r1,#0]  ; _y
000026  9914              LDR      r1,[sp,#0x50]
000028  428a              CMP      r2,r1
00002a  d001              BEQ      |L6.48|
00002c  2101              MOVS     r1,#1
00002e  e000              B        |L6.50|
                  |L6.48|
000030  2100              MOVS     r1,#0
                  |L6.50|
000032  4308              ORRS     r0,r0,r1
000034  d0ec              BEQ      |L6.16|
;;;349          if (_CursorOn) {
000036  4881              LDR      r0,|L6.572|
000038  7800              LDRB     r0,[r0,#0]  ; _CursorOn
00003a  2800              CMP      r0,#0
00003c  d070              BEQ      |L6.288|
;;;350            const GUI_BITMAP GUI_UNI_PTR * pBM = _pCursor->pBitmap;
00003e  4880              LDR      r0,|L6.576|
000040  6800              LDR      r0,[r0,#0]  ; _pCursor
000042  6800              LDR      r0,[r0,#0]
000044  9008              STR      r0,[sp,#0x20]
;;;351            /* Save & set clip rect */
;;;352            /* Compute helper variables */
;;;353            pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
000046  487a              LDR      r0,|L6.560|
000048  f9b00000          LDRSH    r0,[r0,#0]  ; _hBuffer
00004c  f7fffffe          BL       GUI_ALLOC_h2p
000050  9009              STR      r0,[sp,#0x24]
;;;354            xSize = _pCursor->pBitmap->XSize;
000052  487b              LDR      r0,|L6.576|
000054  6800              LDR      r0,[r0,#0]  ; _pCursor
000056  6800              LDR      r0,[r0,#0]
000058  f8b0b000          LDRH     r11,[r0,#0]
;;;355            xOff = xNewPos - _x;
00005c  4975              LDR      r1,|L6.564|
00005e  9813              LDR      r0,[sp,#0x4c]
000060  6809              LDR      r1,[r1,#0]  ; _x
000062  1a46              SUBS     r6,r0,r1
;;;356            if (xOff > 0) {
000064  2e00              CMP      r6,#0
000066  dd0d              BLE      |L6.132|
;;;357              xStep  = 1;
000068  2001              MOVS     r0,#1
00006a  9011              STR      r0,[sp,#0x44]
;;;358              xStart = 0;
00006c  2000              MOVS     r0,#0
00006e  9012              STR      r0,[sp,#0x48]
;;;359              xEnd   = _pCursor->pBitmap->XSize;
000070  4873              LDR      r0,|L6.576|
000072  6800              LDR      r0,[r0,#0]  ; _pCursor
000074  6800              LDR      r0,[r0,#0]
000076  8800              LDRH     r0,[r0,#0]
000078  9010              STR      r0,[sp,#0x40]
;;;360              xOverlapMax = xEnd -1;
00007a  9810              LDR      r0,[sp,#0x40]
00007c  f1a00a01          SUB      r10,r0,#1
;;;361              xOverlapMin = xOff;
000080  960f              STR      r6,[sp,#0x3c]
000082  e00d              B        |L6.160|
                  |L6.132|
;;;362            } else {
;;;363              xStep  = -1;
000084  f04f30ff          MOV      r0,#0xffffffff
000088  9011              STR      r0,[sp,#0x44]
;;;364              xStart = xSize - 1;
00008a  f1ab0001          SUB      r0,r11,#1
00008e  9012              STR      r0,[sp,#0x48]
;;;365              xEnd   = -1;
000090  f04f30ff          MOV      r0,#0xffffffff
000094  9010              STR      r0,[sp,#0x40]
;;;366              xOverlapMin = 0;
000096  2000              MOVS     r0,#0
000098  900f              STR      r0,[sp,#0x3c]
;;;367              xOverlapMax = xStart + xOff;
00009a  9812              LDR      r0,[sp,#0x48]
00009c  eb000a06          ADD      r10,r0,r6
                  |L6.160|
;;;368            }
;;;369            yOff = yNewPos - _y;
0000a0  4965              LDR      r1,|L6.568|
0000a2  9814              LDR      r0,[sp,#0x50]
0000a4  6809              LDR      r1,[r1,#0]  ; _y
0000a6  1a47              SUBS     r7,r0,r1
;;;370            if (yOff > 0) {
0000a8  2f00              CMP      r7,#0
0000aa  dd0d              BLE      |L6.200|
;;;371              yStep  = 1;
0000ac  2001              MOVS     r0,#1
0000ae  900d              STR      r0,[sp,#0x34]
;;;372              yStart = 0;
0000b0  2000              MOVS     r0,#0
0000b2  900e              STR      r0,[sp,#0x38]
;;;373              yEnd   = _pCursor->pBitmap->YSize;
0000b4  4862              LDR      r0,|L6.576|
0000b6  6800              LDR      r0,[r0,#0]  ; _pCursor
0000b8  6800              LDR      r0,[r0,#0]
0000ba  8840              LDRH     r0,[r0,#2]
0000bc  900c              STR      r0,[sp,#0x30]
;;;374              yOverlapMax = yEnd -1;
0000be  980c              LDR      r0,[sp,#0x30]
0000c0  1e40              SUBS     r0,r0,#1
0000c2  900a              STR      r0,[sp,#0x28]
;;;375              yOverlapMin = yOff;
0000c4  970b              STR      r7,[sp,#0x2c]
0000c6  e010              B        |L6.234|
                  |L6.200|
;;;376            } else {
;;;377              yStep  = -1;
0000c8  f04f30ff          MOV      r0,#0xffffffff
0000cc  900d              STR      r0,[sp,#0x34]
;;;378              yStart = _pCursor->pBitmap->YSize - 1;
0000ce  485c              LDR      r0,|L6.576|
0000d0  6800              LDR      r0,[r0,#0]  ; _pCursor
0000d2  6800              LDR      r0,[r0,#0]
0000d4  8840              LDRH     r0,[r0,#2]
0000d6  1e40              SUBS     r0,r0,#1
0000d8  900e              STR      r0,[sp,#0x38]
;;;379              yEnd   = -1;
0000da  f04f30ff          MOV      r0,#0xffffffff
0000de  900c              STR      r0,[sp,#0x30]
;;;380              yOverlapMin = 0;
0000e0  2000              MOVS     r0,#0
0000e2  900b              STR      r0,[sp,#0x2c]
;;;381              yOverlapMax = yStart + yOff;
0000e4  980e              LDR      r0,[sp,#0x38]
0000e6  4438              ADD      r0,r0,r7
0000e8  900a              STR      r0,[sp,#0x28]
                  |L6.234|
;;;382            }
;;;383            /* Restore & Draw */
;;;384            for (y = yStart; y != yEnd; y += yStep) {
0000ea  9c0e              LDR      r4,[sp,#0x38]
0000ec  e08d              B        |L6.522|
                  |L6.238|
;;;385              char yOverlaps;
;;;386              char yNewOverlaps;
;;;387              int yNew = y + yOff;
0000ee  eb040807          ADD      r8,r4,r7
;;;388              yOverlaps    = (y >= yOverlapMin) && (y <= yOverlapMax);
0000f2  980b              LDR      r0,[sp,#0x2c]
0000f4  4284              CMP      r4,r0
0000f6  db05              BLT      |L6.260|
0000f8  980a              LDR      r0,[sp,#0x28]
0000fa  4284              CMP      r4,r0
0000fc  dc02              BGT      |L6.260|
0000fe  2001              MOVS     r0,#1
000100  e001              B        |L6.262|
                  |L6.258|
000102  e08f              B        |L6.548|
                  |L6.260|
000104  2000              MOVS     r0,#0
                  |L6.262|
000106  9007              STR      r0,[sp,#0x1c]
;;;389              yNewOverlaps = (yNew >= yOverlapMin) && (yNew <= yOverlapMax);
000108  980b              LDR      r0,[sp,#0x2c]
00010a  4580              CMP      r8,r0
00010c  db04              BLT      |L6.280|
00010e  980a              LDR      r0,[sp,#0x28]
000110  4580              CMP      r8,r0
000112  dc01              BGT      |L6.280|
000114  2001              MOVS     r0,#1
000116  e000              B        |L6.282|
                  |L6.280|
000118  2000              MOVS     r0,#0
                  |L6.282|
00011a  9006              STR      r0,[sp,#0x18]
;;;390              for (x= xStart; x != xEnd; x += xStep) {
00011c  9d12              LDR      r5,[sp,#0x48]
00011e  e06f              B        |L6.512|
                  |L6.288|
000120  e078              B        |L6.532|
                  |L6.290|
;;;391                char xyOverlaps, xyNewOverlaps;
;;;392                int BitmapPixel;
;;;393                LCD_PIXELINDEX Pixel;
;;;394                LCD_PIXELINDEX* pSave = pData + x + y * xSize;
000122  9809              LDR      r0,[sp,#0x24]
000124  eb000145          ADD      r1,r0,r5,LSL #1
000128  fb04f00b          MUL      r0,r4,r11
00012c  eb010040          ADD      r0,r1,r0,LSL #1
000130  9001              STR      r0,[sp,#4]
;;;395                int xNew = x + xOff;
000132  eb050906          ADD      r9,r5,r6
;;;396                BitmapPixel = GUI_GetBitmapPixelIndex(pBM, x, y);
000136  4622              MOV      r2,r4
000138  4629              MOV      r1,r5
00013a  9808              LDR      r0,[sp,#0x20]
00013c  f7fffffe          BL       GUI_GetBitmapPixelIndex
000140  9003              STR      r0,[sp,#0xc]
;;;397                xyOverlaps    = (x    >= xOverlapMin) && (x    <= xOverlapMax) && yOverlaps;
000142  980f              LDR      r0,[sp,#0x3c]
000144  4285              CMP      r5,r0
000146  db05              BLT      |L6.340|
000148  4555              CMP      r5,r10
00014a  dc03              BGT      |L6.340|
00014c  9807              LDR      r0,[sp,#0x1c]
00014e  b108              CBZ      r0,|L6.340|
000150  2001              MOVS     r0,#1
000152  e000              B        |L6.342|
                  |L6.340|
000154  2000              MOVS     r0,#0
                  |L6.342|
000156  9005              STR      r0,[sp,#0x14]
;;;398                xyNewOverlaps = (xNew >= xOverlapMin) && (xNew <= xOverlapMax) && yNewOverlaps;
000158  980f              LDR      r0,[sp,#0x3c]
00015a  4581              CMP      r9,r0
00015c  db05              BLT      |L6.362|
00015e  45d1              CMP      r9,r10
000160  dc03              BGT      |L6.362|
000162  9806              LDR      r0,[sp,#0x18]
000164  b108              CBZ      r0,|L6.362|
000166  2001              MOVS     r0,#1
000168  e000              B        |L6.364|
                  |L6.362|
00016a  2000              MOVS     r0,#0
                  |L6.364|
00016c  9004              STR      r0,[sp,#0x10]
;;;399                /* Restore old pixel if it was not transparent */
;;;400                if (BitmapPixel) {
00016e  9803              LDR      r0,[sp,#0xc]
000170  b198              CBZ      r0,|L6.410|
;;;401                  if (!xyOverlaps || (GUI_GetBitmapPixelIndex(pBM, x - xOff, y - yOff) == 0)) {
000172  9805              LDR      r0,[sp,#0x14]
000174  b128              CBZ      r0,|L6.386|
000176  1be2              SUBS     r2,r4,r7
000178  1ba9              SUBS     r1,r5,r6
00017a  9808              LDR      r0,[sp,#0x20]
00017c  f7fffffe          BL       GUI_GetBitmapPixelIndex
000180  b958              CBNZ     r0,|L6.410|
                  |L6.386|
;;;402                    _SetPixelIndex(x + _Rect.x0, y + _Rect.y0, *(pSave));
000182  9b01              LDR      r3,[sp,#4]
000184  881a              LDRH     r2,[r3,#0]
000186  4b2f              LDR      r3,|L6.580|
000188  f9b33002          LDRSH    r3,[r3,#2]  ; _Rect
00018c  1919              ADDS     r1,r3,r4
00018e  4b2d              LDR      r3,|L6.580|
000190  f9b33000          LDRSH    r3,[r3,#0]  ; _Rect
000194  1958              ADDS     r0,r3,r5
000196  f7fffffe          BL       _SetPixelIndex
                  |L6.410|
;;;403                  }
;;;404                }
;;;405                /* Save */
;;;406                if (xyNewOverlaps) {
00019a  9804              LDR      r0,[sp,#0x10]
00019c  b140              CBZ      r0,|L6.432|
;;;407                  Pixel = *(pData + xNew + yNew * xSize);
00019e  9809              LDR      r0,[sp,#0x24]
0001a0  eb000149          ADD      r1,r0,r9,LSL #1
0001a4  fb08f00b          MUL      r0,r8,r11
0001a8  f8310010          LDRH     r0,[r1,r0,LSL #1]
0001ac  9002              STR      r0,[sp,#8]
0001ae  e00d              B        |L6.460|
                  |L6.432|
;;;408                } else {
;;;409                  Pixel = _GetPixelIndex(_Rect.x0 + xNew, _Rect.y0 + yNew);
0001b0  4a24              LDR      r2,|L6.580|
0001b2  f9b22002          LDRSH    r2,[r2,#2]  ; _Rect
0001b6  eb020108          ADD      r1,r2,r8
0001ba  4a22              LDR      r2,|L6.580|
0001bc  f9b22000          LDRSH    r2,[r2,#0]  ; _Rect
0001c0  eb020009          ADD      r0,r2,r9
0001c4  f7fffffe          BL       _GetPixelIndex
0001c8  b280              UXTH     r0,r0
0001ca  9002              STR      r0,[sp,#8]
                  |L6.460|
;;;410                }
;;;411                *pSave = Pixel;
0001cc  e9dd1001          LDRD     r1,r0,[sp,#4]
0001d0  8008              STRH     r0,[r1,#0]
;;;412                /* Write new  ... We could write pixel by pixel here */
;;;413                if (BitmapPixel) {
0001d2  9803              LDR      r0,[sp,#0xc]
0001d4  b190              CBZ      r0,|L6.508|
;;;414                  LCD_PIXELINDEX NewPixel = _Log2Phys(BitmapPixel);
0001d6  9803              LDR      r0,[sp,#0xc]
0001d8  f7fffffe          BL       _Log2Phys
0001dc  b280              UXTH     r0,r0
0001de  9000              STR      r0,[sp,#0]
;;;415                  _SetPixelIndex(_Rect.x0 + xNew, _Rect.y0 + yNew, NewPixel);
0001e0  4a18              LDR      r2,|L6.580|
0001e2  f9b22002          LDRSH    r2,[r2,#2]  ; _Rect
0001e6  eb020108          ADD      r1,r2,r8
0001ea  4a16              LDR      r2,|L6.580|
0001ec  f9b22000          LDRSH    r2,[r2,#0]  ; _Rect
0001f0  eb020009          ADD      r0,r2,r9
0001f4  9a00              LDR      r2,[sp,#0]
0001f6  f7fffffe          BL       _SetPixelIndex
;;;416                }
0001fa  bf00              NOP      
                  |L6.508|
0001fc  9811              LDR      r0,[sp,#0x44]         ;390
0001fe  4405              ADD      r5,r5,r0              ;390
                  |L6.512|
000200  9810              LDR      r0,[sp,#0x40]         ;390
000202  4285              CMP      r5,r0                 ;390
000204  d18d              BNE      |L6.290|
000206  980d              LDR      r0,[sp,#0x34]         ;384
000208  4404              ADD      r4,r4,r0              ;384
                  |L6.522|
00020a  980c              LDR      r0,[sp,#0x30]         ;384
00020c  4284              CMP      r4,r0                 ;384
00020e  f47faf6e          BNE      |L6.238|
;;;417              }
;;;418            }
;;;419          }
000212  bf00              NOP      
                  |L6.532|
;;;420          _x = xNewPos;
000214  4907              LDR      r1,|L6.564|
000216  9813              LDR      r0,[sp,#0x4c]
000218  6008              STR      r0,[r1,#0]  ; _x
;;;421          _y = yNewPos;
00021a  4907              LDR      r1,|L6.568|
00021c  9814              LDR      r0,[sp,#0x50]
00021e  6008              STR      r0,[r1,#0]  ; _y
;;;422          _CalcRect();
000220  f7fffffe          BL       _CalcRect
                  |L6.548|
;;;423        }
;;;424      }
;;;425      GUI_UNLOCK();
000224  f7fffffe          BL       GUI_Unlock
;;;426    }
000228  b015              ADD      sp,sp,#0x54
00022a  e8bd8ff0          POP      {r4-r11,pc}
;;;427    
                          ENDP

00022e  0000              DCW      0x0000
                  |L6.560|
                          DCD      _hBuffer
                  |L6.564|
                          DCD      ||_x||
                  |L6.568|
                          DCD      ||_y||
                  |L6.572|
                          DCD      _CursorOn
                  |L6.576|
                          DCD      _pCursor
                  |L6.580|
                          DCD      _Rect

                          AREA ||i.GUI_CURSOR_Show||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_Show PROC
;;;308    */
;;;309    void GUI_CURSOR_Show(void) {
000000  b510              PUSH     {r4,lr}
;;;310      GUI_LOCK();
000002  f7fffffe          BL       GUI_Lock
;;;311      LCDDEV_L0_GetRect(&_ClipRect);
000006  480e              LDR      r0,|L7.64|
000008  6cc0              LDR      r0,[r0,#0x4c]  ; GUI_Context
00000a  6a01              LDR      r1,[r0,#0x20]
00000c  480d              LDR      r0,|L7.68|
00000e  4788              BLX      r1
;;;312      _Hide();
000010  f7fffffe          BL       _Hide
;;;313      _CursorOn = 1;
000014  2001              MOVS     r0,#1
000016  490c              LDR      r1,|L7.72|
000018  7008              STRB     r0,[r1,#0]
;;;314      /* Set function pointer which window manager can use */
;;;315      GUI_CURSOR_pfTempHide   = _TempHide;
00001a  480c              LDR      r0,|L7.76|
00001c  490c              LDR      r1,|L7.80|
00001e  6008              STR      r0,[r1,#0]  ; GUI_CURSOR_pfTempHide
;;;316      GUI_CURSOR_pfTempUnhide = _TempUnhide;
000020  480c              LDR      r0,|L7.84|
000022  490d              LDR      r1,|L7.88|
000024  6008              STR      r0,[r1,#0]  ; GUI_CURSOR_pfTempUnhide
;;;317      if (!_pCursor) {
000026  480d              LDR      r0,|L7.92|
000028  6800              LDR      r0,[r0,#0]  ; _pCursor
00002a  b918              CBNZ     r0,|L7.52|
;;;318        GUI_CURSOR_Select(GUI_DEFAULT_CURSOR);
00002c  480c              LDR      r0,|L7.96|
00002e  f7fffffe          BL       GUI_CURSOR_Select
000032  e001              B        |L7.56|
                  |L7.52|
;;;319      } else {
;;;320        _Show();
000034  f7fffffe          BL       _Show
                  |L7.56|
;;;321      }
;;;322      GUI_UNLOCK();
000038  f7fffffe          BL       GUI_Unlock
;;;323    }
00003c  bd10              POP      {r4,pc}
;;;324    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      GUI_Context
                  |L7.68|
                          DCD      _ClipRect
                  |L7.72|
                          DCD      _CursorOn
                  |L7.76|
                          DCD      _TempHide
                  |L7.80|
                          DCD      GUI_CURSOR_pfTempHide
                  |L7.84|
                          DCD      _TempUnhide
                  |L7.88|
                          DCD      GUI_CURSOR_pfTempUnhide
                  |L7.92|
                          DCD      _pCursor
                  |L7.96|
                          DCD      GUI_CursorArrowM

                          AREA ||i._CalcRect||, CODE, READONLY, ALIGN=2

                  _CalcRect PROC
;;;156    */
;;;157    static void _CalcRect(void) {
000000  4815              LDR      r0,|L8.88|
;;;158      if (_pCursor) {
000002  6800              LDR      r0,[r0,#0]  ; _pCursor
000004  b338              CBZ      r0,|L8.86|
;;;159        _Rect.x0 = _x - _pCursor->xHot;
000006  4814              LDR      r0,|L8.88|
000008  6800              LDR      r0,[r0,#0]  ; _pCursor
00000a  8880              LDRH     r0,[r0,#4]
00000c  4913              LDR      r1,|L8.92|
00000e  8809              LDRH     r1,[r1,#0]  ; _x
000010  1a08              SUBS     r0,r1,r0
000012  b200              SXTH     r0,r0
000014  4912              LDR      r1,|L8.96|
000016  8008              STRH     r0,[r1,#0]
;;;160        _Rect.y0 = _y - _pCursor->yHot;
000018  480f              LDR      r0,|L8.88|
00001a  6800              LDR      r0,[r0,#0]  ; _pCursor
00001c  8900              LDRH     r0,[r0,#8]
00001e  4911              LDR      r1,|L8.100|
000020  8809              LDRH     r1,[r1,#0]  ; _y
000022  1a08              SUBS     r0,r1,r0
000024  b200              SXTH     r0,r0
000026  490e              LDR      r1,|L8.96|
000028  8048              STRH     r0,[r1,#2]
;;;161        _Rect.x1 = _Rect.x0 + _pCursor->pBitmap->XSize - 1;
00002a  4608              MOV      r0,r1
00002c  8800              LDRH     r0,[r0,#0]  ; _Rect
00002e  490a              LDR      r1,|L8.88|
000030  6809              LDR      r1,[r1,#0]  ; _pCursor
000032  6809              LDR      r1,[r1,#0]
000034  8809              LDRH     r1,[r1,#0]
000036  4408              ADD      r0,r0,r1
000038  1e40              SUBS     r0,r0,#1
00003a  b200              SXTH     r0,r0
00003c  4908              LDR      r1,|L8.96|
00003e  8088              STRH     r0,[r1,#4]
;;;162        _Rect.y1 = _Rect.y0 + _pCursor->pBitmap->YSize - 1;
000040  4608              MOV      r0,r1
000042  8840              LDRH     r0,[r0,#2]  ; _Rect
000044  4904              LDR      r1,|L8.88|
000046  6809              LDR      r1,[r1,#0]  ; _pCursor
000048  6809              LDR      r1,[r1,#0]
00004a  8849              LDRH     r1,[r1,#2]
00004c  4408              ADD      r0,r0,r1
00004e  1e40              SUBS     r0,r0,#1
000050  b200              SXTH     r0,r0
000052  4903              LDR      r1,|L8.96|
000054  80c8              STRH     r0,[r1,#6]
                  |L8.86|
;;;163      }
;;;164    }
000056  4770              BX       lr
;;;165    
                          ENDP

                  |L8.88|
                          DCD      _pCursor
                  |L8.92|
                          DCD      ||_x||
                  |L8.96|
                          DCD      _Rect
                  |L8.100|
                          DCD      ||_y||

                          AREA ||i._Draw||, CODE, READONLY, ALIGN=2

                  _Draw PROC
;;;126    */
;;;127    static void _Draw(void) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;128      int x, y, xSize, ySize;
;;;129      LCD_PIXELINDEX* pData;
;;;130      const GUI_BITMAP GUI_UNI_PTR * pBM;
;;;131      GUI_LOCK();
000004  f7fffffe          BL       GUI_Lock
;;;132      if (_hBuffer) {
000008  4829              LDR      r0,|L9.176|
00000a  8800              LDRH     r0,[r0,#0]  ; _hBuffer
00000c  2800              CMP      r0,#0
00000e  d04b              BEQ      |L9.168|
;;;133        /* Save bitmap data */
;;;134        pBM = _pCursor->pBitmap;
000010  4828              LDR      r0,|L9.180|
000012  6800              LDR      r0,[r0,#0]  ; _pCursor
000014  6807              LDR      r7,[r0,#0]
;;;135        pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
000016  4826              LDR      r0,|L9.176|
000018  f9b00000          LDRSH    r0,[r0,#0]  ; _hBuffer
00001c  f7fffffe          BL       GUI_ALLOC_h2p
000020  4606              MOV      r6,r0
;;;136        xSize = _Rect.x1 - _Rect.x0 + 1;
000022  4825              LDR      r0,|L9.184|
000024  f9b00004          LDRSH    r0,[r0,#4]  ; _Rect
000028  4923              LDR      r1,|L9.184|
00002a  f9b11000          LDRSH    r1,[r1,#0]  ; _Rect
00002e  1a40              SUBS     r0,r0,r1
000030  f1000801          ADD      r8,r0,#1
;;;137        ySize = _Rect.y1 - _Rect.y0 + 1;
000034  4820              LDR      r0,|L9.184|
000036  f9b00006          LDRSH    r0,[r0,#6]  ; _Rect
00003a  491f              LDR      r1,|L9.184|
00003c  f9b11002          LDRSH    r1,[r1,#2]  ; _Rect
000040  1a40              SUBS     r0,r0,r1
000042  f1000901          ADD      r9,r0,#1
;;;138        for (y = 0; y < ySize; y++) {
000046  2500              MOVS     r5,#0
000048  e02c              B        |L9.164|
                  |L9.74|
;;;139          for (x = 0; x < xSize; x++) {
00004a  2400              MOVS     r4,#0
00004c  e024              B        |L9.152|
                  |L9.78|
;;;140            int BitmapPixel;
;;;141            *(pData + x) = _GetPixelIndex(_Rect.x0 + x, _Rect.y0 + y);
00004e  4a1a              LDR      r2,|L9.184|
000050  f9b22002          LDRSH    r2,[r2,#2]  ; _Rect
000054  1951              ADDS     r1,r2,r5
000056  4a18              LDR      r2,|L9.184|
000058  f9b22000          LDRSH    r2,[r2,#0]  ; _Rect
00005c  1910              ADDS     r0,r2,r4
00005e  f7fffffe          BL       _GetPixelIndex
000062  f8260014          STRH     r0,[r6,r4,LSL #1]
;;;142            BitmapPixel = GUI_GetBitmapPixelIndex(pBM, x, y);
000066  462a              MOV      r2,r5
000068  4621              MOV      r1,r4
00006a  4638              MOV      r0,r7
00006c  f7fffffe          BL       GUI_GetBitmapPixelIndex
000070  4682              MOV      r10,r0
;;;143            if (BitmapPixel) {
000072  f1ba0f00          CMP      r10,#0
000076  d00e              BEQ      |L9.150|
;;;144              _SetPixelIndex(_Rect.x0 + x, _Rect.y0 + y, _Log2Phys(BitmapPixel));
000078  4650              MOV      r0,r10
00007a  f7fffffe          BL       _Log2Phys
00007e  4683              MOV      r11,r0
000080  4a0d              LDR      r2,|L9.184|
000082  f9b22002          LDRSH    r2,[r2,#2]  ; _Rect
000086  1951              ADDS     r1,r2,r5
000088  4a0b              LDR      r2,|L9.184|
00008a  f9b22000          LDRSH    r2,[r2,#0]  ; _Rect
00008e  1910              ADDS     r0,r2,r4
000090  465a              MOV      r2,r11
000092  f7fffffe          BL       _SetPixelIndex
                  |L9.150|
000096  1c64              ADDS     r4,r4,#1              ;139
                  |L9.152|
000098  4544              CMP      r4,r8                 ;139
00009a  dbd8              BLT      |L9.78|
;;;145            }
;;;146          }
;;;147          pData += pBM->XSize;
00009c  8838              LDRH     r0,[r7,#0]
00009e  eb060640          ADD      r6,r6,r0,LSL #1
0000a2  1c6d              ADDS     r5,r5,#1              ;138
                  |L9.164|
0000a4  454d              CMP      r5,r9                 ;138
0000a6  dbd0              BLT      |L9.74|
                  |L9.168|
;;;148        }
;;;149      }
;;;150      GUI_UNLOCK();
0000a8  f7fffffe          BL       GUI_Unlock
;;;151    }
0000ac  e8bd9ff0          POP      {r4-r12,pc}
;;;152    
                          ENDP

                  |L9.176|
                          DCD      _hBuffer
                  |L9.180|
                          DCD      _pCursor
                  |L9.184|
                          DCD      _Rect

                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=2

                  _GetPixelIndex PROC
;;;74     */
;;;75     static int _GetPixelIndex(int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;76       if ((y >= _ClipRect.y0) && (y <= _ClipRect.y1)) {
000006  480d              LDR      r0,|L10.60|
000008  f9b00002          LDRSH    r0,[r0,#2]  ; _ClipRect
00000c  42a8              CMP      r0,r5
00000e  dc13              BGT      |L10.56|
000010  480a              LDR      r0,|L10.60|
000012  f9b00006          LDRSH    r0,[r0,#6]  ; _ClipRect
000016  42a8              CMP      r0,r5
000018  db0e              BLT      |L10.56|
;;;77         if ((x >= _ClipRect.x0) && (x <= _ClipRect.x1)) {
00001a  4808              LDR      r0,|L10.60|
00001c  f9b00000          LDRSH    r0,[r0,#0]  ; _ClipRect
000020  42a0              CMP      r0,r4
000022  dc09              BGT      |L10.56|
000024  4805              LDR      r0,|L10.60|
000026  f9b00004          LDRSH    r0,[r0,#4]  ; _ClipRect
00002a  42a0              CMP      r0,r4
00002c  db04              BLT      |L10.56|
;;;78           return LCD_L0_GetPixelIndex(x, y);
00002e  4629              MOV      r1,r5
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       LCD_L0_GetPixelIndex
                  |L10.54|
;;;79         }
;;;80       }
;;;81       return 0;
;;;82     }
000036  bd70              POP      {r4-r6,pc}
                  |L10.56|
000038  2000              MOVS     r0,#0                 ;81
00003a  e7fc              B        |L10.54|
;;;83     
                          ENDP

                  |L10.60|
                          DCD      _ClipRect

                          AREA ||i._Hide||, CODE, READONLY, ALIGN=2

                  _Hide PROC
;;;169    */
;;;170    static void _Hide(void) {
000000  b510              PUSH     {r4,lr}
;;;171      if (_CursorIsVis) {
000002  4804              LDR      r0,|L11.20|
000004  7800              LDRB     r0,[r0,#0]  ; _CursorIsVis
000006  b120              CBZ      r0,|L11.18|
;;;172        _Undraw();
000008  f7fffffe          BL       _Undraw
;;;173        _CursorIsVis = 0;
00000c  2000              MOVS     r0,#0
00000e  4901              LDR      r1,|L11.20|
000010  7008              STRB     r0,[r1,#0]
                  |L11.18|
;;;174      }
;;;175    }
000012  bd10              POP      {r4,pc}
;;;176    
                          ENDP

                  |L11.20|
                          DCD      _CursorIsVis

                          AREA ||i._Log2Phys||, CODE, READONLY, ALIGN=2

                  _Log2Phys PROC
;;;113    */
;;;114    static int _Log2Phys(int Index) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;115      if (Index < 4) {
000004  2c04              CMP      r4,#4
000006  da03              BGE      |L12.16|
;;;116        return _ColorIndex[Index];
000008  4807              LDR      r0,|L12.40|
00000a  f8300014          LDRH     r0,[r0,r4,LSL #1]
                  |L12.14|
;;;117      } else {
;;;118        LCD_COLOR Color = *(_pCursor->pBitmap->pPal->pPalEntries + Index);
;;;119        return LCD_Color2Index(Color);
;;;120      }
;;;121    }
00000e  bd70              POP      {r4-r6,pc}
                  |L12.16|
000010  4806              LDR      r0,|L12.44|
000012  6800              LDR      r0,[r0,#0]            ;118  ; _pCursor
000014  6800              LDR      r0,[r0,#0]            ;118
000016  68c0              LDR      r0,[r0,#0xc]          ;118
000018  6880              LDR      r0,[r0,#8]            ;118
00001a  f8505024          LDR      r5,[r0,r4,LSL #2]     ;118
00001e  4628              MOV      r0,r5                 ;119
000020  f7fffffe          BL       LCD_Color2Index
000024  e7f3              B        |L12.14|
;;;122    
                          ENDP

000026  0000              DCW      0x0000
                  |L12.40|
                          DCD      _ColorIndex
                  |L12.44|
                          DCD      _pCursor

                          AREA ||i._SetPixelIndex||, CODE, READONLY, ALIGN=2

                  _SetPixelIndex PROC
;;;59     */
;;;60     static void _SetPixelIndex(int x, int y, int Index) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;61       if ((y >= _ClipRect.y0) && (y <= _ClipRect.y1)) {
000008  480d              LDR      r0,|L13.64|
00000a  f9b00002          LDRSH    r0,[r0,#2]  ; _ClipRect
00000e  42a8              CMP      r0,r5
000010  dc15              BGT      |L13.62|
000012  480b              LDR      r0,|L13.64|
000014  f9b00006          LDRSH    r0,[r0,#6]  ; _ClipRect
000018  42a8              CMP      r0,r5
00001a  db10              BLT      |L13.62|
;;;62         if ((x >= _ClipRect.x0) && (x <= _ClipRect.x1)) {
00001c  4808              LDR      r0,|L13.64|
00001e  f9b00000          LDRSH    r0,[r0,#0]  ; _ClipRect
000022  42a0              CMP      r0,r4
000024  dc0b              BGT      |L13.62|
000026  4806              LDR      r0,|L13.64|
000028  f9b00004          LDRSH    r0,[r0,#4]  ; _ClipRect
00002c  42a0              CMP      r0,r4
00002e  db06              BLT      |L13.62|
;;;63           LCD_aAPI[0]->pfSetPixelIndex(x, y, Index);
000030  4804              LDR      r0,|L13.68|
000032  6800              LDR      r0,[r0,#0]  ; LCD_aAPI
000034  4632              MOV      r2,r6
000036  4629              MOV      r1,r5
000038  6a43              LDR      r3,[r0,#0x24]
00003a  4620              MOV      r0,r4
00003c  4798              BLX      r3
                  |L13.62|
;;;64         }
;;;65       }
;;;66     }
00003e  bd70              POP      {r4-r6,pc}
;;;67     
                          ENDP

                  |L13.64|
                          DCD      _ClipRect
                  |L13.68|
                          DCD      LCD_aAPI

                          AREA ||i._Show||, CODE, READONLY, ALIGN=2

                  _Show PROC
;;;180    */
;;;181    static void _Show(void) {
000000  b510              PUSH     {r4,lr}
;;;182      if (_CursorOn && (_CursorDeActCnt==0)) {
000002  4806              LDR      r0,|L14.28|
000004  7800              LDRB     r0,[r0,#0]  ; _CursorOn
000006  b138              CBZ      r0,|L14.24|
000008  4805              LDR      r0,|L14.32|
00000a  7800              LDRB     r0,[r0,#0]  ; _CursorDeActCnt
00000c  b920              CBNZ     r0,|L14.24|
;;;183        _CursorIsVis = 1;
00000e  2001              MOVS     r0,#1
000010  4904              LDR      r1,|L14.36|
000012  7008              STRB     r0,[r1,#0]
;;;184        _Draw();  
000014  f7fffffe          BL       _Draw
                  |L14.24|
;;;185      }
;;;186    }
000018  bd10              POP      {r4,pc}
;;;187    
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      _CursorOn
                  |L14.32|
                          DCD      _CursorDeActCnt
                  |L14.36|
                          DCD      _CursorIsVis

                          AREA ||i._TempHide||, CODE, READONLY, ALIGN=2

                  _TempHide PROC
;;;208    */
;;;209    static char _TempHide(const GUI_RECT* pRect) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;210      if (!_CursorIsVis) {
000004  4808              LDR      r0,|L15.40|
000006  7800              LDRB     r0,[r0,#0]  ; _CursorIsVis
000008  b908              CBNZ     r0,|L15.14|
;;;211        return 0;             /* Cursor not visible -> nothing to do */
00000a  2000              MOVS     r0,#0
                  |L15.12|
;;;212      }
;;;213      if ((pRect == NULL) || GUI_RectsIntersect(pRect, &_Rect)) {
;;;214        _Hide();              /* Cursor needs to be hidden */
;;;215        return 1;
;;;216      }
;;;217      return 0;               /* Cursor not affected -> nothing to do */
;;;218    }
00000c  bd10              POP      {r4,pc}
                  |L15.14|
00000e  b124              CBZ      r4,|L15.26|
000010  4906              LDR      r1,|L15.44|
000012  4620              MOV      r0,r4                 ;213
000014  f7fffffe          BL       GUI_RectsIntersect
000018  b118              CBZ      r0,|L15.34|
                  |L15.26|
00001a  f7fffffe          BL       _Hide
00001e  2001              MOVS     r0,#1                 ;215
000020  e7f4              B        |L15.12|
                  |L15.34|
000022  2000              MOVS     r0,#0                 ;217
000024  e7f2              B        |L15.12|
;;;219    
                          ENDP

000026  0000              DCW      0x0000
                  |L15.40|
                          DCD      _CursorIsVis
                  |L15.44|
                          DCD      _Rect

                          AREA ||i._TempUnhide||, CODE, READONLY, ALIGN=1

                  _TempUnhide PROC
;;;223    */
;;;224    static void _TempUnhide(void) {
000000  b510              PUSH     {r4,lr}
;;;225      _Show();
000002  f7fffffe          BL       _Show
;;;226    }
000006  bd10              POP      {r4,pc}
;;;227    
                          ENDP


                          AREA ||i._Undraw||, CODE, READONLY, ALIGN=2

                  _Undraw PROC
;;;90     */
;;;91     static void _Undraw(void) {
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;92       int x, y, xSize, ySize;
;;;93       LCD_PIXELINDEX* pData;
;;;94       /* Save bitmap data */
;;;95       GUI_LOCK();
000004  f7fffffe          BL       GUI_Lock
;;;96       if (_hBuffer) {
000008  481c              LDR      r0,|L17.124|
00000a  8800              LDRH     r0,[r0,#0]  ; _hBuffer
00000c  b390              CBZ      r0,|L17.116|
;;;97         pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
00000e  481b              LDR      r0,|L17.124|
000010  f9b00000          LDRSH    r0,[r0,#0]  ; _hBuffer
000014  f7fffffe          BL       GUI_ALLOC_h2p
000018  4606              MOV      r6,r0
;;;98         xSize = _Rect.x1 - _Rect.x0 + 1;
00001a  4819              LDR      r0,|L17.128|
00001c  f9b00004          LDRSH    r0,[r0,#4]  ; _Rect
000020  4917              LDR      r1,|L17.128|
000022  f9b11000          LDRSH    r1,[r1,#0]  ; _Rect
000026  1a40              SUBS     r0,r0,r1
000028  1c47              ADDS     r7,r0,#1
;;;99         ySize = _Rect.y1 - _Rect.y0 + 1;
00002a  4815              LDR      r0,|L17.128|
00002c  f9b00006          LDRSH    r0,[r0,#6]  ; _Rect
000030  4913              LDR      r1,|L17.128|
000032  f9b11002          LDRSH    r1,[r1,#2]  ; _Rect
000036  1a40              SUBS     r0,r0,r1
000038  f1000801          ADD      r8,r0,#1
;;;100        for (y = 0; y < ySize; y++) {
00003c  2500              MOVS     r5,#0
00003e  e017              B        |L17.112|
                  |L17.64|
;;;101          for (x = 0; x < xSize; x++) {
000040  2400              MOVS     r4,#0
000042  e00c              B        |L17.94|
                  |L17.68|
;;;102            _SetPixelIndex(x + _Rect.x0, y + _Rect.y0, *(pData + x));
000044  f8362014          LDRH     r2,[r6,r4,LSL #1]
000048  4b0d              LDR      r3,|L17.128|
00004a  f9b33002          LDRSH    r3,[r3,#2]  ; _Rect
00004e  1959              ADDS     r1,r3,r5
000050  4b0b              LDR      r3,|L17.128|
000052  f9b33000          LDRSH    r3,[r3,#0]  ; _Rect
000056  1918              ADDS     r0,r3,r4
000058  f7fffffe          BL       _SetPixelIndex
00005c  1c64              ADDS     r4,r4,#1              ;101
                  |L17.94|
00005e  42bc              CMP      r4,r7                 ;101
000060  dbf0              BLT      |L17.68|
;;;103          }
;;;104          pData += _pCursor->pBitmap->XSize;
000062  4808              LDR      r0,|L17.132|
000064  6800              LDR      r0,[r0,#0]  ; _pCursor
000066  6800              LDR      r0,[r0,#0]
000068  8800              LDRH     r0,[r0,#0]
00006a  eb060640          ADD      r6,r6,r0,LSL #1
00006e  1c6d              ADDS     r5,r5,#1              ;100
                  |L17.112|
000070  4545              CMP      r5,r8                 ;100
000072  dbe5              BLT      |L17.64|
                  |L17.116|
;;;105        }
;;;106      }
;;;107      GUI_UNLOCK();
000074  f7fffffe          BL       GUI_Unlock
;;;108    }
000078  e8bd81f0          POP      {r4-r8,pc}
;;;109    
                          ENDP

                  |L17.124|
                          DCD      _hBuffer
                  |L17.128|
                          DCD      _Rect
                  |L17.132|
                          DCD      _pCursor

                          AREA ||.data||, DATA, ALIGN=2

                  _hBuffer
000000  0000              DCB      0x00,0x00
                  _Rect
000002  0000              DCB      0x00,0x00
                          DCD      0x00000000
000008  0000              DCB      0x00,0x00
                  _CursorIsVis
00000a  00                DCB      0x00
                  _CursorOn
00000b  00                DCB      0x00
                  _pCursor
                          DCD      0x00000000
                  _CursorDeActCnt
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  _AllocSize
                          DCD      0x00000000
                  ||_x||
                          DCD      0x00000000
                  ||_y||
                          DCD      0x00000000
                  _ClipRect
                          %        8
                  _ColorIndex
                          %        8
