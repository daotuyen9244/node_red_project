; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gui__wrap.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\gui__wrap.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\Core\GUI__Wrap.c]
                          THUMB

                          AREA ||i.GUI__WrapGetNumBytesToNextLine||, CODE, READONLY, ALIGN=1

                  GUI__WrapGetNumBytesToNextLine PROC
;;;307    */
;;;308    int GUI__WrapGetNumBytesToNextLine(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;309      int NumChars, NumBytes;
;;;310      NumChars = GUI__WrapGetNumCharsToNextLine(pText, xSize, WrapMode);
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       GUI__WrapGetNumCharsToNextLine
000014  4680              MOV      r8,r0
;;;311      NumBytes = GUI_UC__NumChars2NumBytes(pText, NumChars);
000016  4641              MOV      r1,r8
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       GUI_UC__NumChars2NumBytes
00001e  4607              MOV      r7,r0
;;;312      return NumBytes;
000020  4638              MOV      r0,r7
;;;313    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;314    
                          ENDP


                          AREA ||i.GUI__WrapGetNumCharsDisp||, CODE, READONLY, ALIGN=1

                  GUI__WrapGetNumCharsDisp PROC
;;;273    */
;;;274    int GUI__WrapGetNumCharsDisp(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;275      return _WrapGetNumCharsDisp(pText, xSize, WrapMode, 0);
000008  2300              MOVS     r3,#0
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _WrapGetNumCharsDisp
;;;276    }
000014  bd70              POP      {r4-r6,pc}
;;;277    
                          ENDP


                          AREA ||i.GUI__WrapGetNumCharsToNextLine||, CODE, READONLY, ALIGN=1

                  GUI__WrapGetNumCharsToNextLine PROC
;;;281    */
;;;282    int GUI__WrapGetNumCharsToNextLine(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode) {
000000  e92d41f7          PUSH     {r0-r2,r4-r8,lr}
000004  b081              SUB      sp,sp,#4
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;283      int NumChars;
;;;284      int xDist;
;;;285      U16 Char;
;;;286      NumChars = _WrapGetNumCharsDisp(pText, xSize, WrapMode, &xDist);
00000a  466b              MOV      r3,sp
00000c  463a              MOV      r2,r7
00000e  4631              MOV      r1,r6
000010  9801              LDR      r0,[sp,#4]
000012  f7fffffe          BL       _WrapGetNumCharsDisp
000016  4604              MOV      r4,r0
;;;287      pText   += GUI_UC__NumChars2NumBytes(pText, NumChars);
000018  4621              MOV      r1,r4
00001a  9801              LDR      r0,[sp,#4]
00001c  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000020  9901              LDR      r1,[sp,#4]
000022  4408              ADD      r0,r0,r1
000024  9001              STR      r0,[sp,#4]
;;;288      Char     = GUI_UC__GetCharCodeInc(&pText);
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       GUI_UC__GetCharCodeInc
00002c  4605              MOV      r5,r0
;;;289      if (Char == '\n') {
00002e  2d0a              CMP      r5,#0xa
000030  d101              BNE      |L3.54|
;;;290        NumChars++;
000032  1c64              ADDS     r4,r4,#1
000034  e016              B        |L3.100|
                  |L3.54|
;;;291      } else {
;;;292        if ((WrapMode == GUI_WRAPMODE_WORD) && (Char == ' ')) {
000036  2f01              CMP      r7,#1
000038  d114              BNE      |L3.100|
00003a  2d20              CMP      r5,#0x20
00003c  d112              BNE      |L3.100|
;;;293          int xDistChar = GUI_GetCharDistX(Char);
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       GUI_GetCharDistX
000044  4680              MOV      r8,r0
;;;294          while ((Char == ' ') && (xSize >= xDist)) {
000046  e007              B        |L3.88|
                  |L3.72|
;;;295            NumChars++;
000048  1c64              ADDS     r4,r4,#1
;;;296            xDist += xDistChar;
00004a  9800              LDR      r0,[sp,#0]
00004c  4440              ADD      r0,r0,r8
00004e  9000              STR      r0,[sp,#0]
;;;297            Char = GUI_UC__GetCharCodeInc(&pText);
000050  a801              ADD      r0,sp,#4
000052  f7fffffe          BL       GUI_UC__GetCharCodeInc
000056  4605              MOV      r5,r0
                  |L3.88|
000058  2d20              CMP      r5,#0x20              ;294
00005a  d102              BNE      |L3.98|
00005c  9800              LDR      r0,[sp,#0]            ;294
00005e  4286              CMP      r6,r0                 ;294
000060  daf2              BGE      |L3.72|
                  |L3.98|
;;;298          }
;;;299        }
000062  bf00              NOP      
                  |L3.100|
;;;300      }
;;;301      return NumChars;
000064  4620              MOV      r0,r4
;;;302    }
000066  b004              ADD      sp,sp,#0x10
000068  e8bd81f0          POP      {r4-r8,pc}
;;;303    
                          ENDP


                          AREA ||i._GetCharWrap||, CODE, READONLY, ALIGN=1

                  _GetCharWrap PROC
;;;224    */
;;;225    static int _GetCharWrap(const char GUI_UNI_PTR * s, int xSize) {
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
000004  460e              MOV      r6,r1
;;;226      int xDist = 0, NumChars = 0;
000006  2700              MOVS     r7,#0
000008  2400              MOVS     r4,#0
;;;227      U16 Char;
;;;228      while ((Char = GUI_UC__GetCharCodeInc(&s)) != 0) {
00000a  e00a              B        |L4.34|
                  |L4.12|
;;;229        xDist += GUI_GetCharDistX(Char);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       GUI_GetCharDistX
000012  4407              ADD      r7,r7,r0
;;;230        if ((NumChars && (xDist > xSize)) || (Char == '\n')) {
000014  b10c              CBZ      r4,|L4.26|
000016  42b7              CMP      r7,r6
000018  dc01              BGT      |L4.30|
                  |L4.26|
00001a  2d0a              CMP      r5,#0xa
00001c  d100              BNE      |L4.32|
                  |L4.30|
;;;231          break;
00001e  e005              B        |L4.44|
                  |L4.32|
;;;232        }
;;;233        NumChars++;
000020  1c64              ADDS     r4,r4,#1
                  |L4.34|
000022  4668              MOV      r0,sp                 ;228
000024  f7fffffe          BL       GUI_UC__GetCharCodeInc
000028  0005              MOVS     r5,r0                 ;228
00002a  d1ef              BNE      |L4.12|
                  |L4.44|
00002c  bf00              NOP                            ;231
;;;234      }
;;;235      return NumChars;
00002e  4620              MOV      r0,r4
;;;236    }
000030  e8bd81fc          POP      {r2-r8,pc}
;;;237    
                          ENDP


                          AREA ||i._GetNoWrap||, CODE, READONLY, ALIGN=1

                  _GetNoWrap PROC
;;;42     */
;;;43     static int _GetNoWrap(const char GUI_UNI_PTR * s) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;44       return GUI__GetLineNumChars(s, 0x7FFF);
000004  f64771ff          MOV      r1,#0x7fff
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GUI__GetLineNumChars
;;;45     }
00000e  bd10              POP      {r4,pc}
;;;46     
                          ENDP


                          AREA ||i._GetWordWrap||, CODE, READONLY, ALIGN=1

                  _GetWordWrap PROC
;;;177    */
;;;178    static int _GetWordWrap(const char GUI_UNI_PTR * s, int xSize, int * pxDist) {
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
000004  b082              SUB      sp,sp,#8
000006  4688              MOV      r8,r1
000008  4617              MOV      r7,r2
;;;179      int xDist = 0, NumChars = 0, WordWrap = 0, CharDist = 0;
00000a  2600              MOVS     r6,#0
00000c  2500              MOVS     r5,#0
00000e  2000              MOVS     r0,#0
000010  9001              STR      r0,[sp,#4]
000012  4681              MOV      r9,r0
;;;180      U16 Char, PrevChar = 0, FirstChar = 0;
000014  4682              MOV      r10,r0
000016  4683              MOV      r11,r0
;;;181      while (1) {
000018  e02e              B        |L6.120|
                  |L6.26|
;;;182        Char = GUI_UC__GetCharCodeInc(&s);   /* Similar to:  *s++ */
00001a  a802              ADD      r0,sp,#8
00001c  f7fffffe          BL       GUI_UC__GetCharCodeInc
000020  4604              MOV      r4,r0
;;;183        if (!FirstChar) {
000022  f1bb0f00          CMP      r11,#0
000026  d100              BNE      |L6.42|
;;;184          FirstChar = Char;
000028  46a3              MOV      r11,r4
                  |L6.42|
;;;185        }
;;;186        /* Let's first check if the line end is reached. In this case we are done. */
;;;187        if (_IsLineEnd(Char)) {
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _IsLineEnd
000030  b108              CBZ      r0,|L6.54|
;;;188          WordWrap = NumChars;
000032  9501              STR      r5,[sp,#4]
;;;189          break;
000034  e021              B        |L6.122|
                  |L6.54|
;;;190        }
;;;191        /* If the current character is part of leading spaces the position can be used for wrapping */
;;;192        if ((Char != ' ') && (FirstChar == ' ')) {
000036  2c20              CMP      r4,#0x20
000038  d006              BEQ      |L6.72|
00003a  f1bb0f20          CMP      r11,#0x20
00003e  d103              BNE      |L6.72|
;;;193          FirstChar = 0;
000040  f04f0b00          MOV      r11,#0
;;;194          WordWrap = NumChars;
000044  9501              STR      r5,[sp,#4]
000046  e00b              B        |L6.96|
                  |L6.72|
;;;195        /* If the current character is a space and the previous character not, we found a wrapping position */
;;;196        } else if ((Char == ' ') && (Char != PrevChar)) {
000048  2c20              CMP      r4,#0x20
00004a  d103              BNE      |L6.84|
00004c  4554              CMP      r4,r10
00004e  d001              BEQ      |L6.84|
;;;197          WordWrap = NumChars;
000050  9501              STR      r5,[sp,#4]
000052  e005              B        |L6.96|
                  |L6.84|
;;;198        /* If the current character is a trailing space the position can be used for wrapping */
;;;199        } else if ((Char == ' ') && (PrevChar == ' ')) {
000054  2c20              CMP      r4,#0x20
000056  d103              BNE      |L6.96|
000058  f1ba0f20          CMP      r10,#0x20
00005c  d100              BNE      |L6.96|
;;;200          WordWrap = NumChars;
00005e  9501              STR      r5,[sp,#4]
                  |L6.96|
;;;201        }
;;;202        PrevChar = Char;
000060  46a2              MOV      r10,r4
;;;203        CharDist = GUI_GetCharDistX(Char);
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       GUI_GetCharDistX
000068  4681              MOV      r9,r0
;;;204        xDist += CharDist;
00006a  444e              ADD      r6,r6,r9
;;;205        if ((xDist <= xSize) || (NumChars == 0)) {
00006c  4546              CMP      r6,r8
00006e  dd00              BLE      |L6.114|
000070  b90d              CBNZ     r5,|L6.118|
                  |L6.114|
;;;206          NumChars++;
000072  1c6d              ADDS     r5,r5,#1
000074  e000              B        |L6.120|
                  |L6.118|
;;;207        } else {
;;;208          break;
000076  e000              B        |L6.122|
                  |L6.120|
000078  e7cf              B        |L6.26|
                  |L6.122|
00007a  bf00              NOP                            ;189
;;;209        }
;;;210      }
;;;211      if (!WordWrap) {
00007c  9801              LDR      r0,[sp,#4]
00007e  b900              CBNZ     r0,|L6.130|
;;;212        WordWrap = NumChars;
000080  9501              STR      r5,[sp,#4]
                  |L6.130|
;;;213      }
;;;214      if (pxDist) {
000082  b117              CBZ      r7,|L6.138|
;;;215        xDist -= CharDist;
000084  eba60609          SUB      r6,r6,r9
;;;216        *pxDist = xDist;
000088  603e              STR      r6,[r7,#0]
                  |L6.138|
;;;217      }
;;;218      return WordWrap;
00008a  9801              LDR      r0,[sp,#4]
;;;219    }
00008c  b005              ADD      sp,sp,#0x14
00008e  e8bd8ff0          POP      {r4-r11,pc}
;;;220    
                          ENDP


                          AREA ||i._IsLineEnd||, CODE, READONLY, ALIGN=1

                  _IsLineEnd PROC
;;;31     */
;;;32     static int _IsLineEnd(U16 Char) {
000000  4601              MOV      r1,r0
;;;33       if (!Char || (Char == '\n')) {
000002  b109              CBZ      r1,|L7.8|
000004  290a              CMP      r1,#0xa
000006  d101              BNE      |L7.12|
                  |L7.8|
;;;34         return 1;
000008  2001              MOVS     r0,#1
                  |L7.10|
;;;35       }
;;;36       return 0;
;;;37     }
00000a  4770              BX       lr
                  |L7.12|
00000c  2000              MOVS     r0,#0                 ;36
00000e  e7fc              B        |L7.10|
;;;38     
                          ENDP


                          AREA ||i._WrapGetNumCharsDisp||, CODE, READONLY, ALIGN=1

                  _WrapGetNumCharsDisp PROC
;;;243    */
;;;244    static int _WrapGetNumCharsDisp(const char GUI_UNI_PTR * pText, int xSize, GUI_WRAPMODE WrapMode, int * pxDist) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;245      int r;
;;;246      switch (WrapMode) {
00000c  2d01              CMP      r5,#1
00000e  d002              BEQ      |L8.22|
000010  2d02              CMP      r5,#2
000012  d10d              BNE      |L8.48|
000014  e006              B        |L8.36|
                  |L8.22|
;;;247      case GUI_WRAPMODE_WORD:
;;;248        r = _GetWordWrap(pText, xSize, pxDist);
000016  4632              MOV      r2,r6
000018  4641              MOV      r1,r8
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       _GetWordWrap
000020  4604              MOV      r4,r0
;;;249        break;
000022  e00a              B        |L8.58|
                  |L8.36|
;;;250      case GUI_WRAPMODE_CHAR:
;;;251        r = _GetCharWrap(pText, xSize);
000024  4641              MOV      r1,r8
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       _GetCharWrap
00002c  4604              MOV      r4,r0
;;;252        break;
00002e  e004              B        |L8.58|
                  |L8.48|
;;;253      default:
;;;254        r = _GetNoWrap(pText);
000030  4638              MOV      r0,r7
000032  f7fffffe          BL       _GetNoWrap
000036  4604              MOV      r4,r0
000038  bf00              NOP                            ;246
                  |L8.58|
00003a  bf00              NOP                            ;249
;;;255      }
;;;256      return r;
00003c  4620              MOV      r0,r4
;;;257    }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;258    
                          ENDP

