; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\jdcolor.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\jdcolor.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\JPEG\jdcolor.c]
                          THUMB

                          AREA ||i.build_ycc_rgb_table||, CODE, READONLY, ALIGN=2

                  build_ycc_rgb_table PROC
;;;69     LOCAL(void)
;;;70     build_ycc_rgb_table (j_decompress_ptr cinfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;71     {
000004  4605              MOV      r5,r0
;;;72       my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
000006  f8d541c8          LDR      r4,[r5,#0x1c8]
;;;73       int i;
;;;74       INT32 x;
;;;75       SHIFT_TEMPS
;;;76     
;;;77       cconvert->Cr_r_tab = (int *)
00000a  6868              LDR      r0,[r5,#4]
00000c  f44f6280          MOV      r2,#0x400
000010  2101              MOVS     r1,#1
000012  6803              LDR      r3,[r0,#0]
000014  4628              MOV      r0,r5
000016  4798              BLX      r3
000018  60a0              STR      r0,[r4,#8]
;;;78         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;79     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;80       cconvert->Cb_b_tab = (int *)
00001a  6868              LDR      r0,[r5,#4]
00001c  f44f6280          MOV      r2,#0x400
000020  2101              MOVS     r1,#1
000022  6803              LDR      r3,[r0,#0]
000024  4628              MOV      r0,r5
000026  4798              BLX      r3
000028  60e0              STR      r0,[r4,#0xc]
;;;81         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;82     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;83       cconvert->Cr_g_tab = (INT32 *)
00002a  6868              LDR      r0,[r5,#4]
00002c  f44f6280          MOV      r2,#0x400
000030  2101              MOVS     r1,#1
000032  6803              LDR      r3,[r0,#0]
000034  4628              MOV      r0,r5
000036  4798              BLX      r3
000038  6120              STR      r0,[r4,#0x10]
;;;84         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;85     				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;86       cconvert->Cb_g_tab = (INT32 *)
00003a  6868              LDR      r0,[r5,#4]
00003c  f44f6280          MOV      r2,#0x400
000040  2101              MOVS     r1,#1
000042  6803              LDR      r3,[r0,#0]
000044  4628              MOV      r0,r5
000046  4798              BLX      r3
000048  6160              STR      r0,[r4,#0x14]
;;;87         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;88     				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;89     
;;;90       for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
00004a  2600              MOVS     r6,#0
00004c  f06f077f          MVN      r7,#0x7f
000050  e020              B        |L1.148|
                  |L1.82|
;;;91         /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
;;;92         /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
;;;93         /* Cr=>R value is nearest int to 1.40200 * x */
;;;94         cconvert->Cr_r_tab[i] = (int)
000052  4912              LDR      r1,|L1.156|
000054  fb07f001          MUL      r0,r7,r1
000058  f5004000          ADD      r0,r0,#0x8000
00005c  1400              ASRS     r0,r0,#16
00005e  68a1              LDR      r1,[r4,#8]
000060  f8410026          STR      r0,[r1,r6,LSL #2]
;;;95     		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
;;;96         /* Cb=>B value is nearest int to 1.77200 * x */
;;;97         cconvert->Cb_b_tab[i] = (int)
000064  490e              LDR      r1,|L1.160|
000066  fb07f001          MUL      r0,r7,r1
00006a  f5004000          ADD      r0,r0,#0x8000
00006e  1400              ASRS     r0,r0,#16
000070  68e1              LDR      r1,[r4,#0xc]
000072  f8410026          STR      r0,[r1,r6,LSL #2]
;;;98     		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
;;;99         /* Cr=>G value is scaled-up -0.71414 * x */
;;;100        cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
000076  480b              LDR      r0,|L1.164|
000078  4378              MULS     r0,r7,r0
00007a  6921              LDR      r1,[r4,#0x10]
00007c  f8410026          STR      r0,[r1,r6,LSL #2]
;;;101        /* Cb=>G value is scaled-up -0.34414 * x */
;;;102        /* We also add in ONE_HALF so that need not do it in inner loop */
;;;103        cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
000080  4909              LDR      r1,|L1.168|
000082  fb07f001          MUL      r0,r7,r1
000086  f5004000          ADD      r0,r0,#0x8000
00008a  6961              LDR      r1,[r4,#0x14]
00008c  f8410026          STR      r0,[r1,r6,LSL #2]
000090  1c76              ADDS     r6,r6,#1              ;90
000092  1c7f              ADDS     r7,r7,#1              ;90
                  |L1.148|
000094  2eff              CMP      r6,#0xff              ;90
000096  dddc              BLE      |L1.82|
;;;104      }
;;;105    }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;106    
                          ENDP

                  |L1.156|
                          DCD      0x000166e9
                  |L1.160|
                          DCD      0x0001c5a2
                  |L1.164|
                          DCD      0xffff492e
                  |L1.168|
                          DCD      0xffffa7e6

                          AREA ||i.gray_rgb_convert||, CODE, READONLY, ALIGN=1

                  gray_rgb_convert PROC
;;;216    METHODDEF(void)
;;;217    gray_rgb_convert (j_decompress_ptr cinfo,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;218    		  JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;219    		  JSAMPARRAY output_buf, int num_rows)
;;;220    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  9f08              LDR      r7,[sp,#0x20]
;;;221      register JSAMPROW inptr, outptr;
;;;222      register JDIMENSION col;
;;;223      JDIMENSION num_cols = cinfo->output_width;
00000a  f8d4c070          LDR      r12,[r4,#0x70]
;;;224    
;;;225      while (--num_rows >= 0) {
00000e  e014              B        |L2.58|
                  |L2.16|
;;;226        inptr = input_buf[0][input_row++];
000010  4690              MOV      r8,r2
000012  1c52              ADDS     r2,r2,#1
000014  f8d5a000          LDR      r10,[r5,#0]
000018  f85a6028          LDR      r6,[r10,r8,LSL #2]
;;;227        outptr = *output_buf++;
00001c  cb01              LDM      r3!,{r0}
;;;228        for (col = 0; col < num_cols; col++) {
00001e  2100              MOVS     r1,#0
000020  e009              B        |L2.54|
                  |L2.34|
;;;229          /* We can dispense with GETJSAMPLE() here */
;;;230          outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
000022  f8168001          LDRB     r8,[r6,r1]
000026  f8808002          STRB     r8,[r0,#2]
00002a  f8808001          STRB     r8,[r0,#1]
00002e  f8808000          STRB     r8,[r0,#0]
;;;231          outptr += RGB_PIXELSIZE;
000032  1cc0              ADDS     r0,r0,#3
000034  1c49              ADDS     r1,r1,#1              ;228
                  |L2.54|
000036  4561              CMP      r1,r12                ;228
000038  d3f3              BCC      |L2.34|
                  |L2.58|
00003a  f1a70801          SUB      r8,r7,#1              ;225
00003e  f1b80700          SUBS     r7,r8,#0              ;225
000042  dae5              BGE      |L2.16|
;;;232        }
;;;233      }
;;;234    }
000044  e8bd87f0          POP      {r4-r10,pc}
;;;235    
                          ENDP


                          AREA ||i.grayscale_convert||, CODE, READONLY, ALIGN=1

                  grayscale_convert PROC
;;;200    METHODDEF(void)
;;;201    grayscale_convert (j_decompress_ptr cinfo,
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;202    		   JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;203    		   JSAMPARRAY output_buf, int num_rows)
;;;204    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;205      jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
000010  6f20              LDR      r0,[r4,#0x70]
000012  e9cd8000          STRD     r8,r0,[sp,#0]
000016  2300              MOVS     r3,#0
000018  463a              MOV      r2,r7
00001a  4631              MOV      r1,r6
00001c  6828              LDR      r0,[r5,#0]
00001e  f7fffffe          BL       jcopy_sample_rows
;;;206    		    num_rows, cinfo->output_width);
;;;207    }
000022  e8bd81fc          POP      {r2-r8,pc}
;;;208    
                          ENDP


                          AREA ||i.jinit_color_deconverter||, CODE, READONLY, ALIGN=2

                  jinit_color_deconverter PROC
;;;304    GLOBAL(void)
;;;305    jinit_color_deconverter (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;306    {
000002  4604              MOV      r4,r0
;;;307      my_cconvert_ptr cconvert;
;;;308      int ci;
;;;309    
;;;310      cconvert = (my_cconvert_ptr)
000004  6860              LDR      r0,[r4,#4]
000006  2218              MOVS     r2,#0x18
000008  2101              MOVS     r1,#1
00000a  6803              LDR      r3,[r0,#0]
00000c  4620              MOV      r0,r4
00000e  4798              BLX      r3
000010  4605              MOV      r5,r0
;;;311        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;312    				SIZEOF(my_color_deconverter));
;;;313      cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
000012  f8c451c8          STR      r5,[r4,#0x1c8]
;;;314      cconvert->pub.start_pass = start_pass_dcolor;
000016  4861              LDR      r0,|L4.412|
000018  6028              STR      r0,[r5,#0]
;;;315    
;;;316      /* Make sure num_components agrees with jpeg_color_space */
;;;317      switch (cinfo->jpeg_color_space) {
00001a  f8940028          LDRB     r0,[r4,#0x28]
00001e  2806              CMP      r0,#6
000020  d227              BCS      |L4.114|
000022  e8dff000          TBB      [pc,r0]
000026  2603              DCB      0x26,0x03
000028  0e0f1a1b          DCB      0x0e,0x0f,0x1a,0x1b
;;;318      case JCS_GRAYSCALE:
;;;319        if (cinfo->num_components != 1)
00002c  6a60              LDR      r0,[r4,#0x24]
00002e  2801              CMP      r0,#1
000030  d006              BEQ      |L4.64|
;;;320          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
000032  200a              MOVS     r0,#0xa
000034  6821              LDR      r1,[r4,#0]
000036  6148              STR      r0,[r1,#0x14]
000038  6820              LDR      r0,[r4,#0]
00003a  6801              LDR      r1,[r0,#0]
00003c  4620              MOV      r0,r4
00003e  4788              BLX      r1
                  |L4.64|
;;;321        break;
000040  e022              B        |L4.136|
;;;322    
;;;323      case JCS_RGB:
;;;324      case JCS_YCbCr:
000042  bf00              NOP      
;;;325        if (cinfo->num_components != 3)
000044  6a60              LDR      r0,[r4,#0x24]
000046  2803              CMP      r0,#3
000048  d006              BEQ      |L4.88|
;;;326          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
00004a  200a              MOVS     r0,#0xa
00004c  6821              LDR      r1,[r4,#0]
00004e  6148              STR      r0,[r1,#0x14]
000050  6820              LDR      r0,[r4,#0]
000052  6801              LDR      r1,[r0,#0]
000054  4620              MOV      r0,r4
000056  4788              BLX      r1
                  |L4.88|
;;;327        break;
000058  e016              B        |L4.136|
;;;328    
;;;329      case JCS_CMYK:
;;;330      case JCS_YCCK:
00005a  bf00              NOP      
;;;331        if (cinfo->num_components != 4)
00005c  6a60              LDR      r0,[r4,#0x24]
00005e  2804              CMP      r0,#4
000060  d006              BEQ      |L4.112|
;;;332          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
000062  200a              MOVS     r0,#0xa
000064  6821              LDR      r1,[r4,#0]
000066  6148              STR      r0,[r1,#0x14]
000068  6820              LDR      r0,[r4,#0]
00006a  6801              LDR      r1,[r0,#0]
00006c  4620              MOV      r0,r4
00006e  4788              BLX      r1
                  |L4.112|
;;;333        break;
000070  e00a              B        |L4.136|
                  |L4.114|
;;;334    
;;;335      default:			/* JCS_UNKNOWN can be anything */
;;;336        if (cinfo->num_components < 1)
000072  6a60              LDR      r0,[r4,#0x24]
000074  2801              CMP      r0,#1
000076  da06              BGE      |L4.134|
;;;337          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
000078  200a              MOVS     r0,#0xa
00007a  6821              LDR      r1,[r4,#0]
00007c  6148              STR      r0,[r1,#0x14]
00007e  6820              LDR      r0,[r4,#0]
000080  6801              LDR      r1,[r0,#0]
000082  4620              MOV      r0,r4
000084  4788              BLX      r1
                  |L4.134|
;;;338        break;
000086  bf00              NOP      
                  |L4.136|
000088  bf00              NOP                            ;321
;;;339      }
;;;340    
;;;341      /* Set out_color_components and conversion method based on requested space.
;;;342       * Also clear the component_needed flags for any unused components,
;;;343       * so that earlier pipeline stages can avoid useless computation.
;;;344       */
;;;345    
;;;346      switch (cinfo->out_color_space) {
00008a  f8940029          LDRB     r0,[r4,#0x29]
00008e  2801              CMP      r0,#1
000090  d004              BEQ      |L4.156|
000092  2802              CMP      r0,#2
000094  d027              BEQ      |L4.230|
000096  2804              CMP      r0,#4
000098  d163              BNE      |L4.354|
00009a  e047              B        |L4.300|
                  |L4.156|
;;;347      case JCS_GRAYSCALE:
;;;348        cinfo->out_color_components = 1;
00009c  2001              MOVS     r0,#1
00009e  67a0              STR      r0,[r4,#0x78]
;;;349        if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
0000a0  f8940028          LDRB     r0,[r4,#0x28]
0000a4  2801              CMP      r0,#1
0000a6  d003              BEQ      |L4.176|
;;;350    	cinfo->jpeg_color_space == JCS_YCbCr) {
0000a8  f8940028          LDRB     r0,[r4,#0x28]
0000ac  2803              CMP      r0,#3
0000ae  d112              BNE      |L4.214|
                  |L4.176|
;;;351          cconvert->pub.color_convert = grayscale_convert;
0000b0  483b              LDR      r0,|L4.416|
0000b2  6068              STR      r0,[r5,#4]
;;;352          /* For color->grayscale conversion, only the Y (0) component is needed */
;;;353          for (ci = 1; ci < cinfo->num_components; ci++)
0000b4  2601              MOVS     r6,#1
0000b6  e00a              B        |L4.206|
                  |L4.184|
;;;354    	cinfo->comp_info[ci].component_needed = FALSE;
0000b8  2000              MOVS     r0,#0
0000ba  ebc602c6          RSB      r2,r6,r6,LSL #3
0000be  eb020242          ADD      r2,r2,r2,LSL #1
0000c2  f8d410d8          LDR      r1,[r4,#0xd8]
0000c6  eb010182          ADD      r1,r1,r2,LSL #2
0000ca  6308              STR      r0,[r1,#0x30]
0000cc  1c76              ADDS     r6,r6,#1              ;353
                  |L4.206|
0000ce  6a60              LDR      r0,[r4,#0x24]         ;353
0000d0  42b0              CMP      r0,r6                 ;353
0000d2  dcf1              BGT      |L4.184|
0000d4  e006              B        |L4.228|
                  |L4.214|
;;;355        } else
;;;356          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
0000d6  201b              MOVS     r0,#0x1b
0000d8  6821              LDR      r1,[r4,#0]
0000da  6148              STR      r0,[r1,#0x14]
0000dc  6820              LDR      r0,[r4,#0]
0000de  6801              LDR      r1,[r0,#0]
0000e0  4620              MOV      r0,r4
0000e2  4788              BLX      r1
                  |L4.228|
;;;357        break;
0000e4  e050              B        |L4.392|
                  |L4.230|
;;;358    
;;;359      case JCS_RGB:
;;;360        cinfo->out_color_components = RGB_PIXELSIZE;
0000e6  2003              MOVS     r0,#3
0000e8  67a0              STR      r0,[r4,#0x78]
;;;361        if (cinfo->jpeg_color_space == JCS_YCbCr) {
0000ea  f8940028          LDRB     r0,[r4,#0x28]
0000ee  2803              CMP      r0,#3
0000f0  d105              BNE      |L4.254|
;;;362          cconvert->pub.color_convert = ycc_rgb_convert;
0000f2  482c              LDR      r0,|L4.420|
0000f4  6068              STR      r0,[r5,#4]
;;;363          build_ycc_rgb_table(cinfo);
0000f6  4620              MOV      r0,r4
0000f8  f7fffffe          BL       build_ycc_rgb_table
0000fc  e015              B        |L4.298|
                  |L4.254|
;;;364        } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
0000fe  f8940028          LDRB     r0,[r4,#0x28]
000102  2801              CMP      r0,#1
000104  d102              BNE      |L4.268|
;;;365          cconvert->pub.color_convert = gray_rgb_convert;
000106  4828              LDR      r0,|L4.424|
000108  6068              STR      r0,[r5,#4]
00010a  e00e              B        |L4.298|
                  |L4.268|
;;;366        } else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3) {
00010c  f8940028          LDRB     r0,[r4,#0x28]
000110  2802              CMP      r0,#2
000112  d103              BNE      |L4.284|
000114  bf00              NOP      
;;;367          cconvert->pub.color_convert = null_convert;
000116  4825              LDR      r0,|L4.428|
000118  6068              STR      r0,[r5,#4]
00011a  e006              B        |L4.298|
                  |L4.284|
;;;368        } else
;;;369          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
00011c  201b              MOVS     r0,#0x1b
00011e  6821              LDR      r1,[r4,#0]
000120  6148              STR      r0,[r1,#0x14]
000122  6820              LDR      r0,[r4,#0]
000124  6801              LDR      r1,[r0,#0]
000126  4620              MOV      r0,r4
000128  4788              BLX      r1
                  |L4.298|
;;;370        break;
00012a  e02d              B        |L4.392|
                  |L4.300|
;;;371    
;;;372      case JCS_CMYK:
;;;373        cinfo->out_color_components = 4;
00012c  2004              MOVS     r0,#4
00012e  67a0              STR      r0,[r4,#0x78]
;;;374        if (cinfo->jpeg_color_space == JCS_YCCK) {
000130  f8940028          LDRB     r0,[r4,#0x28]
000134  2805              CMP      r0,#5
000136  d105              BNE      |L4.324|
;;;375          cconvert->pub.color_convert = ycck_cmyk_convert;
000138  481d              LDR      r0,|L4.432|
00013a  6068              STR      r0,[r5,#4]
;;;376          build_ycc_rgb_table(cinfo);
00013c  4620              MOV      r0,r4
00013e  f7fffffe          BL       build_ycc_rgb_table
000142  e00d              B        |L4.352|
                  |L4.324|
;;;377        } else if (cinfo->jpeg_color_space == JCS_CMYK) {
000144  f8940028          LDRB     r0,[r4,#0x28]
000148  2804              CMP      r0,#4
00014a  d102              BNE      |L4.338|
;;;378          cconvert->pub.color_convert = null_convert;
00014c  4817              LDR      r0,|L4.428|
00014e  6068              STR      r0,[r5,#4]
000150  e006              B        |L4.352|
                  |L4.338|
;;;379        } else
;;;380          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
000152  201b              MOVS     r0,#0x1b
000154  6821              LDR      r1,[r4,#0]
000156  6148              STR      r0,[r1,#0x14]
000158  6820              LDR      r0,[r4,#0]
00015a  6801              LDR      r1,[r0,#0]
00015c  4620              MOV      r0,r4
00015e  4788              BLX      r1
                  |L4.352|
;;;381        break;
000160  e012              B        |L4.392|
                  |L4.354|
;;;382    
;;;383      default:
;;;384        /* Permit null conversion to same output space */
;;;385        if (cinfo->out_color_space == cinfo->jpeg_color_space) {
000162  f8940029          LDRB     r0,[r4,#0x29]
000166  f8941028          LDRB     r1,[r4,#0x28]
00016a  4288              CMP      r0,r1
00016c  d104              BNE      |L4.376|
;;;386          cinfo->out_color_components = cinfo->num_components;
00016e  6a60              LDR      r0,[r4,#0x24]
000170  67a0              STR      r0,[r4,#0x78]
;;;387          cconvert->pub.color_convert = null_convert;
000172  480e              LDR      r0,|L4.428|
000174  6068              STR      r0,[r5,#4]
000176  e006              B        |L4.390|
                  |L4.376|
;;;388        } else			/* unsupported non-null conversion */
;;;389          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
000178  201b              MOVS     r0,#0x1b
00017a  6821              LDR      r1,[r4,#0]
00017c  6148              STR      r0,[r1,#0x14]
00017e  6820              LDR      r0,[r4,#0]
000180  6801              LDR      r1,[r0,#0]
000182  4620              MOV      r0,r4
000184  4788              BLX      r1
                  |L4.390|
;;;390        break;
000186  bf00              NOP      
                  |L4.392|
000188  bf00              NOP                            ;357
;;;391      }
;;;392    
;;;393      if (cinfo->quantize_colors)
00018a  6d60              LDR      r0,[r4,#0x54]
00018c  b110              CBZ      r0,|L4.404|
;;;394        cinfo->output_components = 1; /* single colormapped output component */
00018e  2001              MOVS     r0,#1
000190  67e0              STR      r0,[r4,#0x7c]
000192  e001              B        |L4.408|
                  |L4.404|
;;;395      else
;;;396        cinfo->output_components = cinfo->out_color_components;
000194  6fa0              LDR      r0,[r4,#0x78]
000196  67e0              STR      r0,[r4,#0x7c]
                  |L4.408|
;;;397    }
000198  bd70              POP      {r4-r6,pc}
                          ENDP

00019a  0000              DCW      0x0000
                  |L4.412|
                          DCD      start_pass_dcolor
                  |L4.416|
                          DCD      grayscale_convert
                  |L4.420|
                          DCD      ycc_rgb_convert
                  |L4.424|
                          DCD      gray_rgb_convert
                  |L4.428|
                          DCD      null_convert
                  |L4.432|
                          DCD      ycck_cmyk_convert

                          AREA ||i.null_convert||, CODE, READONLY, ALIGN=1

                  null_convert PROC
;;;168    METHODDEF(void)
;;;169    null_convert (j_decompress_ptr cinfo,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;170    	      JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;171    	      JSAMPARRAY output_buf, int num_rows)
;;;172    {
000004  4604              MOV      r4,r0
000006  f8dd8020          LDR      r8,[sp,#0x20]
;;;173      register JSAMPROW inptr, outptr;
;;;174      register JDIMENSION count;
;;;175      register int num_components = cinfo->num_components;
00000a  f8d4c024          LDR      r12,[r4,#0x24]
;;;176      JDIMENSION num_cols = cinfo->output_width;
00000e  f8d49070          LDR      r9,[r4,#0x70]
;;;177      int ci;
;;;178    
;;;179      while (--num_rows >= 0) {
000012  e018              B        |L5.70|
                  |L5.20|
;;;180        for (ci = 0; ci < num_components; ci++) {
000014  2000              MOVS     r0,#0
000016  e012              B        |L5.62|
                  |L5.24|
;;;181          inptr = input_buf[ci][input_row];
000018  f851a020          LDR      r10,[r1,r0,LSL #2]
00001c  f85a6022          LDR      r6,[r10,r2,LSL #2]
;;;182          outptr = output_buf[0] + ci;
000020  f8d3a000          LDR      r10,[r3,#0]
000024  eb0a0700          ADD      r7,r10,r0
;;;183          for (count = num_cols; count > 0; count--) {
000028  464d              MOV      r5,r9
00002a  e005              B        |L5.56|
                  |L5.44|
;;;184    	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
00002c  f816ab01          LDRB     r10,[r6],#1
000030  f887a000          STRB     r10,[r7,#0]
;;;185    	outptr += num_components;
000034  4467              ADD      r7,r7,r12
000036  1e6d              SUBS     r5,r5,#1              ;183
                  |L5.56|
000038  2d00              CMP      r5,#0                 ;183
00003a  d1f7              BNE      |L5.44|
00003c  1c40              ADDS     r0,r0,#1              ;180
                  |L5.62|
00003e  4560              CMP      r0,r12                ;180
000040  dbea              BLT      |L5.24|
;;;186          }
;;;187        }
;;;188        input_row++;
000042  1c52              ADDS     r2,r2,#1
;;;189        output_buf++;
000044  1d1b              ADDS     r3,r3,#4
                  |L5.70|
000046  f1a80a01          SUB      r10,r8,#1             ;179
00004a  f1ba0800          SUBS     r8,r10,#0             ;179
00004e  dae1              BGE      |L5.20|
;;;190      }
;;;191    }
000050  e8bd87f0          POP      {r4-r10,pc}
;;;192    
                          ENDP


                          AREA ||i.start_pass_dcolor||, CODE, READONLY, ALIGN=1

                  start_pass_dcolor PROC
;;;292    METHODDEF(void)
;;;293    start_pass_dcolor (j_decompress_ptr cinfo)
000000  bf00              NOP      
;;;294    {
;;;295      GUI_USE_PARA(cinfo);
;;;296      /* no work needed */
;;;297    }
000002  4770              BX       lr
;;;298    
                          ENDP


                          AREA ||i.ycc_rgb_convert||, CODE, READONLY, ALIGN=1

                  ycc_rgb_convert PROC
;;;119    METHODDEF(void)
;;;120    ycc_rgb_convert (j_decompress_ptr cinfo,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;121    		 JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;122    		 JSAMPARRAY output_buf, int num_rows)
;;;123    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  461f              MOV      r7,r3
;;;124      my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
00000a  f8d431c8          LDR      r3,[r4,#0x1c8]
;;;125      register int y, cb, cr;
;;;126      register JSAMPROW outptr;
;;;127      register JSAMPROW inptr0, inptr1, inptr2;
;;;128      register JDIMENSION col;
;;;129      JDIMENSION num_cols = cinfo->output_width;
00000e  f8d4b070          LDR      r11,[r4,#0x70]
000012  f8cdb010          STR      r11,[sp,#0x10]
;;;130      /* copy these pointers into registers if possible */
;;;131      register JSAMPLE * range_limit = cinfo->sample_range_limit;
000016  f8d49144          LDR      r9,[r4,#0x144]
;;;132      register int * Crrtab = cconvert->Cr_r_tab;
00001a  f8d3b008          LDR      r11,[r3,#8]
00001e  f8cdb00c          STR      r11,[sp,#0xc]
;;;133      register int * Cbbtab = cconvert->Cb_b_tab;
000022  f8d3b00c          LDR      r11,[r3,#0xc]
000026  f8cdb008          STR      r11,[sp,#8]
;;;134      register INT32 * Crgtab = cconvert->Cr_g_tab;
00002a  f8d3b010          LDR      r11,[r3,#0x10]
00002e  f8cdb004          STR      r11,[sp,#4]
;;;135      register INT32 * Cbgtab = cconvert->Cb_g_tab;
000032  f8d3b014          LDR      r11,[r3,#0x14]
000036  f8cdb000          STR      r11,[sp,#0]
;;;136      SHIFT_TEMPS
;;;137    
;;;138      while (--num_rows >= 0) {
00003a  e044              B        |L7.198|
                  |L7.60|
;;;139        inptr0 = input_buf[0][input_row];
00003c  f8d1b000          LDR      r11,[r1,#0]
000040  f85ba022          LDR      r10,[r11,r2,LSL #2]
;;;140        inptr1 = input_buf[1][input_row];
000044  f8d1b004          LDR      r11,[r1,#4]
000048  f85bb022          LDR      r11,[r11,r2,LSL #2]
00004c  f8cdb018          STR      r11,[sp,#0x18]
;;;141        inptr2 = input_buf[2][input_row];
000050  f8d1b008          LDR      r11,[r1,#8]
000054  f85bb022          LDR      r11,[r11,r2,LSL #2]
000058  f8cdb014          STR      r11,[sp,#0x14]
;;;142        input_row++;
00005c  1c52              ADDS     r2,r2,#1
;;;143        outptr = *output_buf++;
00005e  cf40              LDM      r7!,{r6}
;;;144        for (col = 0; col < num_cols; col++) {
000060  2000              MOVS     r0,#0
000062  e02c              B        |L7.190|
                  |L7.100|
;;;145          y  = GETJSAMPLE(inptr0[col]);
000064  f81a5000          LDRB     r5,[r10,r0]
;;;146          cb = GETJSAMPLE(inptr1[col]);
000068  f8ddb018          LDR      r11,[sp,#0x18]
00006c  f81bc000          LDRB     r12,[r11,r0]
;;;147          cr = GETJSAMPLE(inptr2[col]);
000070  f8ddb014          LDR      r11,[sp,#0x14]
000074  f81b8000          LDRB     r8,[r11,r0]
;;;148          /* Range-limiting is essential due to noise introduced by DCT losses. */
;;;149          outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
000078  f8ddb00c          LDR      r11,[sp,#0xc]
00007c  f85bb028          LDR      r11,[r11,r8,LSL #2]
000080  44ab              ADD      r11,r11,r5
000082  f819b00b          LDRB     r11,[r9,r11]
000086  f886b000          STRB     r11,[r6,#0]
;;;150          outptr[RGB_GREEN] = range_limit[y +
00008a  f8ddb000          LDR      r11,[sp,#0]
00008e  f85be02c          LDR      lr,[r11,r12,LSL #2]
000092  f8ddb004          LDR      r11,[sp,#4]
000096  f85bb028          LDR      r11,[r11,r8,LSL #2]
00009a  44f3              ADD      r11,r11,lr
00009c  eb054b2b          ADD      r11,r5,r11,ASR #16
0000a0  f819b00b          LDRB     r11,[r9,r11]
0000a4  f886b001          STRB     r11,[r6,#1]
;;;151    			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
;;;152    						 SCALEBITS))];
;;;153          outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
0000a8  f8ddb008          LDR      r11,[sp,#8]
0000ac  f85bb02c          LDR      r11,[r11,r12,LSL #2]
0000b0  44ab              ADD      r11,r11,r5
0000b2  f819b00b          LDRB     r11,[r9,r11]
0000b6  f886b002          STRB     r11,[r6,#2]
;;;154          outptr += RGB_PIXELSIZE;
0000ba  1cf6              ADDS     r6,r6,#3
0000bc  1c40              ADDS     r0,r0,#1              ;144
                  |L7.190|
0000be  f8ddb010          LDR      r11,[sp,#0x10]        ;144
0000c2  4558              CMP      r0,r11                ;144
0000c4  d3ce              BCC      |L7.100|
                  |L7.198|
0000c6  f8ddb040          LDR      r11,[sp,#0x40]        ;138
0000ca  f1bb0b01          SUBS     r11,r11,#1            ;138
0000ce  f8cdb040          STR      r11,[sp,#0x40]        ;138
0000d2  d5b3              BPL      |L7.60|
;;;155        }
;;;156      }
;;;157    }
0000d4  b007              ADD      sp,sp,#0x1c
0000d6  e8bd8ff0          POP      {r4-r11,pc}
;;;158    
                          ENDP


                          AREA ||i.ycck_cmyk_convert||, CODE, READONLY, ALIGN=1

                  ycck_cmyk_convert PROC
;;;244    METHODDEF(void)
;;;245    ycck_cmyk_convert (j_decompress_ptr cinfo,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;246    		   JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;247    		   JSAMPARRAY output_buf, int num_rows)
;;;248    {
000004  b088              SUB      sp,sp,#0x20
000006  4604              MOV      r4,r0
000008  461f              MOV      r7,r3
;;;249      my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
00000a  f8d451c8          LDR      r5,[r4,#0x1c8]
;;;250      register int y, cb, cr;
;;;251      register JSAMPROW outptr;
;;;252      register JSAMPROW inptr0, inptr1, inptr2, inptr3;
;;;253      register JDIMENSION col;
;;;254      JDIMENSION num_cols = cinfo->output_width;
00000e  f8d4b070          LDR      r11,[r4,#0x70]
000012  f8cdb010          STR      r11,[sp,#0x10]
;;;255      /* copy these pointers into registers if possible */
;;;256      register JSAMPLE * range_limit = cinfo->sample_range_limit;
000016  f8d49144          LDR      r9,[r4,#0x144]
;;;257      register int * Crrtab = cconvert->Cr_r_tab;
00001a  f8d5b008          LDR      r11,[r5,#8]
00001e  f8cdb00c          STR      r11,[sp,#0xc]
;;;258      register int * Cbbtab = cconvert->Cb_b_tab;
000022  f8d5b00c          LDR      r11,[r5,#0xc]
000026  f8cdb008          STR      r11,[sp,#8]
;;;259      register INT32 * Crgtab = cconvert->Cr_g_tab;
00002a  f8d5b010          LDR      r11,[r5,#0x10]
00002e  f8cdb004          STR      r11,[sp,#4]
;;;260      register INT32 * Cbgtab = cconvert->Cb_g_tab;
000032  f8d5b014          LDR      r11,[r5,#0x14]
000036  f8cdb000          STR      r11,[sp,#0]
;;;261      SHIFT_TEMPS
;;;262    
;;;263      while (--num_rows >= 0) {
00003a  e056              B        |L8.234|
                  |L8.60|
;;;264        inptr0 = input_buf[0][input_row];
00003c  f8d1b000          LDR      r11,[r1,#0]
000040  f85ba022          LDR      r10,[r11,r2,LSL #2]
;;;265        inptr1 = input_buf[1][input_row];
000044  f8d1b004          LDR      r11,[r1,#4]
000048  f85bb022          LDR      r11,[r11,r2,LSL #2]
00004c  f8cdb01c          STR      r11,[sp,#0x1c]
;;;266        inptr2 = input_buf[2][input_row];
000050  f8d1b008          LDR      r11,[r1,#8]
000054  f85bb022          LDR      r11,[r11,r2,LSL #2]
000058  f8cdb018          STR      r11,[sp,#0x18]
;;;267        inptr3 = input_buf[3][input_row];
00005c  f8d1b00c          LDR      r11,[r1,#0xc]
000060  f85bb022          LDR      r11,[r11,r2,LSL #2]
000064  f8cdb014          STR      r11,[sp,#0x14]
;;;268        input_row++;
000068  1c52              ADDS     r2,r2,#1
;;;269        outptr = *output_buf++;
00006a  cf08              LDM      r7!,{r3}
;;;270        for (col = 0; col < num_cols; col++) {
00006c  2000              MOVS     r0,#0
00006e  e038              B        |L8.226|
                  |L8.112|
;;;271          y  = GETJSAMPLE(inptr0[col]);
000070  f81a6000          LDRB     r6,[r10,r0]
;;;272          cb = GETJSAMPLE(inptr1[col]);
000074  f8ddb01c          LDR      r11,[sp,#0x1c]
000078  f81bc000          LDRB     r12,[r11,r0]
;;;273          cr = GETJSAMPLE(inptr2[col]);
00007c  f8ddb018          LDR      r11,[sp,#0x18]
000080  f81b8000          LDRB     r8,[r11,r0]
;;;274          /* Range-limiting is essential due to noise introduced by DCT losses. */
;;;275          outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
000084  f8ddb00c          LDR      r11,[sp,#0xc]
000088  f85bb028          LDR      r11,[r11,r8,LSL #2]
00008c  44b3              ADD      r11,r11,r6
00008e  f1cb0bff          RSB      r11,r11,#0xff
000092  f819b00b          LDRB     r11,[r9,r11]
000096  f883b000          STRB     r11,[r3,#0]
;;;276          outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
00009a  f8ddb000          LDR      r11,[sp,#0]
00009e  f85be02c          LDR      lr,[r11,r12,LSL #2]
0000a2  f8ddb004          LDR      r11,[sp,#4]
0000a6  f85bb028          LDR      r11,[r11,r8,LSL #2]
0000aa  44f3              ADD      r11,r11,lr
0000ac  eb064b2b          ADD      r11,r6,r11,ASR #16
0000b0  f1cb0bff          RSB      r11,r11,#0xff
0000b4  f819b00b          LDRB     r11,[r9,r11]
0000b8  f883b001          STRB     r11,[r3,#1]
;;;277    			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
;;;278    						 SCALEBITS)))];
;;;279          outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
0000bc  f8ddb008          LDR      r11,[sp,#8]
0000c0  f85bb02c          LDR      r11,[r11,r12,LSL #2]
0000c4  44b3              ADD      r11,r11,r6
0000c6  f1cb0bff          RSB      r11,r11,#0xff
0000ca  f819b00b          LDRB     r11,[r9,r11]
0000ce  f883b002          STRB     r11,[r3,#2]
;;;280          /* K passes through unchanged */
;;;281          outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
0000d2  f8ddb014          LDR      r11,[sp,#0x14]
0000d6  f81bb000          LDRB     r11,[r11,r0]
0000da  f883b003          STRB     r11,[r3,#3]
;;;282          outptr += 4;
0000de  1d1b              ADDS     r3,r3,#4
0000e0  1c40              ADDS     r0,r0,#1              ;270
                  |L8.226|
0000e2  f8ddb010          LDR      r11,[sp,#0x10]        ;270
0000e6  4558              CMP      r0,r11                ;270
0000e8  d3c2              BCC      |L8.112|
                  |L8.234|
0000ea  f8ddb044          LDR      r11,[sp,#0x44]        ;263
0000ee  f1bb0b01          SUBS     r11,r11,#1            ;263
0000f2  f8cdb044          STR      r11,[sp,#0x44]        ;263
0000f6  d5a1              BPL      |L8.60|
;;;283        }
;;;284      }
;;;285    }
0000f8  b008              ADD      sp,sp,#0x20
0000fa  e8bd8ff0          POP      {r4-r11,pc}
;;;286    
                          ENDP

