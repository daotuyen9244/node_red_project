; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guidemo_speed.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guidemo_speed.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\uCGUIDemo\GUIDEMO_Speed.c]
                          THUMB

                          AREA ||i.GUIDEMO_Speed||, CODE, READONLY, ALIGN=2

                  GUIDEMO_Speed PROC
;;;41     
;;;42     void GUIDEMO_Speed(void) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b087              SUB      sp,sp,#0x1c
;;;43       int t, i;
;;;44       I32 NumPixels = 0;
000004  2600              MOVS     r6,#0
;;;45       U16 aColorIndex[8];
;;;46       GUIDEMO_ShowIntro("High speed",
000006  a15d              ADR      r1,|L1.380|
000008  a068              ADR      r0,|L1.428|
00000a  f7fffffe          BL       GUIDEMO_ShowIntro
;;;47                         "\nmulti layer clipping"
;;;48                         "\nhighly optimized drivers"
;;;49                         );
;;;50       for (i = 0; i< 8; i++) {
00000e  2500              MOVS     r5,#0
000010  e008              B        |L1.36|
                  |L1.18|
;;;51         aColorIndex[i] = GUI_Color2Index(_aColor[i]);
000012  4969              LDR      r1,|L1.440|
000014  f8510025          LDR      r0,[r1,r5,LSL #2]
000018  f7fffffe          BL       GUI_Color2Index
00001c  a903              ADD      r1,sp,#0xc
00001e  f8210015          STRH     r0,[r1,r5,LSL #1]
000022  1c6d              ADDS     r5,r5,#1              ;50
                  |L1.36|
000024  2d08              CMP      r5,#8                 ;50
000026  dbf4              BLT      |L1.18|
;;;52       }  
;;;53       t = GUI_GetTime();
000028  f7fffffe          BL       GUI_GetTime
00002c  4604              MOV      r4,r0
;;;54       for (i = 0; ((GUI_GetTime() - t) < 8000) && !GUIDEMO_CheckCancel(); i++) {
00002e  2500              MOVS     r5,#0
000030  e06f              B        |L1.274|
                  |L1.50|
;;;55         GUI_RECT r;
;;;56         GUI_SetColorIndex(aColorIndex[i&7]);
000032  f0050107          AND      r1,r5,#7
000036  aa03              ADD      r2,sp,#0xc
000038  f8320011          LDRH     r0,[r2,r1,LSL #1]
00003c  f7fffffe          BL       GUI_SetColorIndex
;;;57         /* Calculate random positions */
;;;58         r.x0 = rand() % LCD_XSIZE - LCD_XSIZE / 2;
000040  f7fffffe          BL       rand
000044  21f0              MOVS     r1,#0xf0
000046  fb90f2f1          SDIV     r2,r0,r1
00004a  fb010012          MLS      r0,r1,r2,r0
00004e  3878              SUBS     r0,r0,#0x78
000050  b200              SXTH     r0,r0
000052  f8ad0004          STRH     r0,[sp,#4]
;;;59         r.y0 = rand() % LCD_YSIZE - LCD_YSIZE / 2;
000056  f7fffffe          BL       rand
00005a  f44f71a0          MOV      r1,#0x140
00005e  fb90f2f1          SDIV     r2,r0,r1
000062  fb010012          MLS      r0,r1,r2,r0
000066  38a0              SUBS     r0,r0,#0xa0
000068  b200              SXTH     r0,r0
00006a  f8ad0006          STRH     r0,[sp,#6]
;;;60         r.x1 = r.x0 + 20 + rand() % LCD_XSIZE;
00006e  f7fffffe          BL       rand
000072  21f0              MOVS     r1,#0xf0
000074  fb90f2f1          SDIV     r2,r0,r1
000078  fb010112          MLS      r1,r1,r2,r0
00007c  f8bd0004          LDRH     r0,[sp,#4]
000080  3014              ADDS     r0,r0,#0x14
000082  4408              ADD      r0,r0,r1
000084  b200              SXTH     r0,r0
000086  f8ad0008          STRH     r0,[sp,#8]
;;;61         r.y1 = r.y0 + 20 + rand() % LCD_YSIZE;
00008a  f7fffffe          BL       rand
00008e  f44f71a0          MOV      r1,#0x140
000092  fb90f2f1          SDIV     r2,r0,r1
000096  fb010112          MLS      r1,r1,r2,r0
00009a  f8bd0006          LDRH     r0,[sp,#6]
00009e  3014              ADDS     r0,r0,#0x14
0000a0  4408              ADD      r0,r0,r1
0000a2  b200              SXTH     r0,r0
0000a4  f8ad000a          STRH     r0,[sp,#0xa]
;;;62         GUI_FillRect(r.x0, r.y0, r.x1, r.y1);
0000a8  f9bd300a          LDRSH    r3,[sp,#0xa]
0000ac  f9bd2008          LDRSH    r2,[sp,#8]
0000b0  f9bd1006          LDRSH    r1,[sp,#6]
0000b4  f9bd0004          LDRSH    r0,[sp,#4]
0000b8  f7fffffe          BL       GUI_FillRect
;;;63         /* Clip rectangle to visible area and add the number of pixels (for speed computation) */
;;;64         if (r.x1 >= LCD_XSIZE)
0000bc  f9bd0008          LDRSH    r0,[sp,#8]
0000c0  28f0              CMP      r0,#0xf0
0000c2  db02              BLT      |L1.202|
;;;65           r.x1 = LCD_XSIZE - 1;
0000c4  20ef              MOVS     r0,#0xef
0000c6  f8ad0008          STRH     r0,[sp,#8]
                  |L1.202|
;;;66         if (r.y1 >= LCD_YSIZE)
0000ca  f9bd000a          LDRSH    r0,[sp,#0xa]
0000ce  f5b07fa0          CMP      r0,#0x140
0000d2  db03              BLT      |L1.220|
;;;67           r.y1 = LCD_YSIZE - 1;
0000d4  f240103f          MOV      r0,#0x13f
0000d8  f8ad000a          STRH     r0,[sp,#0xa]
                  |L1.220|
;;;68         if (r.x0 < 0 )
0000dc  f9bd0004          LDRSH    r0,[sp,#4]
0000e0  2800              CMP      r0,#0
0000e2  da02              BGE      |L1.234|
;;;69           r.x0 = 0;
0000e4  2000              MOVS     r0,#0
0000e6  f8ad0004          STRH     r0,[sp,#4]
                  |L1.234|
;;;70         if (r.y1 < 0)
0000ea  f9bd000a          LDRSH    r0,[sp,#0xa]
0000ee  2800              CMP      r0,#0
0000f0  da02              BGE      |L1.248|
;;;71           r.y1 = 0;
0000f2  2000              MOVS     r0,#0
0000f4  f8ad000a          STRH     r0,[sp,#0xa]
                  |L1.248|
;;;72         NumPixels += (r.x1 - r.x0) * (r.y1 - r.y0);
0000f8  f9bd0008          LDRSH    r0,[sp,#8]
0000fc  f9bd1004          LDRSH    r1,[sp,#4]
000100  1a40              SUBS     r0,r0,r1
000102  f9bd100a          LDRSH    r1,[sp,#0xa]
000106  f9bd2006          LDRSH    r2,[sp,#6]
00010a  1a89              SUBS     r1,r1,r2
00010c  fb006601          MLA      r6,r0,r1,r6
000110  1c6d              ADDS     r5,r5,#1              ;54
                  |L1.274|
000112  f7fffffe          BL       GUI_GetTime
000116  1b00              SUBS     r0,r0,r4              ;54
000118  f5b05ffa          CMP      r0,#0x1f40            ;54
00011c  da03              BGE      |L1.294|
00011e  f7fffffe          BL       GUIDEMO_CheckCancel
000122  2800              CMP      r0,#0                 ;54
000124  d085              BEQ      |L1.50|
                  |L1.294|
;;;73         /* Allow short breaks so we do not use all available CPU time ... */
;;;74       }
;;;75       t = (GUI_GetTime() - t) / 100;
000126  f7fffffe          BL       GUI_GetTime
00012a  1b00              SUBS     r0,r0,r4
00012c  2164              MOVS     r1,#0x64
00012e  fb90f4f1          SDIV     r4,r0,r1
;;;76       GUI_Clear();
000132  f7fffffe          BL       GUI_Clear
;;;77       GUIDEMO_NotifyStartNext();
000136  f7fffffe          BL       GUIDEMO_NotifyStartNext
;;;78       #if GUIDEMO_LARGE
;;;79         GUI_SetFont(&GUI_FontComic24B_ASCII);
00013a  4820              LDR      r0,|L1.444|
00013c  f7fffffe          BL       GUI_SetFont
;;;80       #elif !(GUIDEMO_TINY)
;;;81         GUI_SetFont(&GUI_Font16B_ASCII);
;;;82       #else
;;;83         GUI_SetFont(&GUI_Font13B_ASCII);
;;;84       #endif
;;;85       GUI_SetColor(GUI_WHITE);
000140  f06f407f          MVN      r0,#0xff000000
000144  f7fffffe          BL       GUI_SetColor
;;;86       GUI_DispStringAt("Pixels/sec: ", 5, (LCD_YSIZE - GUI_GetFontSizeY()) / 2);
000148  f7fffffe          BL       GUI_GetFontSizeY
00014c  f5c077a0          RSB      r7,r0,#0x140
000150  eb0770d7          ADD      r0,r7,r7,LSR #31
000154  1042              ASRS     r2,r0,#1
000156  2105              MOVS     r1,#5
000158  a019              ADR      r0,|L1.448|
00015a  f7fffffe          BL       GUI_DispStringAt
;;;87       if (t == 0)
00015e  b904              CBNZ     r4,|L1.354|
;;;88         t++;
000160  1c64              ADDS     r4,r4,#1
                  |L1.354|
;;;89       GUI_DispDecMin(10 * (NumPixels / t));
000162  fb96f0f4          SDIV     r0,r6,r4
000166  eb000080          ADD      r0,r0,r0,LSL #2
00016a  0047              LSLS     r7,r0,#1
00016c  4638              MOV      r0,r7
00016e  f7fffffe          BL       GUI_DispDecMin
;;;90       GUIDEMO_Wait();
000172  f7fffffe          BL       GUIDEMO_Wait
;;;91     }
000176  b007              ADD      sp,sp,#0x1c
000178  bdf0              POP      {r4-r7,pc}
                          ENDP

00017a  0000              DCW      0x0000
                  |L1.380|
00017c  0a6d756c          DCB      "\nmulti layer clipping\nhighly optimized drivers",0
000180  7469206c
000184  61796572
000188  20636c69
00018c  7070696e
000190  670a6869
000194  67686c79
000198  206f7074
00019c  696d697a
0001a0  65642064
0001a4  72697665
0001a8  727300  
0001ab  00                DCB      0
                  |L1.428|
0001ac  48696768          DCB      "High speed",0
0001b0  20737065
0001b4  656400  
0001b7  00                DCB      0
                  |L1.440|
                          DCD      _aColor
                  |L1.444|
                          DCD      GUI_FontComic24B_ASCII
                  |L1.448|
0001c0  50697865          DCB      "Pixels/sec: ",0
0001c4  6c732f73
0001c8  65633a20
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _aColor
                          DCD      0x00000000
                          DCD      0x000000ff
                          DCD      0x0000ff00
                          DCD      0x0000ffff
                          DCD      0x00ff0000
                          DCD      0x00ff00ff
                          DCD      0x00ffff00
                          DCD      0x00ffffff
