; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gui_x_touch.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\gui_x_touch.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\LCDPorts\GUI_X_Touch.c]
                          THUMB

                          AREA ||i.GUI_TOUCH_X_ActivateX||, CODE, READONLY, ALIGN=1

                  GUI_TOUCH_X_ActivateX PROC
;;;28     
;;;29     void GUI_TOUCH_X_ActivateX(void) {
000000  4770              BX       lr
;;;30     }
;;;31     
                          ENDP


                          AREA ||i.GUI_TOUCH_X_ActivateY||, CODE, READONLY, ALIGN=1

                  GUI_TOUCH_X_ActivateY PROC
;;;31     
;;;32     void GUI_TOUCH_X_ActivateY(void) {
000000  4770              BX       lr
;;;33     }
;;;34     
                          ENDP


                          AREA ||i.GUI_TOUCH_X_MeasureX||, CODE, READONLY, ALIGN=2

                  GUI_TOUCH_X_MeasureX PROC
;;;35     
;;;36     int  GUI_TOUCH_X_MeasureX(void) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;37     {
000004  b088              SUB      sp,sp,#0x20
;;;38       	unsigned char t=0,t1,count=0;
000006  2400              MOVS     r4,#0
000008  2500              MOVS     r5,#0
;;;39     	unsigned short int databuffer[15]={5,7,9,3,2,6,4,0,3,1,0,0,0,0,0};//数据组
00000a  2220              MOVS     r2,#0x20
00000c  491f              LDR      r1,|L3.140|
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       __aeabi_memcpy4
;;;40     	unsigned short temp=0,X=0;	
000014  2700              MOVS     r7,#0
000016  46a0              MOV      r8,r4
;;;41      
;;;42         while(count<15)	//循环读数10次
000018  e006              B        |L3.40|
                  |L3.26|
;;;43     	{	   	  
;;;44     		databuffer[count]= XPT2046_ReadAdc(0xd0);
00001a  20d0              MOVS     r0,#0xd0
00001c  f7fffffe          BL       XPT2046_ReadAdc
000020  f82d0015          STRH     r0,[sp,r5,LSL #1]
;;;45     		count++;  
000024  1c68              ADDS     r0,r5,#1
000026  b2c5              UXTB     r5,r0
                  |L3.40|
000028  2d0f              CMP      r5,#0xf               ;42
00002a  dbf6              BLT      |L3.26|
;;;46     	}  
;;;47     	if(count==15)//一定要读到10次数据,否则丢弃
00002c  d128              BNE      |L3.128|
;;;48     	{  
;;;49     	    do//将数据X升序排列
00002e  bf00              NOP      
                  |L3.48|
;;;50     		{	
;;;51     			t1=0;		  
000030  2600              MOVS     r6,#0
;;;52     			for(t=0;t<count-1;t++)
000032  2400              MOVS     r4,#0
000034  e012              B        |L3.92|
                  |L3.54|
;;;53     			{
;;;54     				if(databuffer[t]>databuffer[t+1])//升序排列
000036  f83d1014          LDRH     r1,[sp,r4,LSL #1]
00003a  1c60              ADDS     r0,r4,#1
00003c  f83d0010          LDRH     r0,[sp,r0,LSL #1]
000040  4281              CMP      r1,r0
000042  dd09              BLE      |L3.88|
;;;55     				{
;;;56     					temp=databuffer[t+1];
000044  1c60              ADDS     r0,r4,#1
000046  f83d7010          LDRH     r7,[sp,r0,LSL #1]
;;;57     					databuffer[t+1]=databuffer[t];
00004a  f83d1014          LDRH     r1,[sp,r4,LSL #1]
00004e  f82d1010          STRH     r1,[sp,r0,LSL #1]
;;;58     					databuffer[t]=temp;
000052  f82d7014          STRH     r7,[sp,r4,LSL #1]
;;;59     					t1=1; 
000056  2601              MOVS     r6,#1
                  |L3.88|
000058  1c60              ADDS     r0,r4,#1              ;52
00005a  b2c4              UXTB     r4,r0                 ;52
                  |L3.92|
00005c  1e68              SUBS     r0,r5,#1              ;52
00005e  42a0              CMP      r0,r4                 ;52
000060  dce9              BGT      |L3.54|
;;;60     				}  
;;;61     			}
;;;62     		}while(t1); 	    		 	 		  
000062  2e00              CMP      r6,#0
000064  d1e4              BNE      |L3.48|
;;;63     		X=(databuffer[6]+databuffer[7]+databuffer[8])/3;	  
000066  f8bd000c          LDRH     r0,[sp,#0xc]
00006a  f8bd100e          LDRH     r1,[sp,#0xe]
00006e  4408              ADD      r0,r0,r1
000070  f8bd1010          LDRH     r1,[sp,#0x10]
000074  4408              ADD      r0,r0,r1
000076  2103              MOVS     r1,#3
000078  fb90f0f1          SDIV     r0,r0,r1
00007c  fa1ff880          UXTH     r8,r0
                  |L3.128|
;;;64      
;;;65     	}
;;;66     	return(4096 - X); 
000080  f5c85080          RSB      r0,r8,#0x1000
;;;67     }
000084  b008              ADD      sp,sp,#0x20
000086  e8bd81f0          POP      {r4-r8,pc}
;;;68     
                          ENDP

00008a  0000              DCW      0x0000
                  |L3.140|
                          DCD      ||.constdata||

                          AREA ||i.GUI_TOUCH_X_MeasureY||, CODE, READONLY, ALIGN=2

                  GUI_TOUCH_X_MeasureY PROC
;;;68     
;;;69     int  GUI_TOUCH_X_MeasureY(void) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b088              SUB      sp,sp,#0x20
;;;70     	unsigned char t=0,t1,count=0;
000006  2400              MOVS     r4,#0
000008  2500              MOVS     r5,#0
;;;71     	unsigned short int databuffer[15]={5,7,9,3,2,6,4,0,3,1,0,0,0,0,0};//数据组
00000a  2220              MOVS     r2,#0x20
00000c  491f              LDR      r1,|L4.140|
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       __aeabi_memcpy4
;;;72     	unsigned short temp=0,Y=0;	
000014  2700              MOVS     r7,#0
000016  46a0              MOV      r8,r4
;;;73      	
;;;74     	while(count<15)//循环读数10次
000018  e006              B        |L4.40|
                  |L4.26|
;;;75     	{	   	  
;;;76     		databuffer[count]= XPT2046_ReadAdc(0x90);
00001a  2090              MOVS     r0,#0x90
00001c  f7fffffe          BL       XPT2046_ReadAdc
000020  f82d0015          STRH     r0,[sp,r5,LSL #1]
;;;77     		count++; 
000024  1c68              ADDS     r0,r5,#1
000026  b2c5              UXTB     r5,r0
                  |L4.40|
000028  2d0f              CMP      r5,#0xf               ;74
00002a  dbf6              BLT      |L4.26|
;;;78     	}  
;;;79     	if(count==15)//一定要读到10次数据,否则丢弃
00002c  d128              BNE      |L4.128|
;;;80     	{  
;;;81     	    do//将数据X升序排列
00002e  bf00              NOP      
                  |L4.48|
;;;82     		{	
;;;83     			t1=0;		  
000030  2600              MOVS     r6,#0
;;;84     			for(t=0;t<count-1;t++)
000032  2400              MOVS     r4,#0
000034  e012              B        |L4.92|
                  |L4.54|
;;;85     			{
;;;86     				if(databuffer[t]>databuffer[t+1])//升序排列
000036  f83d1014          LDRH     r1,[sp,r4,LSL #1]
00003a  1c60              ADDS     r0,r4,#1
00003c  f83d0010          LDRH     r0,[sp,r0,LSL #1]
000040  4281              CMP      r1,r0
000042  dd09              BLE      |L4.88|
;;;87     				{
;;;88     					temp=databuffer[t+1];
000044  1c60              ADDS     r0,r4,#1
000046  f83d7010          LDRH     r7,[sp,r0,LSL #1]
;;;89     					databuffer[t+1]=databuffer[t];
00004a  f83d1014          LDRH     r1,[sp,r4,LSL #1]
00004e  f82d1010          STRH     r1,[sp,r0,LSL #1]
;;;90     					databuffer[t]=temp;
000052  f82d7014          STRH     r7,[sp,r4,LSL #1]
;;;91     					t1=1; 
000056  2601              MOVS     r6,#1
                  |L4.88|
000058  1c60              ADDS     r0,r4,#1              ;84
00005a  b2c4              UXTB     r4,r0                 ;84
                  |L4.92|
00005c  1e68              SUBS     r0,r5,#1              ;84
00005e  42a0              CMP      r0,r4                 ;84
000060  dce9              BGT      |L4.54|
;;;92     				}  
;;;93     			}
;;;94     		}while(t1); 	    		 	 		  
000062  2e00              CMP      r6,#0
000064  d1e4              BNE      |L4.48|
;;;95     		Y=(databuffer[6]+databuffer[7]+databuffer[8])/3;	  
000066  f8bd000c          LDRH     r0,[sp,#0xc]
00006a  f8bd100e          LDRH     r1,[sp,#0xe]
00006e  4408              ADD      r0,r0,r1
000070  f8bd1010          LDRH     r1,[sp,#0x10]
000074  4408              ADD      r0,r0,r1
000076  2103              MOVS     r1,#3
000078  fb90f0f1          SDIV     r0,r0,r1
00007c  fa1ff880          UXTH     r8,r0
                  |L4.128|
;;;96     
;;;97     
;;;98     	}
;;;99     	return(4096-Y); 	/*200为校正补偿值*/
000080  f5c85080          RSB      r0,r8,#0x1000
;;;100    }
000084  b008              ADD      sp,sp,#0x20
000086  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

00008a  0000              DCW      0x0000
                  |L4.140|
                          DCD      ||.constdata||+0x20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  00050007          DCW      0x0005,0x0007
000004  00090003          DCW      0x0009,0x0003
000008  00020006          DCW      0x0002,0x0006
00000c  00040000          DCW      0x0004,0x0000
000010  00030001          DCW      0x0003,0x0001
000014  00000000          DCW      0x0000,0x0000
000018  00000000          DCW      0x0000,0x0000
00001c  0000              DCW      0x0000
00001e  0000              DCB      0x00,0x00
000020  00050007          DCW      0x0005,0x0007
000024  00090003          DCW      0x0009,0x0003
000028  00020006          DCW      0x0002,0x0006
00002c  00040000          DCW      0x0004,0x0000
000030  00030001          DCW      0x0003,0x0001
000034  00000000          DCW      0x0000,0x0000
000038  00000000          DCW      0x0000,0x0000
00003c  0000              DCW      0x0000
