; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\guidev_8.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\guidev_8.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\uCGUI\MemDev\GUIDEV_8.c]
                          THUMB

                          AREA ||i._DrawBitLine1BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;89     */
;;;90     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;91                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;92     {
000004  b081              SUB      sp,sp,#4
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
00000a  4698              MOV      r8,r3
00000c  9e12              LDR      r6,[sp,#0x48]
00000e  9d0f              LDR      r5,[sp,#0x3c]
;;;93       PIXELINDEX Index1;
;;;94       PIXELINDEX IndexMask;
;;;95       unsigned pixels;
;;;96       unsigned PixelCnt;
;;;97       PixelCnt = 8 - Diff;
000010  980e              LDR      r0,[sp,#0x38]
000012  f1c00408          RSB      r4,r0,#8
;;;98       pixels = LCD_aMirror[*p] >> Diff;
000016  f8980000          LDRB     r0,[r8,#0]
00001a  4949              LDR      r1,|L1.320|
00001c  5c08              LDRB     r0,[r1,r0]
00001e  990e              LDR      r1,[sp,#0x38]
000020  fa40f701          ASR      r7,r0,r1
;;;99     
;;;100      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d", x,pDev->x0, GUI_Context.ClipRect.x0);
;;;101    
;;;102      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000024  4847              LDR      r0,|L1.324|
000026  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000028  f0100003          ANDS     r0,r0,#3
00002c  d004              BEQ      |L1.56|
00002e  2801              CMP      r0,#1
000030  d060              BEQ      |L1.244|
000032  2802              CMP      r0,#2
000034  d177              BNE      |L1.294|
000036  e01c              B        |L1.114|
                  |L1.56|
;;;103      case 0:    /* Write mode */
;;;104        do {
000038  bf00              NOP      
                  |L1.58|
;;;105          /* Prepare loop */
;;;106          if (PixelCnt > xsize) {
00003a  42ac              CMP      r4,r5
00003c  d900              BLS      |L1.64|
;;;107            PixelCnt = xsize;
00003e  462c              MOV      r4,r5
                  |L1.64|
;;;108          }
;;;109          xsize -= PixelCnt;
000040  1b2d              SUBS     r5,r5,r4
;;;110          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;111          do {
000042  bf00              NOP      
                  |L1.68|
;;;112            *pDest++ = *(pTrans + (pixels & 1));
000044  f0070101          AND      r1,r7,#1
000048  9810              LDR      r0,[sp,#0x40]
00004a  f8100011          LDRB     r0,[r0,r1,LSL #1]
00004e  f8060b01          STRB     r0,[r6],#1
;;;113            pixels >>= 1;
000052  087f              LSRS     r7,r7,#1
;;;114          } while (--PixelCnt);
000054  1e60              SUBS     r0,r4,#1
000056  0004              MOVS     r4,r0
000058  d1f4              BNE      |L1.68|
;;;115          /* Check if an other Source byte needs to be loaded */
;;;116          if (xsize == 0) {
00005a  b915              CBNZ     r5,|L1.98|
                  |L1.92|
;;;117            return;
;;;118          }
;;;119          PixelCnt = 8;
;;;120          pixels = LCD_aMirror[*++p];
;;;121        } while (1);
;;;122      case LCD_DRAWMODE_TRANS:
;;;123        Index1 = *(pTrans + 1);
;;;124        do {
;;;125          /* Prepare loop */
;;;126          if (PixelCnt > xsize) {
;;;127            PixelCnt = xsize;
;;;128          }
;;;129          xsize -= PixelCnt;
;;;130          if (pUsage) {
;;;131            do {
;;;132              if (pixels == 0) {      /* Early out optimization; not required */
;;;133                pDest += PixelCnt;
;;;134                x     += PixelCnt;
;;;135                break;
;;;136              }
;;;137              if ((pixels & 1)) {
;;;138                GUI_USAGE_AddPixel(pUsage, x, y);
;;;139                *pDest = Index1;
;;;140              }
;;;141              x++;
;;;142              pDest++;
;;;143              if (--PixelCnt == 0) {
;;;144                break;
;;;145              }
;;;146              pixels >>= 1;
;;;147            } while (1);
;;;148          } else {
;;;149            do {
;;;150              if (pixels == 0) {      /* Early out optimization; not required */
;;;151                pDest += PixelCnt;
;;;152                break;
;;;153              }
;;;154              if ((pixels & 1)) {
;;;155                *pDest = Index1;
;;;156              }
;;;157              pDest++;
;;;158              if (--PixelCnt == 0) {
;;;159                break;
;;;160              }
;;;161              pixels >>= 1;
;;;162            } while (1);
;;;163          }
;;;164          /* Check if an other Source byte needs to be loaded */
;;;165          if (xsize == 0) {
;;;166            return;
;;;167          }
;;;168          PixelCnt = 8;
;;;169          pixels = LCD_aMirror[*(++p)];
;;;170        } while (1);
;;;171      case LCD_DRAWMODE_XOR:
;;;172        IndexMask = pDev->pfGetIndexMask();
;;;173        do {
;;;174          /* Prepare loop */
;;;175          if (PixelCnt > xsize) {
;;;176            PixelCnt = xsize;
;;;177          }
;;;178          xsize -= PixelCnt;
;;;179          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;180          do {
;;;181            if ((pixels & 1)) {
;;;182              *pDest ^= IndexMask;
;;;183            }
;;;184            *pDest++;
;;;185            pixels >>= 1;
;;;186          } while (--PixelCnt);
;;;187          /* Check if an other Source byte needs to be loaded */
;;;188          if (xsize == 0) {
;;;189            return;
;;;190          }
;;;191          PixelCnt = 8;
;;;192          pixels = LCD_aMirror[*(++p)];
;;;193        } while (1);
;;;194      }
;;;195    }
00005c  b005              ADD      sp,sp,#0x14
00005e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.98|
000062  2408              MOVS     r4,#8                 ;119
000064  f1080001          ADD      r0,r8,#1              ;120
000068  4680              MOV      r8,r0                 ;120
00006a  7800              LDRB     r0,[r0,#0]            ;120
00006c  4934              LDR      r1,|L1.320|
00006e  5c0f              LDRB     r7,[r1,r0]            ;120
000070  e7e3              B        |L1.58|
                  |L1.114|
000072  9810              LDR      r0,[sp,#0x40]         ;123
000074  f890b002          LDRB     r11,[r0,#2]           ;123
000078  bf00              NOP                            ;124
                  |L1.122|
00007a  42ac              CMP      r4,r5                 ;126
00007c  d900              BLS      |L1.128|
00007e  462c              MOV      r4,r5                 ;127
                  |L1.128|
000080  1b2d              SUBS     r5,r5,r4              ;129
000082  f1b90f00          CMP      r9,#0                 ;130
000086  d01a              BEQ      |L1.190|
000088  bf00              NOP                            ;131
                  |L1.138|
00008a  b917              CBNZ     r7,|L1.146|
00008c  4426              ADD      r6,r6,r4              ;133
00008e  44a2              ADD      r10,r10,r4            ;134
000090  e014              B        |L1.188|
                  |L1.146|
000092  f0170f01          TST      r7,#1                 ;137
000096  d008              BEQ      |L1.170|
000098  f8d90008          LDR      r0,[r9,#8]            ;138
00009c  6803              LDR      r3,[r0,#0]            ;138
00009e  4651              MOV      r1,r10                ;138
0000a0  4648              MOV      r0,r9                 ;138
0000a2  9a03              LDR      r2,[sp,#0xc]          ;138
0000a4  4798              BLX      r3                    ;138
0000a6  f886b000          STRB     r11,[r6,#0]           ;139
                  |L1.170|
0000aa  f10a0a01          ADD      r10,r10,#1            ;141
0000ae  1c76              ADDS     r6,r6,#1              ;142
0000b0  1e60              SUBS     r0,r4,#1              ;143
0000b2  0004              MOVS     r4,r0                 ;143
0000b4  d100              BNE      |L1.184|
0000b6  e001              B        |L1.188|
                  |L1.184|
0000b8  087f              LSRS     r7,r7,#1              ;146
0000ba  e7e6              B        |L1.138|
                  |L1.188|
0000bc  e010              B        |L1.224|
                  |L1.190|
0000be  bf00              NOP                            ;149
                  |L1.192|
0000c0  b90f              CBNZ     r7,|L1.198|
0000c2  4426              ADD      r6,r6,r4              ;151
0000c4  e00b              B        |L1.222|
                  |L1.198|
0000c6  f0170f01          TST      r7,#1                 ;154
0000ca  d001              BEQ      |L1.208|
0000cc  f886b000          STRB     r11,[r6,#0]           ;155
                  |L1.208|
0000d0  1c76              ADDS     r6,r6,#1              ;157
0000d2  1e60              SUBS     r0,r4,#1              ;158
0000d4  0004              MOVS     r4,r0                 ;158
0000d6  d100              BNE      |L1.218|
0000d8  e001              B        |L1.222|
                  |L1.218|
0000da  087f              LSRS     r7,r7,#1              ;161
0000dc  e7f0              B        |L1.192|
                  |L1.222|
0000de  bf00              NOP                            ;152
                  |L1.224|
0000e0  b905              CBNZ     r5,|L1.228|
0000e2  e7bb              B        |L1.92|
                  |L1.228|
0000e4  2408              MOVS     r4,#8                 ;168
0000e6  f1080001          ADD      r0,r8,#1              ;169
0000ea  4680              MOV      r8,r0                 ;169
0000ec  7800              LDRB     r0,[r0,#0]            ;169
0000ee  4914              LDR      r1,|L1.320|
0000f0  5c0f              LDRB     r7,[r1,r0]            ;169
0000f2  e7c2              B        |L1.122|
                  |L1.244|
0000f4  9911              LDR      r1,[sp,#0x44]         ;172
0000f6  6a48              LDR      r0,[r1,#0x24]         ;172
0000f8  4780              BLX      r0                    ;172
0000fa  b2c0              UXTB     r0,r0                 ;172
0000fc  9000              STR      r0,[sp,#0]            ;172
0000fe  bf00              NOP                            ;173
                  |L1.256|
000100  42ac              CMP      r4,r5                 ;175
000102  d900              BLS      |L1.262|
000104  462c              MOV      r4,r5                 ;176
                  |L1.262|
000106  1b2d              SUBS     r5,r5,r4              ;178
000108  bf00              NOP                            ;180
                  |L1.266|
00010a  f0170f01          TST      r7,#1                 ;181
00010e  d003              BEQ      |L1.280|
000110  7830              LDRB     r0,[r6,#0]            ;182
000112  9900              LDR      r1,[sp,#0]            ;182
000114  4048              EORS     r0,r0,r1              ;182
000116  7030              STRB     r0,[r6,#0]            ;182
                  |L1.280|
000118  1c76              ADDS     r6,r6,#1              ;184
00011a  087f              LSRS     r7,r7,#1              ;185
00011c  1e60              SUBS     r0,r4,#1              ;186
00011e  0004              MOVS     r4,r0                 ;186
000120  d1f3              BNE      |L1.266|
000122  b90d              CBNZ     r5,|L1.296|
000124  e79a              B        |L1.92|
                  |L1.294|
000126  e007              B        |L1.312|
                  |L1.296|
000128  2408              MOVS     r4,#8                 ;191
00012a  f1080001          ADD      r0,r8,#1              ;192
00012e  4680              MOV      r8,r0                 ;192
000130  7800              LDRB     r0,[r0,#0]            ;192
000132  4903              LDR      r1,|L1.320|
000134  5c0f              LDRB     r7,[r1,r0]            ;192
000136  e7e3              B        |L1.256|
                  |L1.312|
000138  bf00              NOP                            ;102
00013a  bf00              NOP      
00013c  e78e              B        |L1.92|
;;;196    
                          ENDP

00013e  0000              DCW      0x0000
                  |L1.320|
                          DCD      LCD_aMirror
                  |L1.324|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine2BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine2BPP PROC
;;;200    */
;;;201    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;202                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;203    {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4698              MOV      r8,r3
00000a  e9ddb610          LDRD     r11,r6,[sp,#0x40]
00000e  9c0f              LDR      r4,[sp,#0x3c]
;;;204      U8 pixels;
;;;205      U8  PixelCnt;
;;;206      PixelCnt = 4 - Diff;
000010  980e              LDR      r0,[sp,#0x38]
000012  f1c00004          RSB      r0,r0,#4
000016  b2c5              UXTB     r5,r0
;;;207      pixels = (*p) << (Diff << 1);
000018  f8980000          LDRB     r0,[r8,#0]
00001c  990e              LDR      r1,[sp,#0x38]
00001e  0049              LSLS     r1,r1,#1
000020  4088              LSLS     r0,r0,r1
000022  b2c7              UXTB     r7,r0
;;;208      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000024  4834              LDR      r0,|L2.248|
000026  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000028  f0100003          ANDS     r0,r0,#3
00002c  d004              BEQ      |L2.56|
00002e  2801              CMP      r0,#1
000030  d043              BEQ      |L2.186|
000032  2802              CMP      r0,#2
000034  d15d              BNE      |L2.242|
000036  e018              B        |L2.106|
                  |L2.56|
;;;209      case 0:    /* Write mode */
;;;210      PixelLoopWrite:
000038  bf00              NOP      
                  |L2.58|
;;;211        if (PixelCnt > xsize) {
00003a  42a5              CMP      r5,r4
00003c  dd00              BLE      |L2.64|
;;;212          PixelCnt = xsize;
00003e  b2e5              UXTB     r5,r4
                  |L2.64|
;;;213        }
;;;214        xsize -= PixelCnt;
000040  1b64              SUBS     r4,r4,r5
;;;215        do {
000042  bf00              NOP      
                  |L2.68|
;;;216          *pDest++ = *(pTrans + (pixels >> 6));
000044  11b8              ASRS     r0,r7,#6
000046  f81b0010          LDRB     r0,[r11,r0,LSL #1]
00004a  f8060b01          STRB     r0,[r6],#1
;;;217          pixels <<= 2;
00004e  06b8              LSLS     r0,r7,#26
000050  0e07              LSRS     r7,r0,#24
;;;218        } while (--PixelCnt);
000052  1e68              SUBS     r0,r5,#1
000054  b2c0              UXTB     r0,r0
000056  0005              MOVS     r5,r0
000058  d1f4              BNE      |L2.68|
;;;219        if (xsize) {
00005a  b12c              CBZ      r4,|L2.104|
;;;220          PixelCnt = 4;
00005c  2504              MOVS     r5,#4
;;;221          pixels = *(++p);
00005e  f1080001          ADD      r0,r8,#1
000062  4680              MOV      r8,r0
000064  7807              LDRB     r7,[r0,#0]
;;;222          goto PixelLoopWrite;
000066  e7e8              B        |L2.58|
                  |L2.104|
;;;223        }
;;;224        break;
000068  e043              B        |L2.242|
                  |L2.106|
;;;225      case LCD_DRAWMODE_TRANS:
;;;226      PixelLoopTrans:
00006a  bf00              NOP      
                  |L2.108|
;;;227        if (PixelCnt > xsize)
00006c  42a5              CMP      r5,r4
00006e  dd00              BLE      |L2.114|
;;;228          PixelCnt = xsize;
000070  b2e5              UXTB     r5,r4
                  |L2.114|
;;;229        xsize -= PixelCnt;
000072  1b64              SUBS     r4,r4,r5
;;;230        do {
000074  bf00              NOP      
                  |L2.118|
;;;231          if (pixels & 0xc0) {
000076  f0170fc0          TST      r7,#0xc0
00007a  d00d              BEQ      |L2.152|
;;;232            *pDest = *(pTrans + (pixels >> 6));
00007c  11b8              ASRS     r0,r7,#6
00007e  f81b0010          LDRB     r0,[r11,r0,LSL #1]
000082  7030              STRB     r0,[r6,#0]
;;;233            if (pUsage) {
000084  f1b90f00          CMP      r9,#0
000088  d006              BEQ      |L2.152|
;;;234              GUI_USAGE_AddPixel(pUsage, x, y);
00008a  f8d90008          LDR      r0,[r9,#8]
00008e  6803              LDR      r3,[r0,#0]
000090  4651              MOV      r1,r10
000092  4648              MOV      r0,r9
000094  9a02              LDR      r2,[sp,#8]
000096  4798              BLX      r3
                  |L2.152|
;;;235            }
;;;236          }
;;;237          pDest++;
000098  1c76              ADDS     r6,r6,#1
;;;238          x++;
00009a  f10a0a01          ADD      r10,r10,#1
;;;239          pixels <<= 2;
00009e  06b8              LSLS     r0,r7,#26
0000a0  0e07              LSRS     r7,r0,#24
;;;240        } while (--PixelCnt);
0000a2  1e68              SUBS     r0,r5,#1
0000a4  b2c0              UXTB     r0,r0
0000a6  0005              MOVS     r5,r0
0000a8  d1e5              BNE      |L2.118|
;;;241        if (xsize) {
0000aa  b12c              CBZ      r4,|L2.184|
;;;242          PixelCnt = 4;
0000ac  2504              MOVS     r5,#4
;;;243          pixels = *(++p);
0000ae  f1080001          ADD      r0,r8,#1
0000b2  4680              MOV      r8,r0
0000b4  7807              LDRB     r7,[r0,#0]
;;;244          goto PixelLoopTrans;
0000b6  e7d9              B        |L2.108|
                  |L2.184|
;;;245        }
;;;246        break;
0000b8  e01b              B        |L2.242|
                  |L2.186|
;;;247      case LCD_DRAWMODE_XOR:;
;;;248      PixelLoopXor:
0000ba  bf00              NOP      
                  |L2.188|
;;;249        if (PixelCnt > xsize)
0000bc  42a5              CMP      r5,r4
0000be  dd00              BLE      |L2.194|
;;;250          PixelCnt = xsize;
0000c0  b2e5              UXTB     r5,r4
                  |L2.194|
;;;251        xsize -= PixelCnt;
0000c2  1b64              SUBS     r4,r4,r5
;;;252        do {
0000c4  bf00              NOP      
                  |L2.198|
;;;253          if ((pixels & 0xc0))
0000c6  f0170fc0          TST      r7,#0xc0
0000ca  d003              BEQ      |L2.212|
;;;254            *pDest ^= 255;
0000cc  7830              LDRB     r0,[r6,#0]
0000ce  f08000ff          EOR      r0,r0,#0xff
0000d2  7030              STRB     r0,[r6,#0]
                  |L2.212|
;;;255          pDest++;
0000d4  1c76              ADDS     r6,r6,#1
;;;256          pixels <<= 2;
0000d6  06b8              LSLS     r0,r7,#26
0000d8  0e07              LSRS     r7,r0,#24
;;;257        } while (--PixelCnt);
0000da  1e68              SUBS     r0,r5,#1
0000dc  b2c0              UXTB     r0,r0
0000de  0005              MOVS     r5,r0
0000e0  d1f1              BNE      |L2.198|
;;;258        if (xsize) {
0000e2  b12c              CBZ      r4,|L2.240|
;;;259          PixelCnt = 4;
0000e4  2504              MOVS     r5,#4
;;;260          pixels = *(++p);
0000e6  f1080001          ADD      r0,r8,#1
0000ea  4680              MOV      r8,r0
0000ec  7807              LDRB     r7,[r0,#0]
;;;261          goto PixelLoopXor;
0000ee  e7e5              B        |L2.188|
                  |L2.240|
;;;262        }
;;;263        break;
0000f0  bf00              NOP      
                  |L2.242|
0000f2  bf00              NOP                            ;224
;;;264      }
;;;265    }
0000f4  e8bd9fff          POP      {r0-r12,pc}
;;;266    
                          ENDP

                  |L2.248|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine4BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine4BPP PROC
;;;270    */
;;;271    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;272                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;273    {
000004  b081              SUB      sp,sp,#4
000006  4607              MOV      r7,r0
000008  468a              MOV      r10,r1
00000a  4699              MOV      r9,r3
00000c  e9ddb60e          LDRD     r11,r6,[sp,#0x38]
000010  e9dd8410          LDRD     r8,r4,[sp,#0x40]
;;;274      U8 pixels;
;;;275      U8 PixelCnt;
;;;276      PixelCnt = 2 - Diff;
000014  f1cb0002          RSB      r0,r11,#2
000018  b2c0              UXTB     r0,r0
00001a  9000              STR      r0,[sp,#0]
;;;277      pixels = (*p) << (Diff << 2);
00001c  f8990000          LDRB     r0,[r9,#0]
000020  ea4f018b          LSL      r1,r11,#2
000024  4088              LSLS     r0,r0,r1
000026  b2c5              UXTB     r5,r0
;;;278      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000028  4855              LDR      r0,|L3.384|
00002a  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00002c  f0100003          ANDS     r0,r0,#3
000030  d004              BEQ      |L3.60|
000032  2801              CMP      r0,#1
000034  d07e              BEQ      |L3.308|
000036  2802              CMP      r0,#2
000038  d12a              BNE      |L3.144|
00003a  e02a              B        |L3.146|
                  |L3.60|
;;;279    /*
;;;280              * Write mode *
;;;281    */
;;;282      case 0:
;;;283        /* Draw incomplete bytes to the left of center area */
;;;284        if (Diff) {
00003c  f1bb0f00          CMP      r11,#0
000040  d009              BEQ      |L3.86|
;;;285          *pDest = *(pTrans + (pixels >> 4));
000042  1128              ASRS     r0,r5,#4
000044  f8180010          LDRB     r0,[r8,r0,LSL #1]
000048  7020              STRB     r0,[r4,#0]
;;;286          pDest++;
00004a  1c64              ADDS     r4,r4,#1
;;;287          xsize--;
00004c  1e76              SUBS     r6,r6,#1
;;;288          pixels = *++p;
00004e  f1090001          ADD      r0,r9,#1
000052  4681              MOV      r9,r0
000054  7805              LDRB     r5,[r0,#0]
                  |L3.86|
;;;289        }
;;;290        /* Draw center area (2 pixels in one byte) */
;;;291        if (xsize >= 2) {
000056  2e02              CMP      r6,#2
000058  db15              BLT      |L3.134|
;;;292          int i = xsize >> 1;
00005a  1070              ASRS     r0,r6,#1
;;;293          xsize &= 1;
00005c  f0060601          AND      r6,r6,#1
;;;294          do {
000060  bf00              NOP      
                  |L3.98|
;;;295            *pDest     = *(pTrans + (pixels >> 4));   /* Draw 1. (left) pixel */
000062  1129              ASRS     r1,r5,#4
000064  f8181011          LDRB     r1,[r8,r1,LSL #1]
000068  7021              STRB     r1,[r4,#0]
;;;296            *(pDest+1) = *(pTrans + (pixels & 15));   /* Draw 2. (right) pixel */
00006a  f005010f          AND      r1,r5,#0xf
00006e  f8181011          LDRB     r1,[r8,r1,LSL #1]
000072  7061              STRB     r1,[r4,#1]
;;;297            pDest += 2;
000074  1ca4              ADDS     r4,r4,#2
;;;298            pixels = *++p;
000076  f1090101          ADD      r1,r9,#1
00007a  4689              MOV      r9,r1
00007c  780d              LDRB     r5,[r1,#0]
;;;299          } while (--i);
00007e  1e41              SUBS     r1,r0,#1
000080  0008              MOVS     r0,r1
000082  d1ee              BNE      |L3.98|
;;;300        }
000084  bf00              NOP      
                  |L3.134|
;;;301        /* Draw incomplete bytes to the right of center area */
;;;302        if (xsize) {
000086  b11e              CBZ      r6,|L3.144|
;;;303          *pDest = * (pTrans + (pixels >> 4));
000088  1128              ASRS     r0,r5,#4
00008a  f8180010          LDRB     r0,[r8,r0,LSL #1]
00008e  7020              STRB     r0,[r4,#0]
                  |L3.144|
;;;304        }
;;;305        break;
000090  e072              B        |L3.376|
                  |L3.146|
;;;306    /*
;;;307              * Transparent draw mode *
;;;308    */
;;;309      case LCD_DRAWMODE_TRANS:
;;;310        /* Draw incomplete bytes to the left of center area */
;;;311        if (Diff) {
000092  f1bb0f00          CMP      r11,#0
000096  d015              BEQ      |L3.196|
;;;312          if (pixels & 0xF0) {
000098  f0150ff0          TST      r5,#0xf0
00009c  d00a              BEQ      |L3.180|
;;;313            *pDest = *(pTrans + (pixels >> 4));
00009e  1128              ASRS     r0,r5,#4
0000a0  f8180010          LDRB     r0,[r8,r0,LSL #1]
0000a4  7020              STRB     r0,[r4,#0]
;;;314            if (pUsage) {
0000a6  b12f              CBZ      r7,|L3.180|
;;;315              GUI_USAGE_AddPixel(pUsage, x, y);
0000a8  68b8              LDR      r0,[r7,#8]
0000aa  6803              LDR      r3,[r0,#0]
0000ac  4651              MOV      r1,r10
0000ae  4638              MOV      r0,r7
0000b0  9a03              LDR      r2,[sp,#0xc]
0000b2  4798              BLX      r3
                  |L3.180|
;;;316            }
;;;317          }
;;;318          pDest++;
0000b4  1c64              ADDS     r4,r4,#1
;;;319          x++;
0000b6  f10a0a01          ADD      r10,r10,#1
;;;320          xsize--;
0000ba  1e76              SUBS     r6,r6,#1
;;;321          pixels = *++p;
0000bc  f1090001          ADD      r0,r9,#1
0000c0  4681              MOV      r9,r0
0000c2  7805              LDRB     r5,[r0,#0]
                  |L3.196|
;;;322        }
;;;323        /* Draw center area (2 pixels in one byte) */
;;;324        while (xsize >= 2) {
0000c4  e024              B        |L3.272|
                  |L3.198|
;;;325          /* Draw 1. (left) pixel */
;;;326          if (pixels & 0xF0) {
0000c6  f0150ff0          TST      r5,#0xf0
0000ca  d00a              BEQ      |L3.226|
;;;327            *pDest = *(pTrans + (pixels >> 4));
0000cc  1128              ASRS     r0,r5,#4
0000ce  f8180010          LDRB     r0,[r8,r0,LSL #1]
0000d2  7020              STRB     r0,[r4,#0]
;;;328            if (pUsage) {
0000d4  b12f              CBZ      r7,|L3.226|
;;;329              GUI_USAGE_AddPixel(pUsage, x, y);
0000d6  68b8              LDR      r0,[r7,#8]
0000d8  6803              LDR      r3,[r0,#0]
0000da  4651              MOV      r1,r10
0000dc  4638              MOV      r0,r7
0000de  9a03              LDR      r2,[sp,#0xc]
0000e0  4798              BLX      r3
                  |L3.226|
;;;330            }
;;;331          }
;;;332          /* Draw 2. (right) pixel */
;;;333          if (pixels &= 15) {
0000e2  f005000f          AND      r0,r5,#0xf
0000e6  0005              MOVS     r5,r0
0000e8  d00a              BEQ      |L3.256|
;;;334            *(pDest + 1) = *(pTrans + pixels);
0000ea  f8180015          LDRB     r0,[r8,r5,LSL #1]
0000ee  7060              STRB     r0,[r4,#1]
;;;335            if (pUsage) {
0000f0  b137              CBZ      r7,|L3.256|
;;;336              GUI_USAGE_AddPixel(pUsage, x + 1, y);
0000f2  68b8              LDR      r0,[r7,#8]
0000f4  6803              LDR      r3,[r0,#0]
0000f6  f10a0101          ADD      r1,r10,#1
0000fa  4638              MOV      r0,r7
0000fc  9a03              LDR      r2,[sp,#0xc]
0000fe  4798              BLX      r3
                  |L3.256|
;;;337            }
;;;338          }
;;;339          pDest += 2;
000100  1ca4              ADDS     r4,r4,#2
;;;340          x += 2;
000102  f10a0a02          ADD      r10,r10,#2
;;;341          xsize -= 2;
000106  1eb6              SUBS     r6,r6,#2
;;;342          pixels = *++p;
000108  f1090001          ADD      r0,r9,#1
00010c  4681              MOV      r9,r0
00010e  7805              LDRB     r5,[r0,#0]
                  |L3.272|
000110  2e02              CMP      r6,#2                 ;324
000112  dad8              BGE      |L3.198|
;;;343        }
;;;344        /* Draw incomplete bytes to the right of center area */
;;;345        if (xsize) {
000114  b166              CBZ      r6,|L3.304|
;;;346          if (pixels >>= 4) {
000116  1128              ASRS     r0,r5,#4
000118  0005              MOVS     r5,r0
00011a  d009              BEQ      |L3.304|
;;;347            *pDest = *(pTrans + pixels);
00011c  f8180015          LDRB     r0,[r8,r5,LSL #1]
000120  7020              STRB     r0,[r4,#0]
;;;348            if (pUsage) {
000122  b12f              CBZ      r7,|L3.304|
;;;349              GUI_USAGE_AddPixel(pUsage, x, y);
000124  68b8              LDR      r0,[r7,#8]
000126  6803              LDR      r3,[r0,#0]
000128  4651              MOV      r1,r10
00012a  4638              MOV      r0,r7
00012c  9a03              LDR      r2,[sp,#0xc]
00012e  4798              BLX      r3
                  |L3.304|
;;;350            }
;;;351          }
;;;352        }
;;;353        break;
000130  e022              B        |L3.376|
000132  e7ff              B        |L3.308|
                  |L3.308|
;;;354      case LCD_DRAWMODE_XOR:;
;;;355      PixelLoopXor:
000134  bf00              NOP      
                  |L3.310|
;;;356        if (PixelCnt > xsize)
000136  9800              LDR      r0,[sp,#0]
000138  42b0              CMP      r0,r6
00013a  dd01              BLE      |L3.320|
;;;357          PixelCnt = xsize;
00013c  b2f0              UXTB     r0,r6
00013e  9000              STR      r0,[sp,#0]
                  |L3.320|
;;;358        xsize -= PixelCnt;
000140  9800              LDR      r0,[sp,#0]
000142  1a36              SUBS     r6,r6,r0
;;;359        do {
000144  bf00              NOP      
                  |L3.326|
;;;360          if ((pixels & 0xc0)) {
000146  f0150fc0          TST      r5,#0xc0
00014a  d003              BEQ      |L3.340|
;;;361            *pDest ^= 255;
00014c  7820              LDRB     r0,[r4,#0]
00014e  f08000ff          EOR      r0,r0,#0xff
000152  7020              STRB     r0,[r4,#0]
                  |L3.340|
;;;362          }
;;;363          pDest++;
000154  1c64              ADDS     r4,r4,#1
;;;364          pixels <<= 4;
000156  0728              LSLS     r0,r5,#28
000158  0e05              LSRS     r5,r0,#24
;;;365        } while (--PixelCnt);
00015a  9800              LDR      r0,[sp,#0]
00015c  1e40              SUBS     r0,r0,#1
00015e  f01000ff          ANDS     r0,r0,#0xff
000162  9000              STR      r0,[sp,#0]
000164  d1ef              BNE      |L3.326|
;;;366        if (xsize) {
000166  b136              CBZ      r6,|L3.374|
;;;367          PixelCnt = 2;
000168  2002              MOVS     r0,#2
00016a  9000              STR      r0,[sp,#0]
;;;368          pixels = *(++p);
00016c  f1090001          ADD      r0,r9,#1
000170  4681              MOV      r9,r0
000172  7805              LDRB     r5,[r0,#0]
;;;369          goto PixelLoopXor;
000174  e7df              B        |L3.310|
                  |L3.374|
;;;370        }
;;;371        break;
000176  bf00              NOP      
                  |L3.376|
000178  bf00              NOP                            ;305
;;;372      }
;;;373    }
00017a  b005              ADD      sp,sp,#0x14
00017c  e8bd8ff0          POP      {r4-r11,pc}
;;;374    
                          ENDP

                  |L3.384|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine8BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine8BPP PROC
;;;378    */
;;;379    static void _DrawBitLine8BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;380                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest) {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4692              MOV      r10,r2
00000a  461c              MOV      r4,r3
00000c  e9dd8908          LDRD     r8,r9,[sp,#0x20]
000010  9d0a              LDR      r5,[sp,#0x28]
;;;381      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000012  4817              LDR      r0,|L4.112|
000014  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000016  f0100003          ANDS     r0,r0,#3
00001a  d002              BEQ      |L4.34|
00001c  2802              CMP      r0,#2
00001e  d124              BNE      |L4.106|
000020  e00c              B        |L4.60|
                  |L4.34|
;;;382      case 0:    /* Write mode */
;;;383        do {
000022  bf00              NOP      
                  |L4.36|
;;;384          *pDest = *(pTrans + *pSrc);
000024  7820              LDRB     r0,[r4,#0]
000026  f8190010          LDRB     r0,[r9,r0,LSL #1]
00002a  7028              STRB     r0,[r5,#0]
;;;385          pDest++;
00002c  1c6d              ADDS     r5,r5,#1
;;;386          pSrc++;
00002e  1c64              ADDS     r4,r4,#1
;;;387        } while (--xsize);
000030  f1a80001          SUB      r0,r8,#1
000034  ea5f0800          MOVS     r8,r0
000038  d1f4              BNE      |L4.36|
;;;388        break;
00003a  e016              B        |L4.106|
                  |L4.60|
;;;389      case LCD_DRAWMODE_TRANS:
;;;390        do {
00003c  bf00              NOP      
                  |L4.62|
;;;391          if (*pSrc) {
00003e  7820              LDRB     r0,[r4,#0]
000040  b150              CBZ      r0,|L4.88|
;;;392            *pDest = *(pTrans + *pSrc);
000042  7820              LDRB     r0,[r4,#0]
000044  f8190010          LDRB     r0,[r9,r0,LSL #1]
000048  7028              STRB     r0,[r5,#0]
;;;393            if (pUsage) {
00004a  b12e              CBZ      r6,|L4.88|
;;;394              GUI_USAGE_AddPixel(pUsage, x, y);
00004c  68b0              LDR      r0,[r6,#8]
00004e  4652              MOV      r2,r10
000050  4639              MOV      r1,r7
000052  6803              LDR      r3,[r0,#0]
000054  4630              MOV      r0,r6
000056  4798              BLX      r3
                  |L4.88|
;;;395            }
;;;396          }
;;;397          x++;
000058  1c7f              ADDS     r7,r7,#1
;;;398          pDest++;
00005a  1c6d              ADDS     r5,r5,#1
;;;399          pSrc++;
00005c  1c64              ADDS     r4,r4,#1
;;;400        } while (--xsize);
00005e  f1a80001          SUB      r0,r8,#1
000062  ea5f0800          MOVS     r8,r0
000066  d1ea              BNE      |L4.62|
;;;401        break;
000068  bf00              NOP      
                  |L4.106|
00006a  bf00              NOP                            ;388
;;;402      }
;;;403    }
00006c  e8bd87f0          POP      {r4-r10,pc}
;;;404    
                          ENDP

                  |L4.112|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine8BPP_DDB||, CODE, READONLY, ALIGN=2

                  _DrawBitLine8BPP_DDB PROC
;;;420    */
;;;421    static void _DrawBitLine8BPP_DDB(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * pSrc, int xsize, PIXELINDEX* pDest) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4691              MOV      r9,r2
00000a  461c              MOV      r4,r3
00000c  e9dd8608          LDRD     r8,r6,[sp,#0x20]
;;;422      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000010  4812              LDR      r0,|L5.92|
000012  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000014  f0100003          ANDS     r0,r0,#3
000018  d002              BEQ      |L5.32|
00001a  2802              CMP      r0,#2
00001c  d11b              BNE      |L5.86|
00001e  e005              B        |L5.44|
                  |L5.32|
;;;423      case 0:    /* Write mode */
;;;424        #if GUI_UNI_PTR_USED
;;;425          _Memcopy(pDest, pSrc, xsize);
;;;426        #else
;;;427          memcpy(pDest, pSrc, xsize);
000020  4642              MOV      r2,r8
000022  4621              MOV      r1,r4
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       __aeabi_memcpy
;;;428        #endif
;;;429        break;
00002a  e014              B        |L5.86|
                  |L5.44|
;;;430      case LCD_DRAWMODE_TRANS:
;;;431        do {
00002c  bf00              NOP      
                  |L5.46|
;;;432          if (*pSrc) {
00002e  7820              LDRB     r0,[r4,#0]
000030  b140              CBZ      r0,|L5.68|
;;;433            *pDest = *pSrc;
000032  7820              LDRB     r0,[r4,#0]
000034  7030              STRB     r0,[r6,#0]
;;;434            if (pUsage) {
000036  b12d              CBZ      r5,|L5.68|
;;;435              GUI_USAGE_AddPixel(pUsage, x, y);
000038  68a8              LDR      r0,[r5,#8]
00003a  464a              MOV      r2,r9
00003c  4639              MOV      r1,r7
00003e  6803              LDR      r3,[r0,#0]
000040  4628              MOV      r0,r5
000042  4798              BLX      r3
                  |L5.68|
;;;436            }
;;;437          }
;;;438          x++;
000044  1c7f              ADDS     r7,r7,#1
;;;439          pDest++;
000046  1c76              ADDS     r6,r6,#1
;;;440          pSrc++;
000048  1c64              ADDS     r4,r4,#1
;;;441        } while (--xsize);
00004a  f1a80001          SUB      r0,r8,#1
00004e  ea5f0800          MOVS     r8,r0
000052  d1ec              BNE      |L5.46|
;;;442        break;
000054  bf00              NOP      
                  |L5.86|
000056  bf00              NOP                            ;429
;;;443      }
;;;444    }
000058  e8bd87f0          POP      {r4-r10,pc}
;;;445    
                          ENDP

                  |L5.92|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmap||, CODE, READONLY, ALIGN=2

                  _DrawBitmap PROC
;;;449    */
;;;450    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;451                            int BitsPerPixel, int BytesPerLine,
;;;452                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;453    {
000004  b087              SUB      sp,sp,#0x1c
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4699              MOV      r9,r3
00000c  e9dda817          LDRD     r10,r8,[sp,#0x5c]
;;;454      int i;
;;;455      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000010  4946              LDR      r1,|L6.300|
000012  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000016  f7fffffe          BL       GUI_ALLOC_h2p
00001a  4683              MOV      r11,r0
;;;456      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
00001c  f8bb0018          LDRH     r0,[r11,#0x18]
000020  b120              CBZ      r0,|L6.44|
000022  f9bb0018          LDRSH    r0,[r11,#0x18]
000026  f7fffffe          BL       GUI_ALLOC_h2p
00002a  e000              B        |L6.46|
                  |L6.44|
00002c  2000              MOVS     r0,#0
                  |L6.46|
00002e  9006              STR      r0,[sp,#0x18]
;;;457      unsigned    BytesPerLineDest;
;;;458      PIXELINDEX* pDest;
;;;459      BytesPerLineDest = pDev->BytesPerLine;
000030  f8db000c          LDR      r0,[r11,#0xc]
000034  9005              STR      r0,[sp,#0x14]
;;;460      x0 += Diff;
000036  9807              LDR      r0,[sp,#0x1c]
000038  4450              ADD      r0,r0,r10
00003a  9007              STR      r0,[sp,#0x1c]
;;;461      /* Mark all affected pixels dirty unless transparency is set */
;;;462      if (pUsage) {
00003c  9806              LDR      r0,[sp,#0x18]
00003e  b160              CBZ      r0,|L6.90|
;;;463        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
000040  483a              LDR      r0,|L6.300|
000042  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000044  f0100f02          TST      r0,#2
000048  d107              BNE      |L6.90|
;;;464          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
00004a  463b              MOV      r3,r7
00004c  4632              MOV      r2,r6
00004e  f8cd9000          STR      r9,[sp,#0]
000052  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000056  f7fffffe          BL       GUI_USAGE_AddRect
                  |L6.90|
;;;465        }
;;;466      }
;;;467      pDest = _XY2PTR(x0, y0);
00005a  4631              MOV      r1,r6
00005c  9807              LDR      r0,[sp,#0x1c]
00005e  f7fffffe          BL       _XY2PTR
000062  4605              MOV      r5,r0
;;;468    #if BITSPERPIXEL == 16
;;;469      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;470      if (BitsPerPixel == 16) {
;;;471        for (i = 0; i < ysize; i++) {
;;;472          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDest);
;;;473          pData += BytesPerLine;
;;;474          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;475        }
;;;476        return;
;;;477      }
;;;478    #endif
;;;479      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;480      if (BitsPerPixel == 8) {
000064  9814              LDR      r0,[sp,#0x50]
000066  2808              CMP      r0,#8
000068  d122              BNE      |L6.176|
;;;481        for (i = 0; i < ysize; i++) {
00006a  2400              MOVS     r4,#0
00006c  e01b              B        |L6.166|
                  |L6.110|
;;;482          if (pTrans) {
00006e  f1b80f00          CMP      r8,#0
000072  d009              BEQ      |L6.136|
;;;483            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDest);
000074  19a2              ADDS     r2,r4,r6
000076  e9cd7800          STRD     r7,r8,[sp,#0]
00007a  9502              STR      r5,[sp,#8]
00007c  9b16              LDR      r3,[sp,#0x58]
00007e  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000082  f7fffffe          BL       _DrawBitLine8BPP
000086  e007              B        |L6.152|
                  |L6.136|
;;;484          } else {
;;;485            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDest);
000088  19a2              ADDS     r2,r4,r6
00008a  e9cd7500          STRD     r7,r5,[sp,#0]
00008e  9b16              LDR      r3,[sp,#0x58]
000090  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000094  f7fffffe          BL       _DrawBitLine8BPP_DDB
                  |L6.152|
;;;486          }
;;;487          pData += BytesPerLine;
000098  e9dd1015          LDRD     r1,r0,[sp,#0x54]
00009c  4408              ADD      r0,r0,r1
00009e  9016              STR      r0,[sp,#0x58]
;;;488          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
0000a0  9805              LDR      r0,[sp,#0x14]
0000a2  4405              ADD      r5,r5,r0
0000a4  1c64              ADDS     r4,r4,#1              ;481
                  |L6.166|
0000a6  454c              CMP      r4,r9                 ;481
0000a8  dbe1              BLT      |L6.110|
                  |L6.170|
;;;489        }
;;;490        return;
;;;491      }
;;;492      /* Use aID for bitmaps without palette */
;;;493      if (!pTrans) {
;;;494        pTrans = aID;
;;;495      }
;;;496      for (i = 0; i < ysize; i++) {
;;;497        switch (BitsPerPixel) {
;;;498        case 1:
;;;499          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;500          break;
;;;501        case 2:
;;;502          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;503          break;
;;;504        case 4:
;;;505          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;506          break;
;;;507        }
;;;508        pData += BytesPerLine;
;;;509        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;510      }
;;;511    }
0000aa  b00b              ADD      sp,sp,#0x2c
0000ac  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.176|
0000b0  f1b80f00          CMP      r8,#0                 ;493
0000b4  d101              BNE      |L6.186|
0000b6  f8df8078          LDR      r8,|L6.304|
                  |L6.186|
0000ba  2400              MOVS     r4,#0                 ;496
0000bc  e031              B        |L6.290|
                  |L6.190|
0000be  9814              LDR      r0,[sp,#0x50]         ;497
0000c0  2801              CMP      r0,#1                 ;497
0000c2  d004              BEQ      |L6.206|
0000c4  2802              CMP      r0,#2                 ;497
0000c6  d00e              BEQ      |L6.230|
0000c8  2804              CMP      r0,#4                 ;497
0000ca  d122              BNE      |L6.274|
0000cc  e016              B        |L6.252|
                  |L6.206|
0000ce  19a2              ADDS     r2,r4,r6              ;499
0000d0  e9cd8b02          STRD     r8,r11,[sp,#8]        ;499
0000d4  e9cda700          STRD     r10,r7,[sp,#0]        ;499
0000d8  9504              STR      r5,[sp,#0x10]         ;499
0000da  9b16              LDR      r3,[sp,#0x58]         ;499
0000dc  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;499
0000e0  f7fffffe          BL       _DrawBitLine1BPP
0000e4  e015              B        |L6.274|
                  |L6.230|
0000e6  19a2              ADDS     r2,r4,r6              ;502
0000e8  e9cda700          STRD     r10,r7,[sp,#0]        ;502
0000ec  e9cd8502          STRD     r8,r5,[sp,#8]         ;502
0000f0  9b16              LDR      r3,[sp,#0x58]         ;502
0000f2  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;502
0000f6  f7fffffe          BL       _DrawBitLine2BPP
0000fa  e00a              B        |L6.274|
                  |L6.252|
0000fc  19a2              ADDS     r2,r4,r6              ;505
0000fe  e9cda700          STRD     r10,r7,[sp,#0]        ;505
000102  e9cd8502          STRD     r8,r5,[sp,#8]         ;505
000106  9b16              LDR      r3,[sp,#0x58]         ;505
000108  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;505
00010c  f7fffffe          BL       _DrawBitLine4BPP
000110  bf00              NOP                            ;506
                  |L6.274|
000112  bf00              NOP                            ;500
000114  e9dd1015          LDRD     r1,r0,[sp,#0x54]      ;508
000118  4408              ADD      r0,r0,r1              ;508
00011a  9016              STR      r0,[sp,#0x58]         ;508
00011c  9805              LDR      r0,[sp,#0x14]         ;509
00011e  4405              ADD      r5,r5,r0              ;509
000120  1c64              ADDS     r4,r4,#1              ;496
                  |L6.290|
000122  454c              CMP      r4,r9                 ;496
000124  dbcb              BLT      |L6.190|
000126  bf00              NOP      
000128  e7bf              B        |L6.170|
;;;512    
                          ENDP

00012a  0000              DCW      0x0000
                  |L6.300|
                          DCD      GUI_Context
                  |L6.304|
                          DCD      aID

                          AREA ||i._DrawHLine||, CODE, READONLY, ALIGN=1

                  _DrawHLine PROC
;;;557    */
;;;558    static void _DrawHLine(int x0, int y, int x1) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;559      _FillRect(x0, y, x1, y);
000008  4623              MOV      r3,r4
00000a  4632              MOV      r2,r6
00000c  4621              MOV      r1,r4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       _FillRect
;;;560    }
000014  bd70              POP      {r4-r6,pc}
;;;561    
                          ENDP


                          AREA ||i._DrawVLine||, CODE, READONLY, ALIGN=2

                  _DrawVLine PROC
;;;565    */
;;;566    static void _DrawVLine(int x , int y0, int y1) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4683              MOV      r11,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;567      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00000a  492c              LDR      r1,|L8.188|
00000c  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000010  f7fffffe          BL       GUI_ALLOC_h2p
000014  4607              MOV      r7,r0
;;;568      GUI_USAGE_h hUsage = pDev->hUsage; 
000016  f9b78018          LDRSH    r8,[r7,#0x18]
;;;569      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
00001a  f1b80f00          CMP      r8,#0
00001e  d003              BEQ      |L8.40|
000020  4640              MOV      r0,r8
000022  f7fffffe          BL       GUI_ALLOC_h2p
000026  e000              B        |L8.42|
                  |L8.40|
000028  2000              MOVS     r0,#0
                  |L8.42|
00002a  4681              MOV      r9,r0
;;;570      PIXELINDEX* pData  = _XY2PTR(x, y0);
00002c  4629              MOV      r1,r5
00002e  4658              MOV      r0,r11
000030  f7fffffe          BL       _XY2PTR
000034  4604              MOV      r4,r0
;;;571      unsigned BytesPerLine = pDev->BytesPerLine;
000036  f8d7a00c          LDR      r10,[r7,#0xc]
;;;572    
;;;573      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
00003a  4820              LDR      r0,|L8.188|
00003c  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00003e  f0100f01          TST      r0,#1
000042  d019              BEQ      |L8.120|
;;;574        PIXELINDEX IndexMask;
;;;575        IndexMask = pDev->pfGetIndexMask();
000044  6a78              LDR      r0,[r7,#0x24]
000046  4780              BLX      r0
000048  b2c0              UXTB     r0,r0
00004a  9000              STR      r0,[sp,#0]
;;;576        do {
00004c  bf00              NOP      
                  |L8.78|
;;;577          if (hUsage) {
00004e  f1b80f00          CMP      r8,#0
000052  d006              BEQ      |L8.98|
;;;578            GUI_USAGE_AddPixel(pUsage, x, y0);
000054  f8d90008          LDR      r0,[r9,#8]
000058  462a              MOV      r2,r5
00005a  4659              MOV      r1,r11
00005c  6803              LDR      r3,[r0,#0]
00005e  4648              MOV      r0,r9
000060  4798              BLX      r3
                  |L8.98|
;;;579          }
;;;580          *pData = *pData ^ IndexMask;
000062  7820              LDRB     r0,[r4,#0]
000064  9900              LDR      r1,[sp,#0]
000066  4048              EORS     r0,r0,r1
000068  7020              STRB     r0,[r4,#0]
;;;581          pData = (PIXELINDEX*)((U8*)pData + pDev->BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
00006a  68f8              LDR      r0,[r7,#0xc]
00006c  4404              ADD      r4,r4,r0
;;;582        } while (++y0 <= y1);
00006e  1c68              ADDS     r0,r5,#1
000070  4605              MOV      r5,r0
000072  42b0              CMP      r0,r6
000074  ddeb              BLE      |L8.78|
;;;583      } else {
000076  e01e              B        |L8.182|
                  |L8.120|
;;;584        if (hUsage) {
000078  f1b80f00          CMP      r8,#0
00007c  d010              BEQ      |L8.160|
;;;585          do {
00007e  bf00              NOP      
                  |L8.128|
;;;586            GUI_USAGE_AddPixel(pUsage, x, y0);
000080  f8d90008          LDR      r0,[r9,#8]
000084  462a              MOV      r2,r5
000086  4659              MOV      r1,r11
000088  6803              LDR      r3,[r0,#0]
00008a  4648              MOV      r0,r9
00008c  4798              BLX      r3
;;;587            *pData = LCD_COLORINDEX;
00008e  480b              LDR      r0,|L8.188|
000090  7880              LDRB     r0,[r0,#2]  ; GUI_Context
000092  7020              STRB     r0,[r4,#0]
;;;588            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
000094  4454              ADD      r4,r4,r10
;;;589          } while (++y0 <= y1);
000096  1c68              ADDS     r0,r5,#1
000098  4605              MOV      r5,r0
00009a  42b0              CMP      r0,r6
00009c  ddf0              BLE      |L8.128|
00009e  e00a              B        |L8.182|
                  |L8.160|
;;;590        } else {
;;;591          unsigned NumPixels;
;;;592          NumPixels = y1 - y0 + 1;
0000a0  1b71              SUBS     r1,r6,r5
0000a2  1c48              ADDS     r0,r1,#1
;;;593          do {
0000a4  bf00              NOP      
                  |L8.166|
;;;594            *pData = LCD_COLORINDEX;
0000a6  4905              LDR      r1,|L8.188|
0000a8  7889              LDRB     r1,[r1,#2]  ; GUI_Context
0000aa  7021              STRB     r1,[r4,#0]
;;;595            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
0000ac  4454              ADD      r4,r4,r10
;;;596          } while (--NumPixels);
0000ae  1e41              SUBS     r1,r0,#1
0000b0  0008              MOVS     r0,r1
0000b2  d1f8              BNE      |L8.166|
;;;597        }
0000b4  bf00              NOP      
                  |L8.182|
;;;598      }
;;;599    }
0000b6  e8bd8ff8          POP      {r3-r11,pc}
;;;600    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L8.188|
                          DCD      GUI_Context

                          AREA ||i._FillRect||, CODE, READONLY, ALIGN=2

                  _FillRect PROC
;;;516    */
;;;517    static void _FillRect(int x0, int y0, int x1, int y1) {
000000  e92d4ffe          PUSH     {r1-r11,lr}
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4693              MOV      r11,r2
00000a  461f              MOV      r7,r3
;;;518      unsigned BytesPerLine;
;;;519      int Len;
;;;520      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00000c  4924              LDR      r1,|L9.160|
00000e  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000012  f7fffffe          BL       GUI_ALLOC_h2p
000016  4605              MOV      r5,r0
;;;521      PIXELINDEX* pData  = _XY2PTR(x0, y0);
000018  4621              MOV      r1,r4
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       _XY2PTR
000020  4681              MOV      r9,r0
;;;522      BytesPerLine = pDev->BytesPerLine;
000022  68e8              LDR      r0,[r5,#0xc]
000024  9002              STR      r0,[sp,#8]
;;;523      Len = x1 - x0 + 1;
000026  ebab0006          SUB      r0,r11,r6
00002a  f1000801          ADD      r8,r0,#1
;;;524      /* Mark rectangle as modified */
;;;525      if (pDev->hUsage) {
00002e  8b28              LDRH     r0,[r5,#0x18]
000030  b168              CBZ      r0,|L9.78|
;;;526        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
000032  f9b50018          LDRSH    r0,[r5,#0x18]
000036  f7fffffe          BL       GUI_ALLOC_h2p
00003a  4682              MOV      r10,r0
00003c  1b38              SUBS     r0,r7,r4
00003e  1c40              ADDS     r0,r0,#1
000040  4643              MOV      r3,r8
000042  4622              MOV      r2,r4
000044  4631              MOV      r1,r6
000046  9000              STR      r0,[sp,#0]
000048  4650              MOV      r0,r10
00004a  f7fffffe          BL       GUI_USAGE_AddRect
                  |L9.78|
;;;527      }
;;;528      /* Do the drawing */
;;;529      for (; y0 <= y1; y0++) {
00004e  e022              B        |L9.150|
                  |L9.80|
;;;530        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000050  4813              LDR      r0,|L9.160|
000052  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000054  f0100f01          TST      r0,#1
000058  d014              BEQ      |L9.132|
;;;531          int RemPixels;
;;;532          PIXELINDEX* pDest;
;;;533          PIXELINDEX IndexMask;
;;;534          RemPixels = Len;
00005a  f8cd8004          STR      r8,[sp,#4]
;;;535          pDest  = pData;
00005e  46ca              MOV      r10,r9
;;;536          IndexMask = pDev->pfGetIndexMask();
000060  6a68              LDR      r0,[r5,#0x24]
000062  4780              BLX      r0
000064  b2c0              UXTB     r0,r0
000066  9000              STR      r0,[sp,#0]
;;;537          do {
000068  bf00              NOP      
                  |L9.106|
;;;538            *pDest = *pDest ^ IndexMask;
00006a  f89a0000          LDRB     r0,[r10,#0]
00006e  9900              LDR      r1,[sp,#0]
000070  4048              EORS     r0,r0,r1
000072  f88a0000          STRB     r0,[r10,#0]
;;;539            pDest++;
000076  f10a0a01          ADD      r10,r10,#1
;;;540          } while (--RemPixels);
00007a  9801              LDR      r0,[sp,#4]
00007c  1e40              SUBS     r0,r0,#1
00007e  9001              STR      r0,[sp,#4]
000080  d1f3              BNE      |L9.106|
;;;541        } else {  /* Fill */
000082  e005              B        |L9.144|
                  |L9.132|
;;;542          #if BITSPERPIXEL == 8
;;;543            GUI_MEMSET(pData, LCD_COLORINDEX, Len);
000084  4806              LDR      r0,|L9.160|
000086  7881              LDRB     r1,[r0,#2]  ; GUI_Context
000088  4642              MOV      r2,r8
00008a  4648              MOV      r0,r9
00008c  f7fffffe          BL       GUI__memset
                  |L9.144|
;;;544          #elif BITSPERPIXEL == 16
;;;545            GUI__memset16(pData, LCD_COLORINDEX, Len);
;;;546          #else
;;;547            #error Unsupported
;;;548          #endif
;;;549        }
;;;550        pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); 
000090  9802              LDR      r0,[sp,#8]
000092  4481              ADD      r9,r9,r0
000094  1c64              ADDS     r4,r4,#1              ;529
                  |L9.150|
000096  42bc              CMP      r4,r7                 ;529
000098  ddda              BLE      |L9.80|
;;;551      }
;;;552    }
00009a  e8bd8ffe          POP      {r1-r11,pc}
;;;553    
                          ENDP

00009e  0000              DCW      0x0000
                  |L9.160|
                          DCD      GUI_Context

                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=1

                  _GetPixelIndex PROC
;;;634    */
;;;635    static unsigned int _GetPixelIndex(int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;636      PIXELINDEX* pData = _XY2PTR(x, y);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _XY2PTR
00000e  4606              MOV      r6,r0
;;;637      return *pData;
000010  7830              LDRB     r0,[r6,#0]
;;;638    }
000012  bd70              POP      {r4-r6,pc}
;;;639    
                          ENDP


                          AREA ||i._SetPixelIndex||, CODE, READONLY, ALIGN=2

                  _SetPixelIndex PROC
;;;604    */
;;;605    static void _SetPixelIndex(int x, int y, int Index) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;606      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
00000a  4910              LDR      r1,|L11.76|
00000c  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
000010  f7fffffe          BL       GUI_ALLOC_h2p
000014  4680              MOV      r8,r0
;;;607      GUI_USAGE_h hUsage = pDev->hUsage; 
000016  f9b87018          LDRSH    r7,[r8,#0x18]
;;;608      PIXELINDEX* pData = _XY2PTR(x, y);
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       _XY2PTR
000022  4681              MOV      r9,r0
;;;609      *pData = Index;
000024  f8896000          STRB     r6,[r9,#0]
;;;610      if (hUsage) {
000028  b16f              CBZ      r7,|L11.70|
;;;611        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       GUI_ALLOC_h2p
000030  4683              MOV      r11,r0
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       GUI_ALLOC_h2p
000038  6880              LDR      r0,[r0,#8]
00003a  462a              MOV      r2,r5
00003c  4621              MOV      r1,r4
00003e  f8d0a000          LDR      r10,[r0,#0]
000042  4658              MOV      r0,r11
000044  47d0              BLX      r10
                  |L11.70|
;;;612      }
;;;613    }
000046  e8bd9ff0          POP      {r4-r12,pc}
;;;614    
                          ENDP

00004a  0000              DCW      0x0000
                  |L11.76|
                          DCD      GUI_Context

                          AREA ||i._XY2PTR||, CODE, READONLY, ALIGN=2

                  _XY2PTR PROC
;;;73     */
;;;74     static PIXELINDEX* _XY2PTR(int x, int y) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;75       GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000008  490a              LDR      r1,|L12.52|
00000a  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4604              MOV      r4,r0
;;;76       U8 *pData = (U8*)(pDev + 1);
000014  f104072c          ADD      r7,r4,#0x2c
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds",x,y);
;;;80         }
;;;81       #endif
;;;82       pData += (GUI_ALLOC_DATATYPE_U)(y - pDev->y0) * (GUI_ALLOC_DATATYPE_U)pDev->BytesPerLine;
000018  8860              LDRH     r0,[r4,#2]
00001a  1a30              SUBS     r0,r6,r0
00001c  b280              UXTH     r0,r0
00001e  89a1              LDRH     r1,[r4,#0xc]
000020  b289              UXTH     r1,r1
000022  fb007701          MLA      r7,r0,r1,r7
;;;83       return ((PIXELINDEX*)pData) + x - pDev->x0;
000026  1978              ADDS     r0,r7,r5
000028  f9b41000          LDRSH    r1,[r4,#0]
00002c  1a40              SUBS     r0,r0,r1
;;;84     }
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;85     
                          ENDP

000032  0000              DCW      0x0000
                  |L12.52|
                          DCD      GUI_Context

                          AREA ||i._XorPixel||, CODE, READONLY, ALIGN=2

                  _XorPixel PROC
;;;618    */
;;;619    static void _XorPixel(int x, int y) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;620      PIXELINDEX IndexMask;
;;;621      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000008  4913              LDR      r1,|L13.88|
00000a  f9b10050          LDRSH    r0,[r1,#0x50]  ; GUI_Context
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4606              MOV      r6,r0
;;;622      GUI_USAGE_h hUsage = pDev->hUsage; 
000014  f9b67018          LDRSH    r7,[r6,#0x18]
;;;623      PIXELINDEX* pData = _XY2PTR(x, y);
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _XY2PTR
000020  4680              MOV      r8,r0
;;;624      IndexMask = pDev->pfGetIndexMask();
000022  6a70              LDR      r0,[r6,#0x24]
000024  4780              BLX      r0
000026  f00009ff          AND      r9,r0,#0xff
;;;625      *pData = *pData ^ IndexMask;
00002a  f8980000          LDRB     r0,[r8,#0]
00002e  ea800009          EOR      r0,r0,r9
000032  f8880000          STRB     r0,[r8,#0]
;;;626      if (hUsage) {
000036  b16f              CBZ      r7,|L13.84|
;;;627        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
000038  4638              MOV      r0,r7
00003a  f7fffffe          BL       GUI_ALLOC_h2p
00003e  4683              MOV      r11,r0
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       GUI_ALLOC_h2p
000046  6880              LDR      r0,[r0,#8]
000048  462a              MOV      r2,r5
00004a  4621              MOV      r1,r4
00004c  f8d0a000          LDR      r10,[r0,#0]
000050  4658              MOV      r0,r11
000052  47d0              BLX      r10
                  |L13.84|
;;;628      }
;;;629    }
000054  e8bd9ff0          POP      {r4-r12,pc}
;;;630    
                          ENDP

                  |L13.88|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f
                  GUI_MEMDEV__APIList8
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000008
