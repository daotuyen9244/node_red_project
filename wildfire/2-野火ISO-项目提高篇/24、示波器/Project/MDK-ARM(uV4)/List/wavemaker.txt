; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\wavemaker.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\wavemaker.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\wavemaker.crf ..\..\User\bsp\WaveMaker.c]
                          THUMB

                          AREA ||i.InitNoise||, CODE, READONLY, ALIGN=2

                  InitNoise PROC
;;;223    *************************************************************************************/
;;;224    void InitNoise()
000000  b500              PUSH     {lr}
;;;225    {  
000002  b085              SUB      sp,sp,#0x14
;;;226      DAC_InitTypeDef            DAC_InitStructure;
;;;227      GPIO_InitTypeDef           GPIO_InitStructure;
;;;228    
;;;229      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;230      RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0748              LSLS     r0,r1,#29
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;231      RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
000014  2101              MOVS     r1,#1
000016  2010              MOVS     r0,#0x10
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;232    
;;;233      GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4;
00001c  2010              MOVS     r0,#0x10
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;234      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
000022  2000              MOVS     r0,#0
000024  f88d0003          STRB     r0,[sp,#3]
;;;235      GPIO_Init(GPIOA, &GPIO_InitStructure);
000028  4669              MOV      r1,sp
00002a  4815              LDR      r0,|L1.128|
00002c  f7fffffe          BL       GPIO_Init
;;;236    
;;;237      TIM_PrescalerConfig(TIM6, 0, TIM_PSCReloadMode_Update); //预分频=0 
000030  2200              MOVS     r2,#0
000032  4611              MOV      r1,r2
000034  4813              LDR      r0,|L1.132|
000036  f7fffffe          BL       TIM_PrescalerConfig
;;;238      TIM_SetAutoreload(TIM6, 220);	 
00003a  21dc              MOVS     r1,#0xdc
00003c  4811              LDR      r0,|L1.132|
00003e  f7fffffe          BL       TIM_SetAutoreload
;;;239      TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
000042  2120              MOVS     r1,#0x20
000044  480f              LDR      r0,|L1.132|
000046  f7fffffe          BL       TIM_SelectOutputTrigger
;;;240    
;;;241      DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
00004a  2004              MOVS     r0,#4
00004c  9001              STR      r0,[sp,#4]
;;;242      DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_Noise;
00004e  2040              MOVS     r0,#0x40
000050  9002              STR      r0,[sp,#8]
;;;243      DAC_InitStructure.DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bits11_0;  //可以通过此处屏蔽的位数来设置幅值
000052  f44f6030          MOV      r0,#0xb00
000056  9003              STR      r0,[sp,#0xc]
;;;244      DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
000058  2000              MOVS     r0,#0
00005a  9004              STR      r0,[sp,#0x10]
;;;245      DAC_Init(DAC_Channel_1, &DAC_InitStructure);
00005c  a901              ADD      r1,sp,#4
00005e  f7fffffe          BL       DAC_Init
;;;246      DAC_Cmd(DAC_Channel_1, ENABLE);
000062  2101              MOVS     r1,#1
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       DAC_Cmd
;;;247    
;;;248      DAC_SetChannel1Data(DAC_Align_12b_R, 0);//可以通过这里设置对齐方式 并且通过后面的数据设置初始值
00006a  2100              MOVS     r1,#0
00006c  4608              MOV      r0,r1
00006e  f7fffffe          BL       DAC_SetChannel1Data
;;;249      TIM_Cmd(TIM6, ENABLE);					
000072  2101              MOVS     r1,#1
000074  4803              LDR      r0,|L1.132|
000076  f7fffffe          BL       TIM_Cmd
;;;250    }
00007a  b005              ADD      sp,sp,#0x14
00007c  bd00              POP      {pc}
;;;251     /*******************************************************************************
                          ENDP

00007e  0000              DCW      0x0000
                  |L1.128|
                          DCD      0x40010800
                  |L1.132|
                          DCD      0x40001000

                          AREA ||i.InitTriangle||, CODE, READONLY, ALIGN=2

                  InitTriangle PROC
;;;257    *******************************************************************************/
;;;258    void InitTriangle()
000000  b500              PUSH     {lr}
;;;259    {  
000002  b085              SUB      sp,sp,#0x14
;;;260      DAC_InitTypeDef            DAC_InitStructure;
;;;261      GPIO_InitTypeDef           GPIO_InitStructure;
;;;262    
;;;263      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;264      RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0748              LSLS     r0,r1,#29
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;265      RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
000014  2101              MOVS     r1,#1
000016  2010              MOVS     r0,#0x10
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;266    
;;;267      GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4;
00001c  2010              MOVS     r0,#0x10
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;268      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
000022  2000              MOVS     r0,#0
000024  f88d0003          STRB     r0,[sp,#3]
;;;269      GPIO_Init(GPIOA, &GPIO_InitStructure);
000028  4669              MOV      r1,sp
00002a  4815              LDR      r0,|L2.128|
00002c  f7fffffe          BL       GPIO_Init
;;;270    
;;;271      TIM_PrescalerConfig(TIM6, 0, TIM_PSCReloadMode_Update); //预分频=0 
000030  2200              MOVS     r2,#0
000032  4611              MOV      r1,r2
000034  4813              LDR      r0,|L2.132|
000036  f7fffffe          BL       TIM_PrescalerConfig
;;;272      TIM_SetAutoreload(TIM6, 22);	 
00003a  2116              MOVS     r1,#0x16
00003c  4811              LDR      r0,|L2.132|
00003e  f7fffffe          BL       TIM_SetAutoreload
;;;273      TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
000042  2120              MOVS     r1,#0x20
000044  480f              LDR      r0,|L2.132|
000046  f7fffffe          BL       TIM_SelectOutputTrigger
;;;274    
;;;275      DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
00004a  2004              MOVS     r0,#4
00004c  9001              STR      r0,[sp,#4]
;;;276      DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_Triangle;
00004e  2080              MOVS     r0,#0x80
000050  9002              STR      r0,[sp,#8]
;;;277      DAC_InitStructure.DAC_LFSRUnmask_TriangleAmplitude = DAC_TriangleAmplitude_4095;
000052  f44f6030          MOV      r0,#0xb00
000056  9003              STR      r0,[sp,#0xc]
;;;278      DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
000058  2000              MOVS     r0,#0
00005a  9004              STR      r0,[sp,#0x10]
;;;279      DAC_Init(DAC_Channel_1, &DAC_InitStructure);
00005c  a901              ADD      r1,sp,#4
00005e  f7fffffe          BL       DAC_Init
;;;280      DAC_Cmd(DAC_Channel_1, ENABLE);
000062  2101              MOVS     r1,#1
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       DAC_Cmd
;;;281    
;;;282      DAC_SetChannel1Data(DAC_Align_12b_R, 0);//可以通过这里设置对齐方式 并且通过后面的数据设置初始值
00006a  2100              MOVS     r1,#0
00006c  4608              MOV      r0,r1
00006e  f7fffffe          BL       DAC_SetChannel1Data
;;;283      TIM_Cmd(TIM6, ENABLE);					
000072  2101              MOVS     r1,#1
000074  4803              LDR      r0,|L2.132|
000076  f7fffffe          BL       TIM_Cmd
;;;284    }
00007a  b005              ADD      sp,sp,#0x14
00007c  bd00              POP      {pc}
;;;285     /*******************************************************************************
                          ENDP

00007e  0000              DCW      0x0000
                  |L2.128|
                          DCD      0x40010800
                  |L2.132|
                          DCD      0x40001000

                          AREA ||i.InitWaveMaker||, CODE, READONLY, ALIGN=2

                  InitWaveMaker PROC
;;;163    *******************************************************************************/
;;;164    void InitWaveMaker(void)
000000  b500              PUSH     {lr}
;;;165    {
000002  b08d              SUB      sp,sp,#0x34
;;;166    		GPIO_InitTypeDef GPIO_InitStructure;
;;;167    		
;;;168    		
;;;169    		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;170    		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2004              MOVS     r0,#4
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;171    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
000014  2101              MOVS     r1,#1
000016  0748              LSLS     r0,r1,#29
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;172    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  2010              MOVS     r0,#0x10
000020  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;173    				
;;;174    		GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4;			/* 配置PA4为DAC_OUT1 */
000024  2010              MOVS     r0,#0x10
000026  f8ad0030          STRH     r0,[sp,#0x30]
;;;175    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
00002a  2000              MOVS     r0,#0
00002c  f88d0033          STRB     r0,[sp,#0x33]
;;;176    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000030  2001              MOVS     r0,#1
000032  f88d0032          STRB     r0,[sp,#0x32]
;;;177    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000036  a90c              ADD      r1,sp,#0x30
000038  4822              LDR      r0,|L3.196|
00003a  f7fffffe          BL       GPIO_Init
;;;178    
;;;179    		/* 决定DAC输出的采样频率
;;;180    		  x = 72000000 / 频率
;;;181    		  ARR自动重装载寄存器周期的值(定时时间）
;;;182    		*/													  
;;;183    		TIM_PrescalerConfig(TIM6, 0, TIM_PSCReloadMode_Update); //预分频=0 
00003e  2200              MOVS     r2,#0
000040  4611              MOV      r1,r2
000042  4821              LDR      r0,|L3.200|
000044  f7fffffe          BL       TIM_PrescalerConfig
;;;184    		
;;;185    		TIM_SetAutoreload(TIM6, 50);	            /* 22 输出100KHz的正弦波 */
000048  2132              MOVS     r1,#0x32
00004a  481f              LDR      r0,|L3.200|
00004c  f7fffffe          BL       TIM_SetAutoreload
;;;186    		TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
000050  2120              MOVS     r1,#0x20
000052  481d              LDR      r0,|L3.200|
000054  f7fffffe          BL       TIM_SelectOutputTrigger
;;;187    
;;;188    	 {
;;;189    	   	DAC_InitTypeDef DAC_InitStructure;	
;;;190    	    /* DAC channel1 Configuration */
;;;191    		DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;               //定时器6 TRGO触发						 
000058  2004              MOVS     r0,#4
00005a  9008              STR      r0,[sp,#0x20]
;;;192    		DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;	   //噪声三角波生成使能关闭
00005c  2000              MOVS     r0,#0
00005e  9009              STR      r0,[sp,#0x24]
;;;193    		DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Disable;	   //输出缓冲关闭
000060  2002              MOVS     r0,#2
000062  900b              STR      r0,[sp,#0x2c]
;;;194    //		DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
;;;195    		DAC_Init(DAC_Channel_1, &DAC_InitStructure);
000064  a908              ADD      r1,sp,#0x20
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       DAC_Init
;;;196    	 }	
;;;197    	 {	
;;;198    	    DMA_InitTypeDef DMA_InitStructure;	
;;;199    		DMA_DeInit(DMA2_Channel3);
00006c  4817              LDR      r0,|L3.204|
00006e  f7fffffe          BL       DMA_DeInit
;;;200    		DMA_InitStructure.DMA_PeripheralBaseAddr = DAC_DHR12R1_Address;
000072  4817              LDR      r0,|L3.208|
000074  9001              STR      r0,[sp,#4]
;;;201    		DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&g_Wave;
000076  4817              LDR      r0,|L3.212|
000078  9002              STR      r0,[sp,#8]
;;;202    		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;						     //存储器到外设
00007a  2010              MOVS     r0,#0x10
00007c  9003              STR      r0,[sp,#0xc]
;;;203    		DMA_InitStructure.DMA_BufferSize = 128;
00007e  2080              MOVS     r0,#0x80
000080  9004              STR      r0,[sp,#0x10]
;;;204    		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000082  2000              MOVS     r0,#0
000084  9005              STR      r0,[sp,#0x14]
;;;205    		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000086  2080              MOVS     r0,#0x80
000088  9006              STR      r0,[sp,#0x18]
;;;206    		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
00008a  0040              LSLS     r0,r0,#1
00008c  9007              STR      r0,[sp,#0x1c]
;;;207    		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
00008e  0080              LSLS     r0,r0,#2
000090  9008              STR      r0,[sp,#0x20]
;;;208    		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;						    //循环模式
000092  2020              MOVS     r0,#0x20
000094  9009              STR      r0,[sp,#0x24]
;;;209    		DMA_InitStructure.DMA_Priority = DMA_Priority_High ;
000096  0200              LSLS     r0,r0,#8
000098  900a              STR      r0,[sp,#0x28]
;;;210    		DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
00009a  2000              MOVS     r0,#0
00009c  900b              STR      r0,[sp,#0x2c]
;;;211    		DMA_Init(DMA2_Channel3, &DMA_InitStructure);
00009e  a901              ADD      r1,sp,#4
0000a0  480a              LDR      r0,|L3.204|
0000a2  f7fffffe          BL       DMA_Init
;;;212    		DMA_Cmd(DMA2_Channel3, ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  4808              LDR      r0,|L3.204|
0000aa  f7fffffe          BL       DMA_Cmd
;;;213    	}
;;;214    	 /* Enable DAC Channel1: Once the DAC channel1 is enabled, PA.04 is
;;;215    	 automatically connected to the DAC converter. */
;;;216    	 DAC_Cmd(DAC_Channel_1, ENABLE);		 //DAC通道1使能
0000ae  2101              MOVS     r1,#1
0000b0  2000              MOVS     r0,#0
0000b2  f7fffffe          BL       DAC_Cmd
;;;217    	 /* Enable DMA for DAC Channel1 */
;;;218    	 DAC_DMACmd(DAC_Channel_1, ENABLE);		 //DAC通道1DMA开启
0000b6  2101              MOVS     r1,#1
0000b8  2000              MOVS     r0,#0
0000ba  f7fffffe          BL       DAC_DMACmd
;;;219    }
0000be  b00d              ADD      sp,sp,#0x34
0000c0  bd00              POP      {pc}
;;;220    /*************************************************************************************
                          ENDP

0000c2  0000              DCW      0x0000
                  |L3.196|
                          DCD      0x40010800
                  |L3.200|
                          DCD      0x40001000
                  |L3.204|
                          DCD      0x40020430
                  |L3.208|
                          DCD      0x40007408
                  |L3.212|
                          DCD      g_Wave

                          AREA ||i.SetupWaveType||, CODE, READONLY, ALIGN=2

                  SetupWaveType PROC
;;;291    *******************************************************************************/
;;;292    void SetupWaveType(uint8_t _type)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;293    {
000004  b087              SUB      sp,sp,#0x1c
000006  4682              MOV      r10,r0
;;;294    	/*
;;;295    		计算波形幅度。
;;;296    		DAC寄存器最大值 4096 对应3.3V
;;;297    
;;;298    		我们期望获得2V的幅度，系数 = 0.606
;;;299    		4096 * 0.606 = 2482
;;;300    	*/
;;;301    	TIM_Cmd(TIM6, DISABLE);
000008  2100              MOVS     r1,#0
00000a  4829              LDR      r0,|L4.176|
00000c  f7fffffe          BL       TIM_Cmd
;;;302    	switch (_type)
000010  f1ba0f00          CMP      r10,#0
000014  d003              BEQ      |L4.30|
000016  f1ba0f01          CMP      r10,#1
00001a  d140              BNE      |L4.158|
00001c  e02b              B        |L4.118|
                  |L4.30|
;;;303    	{
;;;304    		case WT_SIN:	/* 正弦波 */
;;;305    			{
;;;306    				uint32_t i;
;;;307    
;;;308    				for (i = 0; i < 128; i++)
00001e  f04f0b00          MOV      r11,#0
000022  e024              B        |L4.110|
                  |L4.36|
;;;309    				{
;;;310    					/* 调整正弦波幅度 */
;;;311    					//g_Wave[i] = g_SineWave128[i]*0.606;
;;;312    					g_Wave[i] = 2048+1024*sin(2*3.1415926f*127*i/128); 
000024  4658              MOV      r0,r11
000026  f7fffffe          BL       __aeabi_ui2f
00002a  4922              LDR      r1,|L4.180|
00002c  9001              STR      r0,[sp,#4]
00002e  f7fffffe          BL       __aeabi_fmul
000032  f04f4186          MOV      r1,#0x43000000
000036  9002              STR      r0,[sp,#8]
000038  f7fffffe          BL       __aeabi_fdiv
00003c  9003              STR      r0,[sp,#0xc]
00003e  f7fffffe          BL       __aeabi_f2d
000042  e9cd0104          STRD     r0,r1,[sp,#0x10]
000046  f7fffffe          BL       ||sin||
00004a  4680              MOV      r8,r0
00004c  2200              MOVS     r2,#0
00004e  4b1a              LDR      r3,|L4.184|
000050  f7fffffe          BL       __aeabi_dmul
000054  4606              MOV      r6,r0
000056  2200              MOVS     r2,#0
000058  4b18              LDR      r3,|L4.188|
00005a  f7fffffe          BL       __aeabi_dadd
00005e  4604              MOV      r4,r0
000060  f7fffffe          BL       __aeabi_d2uiz
000064  4916              LDR      r1,|L4.192|
000066  f821001b          STRH     r0,[r1,r11,LSL #1]
00006a  f10b0b01          ADD      r11,r11,#1            ;308
                  |L4.110|
00006e  f1bb0f80          CMP      r11,#0x80             ;308
000072  d3d7              BCC      |L4.36|
;;;313    				}
;;;314    
;;;315    			}
;;;316    			break;
000074  e013              B        |L4.158|
                  |L4.118|
;;;317    
;;;318    		case WT_RECT:	/* 方波 */
;;;319    			{
;;;320    				uint32_t i;
;;;321    
;;;322    				for (i = 0; i < 64; i++)
000076  2000              MOVS     r0,#0
000078  e004              B        |L4.132|
                  |L4.122|
;;;323    				{
;;;324    					g_Wave[i] = 0;
00007a  2100              MOVS     r1,#0
00007c  4a10              LDR      r2,|L4.192|
00007e  f8221010          STRH     r1,[r2,r0,LSL #1]
000082  1c40              ADDS     r0,r0,#1              ;322
                  |L4.132|
000084  2840              CMP      r0,#0x40              ;322
000086  d3f8              BCC      |L4.122|
;;;325    				}
;;;326    
;;;327    				for (i = 0; i < 64; i++)
000088  2000              MOVS     r0,#0
00008a  e005              B        |L4.152|
                  |L4.140|
;;;328    				{
;;;329    					g_Wave[i] = 2482;
00008c  f64011b2          MOV      r1,#0x9b2
000090  4a0b              LDR      r2,|L4.192|
000092  f8221010          STRH     r1,[r2,r0,LSL #1]
000096  1c40              ADDS     r0,r0,#1              ;327
                  |L4.152|
000098  2840              CMP      r0,#0x40              ;327
00009a  d3f7              BCC      |L4.140|
;;;330    				}
;;;331    			}
;;;332    			break;
00009c  bf00              NOP      
                  |L4.158|
00009e  bf00              NOP                            ;316
;;;333    	}
;;;334        TIM_Cmd(TIM6, ENABLE);
0000a0  2101              MOVS     r1,#1
0000a2  4803              LDR      r0,|L4.176|
0000a4  f7fffffe          BL       TIM_Cmd
;;;335    }
0000a8  b007              ADD      sp,sp,#0x1c
0000aa  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

0000ae  0000              DCW      0x0000
                  |L4.176|
                          DCD      0x40001000
                  |L4.180|
                          DCD      0x44477dba
                  |L4.184|
                          DCD      0x40900000
                  |L4.188|
                          DCD      0x40a00000
                  |L4.192|
                          DCD      g_Wave

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_Wave
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  g_SineWave128
000000  07ff0863          DCW      0x07ff,0x0863
000004  08c8092b          DCW      0x08c8,0x092b
000008  098e09f0          DCW      0x098e,0x09f0
00000c  0a510ab1          DCW      0x0a51,0x0ab1
000010  0b0e0b6a          DCW      0x0b0e,0x0b6a
000014  0bc40c1b          DCW      0x0bc4,0x0c1b
000018  0c700cc2          DCW      0x0c70,0x0cc2
00001c  0d120d5e          DCW      0x0d12,0x0d5e
000020  0da60dec          DCW      0x0da6,0x0dec
000024  0e2d0e6b          DCW      0x0e2d,0x0e6b
000028  0ea50edb          DCW      0x0ea5,0x0edb
00002c  0f0c0f39          DCW      0x0f0c,0x0f39
000030  0f620f86          DCW      0x0f62,0x0f86
000034  0fa60fc1          DCW      0x0fa6,0x0fc1
000038  0fd70fe8          DCW      0x0fd7,0x0fe8
00003c  0ff40ffc          DCW      0x0ff4,0x0ffc
000040  0ffe0ffc          DCW      0x0ffe,0x0ffc
000044  0ff40fe8          DCW      0x0ff4,0x0fe8
000048  0fd70fc1          DCW      0x0fd7,0x0fc1
00004c  0fa60f86          DCW      0x0fa6,0x0f86
000050  0f620f39          DCW      0x0f62,0x0f39
000054  0f0c0edb          DCW      0x0f0c,0x0edb
000058  0ea50e6b          DCW      0x0ea5,0x0e6b
00005c  0e2d0dec          DCW      0x0e2d,0x0dec
000060  0da60d5e          DCW      0x0da6,0x0d5e
000064  0d120cc2          DCW      0x0d12,0x0cc2
000068  0c700c1b          DCW      0x0c70,0x0c1b
00006c  0bc40b6a          DCW      0x0bc4,0x0b6a
000070  0b0e0ab1          DCW      0x0b0e,0x0ab1
000074  0a5109f0          DCW      0x0a51,0x09f0
000078  098e092b          DCW      0x098e,0x092b
00007c  08c80863          DCW      0x08c8,0x0863
000080  07ff079b          DCW      0x07ff,0x079b
000084  073606d3          DCW      0x0736,0x06d3
000088  0670060e          DCW      0x0670,0x060e
00008c  05ad054d          DCW      0x05ad,0x054d
000090  04f00494          DCW      0x04f0,0x0494
000094  043a03e3          DCW      0x043a,0x03e3
000098  038e033c          DCW      0x038e,0x033c
00009c  02ec02a0          DCW      0x02ec,0x02a0
0000a0  02580212          DCW      0x0258,0x0212
0000a4  01d10193          DCW      0x01d1,0x0193
0000a8  01590123          DCW      0x0159,0x0123
0000ac  00f200c5          DCW      0x00f2,0x00c5
0000b0  009c0078          DCW      0x009c,0x0078
0000b4  0058003d          DCW      0x0058,0x003d
0000b8  00270016          DCW      0x0027,0x0016
0000bc  000a0002          DCW      0x000a,0x0002
0000c0  00000002          DCW      0x0000,0x0002
0000c4  000a0016          DCW      0x000a,0x0016
0000c8  0027003d          DCW      0x0027,0x003d
0000cc  00580078          DCW      0x0058,0x0078
0000d0  009c00c5          DCW      0x009c,0x00c5
0000d4  00f20123          DCW      0x00f2,0x0123
0000d8  01590193          DCW      0x0159,0x0193
0000dc  01d10212          DCW      0x01d1,0x0212
0000e0  025802a0          DCW      0x0258,0x02a0
0000e4  02ec033c          DCW      0x02ec,0x033c
0000e8  038e03e3          DCW      0x038e,0x03e3
0000ec  043a0494          DCW      0x043a,0x0494
0000f0  04f0054d          DCW      0x04f0,0x054d
0000f4  05ad060e          DCW      0x05ad,0x060e
0000f8  067006d3          DCW      0x0670,0x06d3
0000fc  0736079b          DCW      0x0736,0x079b
                  g_SineWave32
000100  07ff098f          DCW      0x07ff,0x098f
000104  0b0f0c71          DCW      0x0b0f,0x0c71
000108  0daa0ea6          DCW      0x0daa,0x0ea6
00010c  0f630fd8          DCW      0x0f63,0x0fd8
000110  0fff0fd8          DCW      0x0fff,0x0fd8
000114  0f630ea6          DCW      0x0f63,0x0ea6
000118  0da70c71          DCW      0x0da7,0x0c71
00011c  0b0f098f          DCW      0x0b0f,0x098f
000120  07ff066f          DCW      0x07ff,0x066f
000124  04ef038d          DCW      0x04ef,0x038d
000128  02570158          DCW      0x0257,0x0158
00012c  009b0026          DCW      0x009b,0x0026
000130  00000026          DCW      0x0000,0x0026
000134  009b0158          DCW      0x009b,0x0158
000138  0257038d          DCW      0x0257,0x038d
00013c  04ef066f          DCW      0x04ef,0x066f
                  g_SineWave32_FangBo
000140  00000000          DCW      0x0000,0x0000
000144  00000000          DCW      0x0000,0x0000
000148  00000000          DCW      0x0000,0x0000
00014c  00000000          DCW      0x0000,0x0000
000150  00000000          DCW      0x0000,0x0000
000154  00000000          DCW      0x0000,0x0000
000158  00000000          DCW      0x0000,0x0000
00015c  00000000          DCW      0x0000,0x0000
000160  0fff0fff          DCW      0x0fff,0x0fff
000164  0fff0fff          DCW      0x0fff,0x0fff
000168  0fff0fff          DCW      0x0fff,0x0fff
00016c  0fff0fff          DCW      0x0fff,0x0fff
000170  0fff0fff          DCW      0x0fff,0x0fff
000174  0fff0fff          DCW      0x0fff,0x0fff
000178  0fff0fff          DCW      0x0fff,0x0fff
00017c  0fff0fff          DCW      0x0fff,0x0fff
