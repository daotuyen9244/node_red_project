; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\bsp_ili9341_lcd.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\bsp_ili9341_lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\bsp_ili9341_lcd.crf ..\..\uCGUI\LCDDriver\bsp_ili9341_lcd.c]
                          THUMB

                          AREA ||i.Delay||, CODE, READONLY, ALIGN=1

                  Delay PROC
;;;183    */
;;;184    void Delay(__IO uint32_t nCount)
000000  b501              PUSH     {r0,lr}
;;;185    {
;;;186      for(; nCount != 0; nCount--);
000002  e002              B        |L1.10|
                  |L1.4|
000004  9800              LDR      r0,[sp,#0]
000006  1e40              SUBS     r0,r0,#1
000008  9000              STR      r0,[sp,#0]
                  |L1.10|
00000a  9800              LDR      r0,[sp,#0]
00000c  2800              CMP      r0,#0
00000e  d1f9              BNE      |L1.4|
;;;187    }
000010  bd08              POP      {r3,pc}
;;;188    
                          ENDP


                          AREA ||i.GetPoint||, CODE, READONLY, ALIGN=1

                  GetPoint PROC
;;;625    */
;;;626    u16 GetPoint(u16 x,u16 y)
000000  b570              PUSH     {r4-r6,lr}
;;;627    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;628        u16 temp;
;;;629    	SetWindows(x,y,x,y);
000006  462b              MOV      r3,r5
000008  4622              MOV      r2,r4
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SetWindows
;;;630        LCD_ILI9341_CMD(0x2e);
000012  202e              MOVS     r0,#0x2e
000014  f7fffffe          BL       LCD_WR_REG
;;;631    	temp=LCD_RD_data();
000018  f7fffffe          BL       LCD_RD_data
00001c  4606              MOV      r6,r0
;;;632        return (temp);
00001e  4630              MOV      r0,r6
;;;633    }
000020  bd70              POP      {r4-r6,pc}
;;;634    
                          ENDP


                          AREA ||i.LCD9341_DrawHLine||, CODE, READONLY, ALIGN=1

                  LCD9341_DrawHLine PROC
;;;720    */
;;;721    void LCD9341_DrawHLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;722    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;723    	uint16_t i;
;;;724    	
;;;725    	LCD_open_windows(_usX1, _usY1,_usX2-_usX1+1,1);
00000c  1b28              SUBS     r0,r5,r4
00000e  1c40              ADDS     r0,r0,#1
000010  b282              UXTH     r2,r0
000012  2301              MOVS     r3,#1
000014  4641              MOV      r1,r8
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       LCD_open_windows
;;;726    
;;;727    	for (i = 0; i <_usX2-_usX1+1; i++)
00001c  2700              MOVS     r7,#0
00001e  e004              B        |L3.42|
                  |L3.32|
;;;728    	{
;;;729    		ILI9341_RAM = _usColor;
000020  f04f40da          MOV      r0,#0x6d000000
000024  8006              STRH     r6,[r0,#0]
000026  1c78              ADDS     r0,r7,#1              ;727
000028  b287              UXTH     r7,r0                 ;727
                  |L3.42|
00002a  1b28              SUBS     r0,r5,r4              ;727
00002c  1c40              ADDS     r0,r0,#1              ;727
00002e  42b8              CMP      r0,r7                 ;727
000030  dcf6              BGT      |L3.32|
;;;730    	}
;;;731    
;;;732    }
000032  e8bd81f0          POP      {r4-r8,pc}
;;;733    
                          ENDP


                          AREA ||i.LCD9341_DrawVLine||, CODE, READONLY, ALIGN=1

                  LCD9341_DrawVLine PROC
;;;741    */
;;;742    void LCD9341_DrawVLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;743    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;744    	uint16_t i;
;;;745    	
;;;746    	for (i = _usY1; i <=_usY2; i++)
00000c  462c              MOV      r4,r5
00000e  e006              B        |L4.30|
                  |L4.16|
;;;747    	{	
;;;748    		SetPoint(_usX1, i, _usColor);	
000010  463a              MOV      r2,r7
000012  4621              MOV      r1,r4
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       SetPoint
00001a  1c60              ADDS     r0,r4,#1              ;746
00001c  b284              UXTH     r4,r0                 ;746
                  |L4.30|
00001e  42b4              CMP      r4,r6                 ;746
000020  ddf6              BLE      |L4.16|
;;;749    	}
;;;750    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;751    
                          ENDP


                          AREA ||i.LCD9341_FillRect||, CODE, READONLY, ALIGN=1

                  LCD9341_FillRect PROC
;;;759    */
;;;760    void LCD9341_FillRect(uint16_t _usX1 , uint16_t _usY1 ,  uint16_t _usX2 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;761    {                    
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;762       uint32_t n, temp;
;;;763    
;;;764       LCD_open_windows(_usX1,_usY1,_usX2-_usX1+1,_usY2 -_usY1+1); 
000010  1b78              SUBS     r0,r7,r5
000012  1c40              ADDS     r0,r0,#1
000014  b283              UXTH     r3,r0
000016  1b30              SUBS     r0,r6,r4
000018  1c40              ADDS     r0,r0,#1
00001a  b282              UXTH     r2,r0
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       LCD_open_windows
;;;765         
;;;766       temp = (u32)(_usX2-_usX1+1)*(_usY2 -_usY1+1);
000024  1b30              SUBS     r0,r6,r4
000026  1c40              ADDS     r0,r0,#1
000028  1b79              SUBS     r1,r7,r5
00002a  1c49              ADDS     r1,r1,#1
00002c  fb00fa01          MUL      r10,r0,r1
;;;767           
;;;768       for(n=0; n<temp; n++)
000030  f04f0800          MOV      r8,#0
000034  e005              B        |L5.66|
                  |L5.54|
;;;769       {
;;;770    		ILI9341_RAM =_usColor;
000036  f04f40da          MOV      r0,#0x6d000000
00003a  f8a09000          STRH     r9,[r0,#0]
00003e  f1080801          ADD      r8,r8,#1              ;768
                  |L5.66|
000042  45d0              CMP      r8,r10                ;768
000044  d3f7              BCC      |L5.54|
;;;771       }
;;;772    	 	  
;;;773    }
000046  e8bd87f0          POP      {r4-r10,pc}
                          ENDP


                          AREA ||i.LCD_Clear||, CODE, READONLY, ALIGN=1

                  LCD_Clear PROC
;;;595    */
;;;596    void LCD_Clear(u16 dat)	
000000  b510              PUSH     {r4,lr}
;;;597    {
000002  4604              MOV      r4,r0
;;;598        u32 n;
;;;599        		
;;;600    	/*ºáÆÁ*/
;;;601    	LCD_ILI9341_CMD(0X2A); 
000004  202a              MOVS     r0,#0x2a
000006  f7fffffe          BL       LCD_WR_REG
;;;602    	LCD_ILI9341_Parameter(0);
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       LCD_WR_Data
;;;603    	LCD_ILI9341_Parameter(0);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       LCD_WR_Data
;;;604    	LCD_ILI9341_Parameter((319)>>8);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       LCD_WR_Data
;;;605    	LCD_ILI9341_Parameter((319)-(((319)>>8)<<8));
00001c  203f              MOVS     r0,#0x3f
00001e  f7fffffe          BL       LCD_WR_Data
;;;606    	
;;;607    	LCD_ILI9341_CMD(0X2B); 
000022  202b              MOVS     r0,#0x2b
000024  f7fffffe          BL       LCD_WR_REG
;;;608    	LCD_ILI9341_Parameter(0);
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       LCD_WR_Data
;;;609    	LCD_ILI9341_Parameter(0);
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       LCD_WR_Data
;;;610    	LCD_ILI9341_Parameter((239)>>8);
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       LCD_WR_Data
;;;611    	LCD_ILI9341_Parameter((239)-(((239)>>8)<<8));	
00003a  20ef              MOVS     r0,#0xef
00003c  f7fffffe          BL       LCD_WR_Data
;;;612    	LCD_ILI9341_CMD(0x2c);
000040  202c              MOVS     r0,#0x2c
000042  f7fffffe          BL       LCD_WR_REG
;;;613    	for(n=0; n<320*240; n++)
000046  2300              MOVS     r3,#0
000048  e003              B        |L6.82|
                  |L6.74|
;;;614    	LCD_WR_Data(dat); 
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       LCD_WR_Data
000050  1c5b              ADDS     r3,r3,#1              ;613
                  |L6.82|
000052  f5b33f96          CMP      r3,#0x12c00           ;613
000056  d3f8              BCC      |L6.74|
;;;615    }
000058  bd10              POP      {r4,pc}
;;;616    
                          ENDP


                          AREA ||i.LCD_CtrlLinesConfig||, CODE, READONLY, ALIGN=2

                  LCD_CtrlLinesConfig PROC
;;;253    */
;;;254    void LCD_CtrlLinesConfig(void)
000000  b508              PUSH     {r3,lr}
;;;255    {
;;;256    
;;;257    	GPIO_InitTypeDef GPIO_InitStructure;
;;;258        
;;;259        /* Ê¹ÄÜFSMCÊ±ÖÓ*/
;;;260        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
000002  2101              MOVS     r1,#1
000004  0208              LSLS     r0,r1,#8
000006  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;261        
;;;262        /* Ê¹ÄÜFSMC¶ÔÓ¦ÏàÓ¦¹Ü½ÅÊ±ÖÓ*/
;;;263    	    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE | 
00000a  2101              MOVS     r1,#1
00000c  f44f70f4          MOV      r0,#0x1e8
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;264    	                            RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOG | 
;;;265    	                            RCC_APB2Periph_GPIOF , ENABLE);
;;;266        
;;;267        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000014  2010              MOVS     r0,#0x10
000016  f88d0003          STRB     r0,[sp,#3]
;;;268        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001a  2003              MOVS     r0,#3
00001c  f88d0002          STRB     r0,[sp,#2]
;;;269        
;;;270        /* ÅäÖÃLCD±³¹â¿ØÖÆ¹Ü½Å*/
;;;271        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;		
000020  2002              MOVS     r0,#2
000022  f8ad0000          STRH     r0,[sp,#0]
;;;272        GPIO_Init(GPIOB, &GPIO_InitStructure);
000026  4669              MOV      r1,sp
000028  4821              LDR      r0,|L7.176|
00002a  f7fffffe          BL       GPIO_Init
;;;273        
;;;274        /* ÅäÖÃLCD¸´Î»¿ØÖÆ¹Ü½Å*/
;;;275        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 ; 	 
00002e  f44f6000          MOV      r0,#0x800
000032  f8ad0000          STRH     r0,[sp,#0]
;;;276        GPIO_Init(GPIOG, &GPIO_InitStructure);  		   
000036  4669              MOV      r1,sp
000038  481e              LDR      r0,|L7.180|
00003a  f7fffffe          BL       GPIO_Init
;;;277        
;;;278        /* ÅäÖÃFSMCÏà¶ÔÓ¦µÄÊý¾ÝÏß,FSMC-D0~D15: PD 14 15 0 1,PE 7 8 9 10 11 12 13 14 15,PD 8 9 10*/	
;;;279        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  2003              MOVS     r0,#3
000040  f88d0002          STRB     r0,[sp,#2]
;;;280        GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_AF_PP;
000044  2018              MOVS     r0,#0x18
000046  f88d0003          STRB     r0,[sp,#3]
;;;281        
;;;282        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 | 
00004a  f24c7003          MOV      r0,#0xc703
00004e  f8ad0000          STRH     r0,[sp,#0]
;;;283                                      GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
;;;284        GPIO_Init(GPIOD, &GPIO_InitStructure);
000052  4669              MOV      r1,sp
000054  4818              LDR      r0,|L7.184|
000056  f7fffffe          BL       GPIO_Init
;;;285        
;;;286        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | 
00005a  f64f7080          MOV      r0,#0xff80
00005e  f8ad0000          STRH     r0,[sp,#0]
;;;287                                      GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
;;;288                                      GPIO_Pin_15;
;;;289        GPIO_Init(GPIOE, &GPIO_InitStructure); 
000062  4669              MOV      r1,sp
000064  4815              LDR      r0,|L7.188|
000066  f7fffffe          BL       GPIO_Init
;;;290        
;;;291        /* ÅäÖÃFSMCÏà¶ÔÓ¦µÄ¿ØÖÆÏß
;;;292    	 * PD4-FSMC_NOE  :LCD-RD
;;;293       * PD5-FSMC_NWE  :LCD-WR
;;;294    	 * PD7-FSMC_NE1  :LCD-CS
;;;295       * PD11-FSMC_A16 :LCD-DC
;;;296    	 */
;;;297        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4; 
00006a  2010              MOVS     r0,#0x10
00006c  f8ad0000          STRH     r0,[sp,#0]
;;;298        GPIO_Init(GPIOD, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4811              LDR      r0,|L7.184|
000074  f7fffffe          BL       GPIO_Init
;;;299        
;;;300        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; 
000078  2020              MOVS     r0,#0x20
00007a  f8ad0000          STRH     r0,[sp,#0]
;;;301        GPIO_Init(GPIOD, &GPIO_InitStructure);
00007e  4669              MOV      r1,sp
000080  480d              LDR      r0,|L7.184|
000082  f7fffffe          BL       GPIO_Init
;;;302        
;;;303        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12; 
000086  f44f5080          MOV      r0,#0x1000
00008a  f8ad0000          STRH     r0,[sp,#0]
;;;304        GPIO_Init(GPIOG, &GPIO_InitStructure);  
00008e  4669              MOV      r1,sp
000090  4808              LDR      r0,|L7.180|
000092  f7fffffe          BL       GPIO_Init
;;;305        
;;;306        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 ; 
000096  2004              MOVS     r0,#4
000098  f8ad0000          STRH     r0,[sp,#0]
;;;307        GPIO_Init(GPIOE, &GPIO_InitStructure); 
00009c  4669              MOV      r1,sp
00009e  4807              LDR      r0,|L7.188|
0000a0  f7fffffe          BL       GPIO_Init
;;;308        
;;;309    	/* ´ò¿ª±³¹â */
;;;310    	GPIO_ResetBits(GPIOB, GPIO_Pin_1);
0000a4  2102              MOVS     r1,#2
0000a6  4802              LDR      r0,|L7.176|
0000a8  f7fffffe          BL       GPIO_ResetBits
;;;311    }
0000ac  bd08              POP      {r3,pc}
;;;312    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L7.176|
                          DCD      0x40010c00
                  |L7.180|
                          DCD      0x40012000
                  |L7.184|
                          DCD      0x40011400
                  |L7.188|
                          DCD      0x40011800

                          AREA ||i.LCD_FSMCConfig||, CODE, READONLY, ALIGN=1

                  LCD_FSMCConfig PROC
;;;196    */
;;;197    void LCD_FSMCConfig(void)
000000  b500              PUSH     {lr}
;;;198    {	
000002  b097              SUB      sp,sp,#0x5c
;;;199    	FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
;;;200    	FSMC_NORSRAMTimingInitTypeDef  p;
;;;201    	
;;;202    	/*-- FSMC Configuration ------------------------------------------------------*/
;;;203    	/*----------------------- SRAM Bank 1 ----------------------------------------*/
;;;204    	/* FSMC_Bank1_NORSRAM4 configuration */
;;;205    	p.FSMC_AddressSetupTime = 2;
000004  2002              MOVS     r0,#2
000006  9001              STR      r0,[sp,#4]
;;;206    	p.FSMC_AddressHoldTime = 0;
000008  2000              MOVS     r0,#0
00000a  9002              STR      r0,[sp,#8]
;;;207    	
;;;208    	/* LCD ¶ÁÐèÒªÉèÖÃÎª4£¬Ö»Ð´µÄ»°ÉèÖÃ1¼´¿É */
;;;209    	p.FSMC_DataSetupTime = 5;
00000c  2005              MOVS     r0,#5
00000e  9003              STR      r0,[sp,#0xc]
;;;210    	
;;;211    	p.FSMC_BusTurnAroundDuration = 0;
000010  2000              MOVS     r0,#0
000012  9004              STR      r0,[sp,#0x10]
;;;212    	p.FSMC_CLKDivision = 0;
000014  9005              STR      r0,[sp,#0x14]
;;;213    	p.FSMC_DataLatency = 0;
000016  9006              STR      r0,[sp,#0x18]
;;;214    	p.FSMC_AccessMode = FSMC_AccessMode_B;
000018  f04f5080          MOV      r0,#0x10000000
00001c  9007              STR      r0,[sp,#0x1c]
;;;215    	
;;;216    	/* Color LCD configuration ------------------------------------
;;;217    	 LCD configured as follow:
;;;218    	    - Data/Address MUX = Disable
;;;219    	    - Memory Type = SRAM
;;;220    	    - Data Width = 16bit
;;;221    	    - Write Operation = Enable
;;;222    	    - Extended Mode = Enable
;;;223    	    - Asynchronous Wait = Disable */
;;;224    	FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM4;
00001e  2006              MOVS     r0,#6
000020  9008              STR      r0,[sp,#0x20]
;;;225    	FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
000022  2000              MOVS     r0,#0
000024  9009              STR      r0,[sp,#0x24]
;;;226    	FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_NOR;
000026  2008              MOVS     r0,#8
000028  900a              STR      r0,[sp,#0x28]
;;;227    	FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
00002a  2010              MOVS     r0,#0x10
00002c  900b              STR      r0,[sp,#0x2c]
;;;228    	FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00002e  2000              MOVS     r0,#0
000030  900c              STR      r0,[sp,#0x30]
;;;229    	FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000032  900e              STR      r0,[sp,#0x38]
;;;230    	FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
000034  900f              STR      r0,[sp,#0x3c]
;;;231    	FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
000036  9010              STR      r0,[sp,#0x40]
;;;232    	FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000038  f44f5080          MOV      r0,#0x1000
00003c  9011              STR      r0,[sp,#0x44]
;;;233    	FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
00003e  2000              MOVS     r0,#0
000040  9012              STR      r0,[sp,#0x48]
;;;234    	FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000042  9013              STR      r0,[sp,#0x4c]
;;;235    	FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
000044  900d              STR      r0,[sp,#0x34]
;;;236    	FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
000046  9014              STR      r0,[sp,#0x50]
;;;237    	FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
000048  a801              ADD      r0,sp,#4
00004a  9015              STR      r0,[sp,#0x54]
;;;238    	FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
00004c  9016              STR      r0,[sp,#0x58]
;;;239    	
;;;240    	FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
00004e  a808              ADD      r0,sp,#0x20
000050  f7fffffe          BL       FSMC_NORSRAMInit
;;;241    	
;;;242    	/* BANK 1 (of NOR/SRAM Bank 1~4) is enabled */
;;;243    	FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);
000054  2101              MOVS     r1,#1
000056  2006              MOVS     r0,#6
000058  f7fffffe          BL       FSMC_NORSRAMCmd
;;;244    }
00005c  b017              ADD      sp,sp,#0x5c
00005e  bd00              POP      {pc}
;;;245    
                          ENDP


                          AREA ||i.LCD_RD_data||, CODE, READONLY, ALIGN=1

                  LCD_RD_data PROC
;;;150    */
;;;151    uint16_t LCD_RD_data(void)	
000000  b510              PUSH     {r4,lr}
;;;152    {	
;;;153    	uint16_t R=0, G=0, B=0 ;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2300              MOVS     r3,#0
;;;154    
;;;155    	R = ILI9341_RAM; 	/*FIRST READ OUT DUMMY DATA*/
000008  f04f40da          MOV      r0,#0x6d000000
00000c  8801              LDRH     r1,[r0,#0]
;;;156    	R = ILI9341_RAM;  	/*READ OUT RED DATA  */
00000e  8801              LDRH     r1,[r0,#0]
;;;157    	B = ILI9341_RAM;  	/*READ OUT BLACK DATA*/
000010  8803              LDRH     r3,[r0,#0]
;;;158    	G = ILI9341_RAM;  	/*READ OUT GREEN DATA*/
000012  8802              LDRH     r2,[r0,#0]
;;;159    	
;;;160        return (((R>>11)<<11) | ((G>>10)<<5) | (B>>11)) ;
000014  12c8              ASRS     r0,r1,#11
000016  02c0              LSLS     r0,r0,#11
000018  1294              ASRS     r4,r2,#10
00001a  ea401044          ORR      r0,r0,r4,LSL #5
00001e  ea4020e3          ORR      r0,r0,r3,ASR #11
;;;161    }
000022  bd10              POP      {r4,pc}
;;;162    
                          ENDP


                          AREA ||i.LCD_Reset||, CODE, READONLY, ALIGN=2

                  LCD_Reset PROC
;;;383    */
;;;384    void LCD_Reset(void)
000000  b510              PUSH     {r4,lr}
;;;385    {			
;;;386    	/*¸´Î» LCD*/	 
;;;387        GPIO_ResetBits(GPIOG, GPIO_Pin_11);
000002  f44f6100          MOV      r1,#0x800
000006  4807              LDR      r0,|L10.36|
000008  f7fffffe          BL       GPIO_ResetBits
;;;388        Delay(0xAFFf<<2);					   
00000c  4806              LDR      r0,|L10.40|
00000e  f7fffffe          BL       Delay
;;;389        GPIO_SetBits(GPIOG, GPIO_Pin_11 );	
000012  f44f6100          MOV      r1,#0x800
000016  4803              LDR      r0,|L10.36|
000018  f7fffffe          BL       GPIO_SetBits
;;;390    	Delay(0xAFFf<<2);	
00001c  4802              LDR      r0,|L10.40|
00001e  f7fffffe          BL       Delay
;;;391    }
000022  bd10              POP      {r4,pc}
;;;392    
                          ENDP

                  |L10.36|
                          DCD      0x40012000
                  |L10.40|
                          DCD      0x0002bffc

                          AREA ||i.LCD_WR_CMD||, CODE, READONLY, ALIGN=1

                  LCD_WR_CMD PROC
;;;136    */
;;;137    void LCD_WR_CMD(unsigned int index,unsigned int val)
000000  f04f43d8          MOV      r3,#0x6c000000
;;;138    {	
;;;139    	ILI9341_REG = index;	
000004  8018              STRH     r0,[r3,#0]
;;;140    	ILI9341_RAM = val;
000006  f04f43da          MOV      r3,#0x6d000000
00000a  8019              STRH     r1,[r3,#0]
;;;141    }
00000c  4770              BX       lr
;;;142    
                          ENDP


                          AREA ||i.LCD_WR_Data||, CODE, READONLY, ALIGN=1

                  LCD_WR_Data PROC
;;;170    */
;;;171    void LCD_WR_Data(unsigned int val)
000000  f04f42da          MOV      r2,#0x6d000000
;;;172    {   
;;;173    	ILI9341_RAM = val; 	
000004  8010              STRH     r0,[r2,#0]
;;;174    }
000006  4770              BX       lr
;;;175    
                          ENDP


                          AREA ||i.LCD_WR_REG||, CODE, READONLY, ALIGN=1

                  LCD_WR_REG PROC
;;;121    */
;;;122    void LCD_WR_REG(unsigned int index)
000000  f04f42d8          MOV      r2,#0x6c000000
;;;123    {
;;;124    	ILI9341_REG = index;
000004  8010              STRH     r0,[r2,#0]
;;;125    
;;;126    }
000006  4770              BX       lr
;;;127    
                          ENDP


                          AREA ||i.LCD_open_windows||, CODE, READONLY, ALIGN=2

                  LCD_open_windows PROC
;;;674    */
;;;675    void LCD_open_windows(u16 x,u16 y,u16 len,u16 wid)
000000  b570              PUSH     {r4-r6,lr}
;;;676    {                    
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;677    
;;;678        if(display_direction == 0)		/*Èç¹ûÊÇºáÆÁÑ¡Ïî*/
000008  4836              LDR      r0,|L14.228|
00000a  7800              LDRB     r0,[r0,#0]  ; display_direction
00000c  bb90              CBNZ     r0,|L14.116|
;;;679        {
;;;680    
;;;681    		LCD_ILI9341_CMD(0X2A); 
00000e  202a              MOVS     r0,#0x2a
000010  f7fffffe          BL       LCD_WR_REG
;;;682    		LCD_ILI9341_Parameter(x>>8);	//start 
000014  1220              ASRS     r0,r4,#8
000016  f7fffffe          BL       LCD_WR_Data
;;;683    		LCD_ILI9341_Parameter(x-((x>>8)<<8));
00001a  1221              ASRS     r1,r4,#8
00001c  eba42001          SUB      r0,r4,r1,LSL #8
000020  f7fffffe          BL       LCD_WR_Data
;;;684    		LCD_ILI9341_Parameter((x+len-1)>>8);	//end
000024  19a1              ADDS     r1,r4,r6
000026  1e49              SUBS     r1,r1,#1
000028  1208              ASRS     r0,r1,#8
00002a  f7fffffe          BL       LCD_WR_Data
;;;685    		LCD_ILI9341_Parameter((x+len-1)-(((x+len-1)>>8)<<8));
00002e  19a1              ADDS     r1,r4,r6
000030  1e49              SUBS     r1,r1,#1
000032  19a2              ADDS     r2,r4,r6
000034  1e52              SUBS     r2,r2,#1
000036  1212              ASRS     r2,r2,#8
000038  eba12002          SUB      r0,r1,r2,LSL #8
00003c  f7fffffe          BL       LCD_WR_Data
;;;686    		
;;;687    		LCD_ILI9341_CMD(0X2B); 
000040  202b              MOVS     r0,#0x2b
000042  f7fffffe          BL       LCD_WR_REG
;;;688    		LCD_ILI9341_Parameter(y>>8);   //start
000046  1228              ASRS     r0,r5,#8
000048  f7fffffe          BL       LCD_WR_Data
;;;689    		LCD_ILI9341_Parameter(y-((y>>8)<<8));
00004c  1229              ASRS     r1,r5,#8
00004e  eba52001          SUB      r0,r5,r1,LSL #8
000052  f7fffffe          BL       LCD_WR_Data
;;;690    		LCD_ILI9341_Parameter((y+wid-1)>>8);   //end
000056  18e9              ADDS     r1,r5,r3
000058  1e49              SUBS     r1,r1,#1
00005a  1208              ASRS     r0,r1,#8
00005c  f7fffffe          BL       LCD_WR_Data
;;;691    		LCD_ILI9341_Parameter((y+wid-1)-(((y+wid-1)>>8)<<8));
000060  18e9              ADDS     r1,r5,r3
000062  1e49              SUBS     r1,r1,#1
000064  18ea              ADDS     r2,r5,r3
000066  1e52              SUBS     r2,r2,#1
000068  1212              ASRS     r2,r2,#8
00006a  eba12002          SUB      r0,r1,r2,LSL #8
00006e  f7fffffe          BL       LCD_WR_Data
000072  e032              B        |L14.218|
                  |L14.116|
000074  e7ff              B        |L14.118|
                  |L14.118|
;;;692         
;;;693        }
;;;694        else
;;;695        {
;;;696    		LCD_ILI9341_CMD(0X2B); 
000076  202b              MOVS     r0,#0x2b
000078  f7fffffe          BL       LCD_WR_REG
;;;697    		LCD_ILI9341_Parameter(x>>8);
00007c  1220              ASRS     r0,r4,#8
00007e  f7fffffe          BL       LCD_WR_Data
;;;698    		LCD_ILI9341_Parameter(x-((x>>8)<<8));
000082  1221              ASRS     r1,r4,#8
000084  eba42001          SUB      r0,r4,r1,LSL #8
000088  f7fffffe          BL       LCD_WR_Data
;;;699    		LCD_ILI9341_Parameter((x+len-1)>>8);
00008c  19a1              ADDS     r1,r4,r6
00008e  1e49              SUBS     r1,r1,#1
000090  1208              ASRS     r0,r1,#8
000092  f7fffffe          BL       LCD_WR_Data
;;;700    		LCD_ILI9341_Parameter((x+len-1)-(((x+len-1)>>8)<<8));
000096  19a1              ADDS     r1,r4,r6
000098  1e49              SUBS     r1,r1,#1
00009a  19a2              ADDS     r2,r4,r6
00009c  1e52              SUBS     r2,r2,#1
00009e  1212              ASRS     r2,r2,#8
0000a0  eba12002          SUB      r0,r1,r2,LSL #8
0000a4  f7fffffe          BL       LCD_WR_Data
;;;701    
;;;702    	    LCD_ILI9341_CMD(0X2A); 
0000a8  202a              MOVS     r0,#0x2a
0000aa  f7fffffe          BL       LCD_WR_REG
;;;703    		LCD_ILI9341_Parameter(y>>8);
0000ae  1228              ASRS     r0,r5,#8
0000b0  f7fffffe          BL       LCD_WR_Data
;;;704    		LCD_ILI9341_Parameter(y-((y>>8)<<8));
0000b4  1229              ASRS     r1,r5,#8
0000b6  eba52001          SUB      r0,r5,r1,LSL #8
0000ba  f7fffffe          BL       LCD_WR_Data
;;;705    		LCD_ILI9341_Parameter((y+wid-1)>>8);
0000be  18e9              ADDS     r1,r5,r3
0000c0  1e49              SUBS     r1,r1,#1
0000c2  1208              ASRS     r0,r1,#8
0000c4  f7fffffe          BL       LCD_WR_Data
;;;706    		LCD_ILI9341_Parameter((y+wid-1)-(((y+wid-1)>>8)<<8));	
0000c8  18e9              ADDS     r1,r5,r3
0000ca  1e49              SUBS     r1,r1,#1
0000cc  18ea              ADDS     r2,r5,r3
0000ce  1e52              SUBS     r2,r2,#1
0000d0  1212              ASRS     r2,r2,#8
0000d2  eba12002          SUB      r0,r1,r2,LSL #8
0000d6  f7fffffe          BL       LCD_WR_Data
                  |L14.218|
;;;707            
;;;708        }
;;;709    
;;;710          LCD_ILI9341_CMD(0x2c);     
0000da  202c              MOVS     r0,#0x2c
0000dc  f7fffffe          BL       LCD_WR_REG
;;;711    }
0000e0  bd70              POP      {r4-r6,pc}
;;;712    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L14.228|
                          DCD      display_direction

                          AREA ||i.SetCursor||, CODE, READONLY, ALIGN=1

                  SetCursor PROC
;;;547    */
;;;548    void SetCursor(u16 x,u16 y)	
000000  b510              PUSH     {r4,lr}
;;;549    {				
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;550    	/*ºáÆÁ*/
;;;551    	LCD_ILI9341_CMD(0X2A); 
000006  202a              MOVS     r0,#0x2a
000008  f7fffffe          BL       LCD_WR_REG
;;;552    	LCD_ILI9341_Parameter(x>>8);
00000c  1218              ASRS     r0,r3,#8
00000e  f7fffffe          BL       LCD_WR_Data
;;;553    	LCD_ILI9341_Parameter(x-((x>>8)<<8));
000012  1219              ASRS     r1,r3,#8
000014  eba32001          SUB      r0,r3,r1,LSL #8
000018  f7fffffe          BL       LCD_WR_Data
;;;554        LCD_ILI9341_CMD(0X2B); 
00001c  202b              MOVS     r0,#0x2b
00001e  f7fffffe          BL       LCD_WR_REG
;;;555    	LCD_ILI9341_Parameter(y>>8);
000022  1220              ASRS     r0,r4,#8
000024  f7fffffe          BL       LCD_WR_Data
;;;556    	LCD_ILI9341_Parameter(y-((y>>8)<<8)); 
000028  1221              ASRS     r1,r4,#8
00002a  eba42001          SUB      r0,r4,r1,LSL #8
00002e  f7fffffe          BL       LCD_WR_Data
;;;557    	LCD_ILI9341_CMD(0x2c);  	     
000032  202c              MOVS     r0,#0x2c
000034  f7fffffe          BL       LCD_WR_REG
;;;558    }
000038  bd10              POP      {r4,pc}
;;;559    
                          ENDP


                          AREA ||i.SetPoint||, CODE, READONLY, ALIGN=1

                  SetPoint PROC
;;;644    */
;;;645    void SetPoint(u16 x,u16 y,u16 point)	
000000  b530              PUSH     {r4,r5,lr}
;;;646    {   	
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;647    	/*ºáÆÁ*/
;;;648    	LCD_ILI9341_CMD(0X2A); 
000008  202a              MOVS     r0,#0x2a
00000a  f7fffffe          BL       LCD_WR_REG
;;;649    	LCD_ILI9341_Parameter(x>>8);
00000e  1218              ASRS     r0,r3,#8
000010  f7fffffe          BL       LCD_WR_Data
;;;650    	LCD_ILI9341_Parameter(x-((x>>8)<<8));
000014  1219              ASRS     r1,r3,#8
000016  eba32001          SUB      r0,r3,r1,LSL #8
00001a  f7fffffe          BL       LCD_WR_Data
;;;651    	LCD_ILI9341_Parameter((x)>>8);
00001e  1218              ASRS     r0,r3,#8
000020  f7fffffe          BL       LCD_WR_Data
;;;652    	LCD_ILI9341_Parameter((x)-(((x)>>8)<<8));
000024  1219              ASRS     r1,r3,#8
000026  eba32001          SUB      r0,r3,r1,LSL #8
00002a  f7fffffe          BL       LCD_WR_Data
;;;653    	
;;;654    	LCD_ILI9341_CMD(0X2B); 
00002e  202b              MOVS     r0,#0x2b
000030  f7fffffe          BL       LCD_WR_REG
;;;655    	LCD_ILI9341_Parameter(y>>8);
000034  1220              ASRS     r0,r4,#8
000036  f7fffffe          BL       LCD_WR_Data
;;;656    	LCD_ILI9341_Parameter(y-((y>>8)<<8));
00003a  1221              ASRS     r1,r4,#8
00003c  eba42001          SUB      r0,r4,r1,LSL #8
000040  f7fffffe          BL       LCD_WR_Data
;;;657    	LCD_ILI9341_Parameter((y)>>8);
000044  1220              ASRS     r0,r4,#8
000046  f7fffffe          BL       LCD_WR_Data
;;;658    	LCD_ILI9341_Parameter((y)-(((y)>>8)<<8));
00004a  1221              ASRS     r1,r4,#8
00004c  eba42001          SUB      r0,r4,r1,LSL #8
000050  f7fffffe          BL       LCD_WR_Data
;;;659    	LCD_ILI9341_CMD(0x2c);
000054  202c              MOVS     r0,#0x2c
000056  f7fffffe          BL       LCD_WR_REG
;;;660    	LCD_WR_Data(point); 	
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       LCD_WR_Data
;;;661    
;;;662    }
000060  bd30              POP      {r4,r5,pc}
;;;663    
                          ENDP


                          AREA ||i.SetWindows||, CODE, READONLY, ALIGN=1

                  SetWindows PROC
;;;570    */
;;;571    void SetWindows(u16 StartX,u16 StartY,u16 EndX,u16 EndY) 
000000  b570              PUSH     {r4-r6,lr}
;;;572    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;573    	/*ºáÆÁ*/
;;;574    	LCD_ILI9341_CMD(0X2A); 
000008  202a              MOVS     r0,#0x2a
00000a  f7fffffe          BL       LCD_WR_REG
;;;575    	LCD_ILI9341_Parameter(StartX>>8);	//start 
00000e  1220              ASRS     r0,r4,#8
000010  f7fffffe          BL       LCD_WR_Data
;;;576    	LCD_ILI9341_Parameter(StartX-((StartX>>8)<<8));
000014  1221              ASRS     r1,r4,#8
000016  eba42001          SUB      r0,r4,r1,LSL #8
00001a  f7fffffe          BL       LCD_WR_Data
;;;577    	LCD_ILI9341_Parameter((EndX)>>8);	//end
00001e  1230              ASRS     r0,r6,#8
000020  f7fffffe          BL       LCD_WR_Data
;;;578    	LCD_ILI9341_Parameter((EndX)-(((EndX)>>8)<<8));
000024  1231              ASRS     r1,r6,#8
000026  eba62001          SUB      r0,r6,r1,LSL #8
00002a  f7fffffe          BL       LCD_WR_Data
;;;579    	
;;;580    	LCD_ILI9341_CMD(0X2B); 
00002e  202b              MOVS     r0,#0x2b
000030  f7fffffe          BL       LCD_WR_REG
;;;581    	LCD_ILI9341_Parameter(StartY>>8);   //start
000034  1228              ASRS     r0,r5,#8
000036  f7fffffe          BL       LCD_WR_Data
;;;582    	LCD_ILI9341_Parameter(StartY-((StartY>>8)<<8));
00003a  1229              ASRS     r1,r5,#8
00003c  eba52001          SUB      r0,r5,r1,LSL #8
000040  f7fffffe          BL       LCD_WR_Data
;;;583    	LCD_ILI9341_Parameter((EndY)>>8);   //end
000044  1218              ASRS     r0,r3,#8
000046  f7fffffe          BL       LCD_WR_Data
;;;584    	LCD_ILI9341_Parameter((EndY)-(((EndY)>>8)<<8)); 
00004a  1219              ASRS     r1,r3,#8
00004c  eba32001          SUB      r0,r3,r1,LSL #8
000050  f7fffffe          BL       LCD_WR_Data
;;;585    	LCD_ILI9341_CMD(0x2c); 
000054  202c              MOVS     r0,#0x2c
000056  f7fffffe          BL       LCD_WR_REG
;;;586    }
00005a  bd70              POP      {r4-r6,pc}
;;;587    
                          ENDP


                          AREA ||i.Set_direction||, CODE, READONLY, ALIGN=2

                  Set_direction PROC
;;;321    */
;;;322    void Set_direction(u8 option)
000000  b510              PUSH     {r4,lr}
;;;323    {
000002  4604              MOV      r4,r0
;;;324    
;;;325        switch(option)
000004  b114              CBZ      r4,|L18.12|
000006  2c01              CMP      r4,#1
000008  d15b              BNE      |L18.194|
00000a  e05b              B        |L18.196|
                  |L18.12|
;;;326        {
;;;327        case 0:
;;;328    	{	    /*ºáÆÁ*/
;;;329    	   	DEBUG_DELAY();
00000c  f44f60fa          MOV      r0,#0x7d0
000010  f7fffffe          BL       Delay
;;;330            LCD_ILI9341_CMD(0x36);
000014  2036              MOVS     r0,#0x36
000016  f7fffffe          BL       LCD_WR_REG
;;;331    		DEBUG_DELAY(); 
00001a  f44f60fa          MOV      r0,#0x7d0
00001e  f7fffffe          BL       Delay
;;;332    		LCD_ILI9341_Parameter(0x68);    //ºáÆÁ
000022  2068              MOVS     r0,#0x68
000024  f7fffffe          BL       LCD_WR_Data
;;;333    		DEBUG_DELAY();
000028  f44f60fa          MOV      r0,#0x7d0
00002c  f7fffffe          BL       Delay
;;;334    		LCD_ILI9341_CMD(0X2A); 
000030  202a              MOVS     r0,#0x2a
000032  f7fffffe          BL       LCD_WR_REG
;;;335    		DEBUG_DELAY();
000036  f44f60fa          MOV      r0,#0x7d0
00003a  f7fffffe          BL       Delay
;;;336    		LCD_ILI9341_Parameter(0x00);	//start 
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       LCD_WR_Data
;;;337    		DEBUG_DELAY();
000044  f44f60fa          MOV      r0,#0x7d0
000048  f7fffffe          BL       Delay
;;;338    		LCD_ILI9341_Parameter(0x00);
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       LCD_WR_Data
;;;339    		DEBUG_DELAY();
000052  f44f60fa          MOV      r0,#0x7d0
000056  f7fffffe          BL       Delay
;;;340    		LCD_ILI9341_Parameter(0x01);	//end
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       LCD_WR_Data
;;;341    		DEBUG_DELAY();
000060  f44f60fa          MOV      r0,#0x7d0
000064  f7fffffe          BL       Delay
;;;342    		LCD_ILI9341_Parameter(0x3F);
000068  203f              MOVS     r0,#0x3f
00006a  f7fffffe          BL       LCD_WR_Data
;;;343    		DEBUG_DELAY();		
00006e  f44f60fa          MOV      r0,#0x7d0
000072  f7fffffe          BL       Delay
;;;344    		LCD_ILI9341_CMD(0X2B); 
000076  202b              MOVS     r0,#0x2b
000078  f7fffffe          BL       LCD_WR_REG
;;;345    		DEBUG_DELAY();
00007c  f44f60fa          MOV      r0,#0x7d0
000080  f7fffffe          BL       Delay
;;;346    		LCD_ILI9341_Parameter(0x00);   //start
000084  2000              MOVS     r0,#0
000086  f7fffffe          BL       LCD_WR_Data
;;;347    		DEBUG_DELAY();
00008a  f44f60fa          MOV      r0,#0x7d0
00008e  f7fffffe          BL       Delay
;;;348    		LCD_ILI9341_Parameter(0x00);
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       LCD_WR_Data
;;;349    		DEBUG_DELAY();
000098  f44f60fa          MOV      r0,#0x7d0
00009c  f7fffffe          BL       Delay
;;;350    		LCD_ILI9341_Parameter(0x00);   //end
0000a0  2000              MOVS     r0,#0
0000a2  f7fffffe          BL       LCD_WR_Data
;;;351    		DEBUG_DELAY();
0000a6  f44f60fa          MOV      r0,#0x7d0
0000aa  f7fffffe          BL       Delay
;;;352    		LCD_ILI9341_Parameter(0xEF);
0000ae  20ef              MOVS     r0,#0xef
0000b0  f7fffffe          BL       LCD_WR_Data
;;;353    		DEBUG_DELAY();
0000b4  f44f60fa          MOV      r0,#0x7d0
0000b8  f7fffffe          BL       Delay
;;;354    		display_direction = 0;		
0000bc  2000              MOVS     r0,#0
0000be  4916              LDR      r1,|L18.280|
0000c0  7008              STRB     r0,[r1,#0]
                  |L18.194|
;;;355            }break;
0000c2  e027              B        |L18.276|
                  |L18.196|
;;;356        case 1:
;;;357            {		/*ÊúÆÁ*/
;;;358            LCD_ILI9341_CMD(0x36); 
0000c4  2036              MOVS     r0,#0x36
0000c6  f7fffffe          BL       LCD_WR_REG
;;;359    	    LCD_ILI9341_Parameter(0x48);	//ÊúÆÁ 
0000ca  2048              MOVS     r0,#0x48
0000cc  f7fffffe          BL       LCD_WR_Data
;;;360    	    LCD_ILI9341_CMD(0X2A); 
0000d0  202a              MOVS     r0,#0x2a
0000d2  f7fffffe          BL       LCD_WR_REG
;;;361    		LCD_ILI9341_Parameter(0x00);
0000d6  2000              MOVS     r0,#0
0000d8  f7fffffe          BL       LCD_WR_Data
;;;362    		LCD_ILI9341_Parameter(0x00);
0000dc  2000              MOVS     r0,#0
0000de  f7fffffe          BL       LCD_WR_Data
;;;363    		LCD_ILI9341_Parameter(0x00);
0000e2  2000              MOVS     r0,#0
0000e4  f7fffffe          BL       LCD_WR_Data
;;;364    		LCD_ILI9341_Parameter(0xEF);	
0000e8  20ef              MOVS     r0,#0xef
0000ea  f7fffffe          BL       LCD_WR_Data
;;;365    		
;;;366    		LCD_ILI9341_CMD(0X2B); 
0000ee  202b              MOVS     r0,#0x2b
0000f0  f7fffffe          BL       LCD_WR_REG
;;;367    		LCD_ILI9341_Parameter(0x00);
0000f4  2000              MOVS     r0,#0
0000f6  f7fffffe          BL       LCD_WR_Data
;;;368    		LCD_ILI9341_Parameter(0x00);
0000fa  2000              MOVS     r0,#0
0000fc  f7fffffe          BL       LCD_WR_Data
;;;369    		LCD_ILI9341_Parameter(0x01);
000100  2001              MOVS     r0,#1
000102  f7fffffe          BL       LCD_WR_Data
;;;370    		LCD_ILI9341_Parameter(0x3F);
000106  203f              MOVS     r0,#0x3f
000108  f7fffffe          BL       LCD_WR_Data
;;;371            display_direction = 1;
00010c  2001              MOVS     r0,#1
00010e  4902              LDR      r1,|L18.280|
000110  7008              STRB     r0,[r1,#0]
;;;372            }break;   
000112  bf00              NOP      
                  |L18.276|
000114  bf00              NOP                            ;355
;;;373        }
;;;374    }
000116  bd10              POP      {r4,pc}
;;;375    
                          ENDP

                  |L18.280|
                          DCD      display_direction

                          AREA ||i.bsp_InitLCD||, CODE, READONLY, ALIGN=1

                  bsp_InitLCD PROC
;;;401    */
;;;402    void bsp_InitLCD(void)
000000  b510              PUSH     {r4,lr}
;;;403    {
;;;404    	/* ÅäÖÃLCD¿ØÖÆ¿ÚÏßGPIO */
;;;405    	LCD_CtrlLinesConfig();
000002  f7fffffe          BL       LCD_CtrlLinesConfig
;;;406    
;;;407    	/* ÅäÖÃFSMC½Ó¿Ú£¬Êý¾Ý×ÜÏß */
;;;408    	LCD_FSMCConfig();
000006  f7fffffe          BL       LCD_FSMCConfig
;;;409    
;;;410    	/* ¸´Î» */
;;;411    	LCD_Reset();
00000a  f7fffffe          BL       LCD_Reset
;;;412    		
;;;413    	DEBUG_DELAY();
00000e  f44f60fa          MOV      r0,#0x7d0
000012  f7fffffe          BL       Delay
;;;414    	LCD_ILI9341_CMD(0xCF);
000016  20cf              MOVS     r0,#0xcf
000018  f7fffffe          BL       LCD_WR_REG
;;;415    	LCD_ILI9341_Parameter(0x00);
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       LCD_WR_Data
;;;416    	LCD_ILI9341_Parameter(0x81);
000022  2081              MOVS     r0,#0x81
000024  f7fffffe          BL       LCD_WR_Data
;;;417    	LCD_ILI9341_Parameter(0x30);
000028  2030              MOVS     r0,#0x30
00002a  f7fffffe          BL       LCD_WR_Data
;;;418    	
;;;419    	DEBUG_DELAY();
00002e  f44f60fa          MOV      r0,#0x7d0
000032  f7fffffe          BL       Delay
;;;420    	LCD_ILI9341_CMD(0xED);
000036  20ed              MOVS     r0,#0xed
000038  f7fffffe          BL       LCD_WR_REG
;;;421    	LCD_ILI9341_Parameter(0x64);
00003c  2064              MOVS     r0,#0x64
00003e  f7fffffe          BL       LCD_WR_Data
;;;422    	LCD_ILI9341_Parameter(0x03);
000042  2003              MOVS     r0,#3
000044  f7fffffe          BL       LCD_WR_Data
;;;423    	LCD_ILI9341_Parameter(0x12);
000048  2012              MOVS     r0,#0x12
00004a  f7fffffe          BL       LCD_WR_Data
;;;424    	LCD_ILI9341_Parameter(0x81);
00004e  2081              MOVS     r0,#0x81
000050  f7fffffe          BL       LCD_WR_Data
;;;425    	
;;;426    	DEBUG_DELAY();
000054  f44f60fa          MOV      r0,#0x7d0
000058  f7fffffe          BL       Delay
;;;427    	LCD_ILI9341_CMD(0xE8);
00005c  20e8              MOVS     r0,#0xe8
00005e  f7fffffe          BL       LCD_WR_REG
;;;428    	LCD_ILI9341_Parameter(0x85);
000062  2085              MOVS     r0,#0x85
000064  f7fffffe          BL       LCD_WR_Data
;;;429    	LCD_ILI9341_Parameter(0x10);
000068  2010              MOVS     r0,#0x10
00006a  f7fffffe          BL       LCD_WR_Data
;;;430    	LCD_ILI9341_Parameter(0x78);
00006e  2078              MOVS     r0,#0x78
000070  f7fffffe          BL       LCD_WR_Data
;;;431    	
;;;432    	DEBUG_DELAY();
000074  f44f60fa          MOV      r0,#0x7d0
000078  f7fffffe          BL       Delay
;;;433    	LCD_ILI9341_CMD(0xCB);
00007c  20cb              MOVS     r0,#0xcb
00007e  f7fffffe          BL       LCD_WR_REG
;;;434    	LCD_ILI9341_Parameter(0x39);
000082  2039              MOVS     r0,#0x39
000084  f7fffffe          BL       LCD_WR_Data
;;;435    	LCD_ILI9341_Parameter(0x2C);
000088  202c              MOVS     r0,#0x2c
00008a  f7fffffe          BL       LCD_WR_Data
;;;436    	LCD_ILI9341_Parameter(0x00);
00008e  2000              MOVS     r0,#0
000090  f7fffffe          BL       LCD_WR_Data
;;;437    	LCD_ILI9341_Parameter(0x34);
000094  2034              MOVS     r0,#0x34
000096  f7fffffe          BL       LCD_WR_Data
;;;438    	LCD_ILI9341_Parameter(0x02);
00009a  2002              MOVS     r0,#2
00009c  f7fffffe          BL       LCD_WR_Data
;;;439    	
;;;440    	DEBUG_DELAY();
0000a0  f44f60fa          MOV      r0,#0x7d0
0000a4  f7fffffe          BL       Delay
;;;441    	LCD_ILI9341_CMD(0xF7);
0000a8  20f7              MOVS     r0,#0xf7
0000aa  f7fffffe          BL       LCD_WR_REG
;;;442    	LCD_ILI9341_Parameter(0x20);
0000ae  2020              MOVS     r0,#0x20
0000b0  f7fffffe          BL       LCD_WR_Data
;;;443    	
;;;444    	DEBUG_DELAY();
0000b4  f44f60fa          MOV      r0,#0x7d0
0000b8  f7fffffe          BL       Delay
;;;445    	LCD_ILI9341_CMD(0xEA);
0000bc  20ea              MOVS     r0,#0xea
0000be  f7fffffe          BL       LCD_WR_REG
;;;446    	LCD_ILI9341_Parameter(0x00);
0000c2  2000              MOVS     r0,#0
0000c4  f7fffffe          BL       LCD_WR_Data
;;;447    	LCD_ILI9341_Parameter(0x00);
0000c8  2000              MOVS     r0,#0
0000ca  f7fffffe          BL       LCD_WR_Data
;;;448    	
;;;449    	DEBUG_DELAY();
0000ce  f44f60fa          MOV      r0,#0x7d0
0000d2  f7fffffe          BL       Delay
;;;450    	LCD_ILI9341_CMD(0xB1);
0000d6  20b1              MOVS     r0,#0xb1
0000d8  f7fffffe          BL       LCD_WR_REG
;;;451    	LCD_ILI9341_Parameter(0x00);
0000dc  2000              MOVS     r0,#0
0000de  f7fffffe          BL       LCD_WR_Data
;;;452    	LCD_ILI9341_Parameter(0x1B);
0000e2  201b              MOVS     r0,#0x1b
0000e4  f7fffffe          BL       LCD_WR_Data
;;;453    	
;;;454    	DEBUG_DELAY();
0000e8  f44f60fa          MOV      r0,#0x7d0
0000ec  f7fffffe          BL       Delay
;;;455    	LCD_ILI9341_CMD(0xB6);
0000f0  20b6              MOVS     r0,#0xb6
0000f2  f7fffffe          BL       LCD_WR_REG
;;;456    	LCD_ILI9341_Parameter(0x0A);
0000f6  200a              MOVS     r0,#0xa
0000f8  f7fffffe          BL       LCD_WR_Data
;;;457    	LCD_ILI9341_Parameter(0xA2);
0000fc  20a2              MOVS     r0,#0xa2
0000fe  f7fffffe          BL       LCD_WR_Data
;;;458    	
;;;459    	DEBUG_DELAY();
000102  f44f60fa          MOV      r0,#0x7d0
000106  f7fffffe          BL       Delay
;;;460    	LCD_ILI9341_CMD(0xC0);
00010a  20c0              MOVS     r0,#0xc0
00010c  f7fffffe          BL       LCD_WR_REG
;;;461    	LCD_ILI9341_Parameter(0x35);
000110  2035              MOVS     r0,#0x35
000112  f7fffffe          BL       LCD_WR_Data
;;;462    	
;;;463    	DEBUG_DELAY();
000116  f44f60fa          MOV      r0,#0x7d0
00011a  f7fffffe          BL       Delay
;;;464    	LCD_ILI9341_CMD(0xC1);
00011e  20c1              MOVS     r0,#0xc1
000120  f7fffffe          BL       LCD_WR_REG
;;;465    	LCD_ILI9341_Parameter(0x11);
000124  2011              MOVS     r0,#0x11
000126  f7fffffe          BL       LCD_WR_Data
;;;466    	
;;;467    	LCD_ILI9341_CMD(0xC5);
00012a  20c5              MOVS     r0,#0xc5
00012c  f7fffffe          BL       LCD_WR_REG
;;;468    	LCD_ILI9341_Parameter(0x45);
000130  2045              MOVS     r0,#0x45
000132  f7fffffe          BL       LCD_WR_Data
;;;469    	LCD_ILI9341_Parameter(0x45);
000136  2045              MOVS     r0,#0x45
000138  f7fffffe          BL       LCD_WR_Data
;;;470    	
;;;471    	LCD_ILI9341_CMD(0xC7);
00013c  20c7              MOVS     r0,#0xc7
00013e  f7fffffe          BL       LCD_WR_REG
;;;472    	LCD_ILI9341_Parameter(0xA2);
000142  20a2              MOVS     r0,#0xa2
000144  f7fffffe          BL       LCD_WR_Data
;;;473    	
;;;474    	LCD_ILI9341_CMD(0xF2);
000148  20f2              MOVS     r0,#0xf2
00014a  f7fffffe          BL       LCD_WR_REG
;;;475    	LCD_ILI9341_Parameter(0x00);
00014e  2000              MOVS     r0,#0
000150  f7fffffe          BL       LCD_WR_Data
;;;476    	
;;;477    	LCD_ILI9341_CMD(0x26);
000154  2026              MOVS     r0,#0x26
000156  f7fffffe          BL       LCD_WR_REG
;;;478    	LCD_ILI9341_Parameter(0x01);
00015a  2001              MOVS     r0,#1
00015c  f7fffffe          BL       LCD_WR_Data
;;;479    	DEBUG_DELAY();
000160  f44f60fa          MOV      r0,#0x7d0
000164  f7fffffe          BL       Delay
;;;480    	LCD_ILI9341_CMD(0xE0); //Set Gamma
000168  20e0              MOVS     r0,#0xe0
00016a  f7fffffe          BL       LCD_WR_REG
;;;481    	LCD_ILI9341_Parameter(0x0F);
00016e  200f              MOVS     r0,#0xf
000170  f7fffffe          BL       LCD_WR_Data
;;;482    	LCD_ILI9341_Parameter(0x26);
000174  2026              MOVS     r0,#0x26
000176  f7fffffe          BL       LCD_WR_Data
;;;483    	LCD_ILI9341_Parameter(0x24);
00017a  2024              MOVS     r0,#0x24
00017c  f7fffffe          BL       LCD_WR_Data
;;;484    	LCD_ILI9341_Parameter(0x0B);
000180  200b              MOVS     r0,#0xb
000182  f7fffffe          BL       LCD_WR_Data
;;;485    	LCD_ILI9341_Parameter(0x0E);
000186  200e              MOVS     r0,#0xe
000188  f7fffffe          BL       LCD_WR_Data
;;;486    	LCD_ILI9341_Parameter(0x09);
00018c  2009              MOVS     r0,#9
00018e  f7fffffe          BL       LCD_WR_Data
;;;487    	LCD_ILI9341_Parameter(0x54);
000192  2054              MOVS     r0,#0x54
000194  f7fffffe          BL       LCD_WR_Data
;;;488    	LCD_ILI9341_Parameter(0xA8);
000198  20a8              MOVS     r0,#0xa8
00019a  f7fffffe          BL       LCD_WR_Data
;;;489    	LCD_ILI9341_Parameter(0x46);
00019e  2046              MOVS     r0,#0x46
0001a0  f7fffffe          BL       LCD_WR_Data
;;;490    	LCD_ILI9341_Parameter(0x0C);
0001a4  200c              MOVS     r0,#0xc
0001a6  f7fffffe          BL       LCD_WR_Data
;;;491    	LCD_ILI9341_Parameter(0x17);
0001aa  2017              MOVS     r0,#0x17
0001ac  f7fffffe          BL       LCD_WR_Data
;;;492    	LCD_ILI9341_Parameter(0x09);
0001b0  2009              MOVS     r0,#9
0001b2  f7fffffe          BL       LCD_WR_Data
;;;493    	LCD_ILI9341_Parameter(0x0F);
0001b6  200f              MOVS     r0,#0xf
0001b8  f7fffffe          BL       LCD_WR_Data
;;;494    	LCD_ILI9341_Parameter(0x07);
0001bc  2007              MOVS     r0,#7
0001be  f7fffffe          BL       LCD_WR_Data
;;;495    	LCD_ILI9341_Parameter(0x00);
0001c2  2000              MOVS     r0,#0
0001c4  f7fffffe          BL       LCD_WR_Data
;;;496    	LCD_ILI9341_CMD(0XE1); //Set Gamma
0001c8  20e1              MOVS     r0,#0xe1
0001ca  f7fffffe          BL       LCD_WR_REG
;;;497    	LCD_ILI9341_Parameter(0x00);
0001ce  2000              MOVS     r0,#0
0001d0  f7fffffe          BL       LCD_WR_Data
;;;498    	LCD_ILI9341_Parameter(0x19);
0001d4  2019              MOVS     r0,#0x19
0001d6  f7fffffe          BL       LCD_WR_Data
;;;499    	LCD_ILI9341_Parameter(0x1B);
0001da  201b              MOVS     r0,#0x1b
0001dc  f7fffffe          BL       LCD_WR_Data
;;;500    	LCD_ILI9341_Parameter(0x04);
0001e0  2004              MOVS     r0,#4
0001e2  f7fffffe          BL       LCD_WR_Data
;;;501    	LCD_ILI9341_Parameter(0x10);
0001e6  2010              MOVS     r0,#0x10
0001e8  f7fffffe          BL       LCD_WR_Data
;;;502    	LCD_ILI9341_Parameter(0x07);
0001ec  2007              MOVS     r0,#7
0001ee  f7fffffe          BL       LCD_WR_Data
;;;503    	LCD_ILI9341_Parameter(0x2A);
0001f2  202a              MOVS     r0,#0x2a
0001f4  f7fffffe          BL       LCD_WR_Data
;;;504    	LCD_ILI9341_Parameter(0x47);
0001f8  2047              MOVS     r0,#0x47
0001fa  f7fffffe          BL       LCD_WR_Data
;;;505    	LCD_ILI9341_Parameter(0x39);
0001fe  2039              MOVS     r0,#0x39
000200  f7fffffe          BL       LCD_WR_Data
;;;506    	LCD_ILI9341_Parameter(0x03);
000204  2003              MOVS     r0,#3
000206  f7fffffe          BL       LCD_WR_Data
;;;507    	LCD_ILI9341_Parameter(0x06);
00020a  2006              MOVS     r0,#6
00020c  f7fffffe          BL       LCD_WR_Data
;;;508    	LCD_ILI9341_Parameter(0x06);
000210  2006              MOVS     r0,#6
000212  f7fffffe          BL       LCD_WR_Data
;;;509    	LCD_ILI9341_Parameter(0x30);
000216  2030              MOVS     r0,#0x30
000218  f7fffffe          BL       LCD_WR_Data
;;;510    	LCD_ILI9341_Parameter(0x38);
00021c  2038              MOVS     r0,#0x38
00021e  f7fffffe          BL       LCD_WR_Data
;;;511    	LCD_ILI9341_Parameter(0x0F);
000222  200f              MOVS     r0,#0xf
000224  f7fffffe          BL       LCD_WR_Data
;;;512    	DEBUG_DELAY();
000228  f44f60fa          MOV      r0,#0x7d0
00022c  f7fffffe          BL       Delay
;;;513    	LCD_ILI9341_CMD(0x36); 
000230  2036              MOVS     r0,#0x36
000232  f7fffffe          BL       LCD_WR_REG
;;;514    	LCD_ILI9341_Parameter(0x68);    /*ºáÆÁ  ×óÉÏ½Çµ½(Æðµã)µ½ÓÒÏÂ½Ç(ÖÕµã)É¨Ãè·½Ê½*/
000236  2068              MOVS     r0,#0x68
000238  f7fffffe          BL       LCD_WR_Data
;;;515    	DEBUG_DELAY();
00023c  f44f60fa          MOV      r0,#0x7d0
000240  f7fffffe          BL       Delay
;;;516    	LCD_ILI9341_CMD(0X2A); 
000244  202a              MOVS     r0,#0x2a
000246  f7fffffe          BL       LCD_WR_REG
;;;517    	LCD_ILI9341_Parameter(0x00);
00024a  2000              MOVS     r0,#0
00024c  f7fffffe          BL       LCD_WR_Data
;;;518    	LCD_ILI9341_Parameter(0x00);
000250  2000              MOVS     r0,#0
000252  f7fffffe          BL       LCD_WR_Data
;;;519    	LCD_ILI9341_Parameter(0x01);
000256  2001              MOVS     r0,#1
000258  f7fffffe          BL       LCD_WR_Data
;;;520    	LCD_ILI9341_Parameter(0x3F);
00025c  203f              MOVS     r0,#0x3f
00025e  f7fffffe          BL       LCD_WR_Data
;;;521    	
;;;522    	DEBUG_DELAY();
000262  f44f60fa          MOV      r0,#0x7d0
000266  f7fffffe          BL       Delay
;;;523    	LCD_ILI9341_CMD(0X2B); 
00026a  202b              MOVS     r0,#0x2b
00026c  f7fffffe          BL       LCD_WR_REG
;;;524    	LCD_ILI9341_Parameter(0x00);
000270  2000              MOVS     r0,#0
000272  f7fffffe          BL       LCD_WR_Data
;;;525    	LCD_ILI9341_Parameter(0x00);
000276  2000              MOVS     r0,#0
000278  f7fffffe          BL       LCD_WR_Data
;;;526    	LCD_ILI9341_Parameter(0x00);
00027c  2000              MOVS     r0,#0
00027e  f7fffffe          BL       LCD_WR_Data
;;;527    	LCD_ILI9341_Parameter(0xEF);
000282  20ef              MOVS     r0,#0xef
000284  f7fffffe          BL       LCD_WR_Data
;;;528    
;;;529    	DEBUG_DELAY();
000288  f44f60fa          MOV      r0,#0x7d0
00028c  f7fffffe          BL       Delay
;;;530    	LCD_ILI9341_CMD(0x3a); // Memory Access Control
000290  203a              MOVS     r0,#0x3a
000292  f7fffffe          BL       LCD_WR_REG
;;;531    	LCD_ILI9341_Parameter(0x55);
000296  2055              MOVS     r0,#0x55
000298  f7fffffe          BL       LCD_WR_Data
;;;532    	LCD_ILI9341_CMD(0x11); //Exit Sleep
00029c  2011              MOVS     r0,#0x11
00029e  f7fffffe          BL       LCD_WR_REG
;;;533    	LCD_ILI9341_CMD(0x29); //display on
0002a2  2029              MOVS     r0,#0x29
0002a4  f7fffffe          BL       LCD_WR_REG
;;;534        
;;;535    	Set_direction(0);	  //´«Èë0-->³õÊ¼»¯Ä¬ÈÏÎªºáÆÁ·½Ê½
0002a8  2000              MOVS     r0,#0
0002aa  f7fffffe          BL       Set_direction
;;;536    	LCD_ILI9341_CMD(0x2c); 						
0002ae  202c              MOVS     r0,#0x2c
0002b0  f7fffffe          BL       LCD_WR_REG
;;;537    }
0002b4  bd10              POP      {r4,pc}
;;;538    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  display_direction
000000  00                DCB      0x00
