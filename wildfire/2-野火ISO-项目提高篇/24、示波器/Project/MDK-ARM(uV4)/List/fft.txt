; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\fft.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\fft.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\..\User\app -I..\..\User\bsp -I..\..\uCGUI\inc -I..\..\uCGUI\Config -I..\..\uCGUI\LCDDriver -I..\..\uCGUI\uCGUIDemo -I..\..\User\fatfs -I..\..\User\mp3\pub -I..\..\User\Memory -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\fft.crf ..\..\User\bsp\fft.c]
                          THUMB

                          AREA ||i.Audio_Spectrum||, CODE, READONLY, ALIGN=2

                  Audio_Spectrum PROC
;;;39     *******************************************************************************/
;;;40     static void Audio_Spectrum(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;41     {
;;;42     	int16_t i;									 /* 有符号数 */
;;;43     	uint16_t *px;
;;;44     	uint16_t *py;
;;;45     	int16_t iTemp;
;;;46     	static uint8_t s_DispFirst = 0;				/* 用于第一次调用时刷屏 */
;;;47     	if (s_DispFirst == 0)
000004  484b              LDR      r0,|L1.308|
000006  7800              LDRB     r0,[r0,#0]  ; s_DispFirst
000008  b9a0              CBNZ     r0,|L1.52|
;;;48     	{
;;;49     		s_DispFirst = 1;
00000a  2001              MOVS     r0,#1
00000c  4949              LDR      r1,|L1.308|
00000e  7008              STRB     r0,[r1,#0]
;;;50     		for(i=0;i<128;i++)
000010  2400              MOVS     r4,#0
000012  e00d              B        |L1.48|
                  |L1.20|
;;;51     		{
;;;52     		 g_DSO.xCh2Buf1[i]=220;
000014  20dc              MOVS     r0,#0xdc
000016  4948              LDR      r1,|L1.312|
000018  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;53     		 g_DSO.xCh2Buf1[i]=220;
00001c  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;54     		 g_DSO.xCh2Buf2[i]=220;
000020  f5016180          ADD      r1,r1,#0x400
000024  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;55     		 g_DSO.xCh2Buf2[i]=220;
000028  f8210014          STRH     r0,[r1,r4,LSL #1]
00002c  1c60              ADDS     r0,r4,#1              ;50
00002e  b204              SXTH     r4,r0                 ;50
                  |L1.48|
000030  2c80              CMP      r4,#0x80              ;50
000032  dbef              BLT      |L1.20|
                  |L1.52|
;;;56     	    }	  					  
;;;57     	}	
;;;58     	if (g_DSO.BufUsed1 == 0)					  //设置两个缓冲器用于擦出上一帧波形
000034  4841              LDR      r0,|L1.316|
000036  f89001e1          LDRB     r0,[r0,#0x1e1]
00003a  b920              CBNZ     r0,|L1.70|
;;;59     	{
;;;60     		g_DSO.BufUsed1= 1;
00003c  2101              MOVS     r1,#1
00003e  483f              LDR      r0,|L1.316|
000040  f88011e1          STRB     r1,[r0,#0x1e1]
000044  e003              B        |L1.78|
                  |L1.70|
;;;61     	}
;;;62     	else
;;;63     	{
;;;64     		g_DSO.BufUsed1 = 0;
000046  2100              MOVS     r1,#0
000048  483c              LDR      r0,|L1.316|
00004a  f88011e1          STRB     r1,[r0,#0x1e1]
                  |L1.78|
;;;65     	}
;;;66     
;;;67     	if (g_DSO.BufUsed1 == 0)
00004e  483b              LDR      r0,|L1.316|
000050  f89001e1          LDRB     r0,[r0,#0x1e1]
000054  b918              CBNZ     r0,|L1.94|
;;;68     	{
;;;69     		px = g_DSO.xCh2Buf1;
000056  4d38              LDR      r5,|L1.312|
;;;70     		py = g_DSO.yCh2Buf1;
000058  f5057600          ADD      r6,r5,#0x200
00005c  e002              B        |L1.100|
                  |L1.94|
;;;71     	}
;;;72     	else
;;;73     	{
;;;74     		px = g_DSO.xCh2Buf2;
00005e  4d38              LDR      r5,|L1.320|
;;;75     		py = g_DSO.yCh2Buf2;
000060  f5057600          ADD      r6,r5,#0x200
                  |L1.100|
;;;76     	}
;;;77     	for (i = 0; i < 61; i++)				
000064  2400              MOVS     r4,#0
000066  e015              B        |L1.148|
                  |L1.104|
;;;78     	{
;;;79     		px[i] = 15 + i*4;	
000068  200f              MOVS     r0,#0xf
00006a  eb000084          ADD      r0,r0,r4,LSL #2
00006e  f8250014          STRH     r0,[r5,r4,LSL #1]
;;;80     		iTemp = g_DSO.Ch2VOffset -g_DSO.FFTMAG[i]/30;
000072  4834              LDR      r0,|L1.324|
000074  f8500024          LDR      r0,[r0,r4,LSL #2]
000078  211e              MOVS     r1,#0x1e
00007a  fb90f1f1          SDIV     r1,r0,r1
00007e  4832              LDR      r0,|L1.328|
000080  8d80              LDRH     r0,[r0,#0x2c]
000082  1a40              SUBS     r0,r0,r1
000084  b207              SXTH     r7,r0
;;;81     	    if (iTemp < 20)
000086  2f14              CMP      r7,#0x14
000088  da00              BGE      |L1.140|
;;;82     		{
;;;83     			iTemp = 20;
00008a  2714              MOVS     r7,#0x14
                  |L1.140|
;;;84     		}
;;;85     		py[i] = iTemp;
00008c  f8267014          STRH     r7,[r6,r4,LSL #1]
000090  1c60              ADDS     r0,r4,#1              ;77
000092  b204              SXTH     r4,r0                 ;77
                  |L1.148|
000094  2c3d              CMP      r4,#0x3d              ;77
000096  dbe7              BLT      |L1.104|
;;;86     	}
;;;87     
;;;88     //    GUI_GotoXY(323-55,72);
;;;89     //	GUI_DispFloatFix(g_DSO.FFTMAG[0]/20000,5,2);			  //显示直流分量的大小     	
;;;90     	if (g_DSO.BufUsed1 == 0)
000098  4828              LDR      r0,|L1.316|
00009a  f89001e1          LDRB     r0,[r0,#0x1e1]
00009e  bb20              CBNZ     r0,|L1.234|
;;;91     	{	
;;;92     	    for(i=0;i<61;i++)
0000a0  2400              MOVS     r4,#0
0000a2  e01f              B        |L1.228|
                  |L1.164|
;;;93     		{
;;;94     		   GUI_SetColor(GUI_BLUE);
0000a4  f44f007f          MOV      r0,#0xff0000
0000a8  f7fffffe          BL       GUI_SetColor
;;;95     		   GUI_FillRect(px[i],g_DSO.yCh2Buf2[i],px[i]+2,220);
0000ac  f8353014          LDRH     r3,[r5,r4,LSL #1]
0000b0  1c9a              ADDS     r2,r3,#2
0000b2  4b22              LDR      r3,|L1.316|
0000b4  3b20              SUBS     r3,r3,#0x20
0000b6  f8331014          LDRH     r1,[r3,r4,LSL #1]
0000ba  f8350014          LDRH     r0,[r5,r4,LSL #1]
0000be  23dc              MOVS     r3,#0xdc
0000c0  f7fffffe          BL       GUI_FillRect
;;;96     		   GUI_SetColor(GUI_GREEN);
0000c4  f44f407f          MOV      r0,#0xff00
0000c8  f7fffffe          BL       GUI_SetColor
;;;97     		   GUI_FillRect(px[i],py[i],px[i]+2,220);
0000cc  f8353014          LDRH     r3,[r5,r4,LSL #1]
0000d0  1c9a              ADDS     r2,r3,#2
0000d2  f8361014          LDRH     r1,[r6,r4,LSL #1]
0000d6  f8350014          LDRH     r0,[r5,r4,LSL #1]
0000da  23dc              MOVS     r3,#0xdc
0000dc  f7fffffe          BL       GUI_FillRect
0000e0  1c60              ADDS     r0,r4,#1              ;92
0000e2  b204              SXTH     r4,r0                 ;92
                  |L1.228|
0000e4  2c3d              CMP      r4,#0x3d              ;92
0000e6  dbdd              BLT      |L1.164|
0000e8  e022              B        |L1.304|
                  |L1.234|
;;;98     		}
;;;99     	}
;;;100    	else
;;;101    	{
;;;102    	  for(i=0;i<61;i++)
0000ea  2400              MOVS     r4,#0
0000ec  e01e              B        |L1.300|
                  |L1.238|
;;;103    		{
;;;104    		   GUI_SetColor(GUI_BLUE);
0000ee  f44f007f          MOV      r0,#0xff0000
0000f2  f7fffffe          BL       GUI_SetColor
;;;105    		   GUI_FillRect(px[i],g_DSO.yCh2Buf1[i],px[i]+2,220);
0000f6  f8353014          LDRH     r3,[r5,r4,LSL #1]
0000fa  1c9a              ADDS     r2,r3,#2
0000fc  4b13              LDR      r3,|L1.332|
0000fe  f8331014          LDRH     r1,[r3,r4,LSL #1]
000102  f8350014          LDRH     r0,[r5,r4,LSL #1]
000106  23dc              MOVS     r3,#0xdc
000108  f7fffffe          BL       GUI_FillRect
;;;106    		   GUI_SetColor(GUI_GREEN);
00010c  f44f407f          MOV      r0,#0xff00
000110  f7fffffe          BL       GUI_SetColor
;;;107    		   GUI_FillRect(px[i],py[i],px[i]+2,220);
000114  f8353014          LDRH     r3,[r5,r4,LSL #1]
000118  1c9a              ADDS     r2,r3,#2
00011a  f8361014          LDRH     r1,[r6,r4,LSL #1]
00011e  f8350014          LDRH     r0,[r5,r4,LSL #1]
000122  23dc              MOVS     r3,#0xdc
000124  f7fffffe          BL       GUI_FillRect
000128  1c60              ADDS     r0,r4,#1              ;102
00012a  b204              SXTH     r4,r0                 ;102
                  |L1.300|
00012c  2c3d              CMP      r4,#0x3d              ;102
00012e  dbde              BLT      |L1.238|
                  |L1.304|
;;;108    
;;;109    		}
;;;110    	}
;;;111    }
000130  e8bd81f0          POP      {r4-r8,pc}
;;;112    /*******************************************************************************
                          ENDP

                  |L1.308|
                          DCD      s_DispFirst
                  |L1.312|
                          DCD      g_DSO+0x59e0
                  |L1.316|
                          DCD      g_DSO+0x6000
                  |L1.320|
                          DCD      g_DSO+0x5de0
                  |L1.324|
                          DCD      g_DSO+0x4000
                  |L1.328|
                          DCD      g_DSO+0x5000
                  |L1.332|
                          DCD      g_DSO+0x5be0

                          AREA ||i.DispWave_Spectrum||, CODE, READONLY, ALIGN=2

                  DispWave_Spectrum PROC
;;;117    *******************************************************************************/
;;;118    static void DispWave_Spectrum(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;119    {
;;;120    	int16_t i;									 /* 有符号数 */
;;;121    	uint16_t *px;
;;;122    	uint16_t *py;
;;;123    	int16_t iTemp;
;;;124    	static uint8_t s_DispFirst = 0;				/* 用于第一次调用时刷屏 */
;;;125    	if (s_DispFirst == 0)
000004  483b              LDR      r0,|L2.244|
000006  7800              LDRB     r0,[r0,#0]  ; s_DispFirst
000008  b9a0              CBNZ     r0,|L2.52|
;;;126    	{
;;;127    		s_DispFirst = 1;
00000a  2001              MOVS     r0,#1
00000c  4939              LDR      r1,|L2.244|
00000e  7008              STRB     r0,[r1,#0]
;;;128    		for(i=0;i<128;i++)
000010  2400              MOVS     r4,#0
000012  e00d              B        |L2.48|
                  |L2.20|
;;;129    		{
;;;130    		 g_DSO.xCh2Buf1[i]=220;
000014  20dc              MOVS     r0,#0xdc
000016  4938              LDR      r1,|L2.248|
000018  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;131    		 g_DSO.xCh2Buf1[i]=220;
00001c  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;132    		 g_DSO.xCh2Buf2[i]=220;
000020  f5016180          ADD      r1,r1,#0x400
000024  f8210014          STRH     r0,[r1,r4,LSL #1]
;;;133    		 g_DSO.xCh2Buf2[i]=220;
000028  f8210014          STRH     r0,[r1,r4,LSL #1]
00002c  1c60              ADDS     r0,r4,#1              ;128
00002e  b204              SXTH     r4,r0                 ;128
                  |L2.48|
000030  2c80              CMP      r4,#0x80              ;128
000032  dbef              BLT      |L2.20|
                  |L2.52|
;;;134    	    }	  					  
;;;135    	}	
;;;136    	if (g_DSO.BufUsed1 == 0)					  //设置两个缓冲器用于擦出上一帧波形
000034  4831              LDR      r0,|L2.252|
000036  f89001e1          LDRB     r0,[r0,#0x1e1]
00003a  b920              CBNZ     r0,|L2.70|
;;;137    	{
;;;138    		g_DSO.BufUsed1= 1;
00003c  2101              MOVS     r1,#1
00003e  482f              LDR      r0,|L2.252|
000040  f88011e1          STRB     r1,[r0,#0x1e1]
000044  e003              B        |L2.78|
                  |L2.70|
;;;139    	}
;;;140    	else
;;;141    	{
;;;142    		g_DSO.BufUsed1 = 0;
000046  2100              MOVS     r1,#0
000048  482c              LDR      r0,|L2.252|
00004a  f88011e1          STRB     r1,[r0,#0x1e1]
                  |L2.78|
;;;143    	}
;;;144    
;;;145    	if (g_DSO.BufUsed1 == 0)
00004e  482b              LDR      r0,|L2.252|
000050  f89001e1          LDRB     r0,[r0,#0x1e1]
000054  b918              CBNZ     r0,|L2.94|
;;;146    	{
;;;147    		px = g_DSO.xCh2Buf1;
000056  4e28              LDR      r6,|L2.248|
;;;148    		py = g_DSO.yCh2Buf1;
000058  f5067500          ADD      r5,r6,#0x200
00005c  e002              B        |L2.100|
                  |L2.94|
;;;149    	}
;;;150    	else
;;;151    	{
;;;152    		px = g_DSO.xCh2Buf2;
00005e  4e28              LDR      r6,|L2.256|
;;;153    		py = g_DSO.yCh2Buf2;
000060  f5067500          ADD      r5,r6,#0x200
                  |L2.100|
;;;154    	}
;;;155    	
;;;156    	for (i = 0; i < 100; i++)				
000064  2400              MOVS     r4,#0
000066  e018              B        |L2.154|
                  |L2.104|
;;;157    	{
;;;158    		px[i] = 20 + i;
000068  f1040014          ADD      r0,r4,#0x14
00006c  f8260014          STRH     r0,[r6,r4,LSL #1]
;;;159    		
;;;160    		iTemp = g_DSO.Ch2VOffset -g_DSO.FFTMAG[i]/20;
000070  4824              LDR      r0,|L2.260|
000072  f8500024          LDR      r0,[r0,r4,LSL #2]
000076  2114              MOVS     r1,#0x14
000078  fb90f1f1          SDIV     r1,r0,r1
00007c  4822              LDR      r0,|L2.264|
00007e  8d80              LDRH     r0,[r0,#0x2c]
000080  1a40              SUBS     r0,r0,r1
000082  b207              SXTH     r7,r0
;;;161    		
;;;162    		if (iTemp > 200)
000084  2fc8              CMP      r7,#0xc8
000086  dd01              BLE      |L2.140|
;;;163    		{
;;;164    			iTemp = 200;
000088  27c8              MOVS     r7,#0xc8
00008a  e002              B        |L2.146|
                  |L2.140|
;;;165    		}
;;;166    		else if (iTemp <0)
00008c  2f00              CMP      r7,#0
00008e  da00              BGE      |L2.146|
;;;167    		{
;;;168    			iTemp =0;
000090  2700              MOVS     r7,#0
                  |L2.146|
;;;169    		}
;;;170    		py[i] = iTemp;
000092  f8257014          STRH     r7,[r5,r4,LSL #1]
000096  1c60              ADDS     r0,r4,#1              ;156
000098  b204              SXTH     r4,r0                 ;156
                  |L2.154|
00009a  2c64              CMP      r4,#0x64              ;156
00009c  dbe4              BLT      |L2.104|
;;;171    	}
;;;172    	  GUI_SetColor(GUI_MAGENTA);	
00009e  f04f10ff          MOV      r0,#0xff00ff
0000a2  f7fffffe          BL       GUI_SetColor
;;;173    	
;;;174    //      GUI_GotoXY(323-55,72);
;;;175    //	  GUI_DispFloatFix(g_DSO.FFTMAG[0]/20000,5,2);			  //显示直流分量的大小                   
;;;176        	if (g_DSO.BufUsed1 == 0)
0000a6  4815              LDR      r0,|L2.252|
0000a8  f89001e1          LDRB     r0,[r0,#0x1e1]
0000ac  b958              CBNZ     r0,|L2.198|
;;;177    	{
;;;178    		GUI_SetColor(GUI_BLUE);
0000ae  f44f007f          MOV      r0,#0xff0000
0000b2  f7fffffe          BL       GUI_SetColor
;;;179    	    GUI_DrawGraph((I16*)g_DSO.yCh2Buf2, 100, 20,20);
0000b6  2314              MOVS     r3,#0x14
0000b8  461a              MOV      r2,r3
0000ba  2164              MOVS     r1,#0x64
0000bc  480f              LDR      r0,|L2.252|
0000be  3820              SUBS     r0,r0,#0x20
0000c0  f7fffffe          BL       GUI_DrawGraph
0000c4  e009              B        |L2.218|
                  |L2.198|
;;;180    	}
;;;181    	else
;;;182    	{
;;;183    		GUI_SetColor(GUI_BLUE);
0000c6  f44f007f          MOV      r0,#0xff0000
0000ca  f7fffffe          BL       GUI_SetColor
;;;184    	    GUI_DrawGraph((I16*)g_DSO.yCh2Buf1, 100, 20,20);			   
0000ce  2314              MOVS     r3,#0x14
0000d0  461a              MOV      r2,r3
0000d2  2164              MOVS     r1,#0x64
0000d4  480d              LDR      r0,|L2.268|
0000d6  f7fffffe          BL       GUI_DrawGraph
                  |L2.218|
;;;185    	}	
;;;186    	    GUI_SetColor(GUI_YELLOW);
0000da  f64f70ff          MOV      r0,#0xffff
0000de  f7fffffe          BL       GUI_SetColor
;;;187    	    GUI_DrawGraph((I16*)py, 100, 20,20);
0000e2  2314              MOVS     r3,#0x14
0000e4  461a              MOV      r2,r3
0000e6  2164              MOVS     r1,#0x64
0000e8  4628              MOV      r0,r5
0000ea  f7fffffe          BL       GUI_DrawGraph
;;;188    }
0000ee  e8bd81f0          POP      {r4-r8,pc}
;;;189    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L2.244|
                          DCD      |symbol_number.17|
                  |L2.248|
                          DCD      g_DSO+0x59e0
                  |L2.252|
                          DCD      g_DSO+0x6000
                  |L2.256|
                          DCD      g_DSO+0x5de0
                  |L2.260|
                          DCD      g_DSO+0x4000
                  |L2.264|
                          DCD      g_DSO+0x5000
                  |L2.268|
                          DCD      g_DSO+0x5be0

                          AREA ||i.FFT_Convert||, CODE, READONLY, ALIGN=2

                  FFT_Convert PROC
;;;196    extern uint8_t SpectrumFlag;
;;;197    void FFT_Convert(void)
000000  b570              PUSH     {r4-r6,lr}
;;;198    {	
;;;199    	static uint8_t flag1=1;			  //标志位用于一次初始化 主要是正弦和余弦函数
;;;200       	uint16_t i,Cycle;
;;;201    	uint8_t flag;
;;;202    	
;;;203    	      for(i=0;i<1024;i++)
000002  2400              MOVS     r4,#0
000004  e016              B        |L3.52|
                  |L3.6|
;;;204    		{
;;;205    		  g_DSO.FFTIN[i]=((int32_t)(g_DSO.Ch1Buf[i]-1900)* 14060) / 1050; //扩大了10000倍 总值不要超过65336
000006  4828              LDR      r0,|L3.168|
000008  f8300014          LDRH     r0,[r0,r4,LSL #1]
00000c  f2a0706c          SUB      r0,r0,#0x76c
000010  f24361ec          MOV      r1,#0x36ec
000014  4348              MULS     r0,r1,r0
000016  f240411a          MOV      r1,#0x41a
00001a  fb90f1f1          SDIV     r1,r0,r1
00001e  4823              LDR      r0,|L3.172|
000020  f8401024          STR      r1,[r0,r4,LSL #2]
;;;206    		  g_DSO.FFTIN[i]=g_DSO.FFTIN[i]<<16;
000024  f8300024          LDRH     r0,[r0,r4,LSL #2]
000028  0401              LSLS     r1,r0,#16
00002a  4820              LDR      r0,|L3.172|
00002c  f8401024          STR      r1,[r0,r4,LSL #2]
000030  1c60              ADDS     r0,r4,#1              ;203
000032  b284              UXTH     r4,r0                 ;203
                  |L3.52|
000034  f5b46f80          CMP      r4,#0x400             ;203
000038  dbe5              BLT      |L3.6|
;;;207    		}
;;;208    		
;;;209    		cr4_fft_1024_stm32(g_DSO.FFTOUT,g_DSO.FFTIN,1024);
00003a  f44f6280          MOV      r2,#0x400
00003e  491b              LDR      r1,|L3.172|
000040  f5015080          ADD      r0,r1,#0x1000
000044  f7fffffe          BL       cr4_fft_1024_stm32
;;;210    		
;;;211    		powerMag();
000048  f7fffffe          BL       powerMag
;;;212    		
;;;213    		Cycle=g_DSO.FFTMAG[1];
00004c  4818              LDR      r0,|L3.176|
00004e  8880              LDRH     r0,[r0,#4]
000050  b285              UXTH     r5,r0
;;;214    		flag=1;
000052  2601              MOVS     r6,#1
;;;215    		
;;;216    		for(i=2;i<512;i++)
000054  2402              MOVS     r4,#2
000056  e00b              B        |L3.112|
                  |L3.88|
;;;217    		{
;;;218    		  if(Cycle<g_DSO.FFTMAG[i]){Cycle=g_DSO.FFTMAG[i];flag=i;}
000058  4815              LDR      r0,|L3.176|
00005a  f8500024          LDR      r0,[r0,r4,LSL #2]
00005e  42a8              CMP      r0,r5
000060  dd04              BLE      |L3.108|
000062  4813              LDR      r0,|L3.176|
000064  f8300024          LDRH     r0,[r0,r4,LSL #2]
000068  b285              UXTH     r5,r0
00006a  b2e6              UXTB     r6,r4
                  |L3.108|
00006c  1c60              ADDS     r0,r4,#1              ;216
00006e  b284              UXTH     r4,r0                 ;216
                  |L3.112|
000070  f5b47f00          CMP      r4,#0x200             ;216
000074  dbf0              BLT      |L3.88|
;;;219    		}
;;;220    		GUI_SetColor(GUI_MAGENTA);
000076  f04f10ff          MOV      r0,#0xff00ff
00007a  f7fffffe          BL       GUI_SetColor
;;;221            GUI_DispDecAt(flag*g_DSO.SampleFreq*2/1024 ,323-55,136,6);	   //估计频率
00007e  490d              LDR      r1,|L3.180|
000080  6889              LDR      r1,[r1,#8]
000082  4371              MULS     r1,r6,r1
000084  f3c12055          UBFX     r0,r1,#9,#22
000088  2306              MOVS     r3,#6
00008a  2288              MOVS     r2,#0x88
00008c  f44f7186          MOV      r1,#0x10c
000090  f7fffffe          BL       GUI_DispDecAt
;;;222    		
;;;223    	    if(SpectrumFlag == 0)
000094  4808              LDR      r0,|L3.184|
000096  7800              LDRB     r0,[r0,#0]  ; SpectrumFlag
000098  b910              CBNZ     r0,|L3.160|
;;;224    	   {
;;;225    	     Audio_Spectrum();
00009a  f7fffffe          BL       Audio_Spectrum
00009e  e001              B        |L3.164|
                  |L3.160|
;;;226    	   }
;;;227    	   else
;;;228    	   {
;;;229             DispWave_Spectrum();
0000a0  f7fffffe          BL       DispWave_Spectrum
                  |L3.164|
;;;230    	   }
;;;231    }
0000a4  bd70              POP      {r4-r6,pc}
;;;232    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L3.168|
                          DCD      g_DSO
                  |L3.172|
                          DCD      g_DSO+0x2000
                  |L3.176|
                          DCD      g_DSO+0x4000
                  |L3.180|
                          DCD      g_DSO+0x5000
                  |L3.184|
                          DCD      SpectrumFlag

                          AREA ||i.powerMag||, CODE, READONLY, ALIGN=2

                  powerMag PROC
;;;13     *******************************************************************************************/
;;;14     void powerMag(void)					             //不同的采样点需要修改 这样速度快点
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;15     {
000004  b087              SUB      sp,sp,#0x1c
;;;16       int16_t lX,lY;
;;;17       uint16_t i;
;;;18       for (i=0; i < 512; i++)
000006  2400              MOVS     r4,#0
000008  e044              B        |L4.148|
                  |L4.10|
;;;19       {
;;;20         lX= (g_DSO.FFTOUT[i]<<16)>>16;               /* sine_cosine --> cos */
00000a  4825              LDR      r0,|L4.160|
00000c  f8300024          LDRH     r0,[r0,r4,LSL #2]
000010  b205              SXTH     r5,r0
;;;21         lY= (g_DSO.FFTOUT[i]>> 16);                  /* sine_cosine --> sin */    
000012  4823              LDR      r0,|L4.160|
000014  f8500024          LDR      r0,[r0,r4,LSL #2]
000018  1406              ASRS     r6,r0,#16
;;;22         {
;;;23     //    float X=  1024*((float)lX)/32768;
;;;24     //    float Y = 1024*((float)lY)/32768;
;;;25     //    float Mag = sqrt(X*X+ Y*Y)/1024;		 
;;;26     	  float X= (float)lX/32;
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       __aeabi_i2f
000020  4607              MOV      r7,r0
000022  f04f4184          MOV      r1,#0x42000000
000026  f7fffffe          BL       __aeabi_fdiv
00002a  4681              MOV      r9,r0
;;;27           float Y = (float)lY/32;
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       __aeabi_i2f
000032  4607              MOV      r7,r0
000034  f04f4184          MOV      r1,#0x42000000
000038  f7fffffe          BL       __aeabi_fdiv
00003c  4682              MOV      r10,r0
;;;28     	  float Mag = sqrt(X*X+ Y*Y)/1024;
00003e  4651              MOV      r1,r10
000040  4650              MOV      r0,r10
000042  f7fffffe          BL       __aeabi_fmul
000046  4649              MOV      r1,r9
000048  9001              STR      r0,[sp,#4]
00004a  4648              MOV      r0,r9
00004c  f7fffffe          BL       __aeabi_fmul
000050  9000              STR      r0,[sp,#0]
000052  9901              LDR      r1,[sp,#4]
000054  f7fffffe          BL       __aeabi_fadd
000058  4683              MOV      r11,r0
00005a  f7fffffe          BL       __aeabi_f2d
00005e  e9cd0102          STRD     r0,r1,[sp,#8]
000062  f7fffffe          BL       sqrt
000066  4607              MOV      r7,r0
000068  2200              MOVS     r2,#0
00006a  4b0e              LDR      r3,|L4.164|
00006c  f7fffffe          BL       __aeabi_ddiv
000070  e9cd0104          STRD     r0,r1,[sp,#0x10]
000074  f7fffffe          BL       __aeabi_d2f
000078  9006              STR      r0,[sp,#0x18]
;;;29           g_DSO.FFTMAG[i]= (uint32_t)(Mag*65536);		
00007a  f04f418f          MOV      r1,#0x47800000
00007e  9806              LDR      r0,[sp,#0x18]
000080  f7fffffe          BL       __aeabi_fmul
000084  4607              MOV      r7,r0
000086  f7fffffe          BL       __aeabi_f2uiz
00008a  4907              LDR      r1,|L4.168|
00008c  f8410024          STR      r0,[r1,r4,LSL #2]
000090  1c60              ADDS     r0,r4,#1              ;18
000092  b284              UXTH     r4,r0                 ;18
                  |L4.148|
000094  f5b47f00          CMP      r4,#0x200             ;18
000098  dbb7              BLT      |L4.10|
;;;30         }    
;;;31       }
;;;32     }
00009a  b007              ADD      sp,sp,#0x1c
00009c  e8bd8ff0          POP      {r4-r11,pc}
;;;33     
                          ENDP

                  |L4.160|
                          DCD      g_DSO+0x3000
                  |L4.164|
                          DCD      0x40900000
                  |L4.168|
                          DCD      g_DSO+0x4000

                          AREA ||.data||, DATA, ALIGN=0

                  s_DispFirst
000000  00                DCB      0x00
                  |symbol_number.17|
000001  00                DCB      0x00
                  flag1
000002  01                DCB      0x01
